
basile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001514c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000312c  080152dc  080152dc  000162dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018408  08018408  0001a074  2**0
                  CONTENTS
  4 .ARM          00000008  08018408  08018408  00019408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018410  08018410  0001a074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018410  08018410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018414  08018414  00019414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08018418  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000045a4  20000074  0801848c  0001a074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004618  0801848c  0001a618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001a074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029461  00000000  00000000  0001a0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006eb5  00000000  00000000  00043505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  0004a3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001a85  00000000  00000000  0004c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003581a  00000000  00000000  0004df55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035ba1  00000000  00000000  0008376f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001112cd  00000000  00000000  000b9310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ca5dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009258  00000000  00000000  001ca620  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001d3878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080152c4 	.word	0x080152c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080152c4 	.word	0x080152c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <SPIx_TxRx>:
#define SPIx_DS   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

extern SPI_HandleTypeDef hspi2;

static uint8_t SPIx_TxRx(uint8_t cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_TransmitReceive(&hspi2, &cmd, &cmd, 1, SPIx_TIMEOUT);
 800057a:	1dfa      	adds	r2, r7, #7
 800057c:	1df9      	adds	r1, r7, #7
 800057e:	230a      	movs	r3, #10
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2301      	movs	r3, #1
 8000584:	4803      	ldr	r0, [pc, #12]	@ (8000594 <SPIx_TxRx+0x24>)
 8000586:	f003 fd96 	bl	80040b6 <HAL_SPI_TransmitReceive>
  return cmd;
 800058a:	79fb      	ldrb	r3, [r7, #7]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000090 	.word	0x20000090

08000598 <SPIx_TxBuf>:

static void SPIx_TxBuf(uint8_t *m2s, uint8_t *s2m, uint16_t bufflen)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	80fb      	strh	r3, [r7, #6]
  SPIx_CS;
 80005a6:	2200      	movs	r2, #0
 80005a8:	2101      	movs	r1, #1
 80005aa:	4815      	ldr	r0, [pc, #84]	@ (8000600 <SPIx_TxBuf+0x68>)
 80005ac:	f001 fec8 	bl	8002340 <HAL_GPIO_WritePin>

  if((s2m == NULL) && (m2s != NULL))
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d109      	bne.n	80005ca <SPIx_TxBuf+0x32>
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d006      	beq.n	80005ca <SPIx_TxBuf+0x32>
  {
    HAL_SPI_Transmit(&hspi2, m2s, bufflen, SPIx_TIMEOUT);
 80005bc:	88fa      	ldrh	r2, [r7, #6]
 80005be:	230a      	movs	r3, #10
 80005c0:	68f9      	ldr	r1, [r7, #12]
 80005c2:	4810      	ldr	r0, [pc, #64]	@ (8000604 <SPIx_TxBuf+0x6c>)
 80005c4:	f003 fac9 	bl	8003b5a <HAL_SPI_Transmit>
 80005c8:	e011      	b.n	80005ee <SPIx_TxBuf+0x56>
  }
  else if(m2s == NULL)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d106      	bne.n	80005de <SPIx_TxBuf+0x46>
  {
    HAL_SPI_Receive(&hspi2, s2m, bufflen, SPIx_TIMEOUT);
 80005d0:	88fa      	ldrh	r2, [r7, #6]
 80005d2:	230a      	movs	r3, #10
 80005d4:	68b9      	ldr	r1, [r7, #8]
 80005d6:	480b      	ldr	r0, [pc, #44]	@ (8000604 <SPIx_TxBuf+0x6c>)
 80005d8:	f003 fc35 	bl	8003e46 <HAL_SPI_Receive>
 80005dc:	e007      	b.n	80005ee <SPIx_TxBuf+0x56>
  }
  else
  {
    HAL_SPI_TransmitReceive(&hspi2, m2s, s2m, bufflen, SPIx_TIMEOUT);
 80005de:	88fb      	ldrh	r3, [r7, #6]
 80005e0:	220a      	movs	r2, #10
 80005e2:	9200      	str	r2, [sp, #0]
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	68f9      	ldr	r1, [r7, #12]
 80005e8:	4806      	ldr	r0, [pc, #24]	@ (8000604 <SPIx_TxBuf+0x6c>)
 80005ea:	f003 fd64 	bl	80040b6 <HAL_SPI_TransmitReceive>
  }

  SPIx_DS;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2101      	movs	r1, #1
 80005f2:	4803      	ldr	r0, [pc, #12]	@ (8000600 <SPIx_TxBuf+0x68>)
 80005f4:	f001 fea4 	bl	8002340 <HAL_GPIO_WritePin>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	48000400 	.word	0x48000400
 8000604:	20000090 	.word	0x20000090

08000608 <init_udelay>:

/* Initialize STM32 watchdog timer */
static void init_udelay(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <init_udelay+0x4c>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	4a10      	ldr	r2, [pc, #64]	@ (8000654 <init_udelay+0x4c>)
 8000612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000616:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000618:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <init_udelay+0x4c>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <init_udelay+0x4c>)
 800061e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000622:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <init_udelay+0x50>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <init_udelay+0x50>)
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <init_udelay+0x50>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <init_udelay+0x50>)
 8000636:	f043 0301 	orr.w	r3, r3, #1
 800063a:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <init_udelay+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000642:	bf00      	nop
  __ASM volatile ("NOP");
 8000644:	bf00      	nop
  __ASM volatile ("NOP");
 8000646:	bf00      	nop

}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000edf0 	.word	0xe000edf0
 8000658:	e0001000 	.word	0xe0001000

0800065c <udelay>:

/* Software delay in us */
void udelay(uint32_t us)
{
 800065c:	b480      	push	{r7}
 800065e:	b087      	sub	sp, #28
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <udelay+0x44>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0e      	ldr	r2, [pc, #56]	@ (80006a4 <udelay+0x48>)
 800066a:	fba2 2303 	umull	r2, r3, r2, r3
 800066e:	0c9a      	lsrs	r2, r3, #18
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	fb02 f303 	mul.w	r3, r2, r3
 8000676:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000678:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <udelay+0x4c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <udelay+0x4c>)
 8000680:	685a      	ldr	r2, [r3, #4]
 8000682:	693b      	ldr	r3, [r7, #16]
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	429a      	cmp	r2, r3
 800068e:	d8f6      	bhi.n	800067e <udelay+0x22>

}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	20000000 	.word	0x20000000
 80006a4:	431bde83 	.word	0x431bde83
 80006a8:	e0001000 	.word	0xe0001000

080006ac <enc_reset>:
static void enc_rdbuffer(void *buffer, int16_t buflen);
static void enc_linkstatus(ENC_HandleTypeDef *handle);

/* Send the single byte system reset command (SRC). */
void enc_reset(ENC_HandleTypeDef *handle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Send the system reset command. */

  SPIx_CS;
 80006b4:	2200      	movs	r2, #0
 80006b6:	2101      	movs	r1, #1
 80006b8:	480a      	ldr	r0, [pc, #40]	@ (80006e4 <enc_reset+0x38>)
 80006ba:	f001 fe41 	bl	8002340 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_SRC);
 80006be:	20ff      	movs	r0, #255	@ 0xff
 80006c0:	f7ff ff56 	bl	8000570 <SPIx_TxRx>
  SPIx_DS;
 80006c4:	2201      	movs	r2, #1
 80006c6:	2101      	movs	r1, #1
 80006c8:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <enc_reset+0x38>)
 80006ca:	f001 fe39 	bl	8002340 <HAL_GPIO_WritePin>

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	741a      	strb	r2, [r3, #16]
  //udelay(2);
  HAL_Delay(2); /* >1000 us, conforms to errata #2 */
 80006d4:	2002      	movs	r0, #2
 80006d6:	f001 fb83 	bl	8001de0 <HAL_Delay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	48000400 	.word	0x48000400

080006e8 <enc_start>:

/* Initialize the enc28j60 and configure the needed hardware resources */
bool enc_start(ENC_HandleTypeDef *handle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  uint8_t regval;

  /* Initialize watchdog timer */
  init_udelay();
 80006f0:	f7ff ff8a 	bl	8000608 <init_udelay>

  /* System reset */
  enc_reset(handle);
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f7ff ffd9 	bl	80006ac <enc_reset>

  /* Use bank 0 */
  enc_setbank(handle, 0);
 80006fa:	2100      	movs	r1, #0
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 fab8 	bl	8000c72 <enc_setbank>

  /* Check if we are actually communicating with the ENC28J60. */
  regval = enc_rdbreg(handle, ENC_EREVID);
 8000702:	2172      	movs	r1, #114	@ 0x72
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f000 fb63 	bl	8000dd0 <enc_rdbreg>
 800070a:	4603      	mov	r3, r0
 800070c:	73fb      	strb	r3, [r7, #15]
  if(regval == 0x00 || regval == 0xff)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d002      	beq.n	800071a <enc_start+0x32>
 8000714:	7bfb      	ldrb	r3, [r7, #15]
 8000716:	2bff      	cmp	r3, #255	@ 0xff
 8000718:	d101      	bne.n	800071e <enc_start+0x36>
  {
    return false;
 800071a:	2300      	movs	r3, #0
 800071c:	e0cc      	b.n	80008b8 <enc_start+0x1d0>
  }

  /* Initialize ECON2: Enable address auto increment. */
  enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 800071e:	2180      	movs	r1, #128	@ 0x80
 8000720:	205e      	movs	r0, #94	@ 0x5e
 8000722:	f000 fad8 	bl	8000cd6 <enc_wrgreg2>

  /* Initialize receive buffer. */
  handle->nextpkt = PKTMEM_RX_START;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2200      	movs	r2, #0
 800072a:	829a      	strh	r2, [r3, #20]
  enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 800072c:	2200      	movs	r2, #0
 800072e:	2108      	movs	r1, #8
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 fb7b 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 8000736:	2200      	movs	r2, #0
 8000738:	2109      	movs	r1, #9
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 fb76 	bl	8000e2c <enc_wrbreg>

  /* Set the receive data pointer */
  /* Errata 14 */
  enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 8000740:	22ff      	movs	r2, #255	@ 0xff
 8000742:	210c      	movs	r1, #12
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 fb71 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 800074a:	2219      	movs	r2, #25
 800074c:	210d      	movs	r1, #13
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f000 fb6c 	bl	8000e2c <enc_wrbreg>

  /* Set the receive buffer end. */
  enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 8000754:	22ff      	movs	r2, #255	@ 0xff
 8000756:	210a      	movs	r1, #10
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 fb67 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 800075e:	2219      	movs	r2, #25
 8000760:	210b      	movs	r1, #11
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f000 fb62 	bl	8000e2c <enc_wrbreg>

  /* Set transmit buffer start. */
  handle->transmitLength = 0;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	831a      	strh	r2, [r3, #24]
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 800076e:	2200      	movs	r2, #0
 8000770:	2104      	movs	r1, #4
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 fb5a 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8000778:	221a      	movs	r2, #26
 800077a:	2105      	movs	r1, #5
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 fb55 	bl	8000e2c <enc_wrbreg>

  /* Set filter mode: unicast OR broadcast AND crc valid */
  enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 8000782:	22a1      	movs	r2, #161	@ 0xa1
 8000784:	2138      	movs	r1, #56	@ 0x38
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 fb50 	bl	8000e2c <enc_wrbreg>

  do
  {
    HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 800078c:	200a      	movs	r0, #10
 800078e:	f001 fb27 	bl	8001de0 <HAL_Delay>
    regval = enc_rdbreg(handle, ENC_ESTAT);
 8000792:	211d      	movs	r1, #29
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 fb1b 	bl	8000dd0 <enc_rdbreg>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
  }while((regval & ESTAT_CLKRDY) == 0);
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0f1      	beq.n	800078c <enc_start+0xa4>

  /* Enable MAC receive */
  enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 80007a8:	220d      	movs	r2, #13
 80007aa:	21c0      	movs	r1, #192	@ 0xc0
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 fb3d 	bl	8000e2c <enc_wrbreg>

  /* Enable automatic padding and CRC operations */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d120      	bne.n	80007fc <enc_start+0x114>
  {
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <enc_start+0xde>
 80007c2:	2332      	movs	r3, #50	@ 0x32
 80007c4:	e000      	b.n	80007c8 <enc_start+0xe0>
 80007c6:	2302      	movs	r3, #2
 80007c8:	461a      	mov	r2, r3
 80007ca:	21c2      	movs	r1, #194	@ 0xc2
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fb2d 	bl	8000e2c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER); /* Defer transmission enable */
 80007d2:	2240      	movs	r2, #64	@ 0x40
 80007d4:	21c3      	movs	r1, #195	@ 0xc3
 80007d6:	6878      	ldr	r0, [r7, #4]
 80007d8:	f000 fb28 	bl	8000e2c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 80007dc:	2212      	movs	r2, #18
 80007de:	21c6      	movs	r1, #198	@ 0xc6
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f000 fb23 	bl	8000e2c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 80007e6:	220c      	movs	r2, #12
 80007e8:	21c7      	movs	r1, #199	@ 0xc7
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f000 fb1e 	bl	8000e2c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 80007f0:	2212      	movs	r2, #18
 80007f2:	21c4      	movs	r1, #196	@ 0xc4
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 fb19 	bl	8000e2c <enc_wrbreg>
 80007fa:	e015      	b.n	8000828 <enc_start+0x140>
  }
  else
  {
    /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN | MACON3_FULDPX);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <enc_start+0x120>
 8000804:	2333      	movs	r3, #51	@ 0x33
 8000806:	e000      	b.n	800080a <enc_start+0x122>
 8000808:	2303      	movs	r3, #3
 800080a:	461a      	mov	r2, r3
 800080c:	21c2      	movs	r1, #194	@ 0xc2
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f000 fb0c 	bl	8000e2c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8000814:	2212      	movs	r2, #18
 8000816:	21c6      	movs	r1, #198	@ 0xc6
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f000 fb07 	bl	8000e2c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 800081e:	2215      	movs	r2, #21
 8000820:	21c4      	movs	r1, #196	@ 0xc4
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f000 fb02 	bl	8000e2c <enc_wrbreg>
  }

  /* Set the maximum packet size which the controller will accept */
  enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU + 18) & 0xff);
 8000828:	22ee      	movs	r2, #238	@ 0xee
 800082a:	21ca      	movs	r1, #202	@ 0xca
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f000 fafd 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU + 18) >> 8);
 8000832:	2205      	movs	r2, #5
 8000834:	21cb      	movs	r1, #203	@ 0xcb
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 faf8 	bl	8000e2c <enc_wrbreg>

  /* Setup up PHCON1 & 2 */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d10b      	bne.n	800085c <enc_start+0x174>
  {
    enc_wrphy(handle, ENC_PHCON1, 0x00);
 8000844:	2200      	movs	r2, #0
 8000846:	2100      	movs	r1, #0
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f000 fb88 	bl	8000f5e <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 800084e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000852:	2110      	movs	r1, #16
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f000 fb82 	bl	8000f5e <enc_wrphy>
 800085a:	e00a      	b.n	8000872 <enc_start+0x18a>
  }
  else
  {
    enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 800085c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000860:	2100      	movs	r1, #0
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f000 fb7b 	bl	8000f5e <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, 0x00);
 8000868:	2200      	movs	r2, #0
 800086a:	2110      	movs	r1, #16
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 fb76 	bl	8000f5e <enc_wrphy>
  }

  /* Process interrupt settings */
  if(handle->Init.InterruptEnableBits & EIE_LINKIE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	7b1b      	ldrb	r3, [r3, #12]
 8000876:	f003 0310 	and.w	r3, r3, #16
 800087a:	2b00      	cmp	r3, #0
 800087c:	d004      	beq.n	8000888 <enc_start+0x1a0>
  {
    /* Enable link change interrupt in PHY module */
    enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 800087e:	2212      	movs	r2, #18
 8000880:	2112      	movs	r1, #18
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 fb6b 	bl	8000f5e <enc_wrphy>
  }

  /* Reset all interrupt flags */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000888:	213b      	movs	r1, #59	@ 0x3b
 800088a:	20bc      	movs	r0, #188	@ 0xbc
 800088c:	f000 fa23 	bl	8000cd6 <enc_wrgreg2>

  regval = handle->Init.InterruptEnableBits;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	7b1b      	ldrb	r3, [r3, #12]
 8000894:	73fb      	strb	r3, [r7, #15]
  if(regval)
 8000896:	7bfb      	ldrb	r3, [r7, #15]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d003      	beq.n	80008a4 <enc_start+0x1bc>
  {
    /* Ensure INTIE is set when at least an interruption is selected */
    regval |= EIE_INTIE;
 800089c:	7bfb      	ldrb	r3, [r7, #15]
 800089e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008a2:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable selected interrupts in ethernet controller module */
  enc_bfsgreg(ENC_EIE, regval);
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	4619      	mov	r1, r3
 80008a8:	209b      	movs	r0, #155	@ 0x9b
 80008aa:	f000 fa14 	bl	8000cd6 <enc_wrgreg2>

  /* Enable the receiver */
  enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 80008ae:	2104      	movs	r1, #4
 80008b0:	209f      	movs	r0, #159	@ 0x9f
 80008b2:	f000 fa10 	bl	8000cd6 <enc_wrgreg2>

  return true;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <enc_set_MAC>:

/* Set the MAC address to the configured value. */
void enc_set_MAC(ENC_HandleTypeDef *handle)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	21e4      	movs	r1, #228	@ 0xe4
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f000 faaa 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	21e5      	movs	r1, #229	@ 0xe5
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 faa1 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	3302      	adds	r3, #2
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	461a      	mov	r2, r3
 80008f4:	21e2      	movs	r1, #226	@ 0xe2
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 fa98 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	3303      	adds	r3, #3
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	461a      	mov	r2, r3
 8000906:	21e3      	movs	r1, #227	@ 0xe3
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fa8f 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	3304      	adds	r3, #4
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	21e0      	movs	r1, #224	@ 0xe0
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fa86 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	3305      	adds	r3, #5
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	21e1      	movs	r1, #225	@ 0xe1
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f000 fa7d 	bl	8000e2c <enc_wrbreg>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <enc_prepare_txbuffer>:

/* Prepare TX buffer */
int8_t enc_prepare_txbuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	460b      	mov	r3, r1
 8000944:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if(!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0))
 8000946:	2200      	movs	r2, #0
 8000948:	2108      	movs	r1, #8
 800094a:	201f      	movs	r0, #31
 800094c:	f000 f9da 	bl	8000d04 <enc_waitgreg>
 8000950:	4603      	mov	r3, r0
 8000952:	f083 0301 	eor.w	r3, r3, #1
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <enc_prepare_txbuffer+0x28>
  {
    return ERR_TIMEOUT;
 800095c:	f06f 0302 	mvn.w	r3, #2
 8000960:	e03c      	b.n	80009dc <enc_prepare_txbuffer+0xa2>
  }

  /* Set transmit buffer start (is this necessary?). */
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 fa60 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 800096c:	221a      	movs	r2, #26
 800096e:	2105      	movs	r1, #5
 8000970:	6878      	ldr	r0, [r7, #4]
 8000972:	f000 fa5b 	bl	8000e2c <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */
  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 8000976:	2200      	movs	r2, #0
 8000978:	2102      	movs	r1, #2
 800097a:	6878      	ldr	r0, [r7, #4]
 800097c:	f000 fa56 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 8000980:	221a      	movs	r2, #26
 8000982:	2103      	movs	r1, #3
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f000 fa51 	bl	8000e2c <enc_wrbreg>

  txend = PKTMEM_TX_START + len;
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000990:	81fb      	strh	r3, [r7, #14]

  if(txend + 8 > PKTMEM_TX_ENDP1)
 8000992:	89fb      	ldrh	r3, [r7, #14]
 8000994:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 8000998:	4293      	cmp	r3, r2
 800099a:	d902      	bls.n	80009a2 <enc_prepare_txbuffer+0x68>
  {
    return ERR_MEM;
 800099c:	f04f 33ff 	mov.w	r3, #4294967295
 80009a0:	e01c      	b.n	80009dc <enc_prepare_txbuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2106      	movs	r1, #6
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f000 fa3e 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 80009b0:	89fb      	ldrh	r3, [r7, #14]
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	461a      	mov	r2, r3
 80009ba:	2107      	movs	r1, #7
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f000 fa35 	bl	8000e2c <enc_wrbreg>

  control_write[0] = ENC_WBM;
 80009c2:	237a      	movs	r3, #122	@ 0x7a
 80009c4:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 80009c6:	230e      	movs	r3, #14
 80009c8:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(control_write, control_write, 2);
 80009ca:	f107 010c 	add.w	r1, r7, #12
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2202      	movs	r2, #2
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fddf 	bl	8000598 <SPIx_TxBuf>

  return ERR_OK;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <enc_wrbuffer>:

/* Write a buffer of data. */
void enc_wrbuffer(void *buffer, uint16_t buflen)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	4807      	ldr	r0, [pc, #28]	@ (8000a14 <enc_wrbuffer+0x30>)
 80009f6:	f001 fca3 	bl	8002340 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_WBM);
 80009fa:	207a      	movs	r0, #122	@ 0x7a
 80009fc:	f7ff fdb8 	bl	8000570 <SPIx_TxRx>
  SPIx_TxBuf(buffer, NULL, buflen);
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	461a      	mov	r2, r3
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fdc6 	bl	8000598 <SPIx_TxBuf>
}
 8000a0c:	bf00      	nop
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	48000400 	.word	0x48000400

08000a18 <enc_transmit>:

/* Start hardware transmission. */
void enc_transmit(ENC_HandleTypeDef *handle)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  if(handle->transmitLength != 0)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	8b1b      	ldrh	r3, [r3, #24]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d053      	beq.n	8000ad0 <enc_transmit+0xb8>
  {
    handle->retries = 16;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2210      	movs	r2, #16
 8000a2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    do
    {
      enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	209f      	movs	r0, #159	@ 0x9f
 8000a32:	f000 f950 	bl	8000cd6 <enc_wrgreg2>
      enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8000a36:	2180      	movs	r1, #128	@ 0x80
 8000a38:	20bf      	movs	r0, #191	@ 0xbf
 8000a3a:	f000 f94c 	bl	8000cd6 <enc_wrgreg2>
      enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8000a3e:	210a      	movs	r1, #10
 8000a40:	20bc      	movs	r0, #188	@ 0xbc
 8000a42:	f000 f948 	bl	8000cd6 <enc_wrgreg2>

      /* Start transmission */
      enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8000a46:	2108      	movs	r1, #8
 8000a48:	209f      	movs	r0, #159	@ 0x9f
 8000a4a:	f000 f944 	bl	8000cd6 <enc_wrgreg2>

      /* Wait for end of transmission */
      enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	210a      	movs	r1, #10
 8000a52:	201c      	movs	r0, #28
 8000a54:	f000 f989 	bl	8000d6a <enc_waitwhilegreg>

      /* Stop transmission */
      enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8000a58:	2108      	movs	r1, #8
 8000a5a:	20bf      	movs	r0, #191	@ 0xbf
 8000a5c:	f000 f93b 	bl	8000cd6 <enc_wrgreg2>
      {
        uint16_t addtTsv4;
        uint8_t tsv4, regval;

        /* read tsv */
        addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	8b1b      	ldrh	r3, [r3, #24]
 8000a64:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000a68:	3304      	adds	r3, #4
 8000a6a:	81fb      	strh	r3, [r7, #14]

        enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	461a      	mov	r2, r3
 8000a72:	2100      	movs	r1, #0
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f9d9 	bl	8000e2c <enc_wrbreg>
        enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 8000a7a:	89fb      	ldrh	r3, [r7, #14]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	461a      	mov	r2, r3
 8000a84:	2101      	movs	r1, #1
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f9d0 	bl	8000e2c <enc_wrbreg>

        enc_rdbuffer(&tsv4, 1);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2101      	movs	r1, #1
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 fa8e 	bl	8000fb4 <enc_rdbuffer>
        regval = enc_rdgreg(ENC_EIR);
 8000a98:	201c      	movs	r0, #28
 8000a9a:	f000 f908 	bl	8000cae <enc_rdgreg2>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	737b      	strb	r3, [r7, #13]
        if(!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL))
 8000aa2:	7b7b      	ldrb	r3, [r7, #13]
 8000aa4:	f003 0302 	and.w	r3, r3, #2
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d00e      	beq.n	8000aca <enc_transmit+0xb2>
 8000aac:	7b3b      	ldrb	r3, [r7, #12]
 8000aae:	f003 0320 	and.w	r3, r3, #32
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d009      	beq.n	8000aca <enc_transmit+0xb2>
        {
          break;
        }
      }
      handle->retries--;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	849a      	strh	r2, [r3, #36]	@ 0x24
    }while(handle->retries > 0);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1b1      	bne.n	8000a2e <enc_transmit+0x16>
    handle->transmitLength = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	831a      	strh	r2, [r3, #24]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	3710      	adds	r7, #16
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <enc_get_received_frame>:

/* Check if we have received packet, and if so, retrieve them. */
bool enc_get_received_frame(ENC_HandleTypeDef *handle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint8_t rsv[6];
  uint16_t pktlen;
  uint16_t rxstat;
  uint8_t pktcnt;

  bool result = true;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	757b      	strb	r3, [r7, #21]

  pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 8000ae4:	2139      	movs	r1, #57	@ 0x39
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f972 	bl	8000dd0 <enc_rdbreg>
 8000aec:	4603      	mov	r3, r0
 8000aee:	753b      	strb	r3, [r7, #20]
  if(pktcnt == 0)
 8000af0:	7d3b      	ldrb	r3, [r7, #20]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d101      	bne.n	8000afa <enc_get_received_frame+0x22>
  {
    return false;
 8000af6:	2300      	movs	r3, #0
 8000af8:	e078      	b.n	8000bec <enc_get_received_frame+0x114>
  };

  /* Set the read pointer to the start of the received packet (ERDPT) */
  enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	8a9b      	ldrh	r3, [r3, #20]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f991 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	8a9b      	ldrh	r3, [r3, #20]
 8000b0e:	0a1b      	lsrs	r3, r3, #8
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	461a      	mov	r2, r3
 8000b16:	2101      	movs	r1, #1
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f987 	bl	8000e2c <enc_wrbreg>
  enc_rdbuffer(rsv, 6);
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2106      	movs	r1, #6
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fa45 	bl	8000fb4 <enc_rdbuffer>

  handle->nextpkt = (uint16_t) rsv[1] << 8 | (uint16_t) rsv[0];
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	7b3b      	ldrb	r3, [r7, #12]
 8000b32:	b21b      	sxth	r3, r3
 8000b34:	4313      	orrs	r3, r2
 8000b36:	b21b      	sxth	r3, r3
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	829a      	strh	r2, [r3, #20]
  pktlen = (uint16_t) rsv[3] << 8 | (uint16_t) rsv[2];
 8000b3e:	7bfb      	ldrb	r3, [r7, #15]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	7bbb      	ldrb	r3, [r7, #14]
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	827b      	strh	r3, [r7, #18]
  rxstat = (uint16_t) rsv[5] << 8 | (uint16_t) rsv[4];
 8000b4e:	7c7b      	ldrb	r3, [r7, #17]
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	b21a      	sxth	r2, r3
 8000b54:	7c3b      	ldrb	r3, [r7, #16]
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b21b      	sxth	r3, r3
 8000b5c:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */
  if((rxstat & RXSTAT_OK) == 0)
 8000b5e:	8afb      	ldrh	r3, [r7, #22]
 8000b60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d102      	bne.n	8000b6e <enc_get_received_frame+0x96>
  {
    result = false;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	757b      	strb	r3, [r7, #21]
 8000b6c:	e018      	b.n	8000ba0 <enc_get_received_frame+0xc8>
  }
  else
  { /* Check for a usable packet length (4 added for the CRC) */
    if(pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4))
 8000b6e:	8a7b      	ldrh	r3, [r7, #18]
 8000b70:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8000b74:	d802      	bhi.n	8000b7c <enc_get_received_frame+0xa4>
 8000b76:	8a7b      	ldrh	r3, [r7, #18]
 8000b78:	2b12      	cmp	r3, #18
 8000b7a:	d802      	bhi.n	8000b82 <enc_get_received_frame+0xaa>
    {
      result = false;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	757b      	strb	r3, [r7, #21]
 8000b80:	e00e      	b.n	8000ba0 <enc_get_received_frame+0xc8>
    }
    else
    {
      handle->RxFrameInfos.length = pktlen - 4;
 8000b82:	8a7b      	ldrh	r3, [r7, #18]
 8000b84:	3b04      	subs	r3, #4
 8000b86:	461a      	mov	r2, r3
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
      enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	f000 fa0a 	bl	8000fb4 <enc_rdbuffer>
    }
  }

  /* Errata 14 (on se sert de rxstat comme variable temporaire */
  rxstat = handle->nextpkt;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	8a9b      	ldrh	r3, [r3, #20]
 8000ba4:	82fb      	strh	r3, [r7, #22]
  if(rxstat == PKTMEM_RX_START)
 8000ba6:	8afb      	ldrh	r3, [r7, #22]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d103      	bne.n	8000bb4 <enc_get_received_frame+0xdc>
  {
    rxstat = PKTMEM_RX_END;
 8000bac:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 8000bb0:	82fb      	strh	r3, [r7, #22]
 8000bb2:	e002      	b.n	8000bba <enc_get_received_frame+0xe2>
  }
  else
  {
    rxstat--;
 8000bb4:	8afb      	ldrh	r3, [r7, #22]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	82fb      	strh	r3, [r7, #22]
  }
  enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 8000bba:	8afb      	ldrh	r3, [r7, #22]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bf14      	ite	ne
 8000bc0:	2301      	movne	r3, #1
 8000bc2:	2300      	moveq	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	210c      	movs	r1, #12
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 f92e 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 8000bd0:	8afb      	ldrh	r3, [r7, #22]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	461a      	mov	r2, r3
 8000bda:	210d      	movs	r1, #13
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f000 f925 	bl	8000e2c <enc_wrbreg>

  /* Decrement the packet counter indicate we are done with this packet */
  enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 8000be2:	2140      	movs	r1, #64	@ 0x40
 8000be4:	209e      	movs	r0, #158	@ 0x9e
 8000be6:	f000 f876 	bl	8000cd6 <enc_wrgreg2>

  return result;
 8000bea:	7d7b      	ldrb	r3, [r7, #21]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <enc_enable_interrupts>:

/* Enable individual ENC28J60 interrupts */
void enc_enable_interrupts(uint8_t bits)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  enc_bfsgreg(ENC_EIE, bits);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4619      	mov	r1, r3
 8000c02:	209b      	movs	r0, #155	@ 0x9b
 8000c04:	f000 f867 	bl	8000cd6 <enc_wrgreg2>
}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <enc_irq_handler>:

/* Perform interrupt handling logic outside of the interrupt handler */
void enc_irq_handler(ENC_HandleTypeDef *handle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint8_t eir;

  enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	20bb      	movs	r0, #187	@ 0xbb
 8000c1c:	f000 f85b 	bl	8000cd6 <enc_wrgreg2>

  /* Read EIR for interrupt flags */
  eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8000c20:	201c      	movs	r0, #28
 8000c22:	f000 f844 	bl	8000cae <enc_rdgreg2>
 8000c26:	4603      	mov	r3, r0
 8000c28:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 8000c2c:	73fb      	strb	r3, [r7, #15]

  /* PKTIF is not reliable, check PKCNT instead */
  if(enc_rdbreg(handle, ENC_EPKTCNT) != 0)
 8000c2e:	2139      	movs	r1, #57	@ 0x39
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 f8cd 	bl	8000dd0 <enc_rdbreg>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d003      	beq.n	8000c44 <enc_irq_handler+0x34>
  {
    /* Manage EIR_PKTIF by software */
    eir |= EIR_PKTIF;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Store interrupt flags in handle */
  handle->interruptFlags = eir;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	745a      	strb	r2, [r3, #17]

  /* If link status has changed, read it */
  if((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 8000c4a:	7bfb      	ldrb	r3, [r7, #15]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d006      	beq.n	8000c62 <enc_irq_handler+0x52>
  {
    enc_linkstatus(handle); /* Get current link status */
 8000c54:	6878      	ldr	r0, [r7, #4]
 8000c56:	f000 f9c7 	bl	8000fe8 <enc_linkstatus>
    enc_rdphy(handle, ENC_PHIR); /* Clear the LINKIF interrupt */
 8000c5a:	2113      	movs	r1, #19
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f943 	bl	8000ee8 <enc_rdphy>
  }

  /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000c62:	213b      	movs	r1, #59	@ 0x3b
 8000c64:	20bc      	movs	r0, #188	@ 0xbc
 8000c66:	f000 f836 	bl	8000cd6 <enc_wrgreg2>

  /* Enable Ethernet interrupts */
  /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <enc_setbank>:

/* Set the bank for these next control register access. */
static void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	70fb      	strb	r3, [r7, #3]
  if(bank != handle->bank)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	7c1b      	ldrb	r3, [r3, #16]
 8000c82:	78fa      	ldrb	r2, [r7, #3]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d00e      	beq.n	8000ca6 <enc_setbank+0x34>
  {
    /* Select bank 0 (just so that all of the bits are cleared) */
    enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8000c88:	2103      	movs	r1, #3
 8000c8a:	20bf      	movs	r0, #191	@ 0xbf
 8000c8c:	f000 f823 	bl	8000cd6 <enc_wrgreg2>

    if(bank != 0)
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d004      	beq.n	8000ca0 <enc_setbank+0x2e>
    {
      enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8000c96:	78fb      	ldrb	r3, [r7, #3]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	209f      	movs	r0, #159	@ 0x9f
 8000c9c:	f000 f81b 	bl	8000cd6 <enc_wrgreg2>
    }

    handle->bank = bank;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	78fa      	ldrb	r2, [r7, #3]
 8000ca4:	741a      	strb	r2, [r3, #16]
  }
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <enc_rdgreg2>:

/* Read a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static uint8_t enc_rdgreg2(uint8_t cmd)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b084      	sub	sp, #16
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	71fb      	strb	r3, [r7, #7]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(cmdpdata, cmdpdata, 2);
 8000cbc:	f107 010c 	add.w	r1, r7, #12
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f7ff fc66 	bl	8000598 <SPIx_TxBuf>

  return cmdpdata[1];
 8000ccc:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <enc_wrgreg2>:

/* Write to a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	460a      	mov	r2, r1
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4613      	mov	r3, r2
 8000ce4:	71bb      	strb	r3, [r7, #6]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	733b      	strb	r3, [r7, #12]
  cmdpdata[1] = wrdata;
 8000cea:	79bb      	ldrb	r3, [r7, #6]
 8000cec:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(cmdpdata, NULL, 2);
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fc4e 	bl	8000598 <SPIx_TxBuf>
}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <enc_waitgreg>:

/* Wait until grouped register bit(s) take a specific value */
static bool enc_waitgreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	71bb      	strb	r3, [r7, #6]
 8000d12:	4613      	mov	r3, r2
 8000d14:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d16:	f001 f857 	bl	8001dc8 <HAL_GetTick>
 8000d1a:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ffc2 	bl	8000cae <enc_rdgreg2>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000d2e:	f001 f84b 	bl	8001dc8 <HAL_GetTick>
 8000d32:	4602      	mov	r2, r0
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000d3a:	7cfa      	ldrb	r2, [r7, #19]
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	797a      	ldrb	r2, [r7, #5]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d002      	beq.n	8000d4e <enc_waitgreg+0x4a>
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2b31      	cmp	r3, #49	@ 0x31
 8000d4c:	d9e6      	bls.n	8000d1c <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8000d4e:	7cfa      	ldrb	r2, [r7, #19]
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	4013      	ands	r3, r2
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	797a      	ldrb	r2, [r7, #5]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	bf0c      	ite	eq
 8000d5c:	2301      	moveq	r3, #1
 8000d5e:	2300      	movne	r3, #0
 8000d60:	b2db      	uxtb	r3, r3
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <enc_waitwhilegreg>:

/* Wait while grouped register bit(s) have a specific value */
static bool enc_waitwhilegreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b086      	sub	sp, #24
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	4603      	mov	r3, r0
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	460b      	mov	r3, r1
 8000d76:	71bb      	strb	r3, [r7, #6]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d7c:	f001 f824 	bl	8001dc8 <HAL_GetTick>
 8000d80:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 031f 	and.w	r3, r3, #31
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff8f 	bl	8000cae <enc_rdgreg2>
 8000d90:	4603      	mov	r3, r0
 8000d92:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000d94:	f001 f818 	bl	8001dc8 <HAL_GetTick>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8000da0:	7cfa      	ldrb	r2, [r7, #19]
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	4013      	ands	r3, r2
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	797a      	ldrb	r2, [r7, #5]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d102      	bne.n	8000db4 <enc_waitwhilegreg+0x4a>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b31      	cmp	r3, #49	@ 0x31
 8000db2:	d9e6      	bls.n	8000d82 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8000db4:	7cfa      	ldrb	r2, [r7, #19]
 8000db6:	79bb      	ldrb	r3, [r7, #6]
 8000db8:	4013      	ands	r3, r2
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	797a      	ldrb	r2, [r7, #5]
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <enc_rdbreg>:

/* Read from a banked control register using the RCR command. */
static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  enc_setbank(handle, GETBANK(ctrlreg));
 8000ddc:	78fb      	ldrb	r3, [r7, #3]
 8000dde:	095b      	lsrs	r3, r3, #5
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	4619      	mov	r1, r3
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f7ff ff41 	bl	8000c72 <enc_setbank>
  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8000df0:	78fb      	ldrb	r3, [r7, #3]
 8000df2:	f003 031f 	and.w	r3, r3, #31
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(data, data, (ISPHYMAC(ctrlreg)) ? 3 : 2);
 8000dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	da01      	bge.n	8000e06 <enc_rdbreg+0x36>
 8000e02:	2203      	movs	r2, #3
 8000e04:	e000      	b.n	8000e08 <enc_rdbreg+0x38>
 8000e06:	2202      	movs	r2, #2
 8000e08:	f107 010c 	add.w	r1, r7, #12
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fbc1 	bl	8000598 <SPIx_TxBuf>
  return (ISPHYMAC(ctrlreg)) ? data[2] : data[1];
 8000e16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	da01      	bge.n	8000e22 <enc_rdbreg+0x52>
 8000e1e:	7bbb      	ldrb	r3, [r7, #14]
 8000e20:	e000      	b.n	8000e24 <enc_rdbreg+0x54>
 8000e22:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <enc_wrbreg>:

/* Write to a banked control register using the WCR command. */
static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t wrdata)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	70fb      	strb	r3, [r7, #3]
 8000e38:	4613      	mov	r3, r2
 8000e3a:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];
  enc_setbank(handle, GETBANK(ctrlreg));
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ff11 	bl	8000c72 <enc_setbank>
  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8000e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e54:	f003 031f 	and.w	r3, r3, #31
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5e:	b25b      	sxtb	r3, r3
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8000e64:	78bb      	ldrb	r3, [r7, #2]
 8000e66:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(data, NULL, 2);
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb91 	bl	8000598 <SPIx_TxBuf>
}
 8000e76:	bf00      	nop
 8000e78:	3710      	adds	r7, #16
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <enc_waitbreg>:

/* Wait until banked register bit(s) take a specific value */
static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	4608      	mov	r0, r1
 8000e88:	4611      	mov	r1, r2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	70fb      	strb	r3, [r7, #3]
 8000e90:	460b      	mov	r3, r1
 8000e92:	70bb      	strb	r3, [r7, #2]
 8000e94:	4613      	mov	r3, r2
 8000e96:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8000e98:	f000 ff96 	bl	8001dc8 <HAL_GetTick>
 8000e9c:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdbreg(handle, ctrlreg);
 8000e9e:	78fb      	ldrb	r3, [r7, #3]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff94 	bl	8000dd0 <enc_rdbreg>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000eac:	f000 ff8c 	bl	8001dc8 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000eb8:	7cfa      	ldrb	r2, [r7, #19]
 8000eba:	78bb      	ldrb	r3, [r7, #2]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	787a      	ldrb	r2, [r7, #1]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d002      	beq.n	8000ecc <enc_waitbreg+0x4e>
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	2b31      	cmp	r3, #49	@ 0x31
 8000eca:	d9e8      	bls.n	8000e9e <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8000ecc:	7cfa      	ldrb	r2, [r7, #19]
 8000ece:	78bb      	ldrb	r3, [r7, #2]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	787a      	ldrb	r2, [r7, #1]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	bf0c      	ite	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	2300      	movne	r3, #0
 8000ede:	b2db      	uxtb	r3, r3
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <enc_rdphy>:

/* Read 16-bits of PHY data. */
static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	81fb      	strh	r3, [r7, #14]

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000ef8:	78fb      	ldrb	r3, [r7, #3]
 8000efa:	461a      	mov	r2, r3
 8000efc:	21d4      	movs	r1, #212	@ 0xd4
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff94 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8000f04:	2201      	movs	r2, #1
 8000f06:	21d2      	movs	r1, #210	@ 0xd2
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f7ff ff8f 	bl	8000e2c <enc_wrbreg>
  udelay(12);
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f7ff fba4 	bl	800065c <udelay>

  if(enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8000f14:	2300      	movs	r3, #0
 8000f16:	2201      	movs	r2, #1
 8000f18:	21ea      	movs	r1, #234	@ 0xea
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffaf 	bl	8000e7e <enc_waitbreg>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d016      	beq.n	8000f54 <enc_rdphy+0x6c>
  {
    enc_wrbreg(handle, ENC_MICMD, 0x00);
 8000f26:	2200      	movs	r2, #0
 8000f28:	21d2      	movs	r1, #210	@ 0xd2
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff7e 	bl	8000e2c <enc_wrbreg>
    data = (uint16_t) enc_rdbreg(handle, ENC_MIRDL);
 8000f30:	21d8      	movs	r1, #216	@ 0xd8
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff4c 	bl	8000dd0 <enc_rdbreg>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	81fb      	strh	r3, [r7, #14]
    data |= (uint16_t) enc_rdbreg(handle, ENC_MIRDH) << 8;
 8000f3c:	21d9      	movs	r1, #217	@ 0xd9
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff46 	bl	8000dd0 <enc_rdbreg>
 8000f44:	4603      	mov	r3, r0
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	81fb      	strh	r3, [r7, #14]
  }

  return data;
 8000f54:	89fb      	ldrh	r3, [r7, #14]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <enc_wrphy>:

/* write 16-bits of PHY data. */
static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr, uint16_t phydata)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	460b      	mov	r3, r1
 8000f68:	70fb      	strb	r3, [r7, #3]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	803b      	strh	r3, [r7, #0]
  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000f6e:	78fb      	ldrb	r3, [r7, #3]
 8000f70:	461a      	mov	r2, r3
 8000f72:	21d4      	movs	r1, #212	@ 0xd4
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff59 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8000f7a:	883b      	ldrh	r3, [r7, #0]
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	461a      	mov	r2, r3
 8000f80:	21d6      	movs	r1, #214	@ 0xd6
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff52 	bl	8000e2c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8000f88:	883b      	ldrh	r3, [r7, #0]
 8000f8a:	0a1b      	lsrs	r3, r3, #8
 8000f8c:	b29b      	uxth	r3, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	461a      	mov	r2, r3
 8000f92:	21d7      	movs	r1, #215	@ 0xd7
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff49 	bl	8000e2c <enc_wrbreg>
  udelay(12);
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f7ff fb5e 	bl	800065c <udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	21ea      	movs	r1, #234	@ 0xea
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff69 	bl	8000e7e <enc_waitbreg>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <enc_rdbuffer>:

/* Read a buffer of data. */
static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	4807      	ldr	r0, [pc, #28]	@ (8000fe4 <enc_rdbuffer+0x30>)
 8000fc6:	f001 f9bb 	bl	8002340 <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_RBM);
 8000fca:	203a      	movs	r0, #58	@ 0x3a
 8000fcc:	f7ff fad0 	bl	8000570 <SPIx_TxRx>
  SPIx_TxBuf(NULL, buffer, buflen);
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff fade 	bl	8000598 <SPIx_TxBuf>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	48000400 	.word	0x48000400

08000fe8 <enc_linkstatus>:

/* The current link status can be obtained from the PHSTAT1.LLSTAT or PHSTAT2.LSTAT.*/
static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 8000ff0:	2111      	movs	r1, #17
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff ff78 	bl	8000ee8 <enc_rdphy>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	82da      	strh	r2, [r3, #22]
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}

08001008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fea8 	bl	8001d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f80f 	bl	8001032 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001014:	f000 f8cc 	bl	80011b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001018:	f000 f89a 	bl	8001150 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800101c:	f000 f85a 	bl	80010d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  TFunction_Factory();
 8001020:	f000 fddc 	bl	8001bdc <TFunction_Factory>
  MX_LWIP_Init();
 8001024:	f004 fd8e 	bl	8005b44 <MX_LWIP_Init>
  app_echoserver_init();
 8001028:	f000 fbb8 	bl	800179c <app_echoserver_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 MX_LWIP_Process();
 800102c:	f004 febc 	bl	8005da8 <MX_LWIP_Process>
 8001030:	e7fc      	b.n	800102c <main+0x24>

08001032 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b096      	sub	sp, #88	@ 0x58
 8001036:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	2244      	movs	r2, #68	@ 0x44
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f013 f90c 	bl	801425e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001046:	463b      	mov	r3, r7
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001054:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001058:	f001 f998 	bl	800238c <HAL_PWREx_ControlVoltageScaling>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001062:	f000 f933 	bl	80012cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001066:	2302      	movs	r3, #2
 8001068:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800106e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001070:	2310      	movs	r3, #16
 8001072:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001074:	2302      	movs	r3, #2
 8001076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001078:	2302      	movs	r3, #2
 800107a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001080:	230a      	movs	r3, #10
 8001082:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001084:	2307      	movs	r3, #7
 8001086:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001088:	2302      	movs	r3, #2
 800108a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001090:	f107 0314 	add.w	r3, r7, #20
 8001094:	4618      	mov	r0, r3
 8001096:	f001 f9cf 	bl	8002438 <HAL_RCC_OscConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010a0:	f000 f914 	bl	80012cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a4:	230f      	movs	r3, #15
 80010a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a8:	2303      	movs	r3, #3
 80010aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	2104      	movs	r1, #4
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 fd97 	bl	8002bf0 <HAL_RCC_ClockConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80010c8:	f000 f900 	bl	80012cc <Error_Handler>
  }
}
 80010cc:	bf00      	nop
 80010ce:	3758      	adds	r7, #88	@ 0x58
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_SPI2_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <MX_SPI2_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_SPI2_Init+0x74>)
 80010e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80010e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010e6:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_SPI2_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010ec:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <MX_SPI2_Init+0x74>)
 80010ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80010f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_SPI2_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_SPI2_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_SPI2_Init+0x74>)
 8001102:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001106:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_SPI2_Init+0x74>)
 800110a:	2230      	movs	r2, #48	@ 0x30
 800110c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <MX_SPI2_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001114:	4b0c      	ldr	r3, [pc, #48]	@ (8001148 <MX_SPI2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <MX_SPI2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001120:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <MX_SPI2_Init+0x74>)
 8001122:	2207      	movs	r2, #7
 8001124:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001126:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <MX_SPI2_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <MX_SPI2_Init+0x74>)
 800112e:	2208      	movs	r2, #8
 8001130:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_SPI2_Init+0x74>)
 8001134:	f002 fc6e 	bl	8003a14 <HAL_SPI_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 f8c5 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000090 	.word	0x20000090
 800114c:	40003800 	.word	0x40003800

08001150 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001156:	4a15      	ldr	r2, [pc, #84]	@ (80011ac <MX_USART2_UART_Init+0x5c>)
 8001158:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115a:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b09      	ldr	r3, [pc, #36]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_USART2_UART_Init+0x58>)
 8001194:	f003 fe30 	bl	8004df8 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 f895 	bl	80012cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000f4 	.word	0x200000f4
 80011ac:	40004400 	.word	0x40004400

080011b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	f107 0314 	add.w	r3, r7, #20
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	4b35      	ldr	r3, [pc, #212]	@ (800129c <MX_GPIO_Init+0xec>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a34      	ldr	r2, [pc, #208]	@ (800129c <MX_GPIO_Init+0xec>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b32      	ldr	r3, [pc, #200]	@ (800129c <MX_GPIO_Init+0xec>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	4b2f      	ldr	r3, [pc, #188]	@ (800129c <MX_GPIO_Init+0xec>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a2e      	ldr	r2, [pc, #184]	@ (800129c <MX_GPIO_Init+0xec>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b2c      	ldr	r3, [pc, #176]	@ (800129c <MX_GPIO_Init+0xec>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b29      	ldr	r3, [pc, #164]	@ (800129c <MX_GPIO_Init+0xec>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fa:	4a28      	ldr	r2, [pc, #160]	@ (800129c <MX_GPIO_Init+0xec>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001202:	4b26      	ldr	r3, [pc, #152]	@ (800129c <MX_GPIO_Init+0xec>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b23      	ldr	r3, [pc, #140]	@ (800129c <MX_GPIO_Init+0xec>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	4a22      	ldr	r2, [pc, #136]	@ (800129c <MX_GPIO_Init+0xec>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <MX_GPIO_Init+0xec>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	2120      	movs	r1, #32
 800122a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800122e:	f001 f887 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	2101      	movs	r1, #1
 8001236:	481a      	ldr	r0, [pc, #104]	@ (80012a0 <MX_GPIO_Init+0xf0>)
 8001238:	f001 f882 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001242:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4814      	ldr	r0, [pc, #80]	@ (80012a4 <MX_GPIO_Init+0xf4>)
 8001254:	f000 feca 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001258:	2320      	movs	r3, #32
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001272:	f000 febb 	bl	8001fec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001276:	2301      	movs	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001282:	2302      	movs	r3, #2
 8001284:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	@ (80012a0 <MX_GPIO_Init+0xf0>)
 800128e:	f000 fead 	bl	8001fec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	@ 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021000 	.word	0x40021000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800

080012a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ba:	f000 fd71 	bl	8001da0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40001000 	.word	0x40001000

080012cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d0:	b672      	cpsid	i
}
 80012d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <Error_Handler+0x8>

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_MspInit+0x4c>)
 80012e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012e2:	4a10      	ldr	r2, [pc, #64]	@ (8001324 <HAL_MspInit+0x4c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <HAL_MspInit+0x4c>)
 80012ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_MspInit+0x4c>)
 80012f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <HAL_MspInit+0x4c>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	6593      	str	r3, [r2, #88]	@ 0x58
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_MspInit+0x4c>)
 8001304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	210f      	movs	r1, #15
 8001312:	f06f 0001 	mvn.w	r0, #1
 8001316:	f000 fe3f 	bl	8001f98 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a25      	ldr	r2, [pc, #148]	@ (80013dc <HAL_SPI_MspInit+0xb4>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d144      	bne.n	80013d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 800134c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134e:	4a24      	ldr	r2, [pc, #144]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001350:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001354:	6593      	str	r3, [r2, #88]	@ 0x58
 8001356:	4b22      	ldr	r3, [pc, #136]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800135a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	4b1f      	ldr	r3, [pc, #124]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b19      	ldr	r3, [pc, #100]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	4a18      	ldr	r2, [pc, #96]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001386:	4b16      	ldr	r3, [pc, #88]	@ (80013e0 <HAL_SPI_MspInit+0xb8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60bb      	str	r3, [r7, #8]
 8001390:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001392:	230c      	movs	r3, #12
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a2:	2305      	movs	r3, #5
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	4619      	mov	r1, r3
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <HAL_SPI_MspInit+0xbc>)
 80013ae:	f000 fe1d 	bl	8001fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013c4:	2305      	movs	r3, #5
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4619      	mov	r1, r3
 80013ce:	4806      	ldr	r0, [pc, #24]	@ (80013e8 <HAL_SPI_MspInit+0xc0>)
 80013d0:	f000 fe0c 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80013d4:	bf00      	nop
 80013d6:	3728      	adds	r7, #40	@ 0x28
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40003800 	.word	0x40003800
 80013e0:	40021000 	.word	0x40021000
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000400 	.word	0x48000400

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	@ 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2288      	movs	r2, #136	@ 0x88
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f012 ff26 	bl	801425e <memset>
  if(huart->Instance==USART2)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a21      	ldr	r2, [pc, #132]	@ (800149c <HAL_UART_MspInit+0xb0>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d13b      	bne.n	8001494 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800141c:	2302      	movs	r3, #2
 800141e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001420:	2300      	movs	r3, #0
 8001422:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	4618      	mov	r0, r3
 800142a:	f001 fe37 	bl	800309c <HAL_RCCEx_PeriphCLKConfig>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001434:	f7ff ff4a 	bl	80012cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 800143a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143c:	4a18      	ldr	r2, [pc, #96]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 800143e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001442:	6593      	str	r3, [r2, #88]	@ 0x58
 8001444:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 8001446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800145c:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <HAL_UART_MspInit+0xb4>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001468:	230c      	movs	r3, #12
 800146a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001480:	2307      	movs	r3, #7
 8001482:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001486:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800148a:	4619      	mov	r1, r3
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f000 fdac 	bl	8001fec <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001494:	bf00      	nop
 8001496:	37b0      	adds	r7, #176	@ 0xb0
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40004400 	.word	0x40004400
 80014a0:	40021000 	.word	0x40021000

080014a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08e      	sub	sp, #56	@ 0x38
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	@ (8001584 <HAL_InitTick+0xe0>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b6:	4a33      	ldr	r2, [pc, #204]	@ (8001584 <HAL_InitTick+0xe0>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014be:	4b31      	ldr	r3, [pc, #196]	@ (8001584 <HAL_InitTick+0xe0>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014ca:	f107 0210 	add.w	r2, r7, #16
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f001 fd4f 	bl	8002f78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014da:	6a3b      	ldr	r3, [r7, #32]
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014e4:	f001 fd1c 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80014e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80014ea:	e004      	b.n	80014f6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014ec:	f001 fd18 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80014f0:	4603      	mov	r3, r0
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014f8:	4a23      	ldr	r2, [pc, #140]	@ (8001588 <HAL_InitTick+0xe4>)
 80014fa:	fba2 2303 	umull	r2, r3, r2, r3
 80014fe:	0c9b      	lsrs	r3, r3, #18
 8001500:	3b01      	subs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001504:	4b21      	ldr	r3, [pc, #132]	@ (800158c <HAL_InitTick+0xe8>)
 8001506:	4a22      	ldr	r2, [pc, #136]	@ (8001590 <HAL_InitTick+0xec>)
 8001508:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800150a:	4b20      	ldr	r3, [pc, #128]	@ (800158c <HAL_InitTick+0xe8>)
 800150c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001510:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001512:	4a1e      	ldr	r2, [pc, #120]	@ (800158c <HAL_InitTick+0xe8>)
 8001514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001516:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001518:	4b1c      	ldr	r3, [pc, #112]	@ (800158c <HAL_InitTick+0xe8>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b1b      	ldr	r3, [pc, #108]	@ (800158c <HAL_InitTick+0xe8>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b19      	ldr	r3, [pc, #100]	@ (800158c <HAL_InitTick+0xe8>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800152a:	4818      	ldr	r0, [pc, #96]	@ (800158c <HAL_InitTick+0xe8>)
 800152c:	f003 f99e 	bl	800486c <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001536:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800153a:	2b00      	cmp	r3, #0
 800153c:	d11b      	bne.n	8001576 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800153e:	4813      	ldr	r0, [pc, #76]	@ (800158c <HAL_InitTick+0xe8>)
 8001540:	f003 f9f6 	bl	8004930 <HAL_TIM_Base_Start_IT>
 8001544:	4603      	mov	r3, r0
 8001546:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800154a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800154e:	2b00      	cmp	r3, #0
 8001550:	d111      	bne.n	8001576 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001552:	2036      	movs	r0, #54	@ 0x36
 8001554:	f000 fd3c 	bl	8001fd0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d808      	bhi.n	8001570 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800155e:	2200      	movs	r2, #0
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	2036      	movs	r0, #54	@ 0x36
 8001564:	f000 fd18 	bl	8001f98 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001568:	4a0a      	ldr	r2, [pc, #40]	@ (8001594 <HAL_InitTick+0xf0>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
 800156e:	e002      	b.n	8001576 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001576:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800157a:	4618      	mov	r0, r3
 800157c:	3738      	adds	r7, #56	@ 0x38
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	431bde83 	.word	0x431bde83
 800158c:	2000017c 	.word	0x2000017c
 8001590:	40001000 	.word	0x40001000
 8001594:	20000004 	.word	0x20000004

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <NMI_Handler+0x4>

080015a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <MemManage_Handler+0x4>

080015b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <BusFault_Handler+0x4>

080015b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <UsageFault_Handler+0x4>

080015c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <TIM6_DAC_IRQHandler+0x10>)
 80015d6:	f003 fa1b 	bl	8004a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000017c 	.word	0x2000017c

080015e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_kill>:

int _kill(int pid, int sig)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <_kill+0x20>)
 8001600:	2216      	movs	r2, #22
 8001602:	601a      	str	r2, [r3, #0]
  return -1;
 8001604:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20004608 	.word	0x20004608

08001618 <_exit>:

void _exit (int status)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ffe5 	bl	80015f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800162a:	bf00      	nop
 800162c:	e7fd      	b.n	800162a <_exit+0x12>

0800162e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	e00a      	b.n	8001656 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001640:	f3af 8000 	nop.w
 8001644:	4601      	mov	r1, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	60ba      	str	r2, [r7, #8]
 800164c:	b2ca      	uxtb	r2, r1
 800164e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	3301      	adds	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	429a      	cmp	r2, r3
 800165c:	dbf0      	blt.n	8001640 <_read+0x12>
  }

  return len;
 800165e:	687b      	ldr	r3, [r7, #4]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
 8001678:	e009      	b.n	800168e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	60ba      	str	r2, [r7, #8]
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	4618      	mov	r0, r3
 8001684:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	3301      	adds	r3, #1
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	429a      	cmp	r2, r3
 8001694:	dbf1      	blt.n	800167a <_write+0x12>
  }
  return len;
 8001696:	687b      	ldr	r3, [r7, #4]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <_close>:

int _close(int file)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c8:	605a      	str	r2, [r3, #4]
  return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_isatty>:

int _isatty(int file)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e0:	2301      	movs	r3, #1
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b085      	sub	sp, #20
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	60f8      	str	r0, [r7, #12]
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001708:	b480      	push	{r7}
 800170a:	b087      	sub	sp, #28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001710:	4a14      	ldr	r2, [pc, #80]	@ (8001764 <_sbrk+0x5c>)
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <_sbrk+0x60>)
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d102      	bne.n	800172a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <_sbrk+0x64>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <_sbrk+0x68>)
 8001728:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	429a      	cmp	r2, r3
 8001736:	d205      	bcs.n	8001744 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001738:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <_sbrk+0x6c>)
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a06      	ldr	r2, [pc, #24]	@ (800176c <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	371c      	adds	r7, #28
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20018000 	.word	0x20018000
 8001768:	00000400 	.word	0x00000400
 800176c:	200001c8 	.word	0x200001c8
 8001770:	20004618 	.word	0x20004618
 8001774:	20004608 	.word	0x20004608

08001778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <SystemInit+0x20>)
 800177e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001782:	4a05      	ldr	r2, [pc, #20]	@ (8001798 <SystemInit+0x20>)
 8001784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <app_echoserver_init>:
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es); //send function
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es); //close function

/* initialize echo server */
err_t app_echoserver_init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
  err_t err;
  pcb_server = tcp_new();		//allocate pcb memory
 80017a2:	f008 fddb 	bl	800a35c <tcp_new>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a1c      	ldr	r2, [pc, #112]	@ (800181c <app_echoserver_init+0x80>)
 80017aa:	6013      	str	r3, [r2, #0]

  if (pcb_server == NULL)
 80017ac:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <app_echoserver_init+0x80>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <app_echoserver_init+0x2a>
  {
    //lack of memory
    memp_free(MEMP_TCP_PCB, pcb_server);
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <app_echoserver_init+0x80>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
 80017ba:	2001      	movs	r0, #1
 80017bc:	f005 ffa8 	bl	8007710 <memp_free>
    return ERR_MEM;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	e025      	b.n	8001812 <app_echoserver_init+0x76>
  }

  err = tcp_bind(pcb_server, IP_ADDR_ANY, ECHO_SERVER_LISTEN_PORT); //bind to port 7
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <app_echoserver_init+0x80>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2207      	movs	r2, #7
 80017cc:	4914      	ldr	r1, [pc, #80]	@ (8001820 <app_echoserver_init+0x84>)
 80017ce:	4618      	mov	r0, r3
 80017d0:	f007 fd1e 	bl	8009210 <tcp_bind>
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  if (err != ERR_OK)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d008      	beq.n	80017f2 <app_echoserver_init+0x56>
  {
    //fail to bind
    memp_free(MEMP_TCP_PCB, pcb_server);
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <app_echoserver_init+0x80>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4619      	mov	r1, r3
 80017e6:	2001      	movs	r0, #1
 80017e8:	f005 ff92 	bl	8007710 <memp_free>
    return err;
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	e00f      	b.n	8001812 <app_echoserver_init+0x76>
  }

  pcb_server = tcp_listen(pcb_server);	//listen
 80017f2:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <app_echoserver_init+0x80>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	21ff      	movs	r1, #255	@ 0xff
 80017f8:	4618      	mov	r0, r3
 80017fa:	f007 fdc1 	bl	8009380 <tcp_listen_with_backlog>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a06      	ldr	r2, [pc, #24]	@ (800181c <app_echoserver_init+0x80>)
 8001802:	6013      	str	r3, [r2, #0]
  tcp_accept(pcb_server, app_callback_accepted);	//register accept callback
 8001804:	4b05      	ldr	r3, [pc, #20]	@ (800181c <app_echoserver_init+0x80>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4906      	ldr	r1, [pc, #24]	@ (8001824 <app_echoserver_init+0x88>)
 800180a:	4618      	mov	r0, r3
 800180c:	f008 fe26 	bl	800a45c <tcp_accept>

  return ERR_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200001cc 	.word	0x200001cc
 8001820:	08018314 	.word	0x08018314
 8001824:	08001829 	.word	0x08001829

08001828 <app_callback_accepted>:

/* accept callback */
static err_t app_callback_accepted(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	4613      	mov	r3, r2
 8001834:	71fb      	strb	r3, [r7, #7]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(arg); //remove warning
  LWIP_UNUSED_ARG(err);

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for new pcb
 8001836:	2140      	movs	r1, #64	@ 0x40
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f008 fb9d 	bl	8009f78 <tcp_setprio>

  es = (struct tcp_echoserver_struct*)
      mem_malloc(sizeof(struct tcp_echoserver_struct)); //allocate tcp_echoserver_struct
 800183e:	200c      	movs	r0, #12
 8001840:	f005 fdac 	bl	800739c <mem_malloc>
 8001844:	6178      	str	r0, [r7, #20]

  if (es == NULL) //lack of memory
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d106      	bne.n	800185a <app_callback_accepted+0x32>
  {
    app_close_connection(pcb_new, es); //close connection
 800184c:	6979      	ldr	r1, [r7, #20]
 800184e:	68b8      	ldr	r0, [r7, #8]
 8001850:	f000 f980 	bl	8001b54 <app_close_connection>
    return ERR_MEM;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
 8001858:	e01d      	b.n	8001896 <app_callback_accepted+0x6e>
  }

  es->state = ES_ACCEPTED; //accepted
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
  es->pcb = pcb_new; //set pcb pointer
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	605a      	str	r2, [r3, #4]
  es->retries = 0; //clear counter
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	2200      	movs	r2, #0
 800186a:	705a      	strb	r2, [r3, #1]
  es->p = NULL; //clear buffer pointer
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]

  tcp_arg(pcb_new, es);		//send es structure as an argument
 8001872:	6979      	ldr	r1, [r7, #20]
 8001874:	68b8      	ldr	r0, [r7, #8]
 8001876:	f008 fd79 	bl	800a36c <tcp_arg>
  tcp_recv(pcb_new, app_callback_received);	//register receive callback
 800187a:	4909      	ldr	r1, [pc, #36]	@ (80018a0 <app_callback_accepted+0x78>)
 800187c:	68b8      	ldr	r0, [r7, #8]
 800187e:	f008 fd87 	bl	800a390 <tcp_recv>
  tcp_err(pcb_new, app_callback_error); //register error callback
 8001882:	4908      	ldr	r1, [pc, #32]	@ (80018a4 <app_callback_accepted+0x7c>)
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f008 fdc7 	bl	800a418 <tcp_err>
  tcp_poll(pcb_new, app_callback_poll, 0); //register poll callback
 800188a:	2200      	movs	r2, #0
 800188c:	4906      	ldr	r1, [pc, #24]	@ (80018a8 <app_callback_accepted+0x80>)
 800188e:	68b8      	ldr	r0, [r7, #8]
 8001890:	f008 fdfc 	bl	800a48c <tcp_poll>

  return ERR_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	080018ad 	.word	0x080018ad
 80018a4:	080019e1 	.word	0x080019e1
 80018a8:	08001a05 	.word	0x08001a05

080018ac <app_callback_received>:

/* receive callback */
static err_t app_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b088      	sub	sp, #32
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL", arg != NULL); //check argument
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d105      	bne.n	80018cc <app_callback_received+0x20>
 80018c0:	4b43      	ldr	r3, [pc, #268]	@ (80019d0 <app_callback_received+0x124>)
 80018c2:	2258      	movs	r2, #88	@ 0x58
 80018c4:	4943      	ldr	r1, [pc, #268]	@ (80019d4 <app_callback_received+0x128>)
 80018c6:	4844      	ldr	r0, [pc, #272]	@ (80019d8 <app_callback_received+0x12c>)
 80018c8:	f012 fc2a 	bl	8014120 <iprintf>
  es = (struct tcp_echoserver_struct*) arg;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	61bb      	str	r3, [r7, #24]

  if (p == NULL) //callback is called but there's no data
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d116      	bne.n	8001904 <app_callback_received+0x58>
  {
    es->state = ES_CLOSING;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	2203      	movs	r2, #3
 80018da:	701a      	strb	r2, [r3, #0]
    if (es->p == NULL)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d104      	bne.n	80018ee <app_callback_received+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 80018e4:	69b9      	ldr	r1, [r7, #24]
 80018e6:	68b8      	ldr	r0, [r7, #8]
 80018e8:	f000 f934 	bl	8001b54 <app_close_connection>
 80018ec:	e007      	b.n	80018fe <app_callback_received+0x52>
    }
    else //if there's remained data to send
    {
      tcp_sent(tpcb, app_callback_sent); //register send callback
 80018ee:	493b      	ldr	r1, [pc, #236]	@ (80019dc <app_callback_received+0x130>)
 80018f0:	68b8      	ldr	r0, [r7, #8]
 80018f2:	f008 fd6f 	bl	800a3d4 <tcp_sent>
      app_send_data(tpcb, es); //send remained data
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	68b8      	ldr	r0, [r7, #8]
 80018fa:	f000 f8d7 	bl	8001aac <app_send_data>
    }
    ret_err = ERR_OK;
 80018fe:	2300      	movs	r3, #0
 8001900:	77fb      	strb	r3, [r7, #31]
 8001902:	e05f      	b.n	80019c4 <app_callback_received+0x118>
  }
  else if (err != ERR_OK) //error when receiving
 8001904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00b      	beq.n	8001924 <app_callback_received+0x78>
  {
    if (p != NULL) //buffer is not empty
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <app_callback_received+0x72>
    {
      es->p = NULL;
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
      pbuf_free(p); //clear buffer
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f006 fd7b 	bl	8008414 <pbuf_free>
    }
    ret_err = err;
 800191e:	78fb      	ldrb	r3, [r7, #3]
 8001920:	77fb      	strb	r3, [r7, #31]
 8001922:	e04f      	b.n	80019c4 <app_callback_received+0x118>
  }
  else if (es->state == ES_ACCEPTED) //first data receiving
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d110      	bne.n	800194e <app_callback_received+0xa2>
  {
    es->state = ES_RECEIVED; //change state
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
    es->p = p; //set buffer pointer
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001938:	4928      	ldr	r1, [pc, #160]	@ (80019dc <app_callback_received+0x130>)
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f008 fd4a 	bl	800a3d4 <tcp_sent>
    app_send_data(tpcb, es); //send data via es->p
 8001940:	69b9      	ldr	r1, [r7, #24]
 8001942:	68b8      	ldr	r0, [r7, #8]
 8001944:	f000 f8b2 	bl	8001aac <app_send_data>
    ret_err = ERR_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	77fb      	strb	r3, [r7, #31]
 800194c:	e03a      	b.n	80019c4 <app_callback_received+0x118>
  }
  else if (es->state == ES_RECEIVED) //additional data receiving
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	d115      	bne.n	8001982 <app_callback_received+0xd6>
  {
    if (es->p == NULL) //no data to send
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d107      	bne.n	800196e <app_callback_received+0xc2>
    {
      es->p = p; //set buffer pointer
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	609a      	str	r2, [r3, #8]
      app_send_data(tpcb, es); //send data
 8001964:	69b9      	ldr	r1, [r7, #24]
 8001966:	68b8      	ldr	r0, [r7, #8]
 8001968:	f000 f8a0 	bl	8001aac <app_send_data>
 800196c:	e006      	b.n	800197c <app_callback_received+0xd0>
    }
    else //buffer is not empty, there's data to send
    {
      struct pbuf *ptr = es->p; //head buffer
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr, p);	//append tail buffer to the head, this buffer will be handled by poll callback
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f006 fe64 	bl	8008644 <pbuf_chain>
    }
    ret_err = ERR_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
 8001980:	e020      	b.n	80019c4 <app_callback_received+0x118>
  }
  else if (es->state == ES_CLOSING) //receiving data when connection is closing
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b03      	cmp	r3, #3
 8001988:	d10e      	bne.n	80019a8 <app_callback_received+0xfc>
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	891b      	ldrh	r3, [r3, #8]
 800198e:	4619      	mov	r1, r3
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f007 fe0b 	bl	80095ac <tcp_recved>
    es->p = NULL;
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f006 fd39 	bl	8008414 <pbuf_free>
    ret_err = ERR_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	e00d      	b.n	80019c4 <app_callback_received+0x118>
  }
  else //undefined condition
  {
    tcp_recved(tpcb, p->tot_len);	//advertise window size
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	891b      	ldrh	r3, [r3, #8]
 80019ac:	4619      	mov	r1, r3
 80019ae:	68b8      	ldr	r0, [r7, #8]
 80019b0:	f007 fdfc 	bl	80095ac <tcp_recved>
    es->p = NULL;
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f006 fd2a 	bl	8008414 <pbuf_free>
    ret_err = ERR_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80019c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3720      	adds	r7, #32
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	080152dc 	.word	0x080152dc
 80019d4:	080152f4 	.word	0x080152f4
 80019d8:	08015300 	.word	0x08015300
 80019dc:	08001a5d 	.word	0x08001a5d

080019e0 <app_callback_error>:

/* error callback */
static void app_callback_error(void *arg, err_t err)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct*) arg;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <app_callback_error+0x1c>
  {
    mem_free(es);	//free es structure
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f005 fb6a 	bl	80070d0 <mem_free>
  }

  //HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //turn on blue LED when there's error.
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <app_callback_poll>:

/* poll callback */
static err_t app_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  struct tcp_echoserver_struct *es;
  es = (struct tcp_echoserver_struct*) arg;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  if (es == NULL) //if there's no es structure
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <app_callback_poll+0x20>
  {
    tcp_abort(tpcb); //abort connection
 8001a18:	6838      	ldr	r0, [r7, #0]
 8001a1a:	f007 fbed 	bl	80091f8 <tcp_abort>
    return ERR_ABRT;
 8001a1e:	f06f 030c 	mvn.w	r3, #12
 8001a22:	e015      	b.n	8001a50 <app_callback_poll+0x4c>
  }

  if (es->p != NULL) //if there's data to send
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d008      	beq.n	8001a3e <app_callback_poll+0x3a>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001a2c:	490a      	ldr	r1, [pc, #40]	@ (8001a58 <app_callback_poll+0x54>)
 8001a2e:	6838      	ldr	r0, [r7, #0]
 8001a30:	f008 fcd0 	bl	800a3d4 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001a34:	68f9      	ldr	r1, [r7, #12]
 8001a36:	6838      	ldr	r0, [r7, #0]
 8001a38:	f000 f838 	bl	8001aac <app_send_data>
 8001a3c:	e007      	b.n	8001a4e <app_callback_poll+0x4a>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b03      	cmp	r3, #3
 8001a44:	d103      	bne.n	8001a4e <app_callback_poll+0x4a>
    {
      app_close_connection(tpcb, es);		//close connection
 8001a46:	68f9      	ldr	r1, [r7, #12]
 8001a48:	6838      	ldr	r0, [r7, #0]
 8001a4a:	f000 f883 	bl	8001b54 <app_close_connection>
    }
  }

  return ERR_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	08001a5d 	.word	0x08001a5d

08001a5c <app_callback_sent>:

/* send callback */
static err_t app_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;
  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct*) arg;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2200      	movs	r2, #0
 8001a72:	705a      	strb	r2, [r3, #1]

  if (es->p != NULL) //if there's data to send
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d008      	beq.n	8001a8e <app_callback_sent+0x32>
  {
    tcp_sent(tpcb, app_callback_sent); //register send callback
 8001a7c:	490a      	ldr	r1, [pc, #40]	@ (8001aa8 <app_callback_sent+0x4c>)
 8001a7e:	68b8      	ldr	r0, [r7, #8]
 8001a80:	f008 fca8 	bl	800a3d4 <tcp_sent>
    app_send_data(tpcb, es); //send data
 8001a84:	6979      	ldr	r1, [r7, #20]
 8001a86:	68b8      	ldr	r0, [r7, #8]
 8001a88:	f000 f810 	bl	8001aac <app_send_data>
 8001a8c:	e007      	b.n	8001a9e <app_callback_sent+0x42>
  }
  else //no data to send
  {
    if (es->state == ES_CLOSING)
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d103      	bne.n	8001a9e <app_callback_sent+0x42>
    {
      app_close_connection(tpcb, es); //close connection
 8001a96:	6979      	ldr	r1, [r7, #20]
 8001a98:	68b8      	ldr	r0, [r7, #8]
 8001a9a:	f000 f85b 	bl	8001b54 <app_close_connection>
    }
  }
  return ERR_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08001a5d 	.word	0x08001a5d

08001aac <app_send_data>:

/* send data */
static void app_send_data(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	75fb      	strb	r3, [r7, #23]

  // while no error, data to send, data size is smaller than the size of the send buffer
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001aba:	e037      	b.n	8001b2c <app_send_data+0x80>
      && (es->p->len <= tcp_sndbuf(tpcb)))
  {
    ptr = es->p;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, TCP_WRITE_FLAG_COPY); //send data
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	6859      	ldr	r1, [r3, #4]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	895a      	ldrh	r2, [r3, #10]
 8001aca:	2301      	movs	r3, #1
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f00b fb9d 	bl	800d20c <tcp_write>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001ad6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d11d      	bne.n	8001b1a <app_send_data+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	895b      	ldrh	r3, [r3, #10]
 8001ae2:	81fb      	strh	r3, [r7, #14]
      es->p = ptr->next;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	609a      	str	r2, [r3, #8]

      if (es->p != NULL) //there's chained buffer to send
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <app_send_data+0x52>
      {
        pbuf_ref(es->p);	//increase reference counter
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f006 fd2b 	bl	8008554 <pbuf_ref>
      }

      do
      {
        freed = pbuf_free(ptr);		//free old buffer
 8001afe:	6938      	ldr	r0, [r7, #16]
 8001b00:	f006 fc88 	bl	8008414 <pbuf_free>
 8001b04:	4603      	mov	r3, r0
 8001b06:	737b      	strb	r3, [r7, #13]
      }
      while (freed == 0);
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f7      	beq.n	8001afe <app_send_data+0x52>

      tcp_recved(tpcb, plen);			//advertise window size
 8001b0e:	89fb      	ldrh	r3, [r7, #14]
 8001b10:	4619      	mov	r1, r3
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f007 fd4a 	bl	80095ac <tcp_recved>
 8001b18:	e008      	b.n	8001b2c <app_send_data+0x80>
    }
    else
    {
      es->p = ptr;  //fail to send, recover buffer pointer
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	609a      	str	r2, [r3, #8]
      es->retries++;  //increase counter
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	785b      	ldrb	r3, [r3, #1]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	705a      	strb	r2, [r3, #1]
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10b      	bne.n	8001b4c <app_send_data+0xa0>
  while ((wr_err == ERR_OK) && (es->p != NULL)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d007      	beq.n	8001b4c <app_send_data+0xa0>
      && (es->p->len <= tcp_sndbuf(tpcb)))
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	895a      	ldrh	r2, [r3, #10]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d9b7      	bls.n	8001abc <app_send_data+0x10>
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <app_close_connection>:

/* close connection */
static void app_close_connection(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  /* clear callback functions */
  tcp_arg(tpcb, NULL);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f008 fc03 	bl	800a36c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001b66:	2100      	movs	r1, #0
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f008 fc33 	bl	800a3d4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001b6e:	2100      	movs	r1, #0
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f008 fc0d 	bl	800a390 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001b76:	2100      	movs	r1, #0
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f008 fc4d 	bl	800a418 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f008 fc82 	bl	800a48c <tcp_poll>

  if (es != NULL)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <app_close_connection+0x40>
  {
    mem_free(es);		//free es structure
 8001b8e:	6838      	ldr	r0, [r7, #0]
 8001b90:	f005 fa9e 	bl	80070d0 <mem_free>
  }

  tcp_close(tpcb);		//close connection
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f007 fa45 	bl	8009024 <tcp_close>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <exempleTestFunctionPattern>:

extern UART_HandleTypeDef huart2;


testStatus_t exempleTestFunctionPattern( testStructure_t *ptLocalTestStructure)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	// do a ptit test

	ptLocalTestStructure->ResultState = failed;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
	ptLocalTestStructure->pcbuffer = "petit message si besoin";
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <exempleTestFunctionPattern+0x30>)
 8001bb6:	60da      	str	r2, [r3, #12]
	ptLocalTestStructure->pcTestFunctionName ="exempleTestFunctionPattern";
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a07      	ldr	r2, [pc, #28]	@ (8001bd8 <exempleTestFunctionPattern+0x34>)
 8001bbc:	605a      	str	r2, [r3, #4]
	ptLocalTestStructure->sTimeSpentOnTest = 3;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	815a      	strh	r2, [r3, #10]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	08015328 	.word	0x08015328
 8001bd8:	08015340 	.word	0x08015340

08001bdc <TFunction_Factory>:

void TFunction_Factory(void){
 8001bdc:	b5b0      	push	{r4, r5, r7, lr}
 8001bde:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 8001be2:	af00      	add	r7, sp, #0

	#define NUM_TFUNCT 2

	testStructure_t testStructure;
	testStatus_t (*TabOfTFunction[NUM_TFUNCT])( testStructure_t *ptTestStructure) = {
 8001be4:	4a44      	ldr	r2, [pc, #272]	@ (8001cf8 <TFunction_Factory+0x11c>)
 8001be6:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001bea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bee:	e883 0003 	stmia.w	r3, {r0, r1}
			exempleTestFunctionPattern
		//	TFunction_2,
        //  TFunction_3,
			};

	for(int i =0; i<NUM_TFUNCT; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001bf8:	e074      	b.n	8001ce4 <TFunction_Factory+0x108>
	{
		if( !TabOfTFunction[i](&testStructure) )
 8001bfa:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8001c04:	443b      	add	r3, r7
 8001c06:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8001c0a:	f207 420c 	addw	r2, r7, #1036	@ 0x40c
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4798      	blx	r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d160      	bne.n	8001cda <TFunction_Factory+0xfe>
		{
			char buffer[1024]= {0};
 8001c18:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8001c1c:	f2a3 431c 	subw	r3, r3, #1052	@ 0x41c
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	3304      	adds	r3, #4
 8001c26:	f44f 727f 	mov.w	r2, #1020	@ 0x3fc
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f012 fb16 	bl	801425e <memset>
			memcpy( buffer, testStructure.pcTestFunctionName,  strlen(testStructure.pcTestFunctionName));
 8001c32:	f8d7 4410 	ldr.w	r4, [r7, #1040]	@ 0x410
 8001c36:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7fe fac8 	bl	80001d0 <strlen>
 8001c40:	4602      	mov	r2, r0
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	4621      	mov	r1, r4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f012 fb7f 	bl	801434a <memcpy>
			sprintf(&buffer[strlen(buffer)], ", sTestFunctionNum=%d, ", i);
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fabe 	bl	80001d0 <strlen>
 8001c54:	4602      	mov	r2, r0
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	4413      	add	r3, r2
 8001c5a:	f8d7 241c 	ldr.w	r2, [r7, #1052]	@ 0x41c
 8001c5e:	4927      	ldr	r1, [pc, #156]	@ (8001cfc <TFunction_Factory+0x120>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f012 fa6f 	bl	8014144 <siprintf>
			sprintf(&buffer[strlen(buffer)], "ResultState=%d, ", testStructure.ResultState);
 8001c66:	1d3b      	adds	r3, r7, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fab1 	bl	80001d0 <strlen>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	f997 240c 	ldrsb.w	r2, [r7, #1036]	@ 0x40c
 8001c78:	4921      	ldr	r1, [pc, #132]	@ (8001d00 <TFunction_Factory+0x124>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f012 fa62 	bl	8014144 <siprintf>
			memcpy( &buffer[strlen(buffer)], testStructure.pcbuffer,  strlen(testStructure.pcbuffer));
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe faa4 	bl	80001d0 <strlen>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	1d3b      	adds	r3, r7, #4
 8001c8c:	189c      	adds	r4, r3, r2
 8001c8e:	f8d7 5418 	ldr.w	r5, [r7, #1048]	@ 0x418
 8001c92:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fa9a 	bl	80001d0 <strlen>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f012 fb51 	bl	801434a <memcpy>
			sprintf(&buffer[strlen(buffer)], ", sTimeSpentOnTest=%d\r\n", testStructure.sTimeSpentOnTest);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fa90 	bl	80001d0 <strlen>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f8b7 2416 	ldrh.w	r2, [r7, #1046]	@ 0x416
 8001cba:	4912      	ldr	r1, [pc, #72]	@ (8001d04 <TFunction_Factory+0x128>)
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f012 fa41 	bl	8014144 <siprintf>

			HAL_UART_Transmit(&huart2, (uint8_t*)buffer , strlen(buffer), 1000);
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fa83 	bl	80001d0 <strlen>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	1d39      	adds	r1, r7, #4
 8001cd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <TFunction_Factory+0x12c>)
 8001cd6:	f003 f8dd 	bl	8004e94 <HAL_UART_Transmit>
	for(int i =0; i<NUM_TFUNCT; i++)
 8001cda:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001cde:	3301      	adds	r3, #1
 8001ce0:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8001ce4:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	dd86      	ble.n	8001bfa <TFunction_Factory+0x1e>
		}

	}
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	f507 6784 	add.w	r7, r7, #1056	@ 0x420
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cf8:	080153a0 	.word	0x080153a0
 8001cfc:	0801535c 	.word	0x0801535c
 8001d00:	08015374 	.word	0x08015374
 8001d04:	08015388 	.word	0x08015388
 8001d08:	200000f4 	.word	0x200000f4

08001d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d10:	f7ff fd32 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	@ (8001d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <LoopForever+0xe>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d58 <LoopForever+0x16>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f012 fadf 	bl	80142fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3e:	f7ff f963 	bl	8001008 <main>

08001d42 <LoopForever>:

LoopForever:
    b LoopForever
 8001d42:	e7fe      	b.n	8001d42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001d50:	08018418 	.word	0x08018418
  ldr r2, =_sbss
 8001d54:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001d58:	20004618 	.word	0x20004618

08001d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC1_2_IRQHandler>
	...

08001d60 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d66:	2300      	movs	r3, #0
 8001d68:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <HAL_Init+0x3c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001d9c <HAL_Init+0x3c>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d76:	2003      	movs	r0, #3
 8001d78:	f000 f903 	bl	8001f82 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d7c:	200f      	movs	r0, #15
 8001d7e:	f7ff fb91 	bl	80014a4 <HAL_InitTick>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	e001      	b.n	8001d92 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d8e:	f7ff faa3 	bl	80012d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d92:	79fb      	ldrb	r3, [r7, #7]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40022000 	.word	0x40022000

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000008 	.word	0x20000008
 8001dc4:	200001d0 	.word	0x200001d0

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	200001d0 	.word	0x200001d0

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff ff4c 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001f90:	bf00      	nop
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001faa:	f7ff ff61 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001fae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	6978      	ldr	r0, [r7, #20]
 8001fb6:	f7ff ffb1 	bl	8001f1c <NVIC_EncodePriority>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff ff80 	bl	8001ec8 <__NVIC_SetPriority>
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7ff ff54 	bl	8001e8c <__NVIC_EnableIRQ>
}
 8001fe4:	bf00      	nop
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ffa:	e17f      	b.n	80022fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2101      	movs	r1, #1
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	fa01 f303 	lsl.w	r3, r1, r3
 8002008:	4013      	ands	r3, r2
 800200a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 8171 	beq.w	80022f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b01      	cmp	r3, #1
 800201e:	d005      	beq.n	800202c <HAL_GPIO_Init+0x40>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d130      	bne.n	800208e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	005b      	lsls	r3, r3, #1
 8002036:	2203      	movs	r2, #3
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4013      	ands	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002062:	2201      	movs	r2, #1
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 0201 	and.w	r2, r3, #1
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b03      	cmp	r3, #3
 8002098:	d118      	bne.n	80020cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020a0:	2201      	movs	r2, #1
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	4013      	ands	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	08db      	lsrs	r3, r3, #3
 80020b6:	f003 0201 	and.w	r2, r3, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	693a      	ldr	r2, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b03      	cmp	r3, #3
 80020d6:	d017      	beq.n	8002108 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	2203      	movs	r2, #3
 80020e4:	fa02 f303 	lsl.w	r3, r2, r3
 80020e8:	43db      	mvns	r3, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4013      	ands	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d123      	bne.n	800215c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	220f      	movs	r2, #15
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	08da      	lsrs	r2, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3208      	adds	r2, #8
 8002156:	6939      	ldr	r1, [r7, #16]
 8002158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	2203      	movs	r2, #3
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	4013      	ands	r3, r2
 8002172:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0203 	and.w	r2, r3, #3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80ac 	beq.w	80022f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800219e:	4b5f      	ldr	r3, [pc, #380]	@ (800231c <HAL_GPIO_Init+0x330>)
 80021a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a2:	4a5e      	ldr	r2, [pc, #376]	@ (800231c <HAL_GPIO_Init+0x330>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80021aa:	4b5c      	ldr	r3, [pc, #368]	@ (800231c <HAL_GPIO_Init+0x330>)
 80021ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002320 <HAL_GPIO_Init+0x334>)
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	220f      	movs	r2, #15
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021e0:	d025      	beq.n	800222e <HAL_GPIO_Init+0x242>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002324 <HAL_GPIO_Init+0x338>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <HAL_GPIO_Init+0x23e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002328 <HAL_GPIO_Init+0x33c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x23a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	@ (800232c <HAL_GPIO_Init+0x340>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x236>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002330 <HAL_GPIO_Init+0x344>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x232>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4b      	ldr	r2, [pc, #300]	@ (8002334 <HAL_GPIO_Init+0x348>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x22e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4a      	ldr	r2, [pc, #296]	@ (8002338 <HAL_GPIO_Init+0x34c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x22a>
 8002212:	2306      	movs	r3, #6
 8002214:	e00c      	b.n	8002230 <HAL_GPIO_Init+0x244>
 8002216:	2307      	movs	r3, #7
 8002218:	e00a      	b.n	8002230 <HAL_GPIO_Init+0x244>
 800221a:	2305      	movs	r3, #5
 800221c:	e008      	b.n	8002230 <HAL_GPIO_Init+0x244>
 800221e:	2304      	movs	r3, #4
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x244>
 8002222:	2303      	movs	r3, #3
 8002224:	e004      	b.n	8002230 <HAL_GPIO_Init+0x244>
 8002226:	2302      	movs	r3, #2
 8002228:	e002      	b.n	8002230 <HAL_GPIO_Init+0x244>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_GPIO_Init+0x244>
 800222e:	2300      	movs	r3, #0
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	f002 0203 	and.w	r2, r2, #3
 8002236:	0092      	lsls	r2, r2, #2
 8002238:	4093      	lsls	r3, r2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002240:	4937      	ldr	r1, [pc, #220]	@ (8002320 <HAL_GPIO_Init+0x334>)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	089b      	lsrs	r3, r3, #2
 8002246:	3302      	adds	r3, #2
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800224e:	4b3b      	ldr	r3, [pc, #236]	@ (800233c <HAL_GPIO_Init+0x350>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002272:	4a32      	ldr	r2, [pc, #200]	@ (800233c <HAL_GPIO_Init+0x350>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002278:	4b30      	ldr	r3, [pc, #192]	@ (800233c <HAL_GPIO_Init+0x350>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800229c:	4a27      	ldr	r2, [pc, #156]	@ (800233c <HAL_GPIO_Init+0x350>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022a2:	4b26      	ldr	r3, [pc, #152]	@ (800233c <HAL_GPIO_Init+0x350>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022c6:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_GPIO_Init+0x350>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	@ (800233c <HAL_GPIO_Init+0x350>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022f0:	4a12      	ldr	r2, [pc, #72]	@ (800233c <HAL_GPIO_Init+0x350>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f ae78 	bne.w	8001ffc <HAL_GPIO_Init+0x10>
  }
}
 800230c:	bf00      	nop
 800230e:	bf00      	nop
 8002310:	371c      	adds	r7, #28
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40010000 	.word	0x40010000
 8002324:	48000400 	.word	0x48000400
 8002328:	48000800 	.word	0x48000800
 800232c:	48000c00 	.word	0x48000c00
 8002330:	48001000 	.word	0x48001000
 8002334:	48001400 	.word	0x48001400
 8002338:	48001800 	.word	0x48001800
 800233c:	40010400 	.word	0x40010400

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800235c:	e002      	b.n	8002364 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800235e:	887a      	ldrh	r2, [r7, #2]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002374:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <HAL_PWREx_GetVoltageRange+0x18>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800237c:	4618      	mov	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40007000 	.word	0x40007000

0800238c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800239a:	d130      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800239c:	4b23      	ldr	r3, [pc, #140]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023a8:	d038      	beq.n	800241c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023aa:	4b20      	ldr	r3, [pc, #128]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023b2:	4a1e      	ldr	r2, [pc, #120]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002430 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2232      	movs	r2, #50	@ 0x32
 80023c0:	fb02 f303 	mul.w	r3, r2, r3
 80023c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002434 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	0c9b      	lsrs	r3, r3, #18
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d0:	e002      	b.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e4:	d102      	bne.n	80023ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1f2      	bne.n	80023d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023ec:	4b0f      	ldr	r3, [pc, #60]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f8:	d110      	bne.n	800241c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e00f      	b.n	800241e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800240a:	d007      	beq.n	800241c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800240c:	4b07      	ldr	r3, [pc, #28]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002414:	4a05      	ldr	r2, [pc, #20]	@ (800242c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002416:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800241a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40007000 	.word	0x40007000
 8002430:	20000000 	.word	0x20000000
 8002434:	431bde83 	.word	0x431bde83

08002438 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b088      	sub	sp, #32
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e3ca      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244a:	4b97      	ldr	r3, [pc, #604]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002454:	4b94      	ldr	r3, [pc, #592]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0303 	and.w	r3, r3, #3
 800245c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0310 	and.w	r3, r3, #16
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 80e4 	beq.w	8002634 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d007      	beq.n	8002482 <HAL_RCC_OscConfig+0x4a>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b0c      	cmp	r3, #12
 8002476:	f040 808b 	bne.w	8002590 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	2b01      	cmp	r3, #1
 800247e:	f040 8087 	bne.w	8002590 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002482:	4b89      	ldr	r3, [pc, #548]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <HAL_RCC_OscConfig+0x62>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e3a2      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d004      	beq.n	80024b4 <HAL_RCC_OscConfig+0x7c>
 80024aa:	4b7f      	ldr	r3, [pc, #508]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b2:	e005      	b.n	80024c0 <HAL_RCC_OscConfig+0x88>
 80024b4:	4b7c      	ldr	r3, [pc, #496]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d223      	bcs.n	800250c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fd87 	bl	8002fdc <RCC_SetFlashLatencyFromMSIRange>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e383      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d8:	4b73      	ldr	r3, [pc, #460]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a72      	ldr	r2, [pc, #456]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024de:	f043 0308 	orr.w	r3, r3, #8
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	496d      	ldr	r1, [pc, #436]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f6:	4b6c      	ldr	r3, [pc, #432]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	021b      	lsls	r3, r3, #8
 8002504:	4968      	ldr	r1, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
 800250a:	e025      	b.n	8002558 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250c:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a65      	ldr	r2, [pc, #404]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002512:	f043 0308 	orr.w	r3, r3, #8
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b63      	ldr	r3, [pc, #396]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4960      	ldr	r1, [pc, #384]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002526:	4313      	orrs	r3, r2
 8002528:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252a:	4b5f      	ldr	r3, [pc, #380]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	495b      	ldr	r1, [pc, #364]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800253a:	4313      	orrs	r3, r2
 800253c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d109      	bne.n	8002558 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	4618      	mov	r0, r3
 800254a:	f000 fd47 	bl	8002fdc <RCC_SetFlashLatencyFromMSIRange>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e343      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002558:	f000 fc4a 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 800255c:	4602      	mov	r2, r0
 800255e:	4b52      	ldr	r3, [pc, #328]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	091b      	lsrs	r3, r3, #4
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	4950      	ldr	r1, [pc, #320]	@ (80026ac <HAL_RCC_OscConfig+0x274>)
 800256a:	5ccb      	ldrb	r3, [r1, r3]
 800256c:	f003 031f 	and.w	r3, r3, #31
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	4a4e      	ldr	r2, [pc, #312]	@ (80026b0 <HAL_RCC_OscConfig+0x278>)
 8002576:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002578:	4b4e      	ldr	r3, [pc, #312]	@ (80026b4 <HAL_RCC_OscConfig+0x27c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fe ff91 	bl	80014a4 <HAL_InitTick>
 8002582:	4603      	mov	r3, r0
 8002584:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d052      	beq.n	8002632 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	e327      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d032      	beq.n	80025fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002598:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025a4:	f7ff fc10 	bl	8001dc8 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ac:	f7ff fc0c 	bl	8001dc8 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e310      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025ca:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a36      	ldr	r2, [pc, #216]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025d0:	f043 0308 	orr.w	r3, r3, #8
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4931      	ldr	r1, [pc, #196]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e8:	4b2f      	ldr	r3, [pc, #188]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	492c      	ldr	r1, [pc, #176]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	604b      	str	r3, [r1, #4]
 80025fc:	e01a      	b.n	8002634 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025fe:	4b2a      	ldr	r3, [pc, #168]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a29      	ldr	r2, [pc, #164]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800260a:	f7ff fbdd 	bl	8001dc8 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002612:	f7ff fbd9 	bl	8001dc8 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e2dd      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002624:	4b20      	ldr	r3, [pc, #128]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f0      	bne.n	8002612 <HAL_RCC_OscConfig+0x1da>
 8002630:	e000      	b.n	8002634 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002632:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d074      	beq.n	800272a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b08      	cmp	r3, #8
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x21a>
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d10e      	bne.n	800266a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	2b03      	cmp	r3, #3
 8002650:	d10b      	bne.n	800266a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002652:	4b15      	ldr	r3, [pc, #84]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d064      	beq.n	8002728 <HAL_RCC_OscConfig+0x2f0>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d160      	bne.n	8002728 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e2ba      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002672:	d106      	bne.n	8002682 <HAL_RCC_OscConfig+0x24a>
 8002674:	4b0c      	ldr	r3, [pc, #48]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a0b      	ldr	r2, [pc, #44]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e026      	b.n	80026d0 <HAL_RCC_OscConfig+0x298>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800268a:	d115      	bne.n	80026b8 <HAL_RCC_OscConfig+0x280>
 800268c:	4b06      	ldr	r3, [pc, #24]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a05      	ldr	r2, [pc, #20]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 8002692:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b03      	ldr	r3, [pc, #12]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a02      	ldr	r2, [pc, #8]	@ (80026a8 <HAL_RCC_OscConfig+0x270>)
 800269e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	e014      	b.n	80026d0 <HAL_RCC_OscConfig+0x298>
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000
 80026ac:	080181e4 	.word	0x080181e4
 80026b0:	20000000 	.word	0x20000000
 80026b4:	20000004 	.word	0x20000004
 80026b8:	4ba0      	ldr	r3, [pc, #640]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a9f      	ldr	r2, [pc, #636]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b9d      	ldr	r3, [pc, #628]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a9c      	ldr	r2, [pc, #624]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff fb76 	bl	8001dc8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fb72 	bl	8001dc8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e276      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f2:	4b92      	ldr	r3, [pc, #584]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x2a8>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff fb62 	bl	8001dc8 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fb5e 	bl	8001dc8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e262      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800271a:	4b88      	ldr	r3, [pc, #544]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x2d0>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d060      	beq.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2b04      	cmp	r3, #4
 800273a:	d005      	beq.n	8002748 <HAL_RCC_OscConfig+0x310>
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d119      	bne.n	8002776 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b02      	cmp	r3, #2
 8002746:	d116      	bne.n	8002776 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002748:	4b7c      	ldr	r3, [pc, #496]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_OscConfig+0x328>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e23f      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002760:	4b76      	ldr	r3, [pc, #472]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	4973      	ldr	r1, [pc, #460]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002774:	e040      	b.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d023      	beq.n	80027c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800277e:	4b6f      	ldr	r3, [pc, #444]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a6e      	ldr	r2, [pc, #440]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278a:	f7ff fb1d 	bl	8001dc8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002792:	f7ff fb19 	bl	8001dc8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e21d      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a4:	4b65      	ldr	r3, [pc, #404]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b0:	4b62      	ldr	r3, [pc, #392]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	061b      	lsls	r3, r3, #24
 80027be:	495f      	ldr	r1, [pc, #380]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
 80027c4:	e018      	b.n	80027f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c6:	4b5d      	ldr	r3, [pc, #372]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a5c      	ldr	r2, [pc, #368]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80027cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d2:	f7ff faf9 	bl	8001dc8 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027da:	f7ff faf5 	bl	8001dc8 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e1f9      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027ec:	4b53      	ldr	r3, [pc, #332]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d1f0      	bne.n	80027da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b00      	cmp	r3, #0
 8002802:	d03c      	beq.n	800287e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01c      	beq.n	8002846 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800280c:	4b4b      	ldr	r3, [pc, #300]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800280e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002812:	4a4a      	ldr	r2, [pc, #296]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002814:	f043 0301 	orr.w	r3, r3, #1
 8002818:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281c:	f7ff fad4 	bl	8001dc8 <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002824:	f7ff fad0 	bl	8001dc8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e1d4      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002836:	4b41      	ldr	r3, [pc, #260]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ef      	beq.n	8002824 <HAL_RCC_OscConfig+0x3ec>
 8002844:	e01b      	b.n	800287e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002846:	4b3d      	ldr	r3, [pc, #244]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002848:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800284c:	4a3b      	ldr	r2, [pc, #236]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002856:	f7ff fab7 	bl	8001dc8 <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285e:	f7ff fab3 	bl	8001dc8 <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e1b7      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002870:	4b32      	ldr	r3, [pc, #200]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002872:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ef      	bne.n	800285e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 80a6 	beq.w	80029d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288c:	2300      	movs	r3, #0
 800288e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002890:	4b2a      	ldr	r3, [pc, #168]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002894:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289c:	4b27      	ldr	r3, [pc, #156]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	4a26      	ldr	r2, [pc, #152]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80028a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80028a8:	4b24      	ldr	r3, [pc, #144]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b4:	2301      	movs	r3, #1
 80028b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b8:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <HAL_RCC_OscConfig+0x508>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d118      	bne.n	80028f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <HAL_RCC_OscConfig+0x508>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002940 <HAL_RCC_OscConfig+0x508>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d0:	f7ff fa7a 	bl	8001dc8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d8:	f7ff fa76 	bl	8001dc8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e17a      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ea:	4b15      	ldr	r3, [pc, #84]	@ (8002940 <HAL_RCC_OscConfig+0x508>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0f0      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <HAL_RCC_OscConfig+0x4d8>
 80028fe:	4b0f      	ldr	r3, [pc, #60]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002900:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002904:	4a0d      	ldr	r2, [pc, #52]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800290e:	e029      	b.n	8002964 <HAL_RCC_OscConfig+0x52c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b05      	cmp	r3, #5
 8002916:	d115      	bne.n	8002944 <HAL_RCC_OscConfig+0x50c>
 8002918:	4b08      	ldr	r3, [pc, #32]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800291a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291e:	4a07      	ldr	r2, [pc, #28]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002920:	f043 0304 	orr.w	r3, r3, #4
 8002924:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800292e:	4a03      	ldr	r2, [pc, #12]	@ (800293c <HAL_RCC_OscConfig+0x504>)
 8002930:	f043 0301 	orr.w	r3, r3, #1
 8002934:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002938:	e014      	b.n	8002964 <HAL_RCC_OscConfig+0x52c>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
 8002944:	4b9c      	ldr	r3, [pc, #624]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800294a:	4a9b      	ldr	r2, [pc, #620]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 800294c:	f023 0301 	bic.w	r3, r3, #1
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002954:	4b98      	ldr	r3, [pc, #608]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295a:	4a97      	ldr	r2, [pc, #604]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 800295c:	f023 0304 	bic.w	r3, r3, #4
 8002960:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d016      	beq.n	800299a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7ff fa2c 	bl	8001dc8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7ff fa28 	bl	8001dc8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e12a      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	4b8b      	ldr	r3, [pc, #556]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0ed      	beq.n	8002974 <HAL_RCC_OscConfig+0x53c>
 8002998:	e015      	b.n	80029c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299a:	f7ff fa15 	bl	8001dc8 <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a2:	f7ff fa11 	bl	8001dc8 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e113      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b8:	4b7f      	ldr	r3, [pc, #508]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1ed      	bne.n	80029a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d105      	bne.n	80029d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4b7a      	ldr	r3, [pc, #488]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 80029ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d0:	4a79      	ldr	r2, [pc, #484]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80fe 	beq.w	8002bde <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	f040 80d0 	bne.w	8002b8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029ec:	4b72      	ldr	r3, [pc, #456]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	f003 0203 	and.w	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d130      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d127      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d11f      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a2c:	2a07      	cmp	r2, #7
 8002a2e:	bf14      	ite	ne
 8002a30:	2201      	movne	r2, #1
 8002a32:	2200      	moveq	r2, #0
 8002a34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d113      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a44:	085b      	lsrs	r3, r3, #1
 8002a46:	3b01      	subs	r3, #1
 8002a48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d06e      	beq.n	8002b40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d069      	beq.n	8002b3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a68:	4b53      	ldr	r3, [pc, #332]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a74:	4b50      	ldr	r3, [pc, #320]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0ad      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a84:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a4b      	ldr	r2, [pc, #300]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002a8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a90:	f7ff f99a 	bl	8001dc8 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a98:	f7ff f996 	bl	8001dc8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e09a      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002aaa:	4b43      	ldr	r3, [pc, #268]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ab6:	4b40      	ldr	r3, [pc, #256]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	4b40      	ldr	r3, [pc, #256]	@ (8002bbc <HAL_RCC_OscConfig+0x784>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ac6:	3a01      	subs	r2, #1
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	4311      	orrs	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ad0:	0212      	lsls	r2, r2, #8
 8002ad2:	4311      	orrs	r1, r2
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ad8:	0852      	lsrs	r2, r2, #1
 8002ada:	3a01      	subs	r2, #1
 8002adc:	0552      	lsls	r2, r2, #21
 8002ade:	4311      	orrs	r1, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ae4:	0852      	lsrs	r2, r2, #1
 8002ae6:	3a01      	subs	r2, #1
 8002ae8:	0652      	lsls	r2, r2, #25
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002af0:	0912      	lsrs	r2, r2, #4
 8002af2:	0452      	lsls	r2, r2, #17
 8002af4:	430a      	orrs	r2, r1
 8002af6:	4930      	ldr	r1, [pc, #192]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002afc:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b08:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b14:	f7ff f958 	bl	8001dc8 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7ff f954 	bl	8001dc8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e058      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2e:	4b22      	ldr	r3, [pc, #136]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3a:	e050      	b.n	8002bde <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e04f      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b40:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d148      	bne.n	8002bde <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a19      	ldr	r2, [pc, #100]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b58:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a16      	ldr	r2, [pc, #88]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b64:	f7ff f930 	bl	8001dc8 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7ff f92c 	bl	8001dc8 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e030      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x734>
 8002b8a:	e028      	b.n	8002bde <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b0c      	cmp	r3, #12
 8002b90:	d023      	beq.n	8002bda <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <HAL_RCC_OscConfig+0x780>)
 8002b98:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9e:	f7ff f913 	bl	8001dc8 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ba4:	e00c      	b.n	8002bc0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7ff f90f 	bl	8001dc8 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d905      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e013      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bc0:	4b09      	ldr	r3, [pc, #36]	@ (8002be8 <HAL_RCC_OscConfig+0x7b0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ec      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002bcc:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <HAL_RCC_OscConfig+0x7b0>)
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	4905      	ldr	r1, [pc, #20]	@ (8002be8 <HAL_RCC_OscConfig+0x7b0>)
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_RCC_OscConfig+0x7b4>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	60cb      	str	r3, [r1, #12]
 8002bd8:	e001      	b.n	8002bde <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bde:	2300      	movs	r3, #0
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3720      	adds	r7, #32
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	40021000 	.word	0x40021000
 8002bec:	feeefffc 	.word	0xfeeefffc

08002bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e0e7      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c04:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d910      	bls.n	8002c34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c12:	4b72      	ldr	r3, [pc, #456]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f023 0207 	bic.w	r2, r3, #7
 8002c1a:	4970      	ldr	r1, [pc, #448]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c22:	4b6e      	ldr	r3, [pc, #440]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e0cf      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d010      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4b66      	ldr	r3, [pc, #408]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d908      	bls.n	8002c62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b63      	ldr	r3, [pc, #396]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	4960      	ldr	r1, [pc, #384]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d04c      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b03      	cmp	r3, #3
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	4b5a      	ldr	r3, [pc, #360]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d121      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e0a6      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c8e:	4b54      	ldr	r3, [pc, #336]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d115      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e09a      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d107      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ca6:	4b4e      	ldr	r3, [pc, #312]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d109      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e08e      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e086      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cc6:	4b46      	ldr	r3, [pc, #280]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f023 0203 	bic.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	4943      	ldr	r1, [pc, #268]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7ff f876 	bl	8001dc8 <HAL_GetTick>
 8002cdc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	e00a      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce0:	f7ff f872 	bl	8001dc8 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e06e      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 020c 	and.w	r2, r3, #12
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d1eb      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d010      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	4b31      	ldr	r3, [pc, #196]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d208      	bcs.n	8002d36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d24:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	492b      	ldr	r1, [pc, #172]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d36:	4b29      	ldr	r3, [pc, #164]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d210      	bcs.n	8002d66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f023 0207 	bic.w	r2, r3, #7
 8002d4c:	4923      	ldr	r1, [pc, #140]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <HAL_RCC_ClockConfig+0x1ec>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d001      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e036      	b.n	8002dd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d008      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d72:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	4918      	ldr	r1, [pc, #96]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0308 	and.w	r3, r3, #8
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d90:	4b13      	ldr	r3, [pc, #76]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4910      	ldr	r1, [pc, #64]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002da4:	f000 f824 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 8002da8:	4602      	mov	r2, r0
 8002daa:	4b0d      	ldr	r3, [pc, #52]	@ (8002de0 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	091b      	lsrs	r3, r3, #4
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	490b      	ldr	r1, [pc, #44]	@ (8002de4 <HAL_RCC_ClockConfig+0x1f4>)
 8002db6:	5ccb      	ldrb	r3, [r1, r3]
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002dc0:	4a09      	ldr	r2, [pc, #36]	@ (8002de8 <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002dc4:	4b09      	ldr	r3, [pc, #36]	@ (8002dec <HAL_RCC_ClockConfig+0x1fc>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7fe fb6b 	bl	80014a4 <HAL_InitTick>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dd2:	7afb      	ldrb	r3, [r7, #11]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40021000 	.word	0x40021000
 8002de4:	080181e4 	.word	0x080181e4
 8002de8:	20000000 	.word	0x20000000
 8002dec:	20000004 	.word	0x20000004

08002df0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	@ 0x24
 8002df4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 030c 	and.w	r3, r3, #12
 8002e06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e08:	4b3b      	ldr	r3, [pc, #236]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f003 0303 	and.w	r3, r3, #3
 8002e10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d005      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x34>
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b0c      	cmp	r3, #12
 8002e1c:	d121      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d11e      	bne.n	8002e62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e24:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e30:	4b31      	ldr	r3, [pc, #196]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	61fb      	str	r3, [r7, #28]
 8002e3e:	e005      	b.n	8002e4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8002efc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10d      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d102      	bne.n	8002e6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e68:	4b25      	ldr	r3, [pc, #148]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	e004      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d101      	bne.n	8002e78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e74:	4b23      	ldr	r3, [pc, #140]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d134      	bne.n	8002ee8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d003      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0xac>
 8002e94:	e005      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e96:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e98:	617b      	str	r3, [r7, #20]
      break;
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e9e:	617b      	str	r3, [r7, #20]
      break;
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	617b      	str	r3, [r7, #20]
      break;
 8002ea6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	0a1b      	lsrs	r3, r3, #8
 8002ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	fb03 f202 	mul.w	r2, r3, r2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ecc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ece:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	0e5b      	lsrs	r3, r3, #25
 8002ed4:	f003 0303 	and.w	r3, r3, #3
 8002ed8:	3301      	adds	r3, #1
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ee8:	69bb      	ldr	r3, [r7, #24]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080181fc 	.word	0x080181fc
 8002f00:	00f42400 	.word	0x00f42400
 8002f04:	007a1200 	.word	0x007a1200

08002f08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	20000000 	.word	0x20000000

08002f20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f24:	f7ff fff0 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	4904      	ldr	r1, [pc, #16]	@ (8002f48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40021000 	.word	0x40021000
 8002f48:	080181f4 	.word	0x080181f4

08002f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f50:	f7ff ffda 	bl	8002f08 <HAL_RCC_GetHCLKFreq>
 8002f54:	4602      	mov	r2, r0
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	0adb      	lsrs	r3, r3, #11
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	4904      	ldr	r1, [pc, #16]	@ (8002f74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f62:	5ccb      	ldrb	r3, [r1, r3]
 8002f64:	f003 031f 	and.w	r3, r3, #31
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40021000 	.word	0x40021000
 8002f74:	080181f4 	.word	0x080181f4

08002f78 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	220f      	movs	r2, #15
 8002f86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002f88:	4b12      	ldr	r3, [pc, #72]	@ (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0203 	and.w	r2, r3, #3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002f94:	4b0f      	ldr	r3, [pc, #60]	@ (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002fac:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	08db      	lsrs	r3, r3, #3
 8002fb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fba:	4b07      	ldr	r3, [pc, #28]	@ (8002fd8 <HAL_RCC_GetClockConfig+0x60>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0207 	and.w	r2, r3, #7
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	601a      	str	r2, [r3, #0]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40022000 	.word	0x40022000

08002fdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002fe8:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ff4:	f7ff f9bc 	bl	8002370 <HAL_PWREx_GetVoltageRange>
 8002ff8:	6178      	str	r0, [r7, #20]
 8002ffa:	e014      	b.n	8003026 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ffc:	4b25      	ldr	r3, [pc, #148]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003000:	4a24      	ldr	r2, [pc, #144]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003006:	6593      	str	r3, [r2, #88]	@ 0x58
 8003008:	4b22      	ldr	r3, [pc, #136]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003014:	f7ff f9ac 	bl	8002370 <HAL_PWREx_GetVoltageRange>
 8003018:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	4a1d      	ldr	r2, [pc, #116]	@ (8003094 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003024:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800302c:	d10b      	bne.n	8003046 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b80      	cmp	r3, #128	@ 0x80
 8003032:	d919      	bls.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2ba0      	cmp	r3, #160	@ 0xa0
 8003038:	d902      	bls.n	8003040 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800303a:	2302      	movs	r3, #2
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	e013      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003040:	2301      	movs	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	e010      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b80      	cmp	r3, #128	@ 0x80
 800304a:	d902      	bls.n	8003052 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800304c:	2303      	movs	r3, #3
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	e00a      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b80      	cmp	r3, #128	@ 0x80
 8003056:	d102      	bne.n	800305e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003058:	2302      	movs	r3, #2
 800305a:	613b      	str	r3, [r7, #16]
 800305c:	e004      	b.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b70      	cmp	r3, #112	@ 0x70
 8003062:	d101      	bne.n	8003068 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003064:	2301      	movs	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 0207 	bic.w	r2, r3, #7
 8003070:	4909      	ldr	r1, [pc, #36]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003078:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	429a      	cmp	r2, r3
 8003084:	d001      	beq.n	800308a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e000      	b.n	800308c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	40021000 	.word	0x40021000
 8003098:	40022000 	.word	0x40022000

0800309c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030a4:	2300      	movs	r3, #0
 80030a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030a8:	2300      	movs	r3, #0
 80030aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d041      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030c0:	d02a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80030c2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030c6:	d824      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030cc:	d008      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80030ce:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030d2:	d81e      	bhi.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80030d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030dc:	d010      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030de:	e018      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e0:	4b86      	ldr	r3, [pc, #536]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a85      	ldr	r2, [pc, #532]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030ec:	e015      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fabb 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030fe:	e00c      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3320      	adds	r3, #32
 8003104:	2100      	movs	r1, #0
 8003106:	4618      	mov	r0, r3
 8003108:	f000 fba6 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003110:	e003      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	74fb      	strb	r3, [r7, #19]
      break;
 8003116:	e000      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003118:	bf00      	nop
    }

    if(ret == HAL_OK)
 800311a:	7cfb      	ldrb	r3, [r7, #19]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10b      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003120:	4b76      	ldr	r3, [pc, #472]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800312e:	4973      	ldr	r1, [pc, #460]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003136:	e001      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d041      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800314c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003150:	d02a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003152:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003156:	d824      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003158:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800315c:	d008      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800315e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003162:	d81e      	bhi.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800316c:	d010      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800316e:	e018      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003170:	4b62      	ldr	r3, [pc, #392]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	4a61      	ldr	r2, [pc, #388]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800317c:	e015      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	3304      	adds	r3, #4
 8003182:	2100      	movs	r1, #0
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fa73 	bl	8003670 <RCCEx_PLLSAI1_Config>
 800318a:	4603      	mov	r3, r0
 800318c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800318e:	e00c      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3320      	adds	r3, #32
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f000 fb5e 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031a0:	e003      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	74fb      	strb	r3, [r7, #19]
      break;
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80031a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031aa:	7cfb      	ldrb	r3, [r7, #19]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10b      	bne.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80031b0:	4b52      	ldr	r3, [pc, #328]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031be:	494f      	ldr	r1, [pc, #316]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031c6:	e001      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c8:	7cfb      	ldrb	r3, [r7, #19]
 80031ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80a0 	beq.w	800331a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031da:	2300      	movs	r3, #0
 80031dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031de:	4b47      	ldr	r3, [pc, #284]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80031ea:	2301      	movs	r3, #1
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80031ee:	2300      	movs	r3, #0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f4:	4b41      	ldr	r3, [pc, #260]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	4a40      	ldr	r2, [pc, #256]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003200:	4b3e      	ldr	r3, [pc, #248]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800320c:	2301      	movs	r3, #1
 800320e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003210:	4b3b      	ldr	r3, [pc, #236]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a3a      	ldr	r2, [pc, #232]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800321a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800321c:	f7fe fdd4 	bl	8001dc8 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003222:	e009      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003224:	f7fe fdd0 	bl	8001dc8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d902      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	74fb      	strb	r3, [r7, #19]
        break;
 8003236:	e005      	b.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003238:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ef      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003244:	7cfb      	ldrb	r3, [r7, #19]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d15c      	bne.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800324a:	4b2c      	ldr	r3, [pc, #176]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	429a      	cmp	r2, r3
 8003266:	d019      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003268:	4b24      	ldr	r3, [pc, #144]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800326e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003274:	4b21      	ldr	r3, [pc, #132]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800327a:	4a20      	ldr	r2, [pc, #128]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003284:	4b1d      	ldr	r3, [pc, #116]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800328a:	4a1c      	ldr	r2, [pc, #112]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003294:	4a19      	ldr	r2, [pc, #100]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a6:	f7fe fd8f 	bl	8001dc8 <HAL_GetTick>
 80032aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ac:	e00b      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ae:	f7fe fd8b 	bl	8001dc8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d902      	bls.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	74fb      	strb	r3, [r7, #19]
            break;
 80032c4:	e006      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032c6:	4b0d      	ldr	r3, [pc, #52]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ec      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80032d4:	7cfb      	ldrb	r3, [r7, #19]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ea:	4904      	ldr	r1, [pc, #16]	@ (80032fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80032f2:	e009      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	74bb      	strb	r3, [r7, #18]
 80032f8:	e006      	b.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003304:	7cfb      	ldrb	r3, [r7, #19]
 8003306:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003308:	7c7b      	ldrb	r3, [r7, #17]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330e:	4b9e      	ldr	r3, [pc, #632]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003312:	4a9d      	ldr	r2, [pc, #628]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003318:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003326:	4b98      	ldr	r3, [pc, #608]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	f023 0203 	bic.w	r2, r3, #3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003334:	4994      	ldr	r1, [pc, #592]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003348:	4b8f      	ldr	r3, [pc, #572]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f023 020c 	bic.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003356:	498c      	ldr	r1, [pc, #560]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800336a:	4b87      	ldr	r3, [pc, #540]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003378:	4983      	ldr	r1, [pc, #524]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800338c:	4b7e      	ldr	r3, [pc, #504]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339a:	497b      	ldr	r1, [pc, #492]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0310 	and.w	r3, r3, #16
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033ae:	4b76      	ldr	r3, [pc, #472]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	4972      	ldr	r1, [pc, #456]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033d0:	4b6d      	ldr	r3, [pc, #436]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033de:	496a      	ldr	r1, [pc, #424]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033f2:	4b65      	ldr	r3, [pc, #404]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003400:	4961      	ldr	r1, [pc, #388]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003414:	4b5c      	ldr	r3, [pc, #368]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003422:	4959      	ldr	r1, [pc, #356]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003436:	4b54      	ldr	r3, [pc, #336]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	4950      	ldr	r1, [pc, #320]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003458:	4b4b      	ldr	r3, [pc, #300]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800345e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003466:	4948      	ldr	r1, [pc, #288]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347a:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003488:	493f      	ldr	r1, [pc, #252]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d028      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800349c:	4b3a      	ldr	r3, [pc, #232]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034aa:	4937      	ldr	r1, [pc, #220]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ba:	d106      	bne.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034bc:	4b32      	ldr	r3, [pc, #200]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	4a31      	ldr	r2, [pc, #196]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034c6:	60d3      	str	r3, [r2, #12]
 80034c8:	e011      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034d2:	d10c      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	2101      	movs	r1, #1
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f8c8 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d028      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034fa:	4b23      	ldr	r3, [pc, #140]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003500:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003508:	491f      	ldr	r1, [pc, #124]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003518:	d106      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800351a:	4b1b      	ldr	r3, [pc, #108]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	4a1a      	ldr	r2, [pc, #104]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003524:	60d3      	str	r3, [r2, #12]
 8003526:	e011      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003530:	d10c      	bne.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3304      	adds	r3, #4
 8003536:	2101      	movs	r1, #1
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f899 	bl	8003670 <RCCEx_PLLSAI1_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003542:	7cfb      	ldrb	r3, [r7, #19]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d02b      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003558:	4b0b      	ldr	r3, [pc, #44]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003566:	4908      	ldr	r1, [pc, #32]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003572:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003576:	d109      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003578:	4b03      	ldr	r3, [pc, #12]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	4a02      	ldr	r2, [pc, #8]	@ (8003588 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003582:	60d3      	str	r3, [r2, #12]
 8003584:	e014      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003586:	bf00      	nop
 8003588:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003590:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003594:	d10c      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	2101      	movs	r1, #1
 800359c:	4618      	mov	r0, r3
 800359e:	f000 f867 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035a6:	7cfb      	ldrb	r3, [r7, #19]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80035ac:	7cfb      	ldrb	r3, [r7, #19]
 80035ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d02f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035bc:	4b2b      	ldr	r3, [pc, #172]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035ca:	4928      	ldr	r1, [pc, #160]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80035da:	d10d      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	2102      	movs	r1, #2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f844 	bl	8003670 <RCCEx_PLLSAI1_Config>
 80035e8:	4603      	mov	r3, r0
 80035ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d014      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80035f2:	7cfb      	ldrb	r3, [r7, #19]
 80035f4:	74bb      	strb	r3, [r7, #18]
 80035f6:	e011      	b.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003600:	d10c      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3320      	adds	r3, #32
 8003606:	2102      	movs	r1, #2
 8003608:	4618      	mov	r0, r3
 800360a:	f000 f925 	bl	8003858 <RCCEx_PLLSAI2_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003612:	7cfb      	ldrb	r3, [r7, #19]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003618:	7cfb      	ldrb	r3, [r7, #19]
 800361a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003628:	4b10      	ldr	r3, [pc, #64]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800362a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003636:	490d      	ldr	r1, [pc, #52]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003638:	4313      	orrs	r3, r2
 800363a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00b      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364a:	4b08      	ldr	r3, [pc, #32]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800364c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003650:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800365a:	4904      	ldr	r1, [pc, #16]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003662:	7cbb      	ldrb	r3, [r7, #18]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40021000 	.word	0x40021000

08003670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800367e:	4b75      	ldr	r3, [pc, #468]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d018      	beq.n	80036bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800368a:	4b72      	ldr	r3, [pc, #456]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0203 	and.w	r2, r3, #3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d10d      	bne.n	80036b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
       ||
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036a2:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	091b      	lsrs	r3, r3, #4
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	1c5a      	adds	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
       ||
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d047      	beq.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e044      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d018      	beq.n	80036f6 <RCCEx_PLLSAI1_Config+0x86>
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d825      	bhi.n	8003714 <RCCEx_PLLSAI1_Config+0xa4>
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d002      	beq.n	80036d2 <RCCEx_PLLSAI1_Config+0x62>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d009      	beq.n	80036e4 <RCCEx_PLLSAI1_Config+0x74>
 80036d0:	e020      	b.n	8003714 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036d2:	4b60      	ldr	r3, [pc, #384]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e2:	e01a      	b.n	800371a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036e4:	4b5b      	ldr	r3, [pc, #364]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d116      	bne.n	800371e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036f4:	e013      	b.n	800371e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036f6:	4b57      	ldr	r3, [pc, #348]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003702:	4b54      	ldr	r3, [pc, #336]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d109      	bne.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003712:	e006      	b.n	8003722 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e004      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371a:	bf00      	nop
 800371c:	e002      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003722:	bf00      	nop
    }

    if(status == HAL_OK)
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10d      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800372a:	4b4a      	ldr	r3, [pc, #296]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	3b01      	subs	r3, #1
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	430b      	orrs	r3, r1
 8003740:	4944      	ldr	r1, [pc, #272]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	4313      	orrs	r3, r2
 8003744:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003746:	7bfb      	ldrb	r3, [r7, #15]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d17d      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800374c:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a40      	ldr	r2, [pc, #256]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003752:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003756:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003758:	f7fe fb36 	bl	8001dc8 <HAL_GetTick>
 800375c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800375e:	e009      	b.n	8003774 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003760:	f7fe fb32 	bl	8001dc8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d902      	bls.n	8003774 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	73fb      	strb	r3, [r7, #15]
        break;
 8003772:	e005      	b.n	8003780 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003774:	4b37      	ldr	r3, [pc, #220]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ef      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d160      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d111      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800378c:	4b31      	ldr	r3, [pc, #196]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003794:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	6892      	ldr	r2, [r2, #8]
 800379c:	0211      	lsls	r1, r2, #8
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68d2      	ldr	r2, [r2, #12]
 80037a2:	0912      	lsrs	r2, r2, #4
 80037a4:	0452      	lsls	r2, r2, #17
 80037a6:	430a      	orrs	r2, r1
 80037a8:	492a      	ldr	r1, [pc, #168]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037aa:	4313      	orrs	r3, r2
 80037ac:	610b      	str	r3, [r1, #16]
 80037ae:	e027      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d112      	bne.n	80037dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b6:	4b27      	ldr	r3, [pc, #156]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80037be:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6892      	ldr	r2, [r2, #8]
 80037c6:	0211      	lsls	r1, r2, #8
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6912      	ldr	r2, [r2, #16]
 80037cc:	0852      	lsrs	r2, r2, #1
 80037ce:	3a01      	subs	r2, #1
 80037d0:	0552      	lsls	r2, r2, #21
 80037d2:	430a      	orrs	r2, r1
 80037d4:	491f      	ldr	r1, [pc, #124]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	610b      	str	r3, [r1, #16]
 80037da:	e011      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6892      	ldr	r2, [r2, #8]
 80037ec:	0211      	lsls	r1, r2, #8
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6952      	ldr	r2, [r2, #20]
 80037f2:	0852      	lsrs	r2, r2, #1
 80037f4:	3a01      	subs	r2, #1
 80037f6:	0652      	lsls	r2, r2, #25
 80037f8:	430a      	orrs	r2, r1
 80037fa:	4916      	ldr	r1, [pc, #88]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003800:	4b14      	ldr	r3, [pc, #80]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a13      	ldr	r2, [pc, #76]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800380a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fadc 	bl	8001dc8 <HAL_GetTick>
 8003810:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003812:	e009      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003814:	f7fe fad8 	bl	8001dc8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d902      	bls.n	8003828 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	73fb      	strb	r3, [r7, #15]
          break;
 8003826:	e005      	b.n	8003834 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003828:	4b0a      	ldr	r3, [pc, #40]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ef      	beq.n	8003814 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800383a:	4b06      	ldr	r3, [pc, #24]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4904      	ldr	r1, [pc, #16]	@ (8003854 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	4313      	orrs	r3, r2
 8003846:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003866:	4b6a      	ldr	r3, [pc, #424]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003872:	4b67      	ldr	r3, [pc, #412]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0203 	and.w	r2, r3, #3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	429a      	cmp	r2, r3
 8003880:	d10d      	bne.n	800389e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
       ||
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800388a:	4b61      	ldr	r3, [pc, #388]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	091b      	lsrs	r3, r3, #4
 8003890:	f003 0307 	and.w	r3, r3, #7
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
       ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d047      	beq.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e044      	b.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d018      	beq.n	80038de <RCCEx_PLLSAI2_Config+0x86>
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	d825      	bhi.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d002      	beq.n	80038ba <RCCEx_PLLSAI2_Config+0x62>
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d009      	beq.n	80038cc <RCCEx_PLLSAI2_Config+0x74>
 80038b8:	e020      	b.n	80038fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038ba:	4b55      	ldr	r3, [pc, #340]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d11d      	bne.n	8003902 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ca:	e01a      	b.n	8003902 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038cc:	4b50      	ldr	r3, [pc, #320]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d116      	bne.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038dc:	e013      	b.n	8003906 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038de:	4b4c      	ldr	r3, [pc, #304]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ea:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d109      	bne.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038fa:	e006      	b.n	800390a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e004      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003902:	bf00      	nop
 8003904:	e002      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003906:	bf00      	nop
 8003908:	e000      	b.n	800390c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800390a:	bf00      	nop
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10d      	bne.n	800392e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003912:	4b3f      	ldr	r3, [pc, #252]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6819      	ldr	r1, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	3b01      	subs	r3, #1
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	430b      	orrs	r3, r1
 8003928:	4939      	ldr	r1, [pc, #228]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d167      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003934:	4b36      	ldr	r3, [pc, #216]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a35      	ldr	r2, [pc, #212]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003940:	f7fe fa42 	bl	8001dc8 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003948:	f7fe fa3e 	bl	8001dc8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
        break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800395c:	4b2c      	ldr	r3, [pc, #176]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1ef      	bne.n	8003948 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d14a      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d111      	bne.n	8003998 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003974:	4b26      	ldr	r3, [pc, #152]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003976:	695b      	ldr	r3, [r3, #20]
 8003978:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800397c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	0211      	lsls	r1, r2, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	0912      	lsrs	r2, r2, #4
 800398c:	0452      	lsls	r2, r2, #17
 800398e:	430a      	orrs	r2, r1
 8003990:	491f      	ldr	r1, [pc, #124]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003992:	4313      	orrs	r3, r2
 8003994:	614b      	str	r3, [r1, #20]
 8003996:	e011      	b.n	80039bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80039a0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6892      	ldr	r2, [r2, #8]
 80039a8:	0211      	lsls	r1, r2, #8
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6912      	ldr	r2, [r2, #16]
 80039ae:	0852      	lsrs	r2, r2, #1
 80039b0:	3a01      	subs	r2, #1
 80039b2:	0652      	lsls	r2, r2, #25
 80039b4:	430a      	orrs	r2, r1
 80039b6:	4916      	ldr	r1, [pc, #88]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a13      	ldr	r2, [pc, #76]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fe f9fe 	bl	8001dc8 <HAL_GetTick>
 80039cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ce:	e009      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d0:	f7fe f9fa 	bl	8001dc8 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d902      	bls.n	80039e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	73fb      	strb	r3, [r7, #15]
          break;
 80039e2:	e005      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ef      	beq.n	80039d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4904      	ldr	r1, [pc, #16]	@ (8003a10 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3710      	adds	r7, #16
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e095      	b.n	8003b52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d108      	bne.n	8003a40 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a36:	d009      	beq.n	8003a4c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	61da      	str	r2, [r3, #28]
 8003a3e:	e005      	b.n	8003a4c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fc5e 	bl	8001328 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a82:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a8c:	d902      	bls.n	8003a94 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e002      	b.n	8003a9a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a98:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003aa2:	d007      	beq.n	8003ab4 <HAL_SPI_Init+0xa0>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003aac:	d002      	beq.n	8003ab4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	ea42 0103 	orr.w	r1, r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003afe:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	f003 0204 	and.w	r2, r3, #4
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	f003 0310 	and.w	r3, r3, #16
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b22:	f003 0308 	and.w	r3, r3, #8
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003b30:	ea42 0103 	orr.w	r1, r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3710      	adds	r7, #16
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b088      	sub	sp, #32
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b6a:	f7fe f92d 	bl	8001dc8 <HAL_GetTick>
 8003b6e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003b70:	88fb      	ldrh	r3, [r7, #6]
 8003b72:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d001      	beq.n	8003b84 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	e15c      	b.n	8003e3e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_Transmit+0x36>
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e154      	b.n	8003e3e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SPI_Transmit+0x48>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e14d      	b.n	8003e3e <HAL_SPI_Transmit+0x2e4>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2203      	movs	r2, #3
 8003bae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	88fa      	ldrh	r2, [r7, #6]
 8003bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bf4:	d10f      	bne.n	8003c16 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003c14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c20:	2b40      	cmp	r3, #64	@ 0x40
 8003c22:	d007      	beq.n	8003c34 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c3c:	d952      	bls.n	8003ce4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <HAL_SPI_Transmit+0xf2>
 8003c46:	8b7b      	ldrh	r3, [r7, #26]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d145      	bne.n	8003cd8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c50:	881a      	ldrh	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c5c:	1c9a      	adds	r2, r3, #2
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c70:	e032      	b.n	8003cd8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d112      	bne.n	8003ca6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c84:	881a      	ldrh	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c90:	1c9a      	adds	r2, r3, #2
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b29a      	uxth	r2, r3
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ca4:	e018      	b.n	8003cd8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ca6:	f7fe f88f 	bl	8001dc8 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d803      	bhi.n	8003cbe <HAL_SPI_Transmit+0x164>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d102      	bne.n	8003cc4 <HAL_SPI_Transmit+0x16a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0b2      	b.n	8003e3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1c7      	bne.n	8003c72 <HAL_SPI_Transmit+0x118>
 8003ce2:	e083      	b.n	8003dec <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <HAL_SPI_Transmit+0x198>
 8003cec:	8b7b      	ldrh	r3, [r7, #26]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d177      	bne.n	8003de2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d912      	bls.n	8003d22 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d00:	881a      	ldrh	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0c:	1c9a      	adds	r2, r3, #2
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	3b02      	subs	r3, #2
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d20:	e05f      	b.n	8003de2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	330c      	adds	r3, #12
 8003d2c:	7812      	ldrb	r2, [r2, #0]
 8003d2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d48:	e04b      	b.n	8003de2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d12b      	bne.n	8003db0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d912      	bls.n	8003d88 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b02      	subs	r3, #2
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d86:	e02c      	b.n	8003de2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	7812      	ldrb	r2, [r2, #0]
 8003d94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dae:	e018      	b.n	8003de2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003db0:	f7fe f80a 	bl	8001dc8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d803      	bhi.n	8003dc8 <HAL_SPI_Transmit+0x26e>
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc6:	d102      	bne.n	8003dce <HAL_SPI_Transmit+0x274>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e02d      	b.n	8003e3e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ae      	bne.n	8003d4a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003dec:	69fa      	ldr	r2, [r7, #28]
 8003dee:	6839      	ldr	r1, [r7, #0]
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fcf5 	bl	80047e0 <SPI_EndRxTxTransaction>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2220      	movs	r2, #32
 8003e00:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10a      	bne.n	8003e20 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	617b      	str	r3, [r7, #20]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	617b      	str	r3, [r7, #20]
 8003e1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b088      	sub	sp, #32
 8003e4a:	af02      	add	r7, sp, #8
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	4613      	mov	r3, r2
 8003e54:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d001      	beq.n	8003e66 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
 8003e64:	e123      	b.n	80040ae <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e6e:	d112      	bne.n	8003e96 <HAL_SPI_Receive+0x50>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d10e      	bne.n	8003e96 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2204      	movs	r2, #4
 8003e7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e80:	88fa      	ldrh	r2, [r7, #6]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	68b9      	ldr	r1, [r7, #8]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 f912 	bl	80040b6 <HAL_SPI_TransmitReceive>
 8003e92:	4603      	mov	r3, r0
 8003e94:	e10b      	b.n	80040ae <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e96:	f7fd ff97 	bl	8001dc8 <HAL_GetTick>
 8003e9a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_SPI_Receive+0x62>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e100      	b.n	80040ae <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d101      	bne.n	8003eba <HAL_SPI_Receive+0x74>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	e0f9      	b.n	80040ae <HAL_SPI_Receive+0x268>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	88fa      	ldrh	r2, [r7, #6]
 8003eda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	88fa      	ldrh	r2, [r7, #6]
 8003ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f0c:	d908      	bls.n	8003f20 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f1c:	605a      	str	r2, [r3, #4]
 8003f1e:	e007      	b.n	8003f30 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003f2e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f38:	d10f      	bne.n	8003f5a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f58:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d007      	beq.n	8003f78 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f76:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f80:	d875      	bhi.n	800406e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003f82:	e037      	b.n	8003ff4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d117      	bne.n	8003fc2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f103 020c 	add.w	r2, r3, #12
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f9e:	7812      	ldrb	r2, [r2, #0]
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003fc0:	e018      	b.n	8003ff4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc2:	f7fd ff01 	bl	8001dc8 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d803      	bhi.n	8003fda <HAL_SPI_Receive+0x194>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d102      	bne.n	8003fe0 <HAL_SPI_Receive+0x19a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d109      	bne.n	8003ff4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e05c      	b.n	80040ae <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1c1      	bne.n	8003f84 <HAL_SPI_Receive+0x13e>
 8004000:	e03b      	b.n	800407a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d115      	bne.n	800403c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	b292      	uxth	r2, r2
 800401c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800403a:	e018      	b.n	800406e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800403c:	f7fd fec4 	bl	8001dc8 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	429a      	cmp	r2, r3
 800404a:	d803      	bhi.n	8004054 <HAL_SPI_Receive+0x20e>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004052:	d102      	bne.n	800405a <HAL_SPI_Receive+0x214>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e01f      	b.n	80040ae <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1c3      	bne.n	8004002 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	6839      	ldr	r1, [r7, #0]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fb56 	bl	8004730 <SPI_EndRxTransaction>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d002      	beq.n	8004090 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2220      	movs	r2, #32
 800408e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e000      	b.n	80040ae <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80040ac:	2300      	movs	r3, #0
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08a      	sub	sp, #40	@ 0x28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040c4:	2301      	movs	r3, #1
 80040c6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040c8:	f7fd fe7e 	bl	8001dc8 <HAL_GetTick>
 80040cc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80040d4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d00c      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x4e>
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040f0:	d106      	bne.n	8004100 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <HAL_SPI_TransmitReceive+0x4a>
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	2b04      	cmp	r3, #4
 80040fe:	d001      	beq.n	8004104 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004100:	2302      	movs	r3, #2
 8004102:	e1f3      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x60>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x60>
 8004110:	887b      	ldrh	r3, [r7, #2]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e1e8      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x72>
 8004124:	2302      	movs	r3, #2
 8004126:	e1e1      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b04      	cmp	r3, #4
 800413a:	d003      	beq.n	8004144 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2205      	movs	r2, #5
 8004140:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	887a      	ldrh	r2, [r7, #2]
 8004154:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	887a      	ldrh	r2, [r7, #2]
 800415c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	887a      	ldrh	r2, [r7, #2]
 800416a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004186:	d802      	bhi.n	800418e <HAL_SPI_TransmitReceive+0xd8>
 8004188:	8abb      	ldrh	r3, [r7, #20]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d908      	bls.n	80041a0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e007      	b.n	80041b0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041ae:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ba:	2b40      	cmp	r3, #64	@ 0x40
 80041bc:	d007      	beq.n	80041ce <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80041d6:	f240 8083 	bls.w	80042e0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_SPI_TransmitReceive+0x132>
 80041e2:	8afb      	ldrh	r3, [r7, #22]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d16f      	bne.n	80042c8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ec:	881a      	ldrh	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041f8:	1c9a      	adds	r2, r3, #2
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800420c:	e05c      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d11b      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x19e>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d016      	beq.n	8004254 <HAL_SPI_TransmitReceive+0x19e>
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2b01      	cmp	r3, #1
 800422a:	d113      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	881a      	ldrh	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423c:	1c9a      	adds	r2, r3, #2
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d11c      	bne.n	800429c <HAL_SPI_TransmitReceive+0x1e6>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004278:	b292      	uxth	r2, r2
 800427a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004280:	1c9a      	adds	r2, r3, #2
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004298:	2301      	movs	r3, #1
 800429a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800429c:	f7fd fd94 	bl	8001dc8 <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	6a3b      	ldr	r3, [r7, #32]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d80d      	bhi.n	80042c8 <HAL_SPI_TransmitReceive+0x212>
 80042ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b2:	d009      	beq.n	80042c8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e111      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d19d      	bne.n	800420e <HAL_SPI_TransmitReceive+0x158>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d197      	bne.n	800420e <HAL_SPI_TransmitReceive+0x158>
 80042de:	e0e5      	b.n	80044ac <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x23a>
 80042e8:	8afb      	ldrh	r3, [r7, #22]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	f040 80d1 	bne.w	8004492 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d912      	bls.n	8004320 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fe:	881a      	ldrh	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	1c9a      	adds	r2, r3, #2
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b02      	subs	r3, #2
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800431e:	e0b8      	b.n	8004492 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	330c      	adds	r3, #12
 800432a:	7812      	ldrb	r2, [r2, #0]
 800432c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004346:	e0a4      	b.n	8004492 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b02      	cmp	r3, #2
 8004354:	d134      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x30a>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800435a:	b29b      	uxth	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d02f      	beq.n	80043c0 <HAL_SPI_TransmitReceive+0x30a>
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	2b01      	cmp	r3, #1
 8004364:	d12c      	bne.n	80043c0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800436a:	b29b      	uxth	r3, r3
 800436c:	2b01      	cmp	r3, #1
 800436e:	d912      	bls.n	8004396 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b02      	subs	r3, #2
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004394:	e012      	b.n	80043bc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043bc:	2300      	movs	r3, #0
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d148      	bne.n	8004460 <HAL_SPI_TransmitReceive+0x3aa>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d042      	beq.n	8004460 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d923      	bls.n	800442e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f0:	b292      	uxth	r2, r2
 80043f2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	1c9a      	adds	r2, r3, #2
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004404:	b29b      	uxth	r3, r3
 8004406:	3b02      	subs	r3, #2
 8004408:	b29a      	uxth	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b01      	cmp	r3, #1
 800441a:	d81f      	bhi.n	800445c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	e016      	b.n	800445c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f103 020c 	add.w	r2, r3, #12
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443a:	7812      	ldrb	r2, [r2, #0]
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004450:	b29b      	uxth	r3, r3
 8004452:	3b01      	subs	r3, #1
 8004454:	b29a      	uxth	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800445c:	2301      	movs	r3, #1
 800445e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004460:	f7fd fcb2 	bl	8001dc8 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800446c:	429a      	cmp	r2, r3
 800446e:	d803      	bhi.n	8004478 <HAL_SPI_TransmitReceive+0x3c2>
 8004470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004476:	d102      	bne.n	800447e <HAL_SPI_TransmitReceive+0x3c8>
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e02c      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	f47f af55 	bne.w	8004348 <HAL_SPI_TransmitReceive+0x292>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f47f af4e 	bne.w	8004348 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80044ac:	6a3a      	ldr	r2, [r7, #32]
 80044ae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f995 	bl	80047e0 <SPI_EndRxTxTransaction>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e00e      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80044ea:	2300      	movs	r3, #0
  }
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3728      	adds	r7, #40	@ 0x28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004504:	f7fd fc60 	bl	8001dc8 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800450c:	1a9b      	subs	r3, r3, r2
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	4413      	add	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004514:	f7fd fc58 	bl	8001dc8 <HAL_GetTick>
 8004518:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800451a:	4b39      	ldr	r3, [pc, #228]	@ (8004600 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	015b      	lsls	r3, r3, #5
 8004520:	0d1b      	lsrs	r3, r3, #20
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800452a:	e054      	b.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004532:	d050      	beq.n	80045d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004534:	f7fd fc48 	bl	8001dc8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	429a      	cmp	r2, r3
 8004542:	d902      	bls.n	800454a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d13d      	bne.n	80045c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004558:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004562:	d111      	bne.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800456c:	d004      	beq.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004576:	d107      	bne.n	8004588 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004586:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004590:	d10f      	bne.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e017      	b.n	80045f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	3b01      	subs	r3, #1
 80045d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4013      	ands	r3, r2
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	bf0c      	ite	eq
 80045e6:	2301      	moveq	r3, #1
 80045e8:	2300      	movne	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	461a      	mov	r2, r3
 80045ee:	79fb      	ldrb	r3, [r7, #7]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d19b      	bne.n	800452c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3720      	adds	r7, #32
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	20000000 	.word	0x20000000

08004604 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08a      	sub	sp, #40	@ 0x28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004612:	2300      	movs	r3, #0
 8004614:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004616:	f7fd fbd7 	bl	8001dc8 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	4413      	add	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004626:	f7fd fbcf 	bl	8001dc8 <HAL_GetTick>
 800462a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	330c      	adds	r3, #12
 8004632:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004634:	4b3d      	ldr	r3, [pc, #244]	@ (800472c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	00da      	lsls	r2, r3, #3
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	0d1b      	lsrs	r3, r3, #20
 8004644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800464c:	e060      	b.n	8004710 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004654:	d107      	bne.n	8004666 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004664:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466c:	d050      	beq.n	8004710 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800466e:	f7fd fbab 	bl	8001dc8 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467a:	429a      	cmp	r2, r3
 800467c:	d902      	bls.n	8004684 <SPI_WaitFifoStateUntilTimeout+0x80>
 800467e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	d13d      	bne.n	8004700 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685a      	ldr	r2, [r3, #4]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004692:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800469c:	d111      	bne.n	80046c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046a6:	d004      	beq.n	80046b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046b0:	d107      	bne.n	80046c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ca:	d10f      	bne.n	80046ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e010      	b.n	8004722 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004700:	69bb      	ldr	r3, [r7, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	3b01      	subs	r3, #1
 800470e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	4013      	ands	r3, r2
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	429a      	cmp	r2, r3
 800471e:	d196      	bne.n	800464e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3728      	adds	r7, #40	@ 0x28
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000000 	.word	0x20000000

08004730 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004744:	d111      	bne.n	800476a <SPI_EndRxTransaction+0x3a>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800474e:	d004      	beq.n	800475a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004758:	d107      	bne.n	800476a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004768:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2200      	movs	r2, #0
 8004772:	2180      	movs	r1, #128	@ 0x80
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f7ff febd 	bl	80044f4 <SPI_WaitFlagStateUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d007      	beq.n	8004790 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004784:	f043 0220 	orr.w	r2, r3, #32
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e023      	b.n	80047d8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004798:	d11d      	bne.n	80047d6 <SPI_EndRxTransaction+0xa6>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a2:	d004      	beq.n	80047ae <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047ac:	d113      	bne.n	80047d6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff ff22 	bl	8004604 <SPI_WaitFifoStateUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e000      	b.n	80047d8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af02      	add	r7, sp, #8
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f7ff ff03 	bl	8004604 <SPI_WaitFifoStateUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004808:	f043 0220 	orr.w	r2, r3, #32
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e027      	b.n	8004864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	@ 0x80
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff fe68 	bl	80044f4 <SPI_WaitFlagStateUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e014      	b.n	8004864 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2200      	movs	r2, #0
 8004842:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f7ff fedc 	bl	8004604 <SPI_WaitFifoStateUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e000      	b.n	8004864 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e049      	b.n	8004912 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f841 	bl	800491a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2202      	movs	r2, #2
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4610      	mov	r0, r2
 80048ac:	f000 f9e0 	bl	8004c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
	...

08004930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e04f      	b.n	80049e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d01d      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x76>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004972:	d018      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x76>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1f      	ldr	r2, [pc, #124]	@ (80049f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x76>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1e      	ldr	r2, [pc, #120]	@ (80049fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00e      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x76>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1c      	ldr	r2, [pc, #112]	@ (8004a00 <HAL_TIM_Base_Start_IT+0xd0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d009      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x76>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1b      	ldr	r2, [pc, #108]	@ (8004a04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d004      	beq.n	80049a6 <HAL_TIM_Base_Start_IT+0x76>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a19      	ldr	r2, [pc, #100]	@ (8004a08 <HAL_TIM_Base_Start_IT+0xd8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d115      	bne.n	80049d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689a      	ldr	r2, [r3, #8]
 80049ac:	4b17      	ldr	r3, [pc, #92]	@ (8004a0c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ae:	4013      	ands	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2b06      	cmp	r3, #6
 80049b6:	d015      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0xb4>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049be:	d011      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d0:	e008      	b.n	80049e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e000      	b.n	80049e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049e6:	2300      	movs	r3, #0
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3714      	adds	r7, #20
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40013400 	.word	0x40013400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	00010007 	.word	0x00010007

08004a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0202 	mvn.w	r2, #2
 8004a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f8e9 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f8db 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f8ec 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0304 	and.w	r3, r3, #4
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0204 	mvn.w	r2, #4
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f8c3 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f8b5 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8c6 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d020      	beq.n	8004b0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01b      	beq.n	8004b0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0208 	mvn.w	r2, #8
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2204      	movs	r2, #4
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f89d 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f88f 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f8a0 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d020      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0310 	and.w	r3, r3, #16
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01b      	beq.n	8004b58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0210 	mvn.w	r2, #16
 8004b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2208      	movs	r2, #8
 8004b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69db      	ldr	r3, [r3, #28]
 8004b36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f877 	bl	8004c32 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f869 	bl	8004c1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f87a 	bl	8004c46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00c      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f06f 0201 	mvn.w	r2, #1
 8004b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7fc fb96 	bl	80012a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00c      	beq.n	8004baa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d007      	beq.n	8004baa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f913 	bl	8004dd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00c      	beq.n	8004bce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d007      	beq.n	8004bce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f90b 	bl	8004de4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f834 	bl	8004c5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f003 0320 	and.w	r3, r3, #32
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00c      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f06f 0220 	mvn.w	r2, #32
 8004c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8d3 	bl	8004dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c16:	bf00      	nop
 8004c18:	3710      	adds	r7, #16
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c26:	bf00      	nop
 8004c28:	370c      	adds	r7, #12
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a46      	ldr	r2, [pc, #280]	@ (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d013      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8e:	d00f      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a43      	ldr	r2, [pc, #268]	@ (8004da0 <TIM_Base_SetConfig+0x130>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d00b      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a42      	ldr	r2, [pc, #264]	@ (8004da4 <TIM_Base_SetConfig+0x134>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d007      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a41      	ldr	r2, [pc, #260]	@ (8004da8 <TIM_Base_SetConfig+0x138>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d003      	beq.n	8004cb0 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a40      	ldr	r2, [pc, #256]	@ (8004dac <TIM_Base_SetConfig+0x13c>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d108      	bne.n	8004cc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a35      	ldr	r2, [pc, #212]	@ (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01f      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd0:	d01b      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a32      	ldr	r2, [pc, #200]	@ (8004da0 <TIM_Base_SetConfig+0x130>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d017      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a31      	ldr	r2, [pc, #196]	@ (8004da4 <TIM_Base_SetConfig+0x134>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d013      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a30      	ldr	r2, [pc, #192]	@ (8004da8 <TIM_Base_SetConfig+0x138>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d00f      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <TIM_Base_SetConfig+0x13c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00b      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <TIM_Base_SetConfig+0x140>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d007      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2d      	ldr	r2, [pc, #180]	@ (8004db4 <TIM_Base_SetConfig+0x144>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d003      	beq.n	8004d0a <TIM_Base_SetConfig+0x9a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2c      	ldr	r2, [pc, #176]	@ (8004db8 <TIM_Base_SetConfig+0x148>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d108      	bne.n	8004d1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	695b      	ldr	r3, [r3, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a16      	ldr	r2, [pc, #88]	@ (8004d9c <TIM_Base_SetConfig+0x12c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d00f      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a18      	ldr	r2, [pc, #96]	@ (8004dac <TIM_Base_SetConfig+0x13c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d00b      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a17      	ldr	r2, [pc, #92]	@ (8004db0 <TIM_Base_SetConfig+0x140>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d007      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a16      	ldr	r2, [pc, #88]	@ (8004db4 <TIM_Base_SetConfig+0x144>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d003      	beq.n	8004d68 <TIM_Base_SetConfig+0xf8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a15      	ldr	r2, [pc, #84]	@ (8004db8 <TIM_Base_SetConfig+0x148>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d103      	bne.n	8004d70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f023 0201 	bic.w	r2, r3, #1
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	611a      	str	r2, [r3, #16]
  }
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800
 8004da8:	40000c00 	.word	0x40000c00
 8004dac:	40013400 	.word	0x40013400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800

08004dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e040      	b.n	8004e8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d106      	bne.n	8004e20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f7fc fae6 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2224      	movs	r2, #36	@ 0x24
 8004e24:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f022 0201 	bic.w	r2, r2, #1
 8004e34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d002      	beq.n	8004e44 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 fb6a 	bl	8005518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f8af 	bl	8004fa8 <UART_SetConfig>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e01b      	b.n	8004e8c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689a      	ldr	r2, [r3, #8]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fbe9 	bl	800565c <UART_CheckIdleState>
 8004e8a:	4603      	mov	r3, r0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b08a      	sub	sp, #40	@ 0x28
 8004e98:	af02      	add	r7, sp, #8
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	603b      	str	r3, [r7, #0]
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ea8:	2b20      	cmp	r3, #32
 8004eaa:	d177      	bne.n	8004f9c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <HAL_UART_Transmit+0x24>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e070      	b.n	8004f9e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2221      	movs	r2, #33	@ 0x21
 8004ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eca:	f7fc ff7d 	bl	8001dc8 <HAL_GetTick>
 8004ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	88fa      	ldrh	r2, [r7, #6]
 8004ed4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	88fa      	ldrh	r2, [r7, #6]
 8004edc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee8:	d108      	bne.n	8004efc <HAL_UART_Transmit+0x68>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e003      	b.n	8004f04 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f00:	2300      	movs	r3, #0
 8004f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f04:	e02f      	b.n	8004f66 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	2180      	movs	r1, #128	@ 0x80
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fc4b 	bl	80057ac <UART_WaitOnFlagUntilTimeout>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d004      	beq.n	8004f26 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e03b      	b.n	8004f9e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	881a      	ldrh	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f38:	b292      	uxth	r2, r2
 8004f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	3302      	adds	r3, #2
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	e007      	b.n	8004f54 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	781a      	ldrb	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	3301      	adds	r3, #1
 8004f52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1c9      	bne.n	8004f06 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	2140      	movs	r1, #64	@ 0x40
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 fc15 	bl	80057ac <UART_WaitOnFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d004      	beq.n	8004f92 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e005      	b.n	8004f9e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	e000      	b.n	8004f9e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004f9c:	2302      	movs	r3, #2
  }
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3720      	adds	r7, #32
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fac:	b08a      	sub	sp, #40	@ 0x28
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	431a      	orrs	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	69db      	ldr	r3, [r3, #28]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4ba4      	ldr	r3, [pc, #656]	@ (8005268 <UART_SetConfig+0x2c0>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a99      	ldr	r2, [pc, #612]	@ (800526c <UART_SetConfig+0x2c4>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005010:	4313      	orrs	r3, r2
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005024:	430a      	orrs	r2, r1
 8005026:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a90      	ldr	r2, [pc, #576]	@ (8005270 <UART_SetConfig+0x2c8>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d126      	bne.n	8005080 <UART_SetConfig+0xd8>
 8005032:	4b90      	ldr	r3, [pc, #576]	@ (8005274 <UART_SetConfig+0x2cc>)
 8005034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	2b03      	cmp	r3, #3
 800503e:	d81b      	bhi.n	8005078 <UART_SetConfig+0xd0>
 8005040:	a201      	add	r2, pc, #4	@ (adr r2, 8005048 <UART_SetConfig+0xa0>)
 8005042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005046:	bf00      	nop
 8005048:	08005059 	.word	0x08005059
 800504c:	08005069 	.word	0x08005069
 8005050:	08005061 	.word	0x08005061
 8005054:	08005071 	.word	0x08005071
 8005058:	2301      	movs	r3, #1
 800505a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800505e:	e116      	b.n	800528e <UART_SetConfig+0x2e6>
 8005060:	2302      	movs	r3, #2
 8005062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005066:	e112      	b.n	800528e <UART_SetConfig+0x2e6>
 8005068:	2304      	movs	r3, #4
 800506a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506e:	e10e      	b.n	800528e <UART_SetConfig+0x2e6>
 8005070:	2308      	movs	r3, #8
 8005072:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005076:	e10a      	b.n	800528e <UART_SetConfig+0x2e6>
 8005078:	2310      	movs	r3, #16
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e106      	b.n	800528e <UART_SetConfig+0x2e6>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a7c      	ldr	r2, [pc, #496]	@ (8005278 <UART_SetConfig+0x2d0>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d138      	bne.n	80050fc <UART_SetConfig+0x154>
 800508a:	4b7a      	ldr	r3, [pc, #488]	@ (8005274 <UART_SetConfig+0x2cc>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b0c      	cmp	r3, #12
 8005096:	d82d      	bhi.n	80050f4 <UART_SetConfig+0x14c>
 8005098:	a201      	add	r2, pc, #4	@ (adr r2, 80050a0 <UART_SetConfig+0xf8>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	080050f5 	.word	0x080050f5
 80050a8:	080050f5 	.word	0x080050f5
 80050ac:	080050f5 	.word	0x080050f5
 80050b0:	080050e5 	.word	0x080050e5
 80050b4:	080050f5 	.word	0x080050f5
 80050b8:	080050f5 	.word	0x080050f5
 80050bc:	080050f5 	.word	0x080050f5
 80050c0:	080050dd 	.word	0x080050dd
 80050c4:	080050f5 	.word	0x080050f5
 80050c8:	080050f5 	.word	0x080050f5
 80050cc:	080050f5 	.word	0x080050f5
 80050d0:	080050ed 	.word	0x080050ed
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050da:	e0d8      	b.n	800528e <UART_SetConfig+0x2e6>
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e2:	e0d4      	b.n	800528e <UART_SetConfig+0x2e6>
 80050e4:	2304      	movs	r3, #4
 80050e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ea:	e0d0      	b.n	800528e <UART_SetConfig+0x2e6>
 80050ec:	2308      	movs	r3, #8
 80050ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f2:	e0cc      	b.n	800528e <UART_SetConfig+0x2e6>
 80050f4:	2310      	movs	r3, #16
 80050f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fa:	e0c8      	b.n	800528e <UART_SetConfig+0x2e6>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a5e      	ldr	r2, [pc, #376]	@ (800527c <UART_SetConfig+0x2d4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d125      	bne.n	8005152 <UART_SetConfig+0x1aa>
 8005106:	4b5b      	ldr	r3, [pc, #364]	@ (8005274 <UART_SetConfig+0x2cc>)
 8005108:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005110:	2b30      	cmp	r3, #48	@ 0x30
 8005112:	d016      	beq.n	8005142 <UART_SetConfig+0x19a>
 8005114:	2b30      	cmp	r3, #48	@ 0x30
 8005116:	d818      	bhi.n	800514a <UART_SetConfig+0x1a2>
 8005118:	2b20      	cmp	r3, #32
 800511a:	d00a      	beq.n	8005132 <UART_SetConfig+0x18a>
 800511c:	2b20      	cmp	r3, #32
 800511e:	d814      	bhi.n	800514a <UART_SetConfig+0x1a2>
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <UART_SetConfig+0x182>
 8005124:	2b10      	cmp	r3, #16
 8005126:	d008      	beq.n	800513a <UART_SetConfig+0x192>
 8005128:	e00f      	b.n	800514a <UART_SetConfig+0x1a2>
 800512a:	2300      	movs	r3, #0
 800512c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005130:	e0ad      	b.n	800528e <UART_SetConfig+0x2e6>
 8005132:	2302      	movs	r3, #2
 8005134:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005138:	e0a9      	b.n	800528e <UART_SetConfig+0x2e6>
 800513a:	2304      	movs	r3, #4
 800513c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005140:	e0a5      	b.n	800528e <UART_SetConfig+0x2e6>
 8005142:	2308      	movs	r3, #8
 8005144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005148:	e0a1      	b.n	800528e <UART_SetConfig+0x2e6>
 800514a:	2310      	movs	r3, #16
 800514c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005150:	e09d      	b.n	800528e <UART_SetConfig+0x2e6>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a4a      	ldr	r2, [pc, #296]	@ (8005280 <UART_SetConfig+0x2d8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d125      	bne.n	80051a8 <UART_SetConfig+0x200>
 800515c:	4b45      	ldr	r3, [pc, #276]	@ (8005274 <UART_SetConfig+0x2cc>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005166:	2bc0      	cmp	r3, #192	@ 0xc0
 8005168:	d016      	beq.n	8005198 <UART_SetConfig+0x1f0>
 800516a:	2bc0      	cmp	r3, #192	@ 0xc0
 800516c:	d818      	bhi.n	80051a0 <UART_SetConfig+0x1f8>
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d00a      	beq.n	8005188 <UART_SetConfig+0x1e0>
 8005172:	2b80      	cmp	r3, #128	@ 0x80
 8005174:	d814      	bhi.n	80051a0 <UART_SetConfig+0x1f8>
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <UART_SetConfig+0x1d8>
 800517a:	2b40      	cmp	r3, #64	@ 0x40
 800517c:	d008      	beq.n	8005190 <UART_SetConfig+0x1e8>
 800517e:	e00f      	b.n	80051a0 <UART_SetConfig+0x1f8>
 8005180:	2300      	movs	r3, #0
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005186:	e082      	b.n	800528e <UART_SetConfig+0x2e6>
 8005188:	2302      	movs	r3, #2
 800518a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518e:	e07e      	b.n	800528e <UART_SetConfig+0x2e6>
 8005190:	2304      	movs	r3, #4
 8005192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005196:	e07a      	b.n	800528e <UART_SetConfig+0x2e6>
 8005198:	2308      	movs	r3, #8
 800519a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800519e:	e076      	b.n	800528e <UART_SetConfig+0x2e6>
 80051a0:	2310      	movs	r3, #16
 80051a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a6:	e072      	b.n	800528e <UART_SetConfig+0x2e6>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a35      	ldr	r2, [pc, #212]	@ (8005284 <UART_SetConfig+0x2dc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d12a      	bne.n	8005208 <UART_SetConfig+0x260>
 80051b2:	4b30      	ldr	r3, [pc, #192]	@ (8005274 <UART_SetConfig+0x2cc>)
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051c0:	d01a      	beq.n	80051f8 <UART_SetConfig+0x250>
 80051c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051c6:	d81b      	bhi.n	8005200 <UART_SetConfig+0x258>
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051cc:	d00c      	beq.n	80051e8 <UART_SetConfig+0x240>
 80051ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d2:	d815      	bhi.n	8005200 <UART_SetConfig+0x258>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d003      	beq.n	80051e0 <UART_SetConfig+0x238>
 80051d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051dc:	d008      	beq.n	80051f0 <UART_SetConfig+0x248>
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x258>
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e052      	b.n	800528e <UART_SetConfig+0x2e6>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ee:	e04e      	b.n	800528e <UART_SetConfig+0x2e6>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f6:	e04a      	b.n	800528e <UART_SetConfig+0x2e6>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051fe:	e046      	b.n	800528e <UART_SetConfig+0x2e6>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005206:	e042      	b.n	800528e <UART_SetConfig+0x2e6>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a17      	ldr	r2, [pc, #92]	@ (800526c <UART_SetConfig+0x2c4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d13a      	bne.n	8005288 <UART_SetConfig+0x2e0>
 8005212:	4b18      	ldr	r3, [pc, #96]	@ (8005274 <UART_SetConfig+0x2cc>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005218:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800521c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005220:	d01a      	beq.n	8005258 <UART_SetConfig+0x2b0>
 8005222:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005226:	d81b      	bhi.n	8005260 <UART_SetConfig+0x2b8>
 8005228:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800522c:	d00c      	beq.n	8005248 <UART_SetConfig+0x2a0>
 800522e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005232:	d815      	bhi.n	8005260 <UART_SetConfig+0x2b8>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <UART_SetConfig+0x298>
 8005238:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800523c:	d008      	beq.n	8005250 <UART_SetConfig+0x2a8>
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x2b8>
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005246:	e022      	b.n	800528e <UART_SetConfig+0x2e6>
 8005248:	2302      	movs	r3, #2
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524e:	e01e      	b.n	800528e <UART_SetConfig+0x2e6>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005256:	e01a      	b.n	800528e <UART_SetConfig+0x2e6>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800525e:	e016      	b.n	800528e <UART_SetConfig+0x2e6>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005266:	e012      	b.n	800528e <UART_SetConfig+0x2e6>
 8005268:	efff69f3 	.word	0xefff69f3
 800526c:	40008000 	.word	0x40008000
 8005270:	40013800 	.word	0x40013800
 8005274:	40021000 	.word	0x40021000
 8005278:	40004400 	.word	0x40004400
 800527c:	40004800 	.word	0x40004800
 8005280:	40004c00 	.word	0x40004c00
 8005284:	40005000 	.word	0x40005000
 8005288:	2310      	movs	r3, #16
 800528a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a9f      	ldr	r2, [pc, #636]	@ (8005510 <UART_SetConfig+0x568>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d17a      	bne.n	800538e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005298:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800529c:	2b08      	cmp	r3, #8
 800529e:	d824      	bhi.n	80052ea <UART_SetConfig+0x342>
 80052a0:	a201      	add	r2, pc, #4	@ (adr r2, 80052a8 <UART_SetConfig+0x300>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052eb 	.word	0x080052eb
 80052b0:	080052d5 	.word	0x080052d5
 80052b4:	080052eb 	.word	0x080052eb
 80052b8:	080052db 	.word	0x080052db
 80052bc:	080052eb 	.word	0x080052eb
 80052c0:	080052eb 	.word	0x080052eb
 80052c4:	080052eb 	.word	0x080052eb
 80052c8:	080052e3 	.word	0x080052e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fd fe28 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80052d0:	61f8      	str	r0, [r7, #28]
        break;
 80052d2:	e010      	b.n	80052f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052d4:	4b8f      	ldr	r3, [pc, #572]	@ (8005514 <UART_SetConfig+0x56c>)
 80052d6:	61fb      	str	r3, [r7, #28]
        break;
 80052d8:	e00d      	b.n	80052f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052da:	f7fd fd89 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80052de:	61f8      	str	r0, [r7, #28]
        break;
 80052e0:	e009      	b.n	80052f6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052e6:	61fb      	str	r3, [r7, #28]
        break;
 80052e8:	e005      	b.n	80052f6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80052f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 80fb 	beq.w	80054f4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4613      	mov	r3, r2
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	4413      	add	r3, r2
 8005308:	69fa      	ldr	r2, [r7, #28]
 800530a:	429a      	cmp	r2, r3
 800530c:	d305      	bcc.n	800531a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005314:	69fa      	ldr	r2, [r7, #28]
 8005316:	429a      	cmp	r2, r3
 8005318:	d903      	bls.n	8005322 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005320:	e0e8      	b.n	80054f4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2200      	movs	r2, #0
 8005326:	461c      	mov	r4, r3
 8005328:	4615      	mov	r5, r2
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	022b      	lsls	r3, r5, #8
 8005334:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005338:	0222      	lsls	r2, r4, #8
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	6849      	ldr	r1, [r1, #4]
 800533e:	0849      	lsrs	r1, r1, #1
 8005340:	2000      	movs	r0, #0
 8005342:	4688      	mov	r8, r1
 8005344:	4681      	mov	r9, r0
 8005346:	eb12 0a08 	adds.w	sl, r2, r8
 800534a:	eb43 0b09 	adc.w	fp, r3, r9
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	603b      	str	r3, [r7, #0]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800535c:	4650      	mov	r0, sl
 800535e:	4659      	mov	r1, fp
 8005360:	f7fa ff8e 	bl	8000280 <__aeabi_uldivmod>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4613      	mov	r3, r2
 800536a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005372:	d308      	bcc.n	8005386 <UART_SetConfig+0x3de>
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800537a:	d204      	bcs.n	8005386 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69ba      	ldr	r2, [r7, #24]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e0b6      	b.n	80054f4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800538c:	e0b2      	b.n	80054f4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005396:	d15e      	bne.n	8005456 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005398:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800539c:	2b08      	cmp	r3, #8
 800539e:	d828      	bhi.n	80053f2 <UART_SetConfig+0x44a>
 80053a0:	a201      	add	r2, pc, #4	@ (adr r2, 80053a8 <UART_SetConfig+0x400>)
 80053a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a6:	bf00      	nop
 80053a8:	080053cd 	.word	0x080053cd
 80053ac:	080053d5 	.word	0x080053d5
 80053b0:	080053dd 	.word	0x080053dd
 80053b4:	080053f3 	.word	0x080053f3
 80053b8:	080053e3 	.word	0x080053e3
 80053bc:	080053f3 	.word	0x080053f3
 80053c0:	080053f3 	.word	0x080053f3
 80053c4:	080053f3 	.word	0x080053f3
 80053c8:	080053eb 	.word	0x080053eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7fd fda8 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 80053d0:	61f8      	str	r0, [r7, #28]
        break;
 80053d2:	e014      	b.n	80053fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053d4:	f7fd fdba 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 80053d8:	61f8      	str	r0, [r7, #28]
        break;
 80053da:	e010      	b.n	80053fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053dc:	4b4d      	ldr	r3, [pc, #308]	@ (8005514 <UART_SetConfig+0x56c>)
 80053de:	61fb      	str	r3, [r7, #28]
        break;
 80053e0:	e00d      	b.n	80053fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053e2:	f7fd fd05 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80053e6:	61f8      	str	r0, [r7, #28]
        break;
 80053e8:	e009      	b.n	80053fe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053ee:	61fb      	str	r3, [r7, #28]
        break;
 80053f0:	e005      	b.n	80053fe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d077      	beq.n	80054f4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	005a      	lsls	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	085b      	lsrs	r3, r3, #1
 800540e:	441a      	add	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	fbb2 f3f3 	udiv	r3, r2, r3
 8005418:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b0f      	cmp	r3, #15
 800541e:	d916      	bls.n	800544e <UART_SetConfig+0x4a6>
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005426:	d212      	bcs.n	800544e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	b29b      	uxth	r3, r3
 800542c:	f023 030f 	bic.w	r3, r3, #15
 8005430:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	085b      	lsrs	r3, r3, #1
 8005436:	b29b      	uxth	r3, r3
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	b29a      	uxth	r2, r3
 800543e:	8afb      	ldrh	r3, [r7, #22]
 8005440:	4313      	orrs	r3, r2
 8005442:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	8afa      	ldrh	r2, [r7, #22]
 800544a:	60da      	str	r2, [r3, #12]
 800544c:	e052      	b.n	80054f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005454:	e04e      	b.n	80054f4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005456:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800545a:	2b08      	cmp	r3, #8
 800545c:	d827      	bhi.n	80054ae <UART_SetConfig+0x506>
 800545e:	a201      	add	r2, pc, #4	@ (adr r2, 8005464 <UART_SetConfig+0x4bc>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	08005489 	.word	0x08005489
 8005468:	08005491 	.word	0x08005491
 800546c:	08005499 	.word	0x08005499
 8005470:	080054af 	.word	0x080054af
 8005474:	0800549f 	.word	0x0800549f
 8005478:	080054af 	.word	0x080054af
 800547c:	080054af 	.word	0x080054af
 8005480:	080054af 	.word	0x080054af
 8005484:	080054a7 	.word	0x080054a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005488:	f7fd fd4a 	bl	8002f20 <HAL_RCC_GetPCLK1Freq>
 800548c:	61f8      	str	r0, [r7, #28]
        break;
 800548e:	e014      	b.n	80054ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005490:	f7fd fd5c 	bl	8002f4c <HAL_RCC_GetPCLK2Freq>
 8005494:	61f8      	str	r0, [r7, #28]
        break;
 8005496:	e010      	b.n	80054ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005498:	4b1e      	ldr	r3, [pc, #120]	@ (8005514 <UART_SetConfig+0x56c>)
 800549a:	61fb      	str	r3, [r7, #28]
        break;
 800549c:	e00d      	b.n	80054ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800549e:	f7fd fca7 	bl	8002df0 <HAL_RCC_GetSysClockFreq>
 80054a2:	61f8      	str	r0, [r7, #28]
        break;
 80054a4:	e009      	b.n	80054ba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054aa:	61fb      	str	r3, [r7, #28]
        break;
 80054ac:	e005      	b.n	80054ba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054b8:	bf00      	nop
    }

    if (pclk != 0U)
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d019      	beq.n	80054f4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	085a      	lsrs	r2, r3, #1
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b0f      	cmp	r3, #15
 80054d8:	d909      	bls.n	80054ee <UART_SetConfig+0x546>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e0:	d205      	bcs.n	80054ee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	60da      	str	r2, [r3, #12]
 80054ec:	e002      	b.n	80054f4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005500:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005504:	4618      	mov	r0, r3
 8005506:	3728      	adds	r7, #40	@ 0x28
 8005508:	46bd      	mov	sp, r7
 800550a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550e:	bf00      	nop
 8005510:	40008000 	.word	0x40008000
 8005514:	00f42400 	.word	0x00f42400

08005518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00a      	beq.n	8005564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01a      	beq.n	800562e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005616:	d10a      	bne.n	800562e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	605a      	str	r2, [r3, #4]
  }
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b098      	sub	sp, #96	@ 0x60
 8005660:	af02      	add	r7, sp, #8
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2200      	movs	r2, #0
 8005668:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800566c:	f7fc fbac 	bl	8001dc8 <HAL_GetTick>
 8005670:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d12e      	bne.n	80056de <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005688:	2200      	movs	r2, #0
 800568a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f88c 	bl	80057ac <UART_WaitOnFlagUntilTimeout>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d021      	beq.n	80056de <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a2:	e853 3f00 	ldrex	r3, [r3]
 80056a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	461a      	mov	r2, r3
 80056b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056c0:	e841 2300 	strex	r3, r2, [r1]
 80056c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1e6      	bne.n	800569a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2220      	movs	r2, #32
 80056d0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e062      	b.n	80057a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f003 0304 	and.w	r3, r3, #4
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d149      	bne.n	8005780 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056f4:	2200      	movs	r2, #0
 80056f6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f856 	bl	80057ac <UART_WaitOnFlagUntilTimeout>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d03c      	beq.n	8005780 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	623b      	str	r3, [r7, #32]
   return(result);
 8005714:	6a3b      	ldr	r3, [r7, #32]
 8005716:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800571a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	461a      	mov	r2, r3
 8005722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005724:	633b      	str	r3, [r7, #48]	@ 0x30
 8005726:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800572a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e6      	bne.n	8005706 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	3308      	adds	r3, #8
 800573e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	e853 3f00 	ldrex	r3, [r3]
 8005746:	60fb      	str	r3, [r7, #12]
   return(result);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005758:	61fa      	str	r2, [r7, #28]
 800575a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	69b9      	ldr	r1, [r7, #24]
 800575e:	69fa      	ldr	r2, [r7, #28]
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	617b      	str	r3, [r7, #20]
   return(result);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e5      	bne.n	8005738 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e011      	b.n	80057a4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2220      	movs	r2, #32
 8005784:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3758      	adds	r7, #88	@ 0x58
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	603b      	str	r3, [r7, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057bc:	e04f      	b.n	800585e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d04b      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c6:	f7fc faff 	bl	8001dc8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d302      	bcc.n	80057dc <UART_WaitOnFlagUntilTimeout+0x30>
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e04e      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0304 	and.w	r3, r3, #4
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d037      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b80      	cmp	r3, #128	@ 0x80
 80057f2:	d034      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xb2>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b40      	cmp	r3, #64	@ 0x40
 80057f8:	d031      	beq.n	800585e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b08      	cmp	r3, #8
 8005806:	d110      	bne.n	800582a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2208      	movs	r2, #8
 800580e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f838 	bl	8005886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2208      	movs	r2, #8
 800581a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e029      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	69db      	ldr	r3, [r3, #28]
 8005830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005834:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005838:	d111      	bne.n	800585e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005842:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f81e 	bl	8005886 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00f      	b.n	800587e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	69da      	ldr	r2, [r3, #28]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4013      	ands	r3, r2
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	429a      	cmp	r2, r3
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	429a      	cmp	r2, r3
 800587a:	d0a0      	beq.n	80057be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3710      	adds	r7, #16
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}

08005886 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005886:	b480      	push	{r7}
 8005888:	b095      	sub	sp, #84	@ 0x54
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005896:	e853 3f00 	ldrex	r3, [r3]
 800589a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800589c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800589e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	461a      	mov	r2, r3
 80058aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ac:	643b      	str	r3, [r7, #64]	@ 0x40
 80058ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1e6      	bne.n	800588e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3308      	adds	r3, #8
 80058c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3308      	adds	r3, #8
 80058de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e5      	bne.n	80058c0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d118      	bne.n	800592e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	60bb      	str	r3, [r7, #8]
   return(result);
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f023 0310 	bic.w	r3, r3, #16
 8005910:	647b      	str	r3, [r7, #68]	@ 0x44
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800591a:	61bb      	str	r3, [r7, #24]
 800591c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	6979      	ldr	r1, [r7, #20]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	613b      	str	r3, [r7, #16]
   return(result);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e6      	bne.n	80058fc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2220      	movs	r2, #32
 8005932:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005942:	bf00      	nop
 8005944:	3754      	adds	r7, #84	@ 0x54
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
	...

08005950 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800595e:	089b      	lsrs	r3, r3, #2
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80d9 	beq.w	8005b1e <ethernetif_notify_conn_changed+0x1ce>
  {
#ifndef USE_DHCP
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800596c:	4b6f      	ldr	r3, [pc, #444]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	061a      	lsls	r2, r3, #24
 8005972:	4b6e      	ldr	r3, [pc, #440]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 8005974:	785b      	ldrb	r3, [r3, #1]
 8005976:	041b      	lsls	r3, r3, #16
 8005978:	431a      	orrs	r2, r3
 800597a:	4b6c      	ldr	r3, [pc, #432]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 800597c:	789b      	ldrb	r3, [r3, #2]
 800597e:	021b      	lsls	r3, r3, #8
 8005980:	4313      	orrs	r3, r2
 8005982:	4a6a      	ldr	r2, [pc, #424]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 8005984:	78d2      	ldrb	r2, [r2, #3]
 8005986:	4313      	orrs	r3, r2
 8005988:	061a      	lsls	r2, r3, #24
 800598a:	4b68      	ldr	r3, [pc, #416]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	0619      	lsls	r1, r3, #24
 8005990:	4b66      	ldr	r3, [pc, #408]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	041b      	lsls	r3, r3, #16
 8005996:	4319      	orrs	r1, r3
 8005998:	4b64      	ldr	r3, [pc, #400]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 800599a:	789b      	ldrb	r3, [r3, #2]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	430b      	orrs	r3, r1
 80059a0:	4962      	ldr	r1, [pc, #392]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059a2:	78c9      	ldrb	r1, [r1, #3]
 80059a4:	430b      	orrs	r3, r1
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80059ac:	431a      	orrs	r2, r3
 80059ae:	4b5f      	ldr	r3, [pc, #380]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	0619      	lsls	r1, r3, #24
 80059b4:	4b5d      	ldr	r3, [pc, #372]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059b6:	785b      	ldrb	r3, [r3, #1]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	4319      	orrs	r1, r3
 80059bc:	4b5b      	ldr	r3, [pc, #364]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059be:	789b      	ldrb	r3, [r3, #2]
 80059c0:	021b      	lsls	r3, r3, #8
 80059c2:	430b      	orrs	r3, r1
 80059c4:	4959      	ldr	r1, [pc, #356]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059c6:	78c9      	ldrb	r1, [r1, #3]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	0a1b      	lsrs	r3, r3, #8
 80059cc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80059d0:	431a      	orrs	r2, r3
 80059d2:	4b56      	ldr	r3, [pc, #344]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	0619      	lsls	r1, r3, #24
 80059d8:	4b54      	ldr	r3, [pc, #336]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059da:	785b      	ldrb	r3, [r3, #1]
 80059dc:	041b      	lsls	r3, r3, #16
 80059de:	4319      	orrs	r1, r3
 80059e0:	4b52      	ldr	r3, [pc, #328]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059e2:	789b      	ldrb	r3, [r3, #2]
 80059e4:	021b      	lsls	r3, r3, #8
 80059e6:	430b      	orrs	r3, r1
 80059e8:	4950      	ldr	r1, [pc, #320]	@ (8005b2c <ethernetif_notify_conn_changed+0x1dc>)
 80059ea:	78c9      	ldrb	r1, [r1, #3]
 80059ec:	430b      	orrs	r3, r1
 80059ee:	0e1b      	lsrs	r3, r3, #24
 80059f0:	4313      	orrs	r3, r2
 80059f2:	4a4f      	ldr	r2, [pc, #316]	@ (8005b30 <ethernetif_notify_conn_changed+0x1e0>)
 80059f4:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80059f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	061a      	lsls	r2, r3, #24
 80059fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 80059fe:	785b      	ldrb	r3, [r3, #1]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	4b4b      	ldr	r3, [pc, #300]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a06:	789b      	ldrb	r3, [r3, #2]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	4a49      	ldr	r2, [pc, #292]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a0e:	78d2      	ldrb	r2, [r2, #3]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	061a      	lsls	r2, r3, #24
 8005a14:	4b47      	ldr	r3, [pc, #284]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	0619      	lsls	r1, r3, #24
 8005a1a:	4b46      	ldr	r3, [pc, #280]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	041b      	lsls	r3, r3, #16
 8005a20:	4319      	orrs	r1, r3
 8005a22:	4b44      	ldr	r3, [pc, #272]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a24:	789b      	ldrb	r3, [r3, #2]
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	4942      	ldr	r1, [pc, #264]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a2c:	78c9      	ldrb	r1, [r1, #3]
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a36:	431a      	orrs	r2, r3
 8005a38:	4b3e      	ldr	r3, [pc, #248]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	0619      	lsls	r1, r3, #24
 8005a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a40:	785b      	ldrb	r3, [r3, #1]
 8005a42:	041b      	lsls	r3, r3, #16
 8005a44:	4319      	orrs	r1, r3
 8005a46:	4b3b      	ldr	r3, [pc, #236]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a48:	789b      	ldrb	r3, [r3, #2]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	4939      	ldr	r1, [pc, #228]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a50:	78c9      	ldrb	r1, [r1, #3]
 8005a52:	430b      	orrs	r3, r1
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	4b35      	ldr	r3, [pc, #212]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	0619      	lsls	r1, r3, #24
 8005a62:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a64:	785b      	ldrb	r3, [r3, #1]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	4319      	orrs	r1, r3
 8005a6a:	4b32      	ldr	r3, [pc, #200]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a6c:	789b      	ldrb	r3, [r3, #2]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	430b      	orrs	r3, r1
 8005a72:	4930      	ldr	r1, [pc, #192]	@ (8005b34 <ethernetif_notify_conn_changed+0x1e4>)
 8005a74:	78c9      	ldrb	r1, [r1, #3]
 8005a76:	430b      	orrs	r3, r1
 8005a78:	0e1b      	lsrs	r3, r3, #24
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005b38 <ethernetif_notify_conn_changed+0x1e8>)
 8005a7e:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005a80:	4b2e      	ldr	r3, [pc, #184]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	061a      	lsls	r2, r3, #24
 8005a86:	4b2d      	ldr	r3, [pc, #180]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005a88:	785b      	ldrb	r3, [r3, #1]
 8005a8a:	041b      	lsls	r3, r3, #16
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005a90:	789b      	ldrb	r3, [r3, #2]
 8005a92:	021b      	lsls	r3, r3, #8
 8005a94:	4313      	orrs	r3, r2
 8005a96:	4a29      	ldr	r2, [pc, #164]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005a98:	78d2      	ldrb	r2, [r2, #3]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	061a      	lsls	r2, r3, #24
 8005a9e:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	0619      	lsls	r1, r3, #24
 8005aa4:	4b25      	ldr	r3, [pc, #148]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005aa6:	785b      	ldrb	r3, [r3, #1]
 8005aa8:	041b      	lsls	r3, r3, #16
 8005aaa:	4319      	orrs	r1, r3
 8005aac:	4b23      	ldr	r3, [pc, #140]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005aae:	789b      	ldrb	r3, [r3, #2]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	4921      	ldr	r1, [pc, #132]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005ab6:	78c9      	ldrb	r1, [r1, #3]
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	021b      	lsls	r3, r3, #8
 8005abc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	0619      	lsls	r1, r3, #24
 8005ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	041b      	lsls	r3, r3, #16
 8005ace:	4319      	orrs	r1, r3
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005ad2:	789b      	ldrb	r3, [r3, #2]
 8005ad4:	021b      	lsls	r3, r3, #8
 8005ad6:	430b      	orrs	r3, r1
 8005ad8:	4918      	ldr	r1, [pc, #96]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005ada:	78c9      	ldrb	r1, [r1, #3]
 8005adc:	430b      	orrs	r3, r1
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	4b15      	ldr	r3, [pc, #84]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	0619      	lsls	r1, r3, #24
 8005aec:	4b13      	ldr	r3, [pc, #76]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	4319      	orrs	r1, r3
 8005af4:	4b11      	ldr	r3, [pc, #68]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005af6:	789b      	ldrb	r3, [r3, #2]
 8005af8:	021b      	lsls	r3, r3, #8
 8005afa:	430b      	orrs	r3, r1
 8005afc:	490f      	ldr	r1, [pc, #60]	@ (8005b3c <ethernetif_notify_conn_changed+0x1ec>)
 8005afe:	78c9      	ldrb	r1, [r1, #3]
 8005b00:	430b      	orrs	r3, r1
 8005b02:	0e1b      	lsrs	r3, r3, #24
 8005b04:	4313      	orrs	r3, r2
 8005b06:	4a0e      	ldr	r2, [pc, #56]	@ (8005b40 <ethernetif_notify_conn_changed+0x1f0>)
 8005b08:	6013      	str	r3, [r2, #0]
#endif
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 8005b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b40 <ethernetif_notify_conn_changed+0x1f0>)
 8005b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b38 <ethernetif_notify_conn_changed+0x1e8>)
 8005b0e:	4908      	ldr	r1, [pc, #32]	@ (8005b30 <ethernetif_notify_conn_changed+0x1e0>)
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f001 ff9f 	bl	8007a54 <netif_set_addr>

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 fff6 	bl	8007b08 <netif_set_up>
    netif_set_down(netif);

    /* led off */
   // HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  }
}
 8005b1c:	e002      	b.n	8005b24 <ethernetif_notify_conn_changed+0x1d4>
    netif_set_down(netif);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f002 f85e 	bl	8007be0 <netif_set_down>
}
 8005b24:	bf00      	nop
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	20000218 	.word	0x20000218
 8005b30:	2000020c 	.word	0x2000020c
 8005b34:	2000021c 	.word	0x2000021c
 8005b38:	20000210 	.word	0x20000210
 8005b3c:	20000220 	.word	0x20000220
 8005b40:	20000214 	.word	0x20000214

08005b44 <MX_LWIP_Init>:

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8005b4a:	f001 f96b 	bl	8006e24 <lwip_init>
#ifdef USE_DHCP
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;
#else
  IP_ADDRESS[0] = 169;
 8005b4e:	4b8c      	ldr	r3, [pc, #560]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005b50:	22a9      	movs	r2, #169	@ 0xa9
 8005b52:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8005b54:	4b8a      	ldr	r3, [pc, #552]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005b56:	22fe      	movs	r2, #254	@ 0xfe
 8005b58:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 168;
 8005b5a:	4b89      	ldr	r3, [pc, #548]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005b5c:	22a8      	movs	r2, #168	@ 0xa8
 8005b5e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8005b60:	4b87      	ldr	r3, [pc, #540]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005b62:	2264      	movs	r2, #100	@ 0x64
 8005b64:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8005b66:	4b87      	ldr	r3, [pc, #540]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005b68:	22ff      	movs	r2, #255	@ 0xff
 8005b6a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8005b6c:	4b85      	ldr	r3, [pc, #532]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005b6e:	22ff      	movs	r2, #255	@ 0xff
 8005b70:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 8005b72:	4b84      	ldr	r3, [pc, #528]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8005b78:	4b82      	ldr	r3, [pc, #520]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 168;
 8005b7e:	4b82      	ldr	r3, [pc, #520]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005b80:	22a8      	movs	r2, #168	@ 0xa8
 8005b82:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8005b84:	4b80      	ldr	r3, [pc, #512]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005b86:	22fe      	movs	r2, #254	@ 0xfe
 8005b88:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 168;
 8005b8a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005b8c:	22a8      	movs	r2, #168	@ 0xa8
 8005b8e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 12;
 8005b90:	4b7d      	ldr	r3, [pc, #500]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005b92:	220c      	movs	r2, #12
 8005b94:	70da      	strb	r2, [r3, #3]

  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005b96:	4b7a      	ldr	r3, [pc, #488]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	061a      	lsls	r2, r3, #24
 8005b9c:	4b78      	ldr	r3, [pc, #480]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	041b      	lsls	r3, r3, #16
 8005ba2:	431a      	orrs	r2, r3
 8005ba4:	4b76      	ldr	r3, [pc, #472]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005ba6:	789b      	ldrb	r3, [r3, #2]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	4313      	orrs	r3, r2
 8005bac:	4a74      	ldr	r2, [pc, #464]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bae:	78d2      	ldrb	r2, [r2, #3]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	061a      	lsls	r2, r3, #24
 8005bb4:	4b72      	ldr	r3, [pc, #456]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	0619      	lsls	r1, r3, #24
 8005bba:	4b71      	ldr	r3, [pc, #452]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bbc:	785b      	ldrb	r3, [r3, #1]
 8005bbe:	041b      	lsls	r3, r3, #16
 8005bc0:	4319      	orrs	r1, r3
 8005bc2:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bc4:	789b      	ldrb	r3, [r3, #2]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	496d      	ldr	r1, [pc, #436]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bcc:	78c9      	ldrb	r1, [r1, #3]
 8005bce:	430b      	orrs	r3, r1
 8005bd0:	021b      	lsls	r3, r3, #8
 8005bd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bd6:	431a      	orrs	r2, r3
 8005bd8:	4b69      	ldr	r3, [pc, #420]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	0619      	lsls	r1, r3, #24
 8005bde:	4b68      	ldr	r3, [pc, #416]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005be0:	785b      	ldrb	r3, [r3, #1]
 8005be2:	041b      	lsls	r3, r3, #16
 8005be4:	4319      	orrs	r1, r3
 8005be6:	4b66      	ldr	r3, [pc, #408]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005be8:	789b      	ldrb	r3, [r3, #2]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	430b      	orrs	r3, r1
 8005bee:	4964      	ldr	r1, [pc, #400]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bf0:	78c9      	ldrb	r1, [r1, #3]
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	4b60      	ldr	r3, [pc, #384]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	0619      	lsls	r1, r3, #24
 8005c02:	4b5f      	ldr	r3, [pc, #380]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005c04:	785b      	ldrb	r3, [r3, #1]
 8005c06:	041b      	lsls	r3, r3, #16
 8005c08:	4319      	orrs	r1, r3
 8005c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	430b      	orrs	r3, r1
 8005c12:	495b      	ldr	r1, [pc, #364]	@ (8005d80 <MX_LWIP_Init+0x23c>)
 8005c14:	78c9      	ldrb	r1, [r1, #3]
 8005c16:	430b      	orrs	r3, r1
 8005c18:	0e1b      	lsrs	r3, r3, #24
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	4a5b      	ldr	r2, [pc, #364]	@ (8005d8c <MX_LWIP_Init+0x248>)
 8005c1e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8005c20:	4b58      	ldr	r3, [pc, #352]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	061a      	lsls	r2, r3, #24
 8005c26:	4b57      	ldr	r3, [pc, #348]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c28:	785b      	ldrb	r3, [r3, #1]
 8005c2a:	041b      	lsls	r3, r3, #16
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	4b55      	ldr	r3, [pc, #340]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c30:	789b      	ldrb	r3, [r3, #2]
 8005c32:	021b      	lsls	r3, r3, #8
 8005c34:	4313      	orrs	r3, r2
 8005c36:	4a53      	ldr	r2, [pc, #332]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c38:	78d2      	ldrb	r2, [r2, #3]
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	061a      	lsls	r2, r3, #24
 8005c3e:	4b51      	ldr	r3, [pc, #324]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	0619      	lsls	r1, r3, #24
 8005c44:	4b4f      	ldr	r3, [pc, #316]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c46:	785b      	ldrb	r3, [r3, #1]
 8005c48:	041b      	lsls	r3, r3, #16
 8005c4a:	4319      	orrs	r1, r3
 8005c4c:	4b4d      	ldr	r3, [pc, #308]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c4e:	789b      	ldrb	r3, [r3, #2]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	430b      	orrs	r3, r1
 8005c54:	494b      	ldr	r1, [pc, #300]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c56:	78c9      	ldrb	r1, [r1, #3]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	021b      	lsls	r3, r3, #8
 8005c5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c60:	431a      	orrs	r2, r3
 8005c62:	4b48      	ldr	r3, [pc, #288]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	0619      	lsls	r1, r3, #24
 8005c68:	4b46      	ldr	r3, [pc, #280]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c6a:	785b      	ldrb	r3, [r3, #1]
 8005c6c:	041b      	lsls	r3, r3, #16
 8005c6e:	4319      	orrs	r1, r3
 8005c70:	4b44      	ldr	r3, [pc, #272]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	021b      	lsls	r3, r3, #8
 8005c76:	430b      	orrs	r3, r1
 8005c78:	4942      	ldr	r1, [pc, #264]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c7a:	78c9      	ldrb	r1, [r1, #3]
 8005c7c:	430b      	orrs	r3, r1
 8005c7e:	0a1b      	lsrs	r3, r3, #8
 8005c80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c84:	431a      	orrs	r2, r3
 8005c86:	4b3f      	ldr	r3, [pc, #252]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	0619      	lsls	r1, r3, #24
 8005c8c:	4b3d      	ldr	r3, [pc, #244]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c8e:	785b      	ldrb	r3, [r3, #1]
 8005c90:	041b      	lsls	r3, r3, #16
 8005c92:	4319      	orrs	r1, r3
 8005c94:	4b3b      	ldr	r3, [pc, #236]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c96:	789b      	ldrb	r3, [r3, #2]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	4939      	ldr	r1, [pc, #228]	@ (8005d84 <MX_LWIP_Init+0x240>)
 8005c9e:	78c9      	ldrb	r1, [r1, #3]
 8005ca0:	430b      	orrs	r3, r1
 8005ca2:	0e1b      	lsrs	r3, r3, #24
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	4a3a      	ldr	r2, [pc, #232]	@ (8005d90 <MX_LWIP_Init+0x24c>)
 8005ca8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005caa:	4b37      	ldr	r3, [pc, #220]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	061a      	lsls	r2, r3, #24
 8005cb0:	4b35      	ldr	r3, [pc, #212]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cb2:	785b      	ldrb	r3, [r3, #1]
 8005cb4:	041b      	lsls	r3, r3, #16
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	4b33      	ldr	r3, [pc, #204]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cba:	789b      	ldrb	r3, [r3, #2]
 8005cbc:	021b      	lsls	r3, r3, #8
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	4a31      	ldr	r2, [pc, #196]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cc2:	78d2      	ldrb	r2, [r2, #3]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	061a      	lsls	r2, r3, #24
 8005cc8:	4b2f      	ldr	r3, [pc, #188]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	0619      	lsls	r1, r3, #24
 8005cce:	4b2e      	ldr	r3, [pc, #184]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cd0:	785b      	ldrb	r3, [r3, #1]
 8005cd2:	041b      	lsls	r3, r3, #16
 8005cd4:	4319      	orrs	r1, r3
 8005cd6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cd8:	789b      	ldrb	r3, [r3, #2]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	430b      	orrs	r3, r1
 8005cde:	492a      	ldr	r1, [pc, #168]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005ce0:	78c9      	ldrb	r1, [r1, #3]
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005cea:	431a      	orrs	r2, r3
 8005cec:	4b26      	ldr	r3, [pc, #152]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	0619      	lsls	r1, r3, #24
 8005cf2:	4b25      	ldr	r3, [pc, #148]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	041b      	lsls	r3, r3, #16
 8005cf8:	4319      	orrs	r1, r3
 8005cfa:	4b23      	ldr	r3, [pc, #140]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005cfc:	789b      	ldrb	r3, [r3, #2]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	430b      	orrs	r3, r1
 8005d02:	4921      	ldr	r1, [pc, #132]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005d04:	78c9      	ldrb	r1, [r1, #3]
 8005d06:	430b      	orrs	r3, r1
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	4b1d      	ldr	r3, [pc, #116]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	0619      	lsls	r1, r3, #24
 8005d16:	4b1c      	ldr	r3, [pc, #112]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005d18:	785b      	ldrb	r3, [r3, #1]
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	4319      	orrs	r1, r3
 8005d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005d20:	789b      	ldrb	r3, [r3, #2]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	430b      	orrs	r3, r1
 8005d26:	4918      	ldr	r1, [pc, #96]	@ (8005d88 <MX_LWIP_Init+0x244>)
 8005d28:	78c9      	ldrb	r1, [r1, #3]
 8005d2a:	430b      	orrs	r3, r1
 8005d2c:	0e1b      	lsrs	r3, r3, #24
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	4a18      	ldr	r2, [pc, #96]	@ (8005d94 <MX_LWIP_Init+0x250>)
 8005d32:	6013      	str	r3, [r2, #0]
#endif

/* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8005d34:	4b18      	ldr	r3, [pc, #96]	@ (8005d98 <MX_LWIP_Init+0x254>)
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	4b18      	ldr	r3, [pc, #96]	@ (8005d9c <MX_LWIP_Init+0x258>)
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4b14      	ldr	r3, [pc, #80]	@ (8005d94 <MX_LWIP_Init+0x250>)
 8005d42:	4a13      	ldr	r2, [pc, #76]	@ (8005d90 <MX_LWIP_Init+0x24c>)
 8005d44:	4911      	ldr	r1, [pc, #68]	@ (8005d8c <MX_LWIP_Init+0x248>)
 8005d46:	4816      	ldr	r0, [pc, #88]	@ (8005da0 <MX_LWIP_Init+0x25c>)
 8005d48:	f001 fd14 	bl	8007774 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8005d4c:	4814      	ldr	r0, [pc, #80]	@ (8005da0 <MX_LWIP_Init+0x25c>)
 8005d4e:	f001 fecb 	bl	8007ae8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <MX_LWIP_Init+0x25c>)
 8005d54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005d58:	089b      	lsrs	r3, r3, #2
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d003      	beq.n	8005d6c <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8005d64:	480e      	ldr	r0, [pc, #56]	@ (8005da0 <MX_LWIP_Init+0x25c>)
 8005d66:	f001 fecf 	bl	8007b08 <netif_set_up>
 8005d6a:	e002      	b.n	8005d72 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005d6c:	480c      	ldr	r0, [pc, #48]	@ (8005da0 <MX_LWIP_Init+0x25c>)
 8005d6e:	f001 ff37 	bl	8007be0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005d72:	490c      	ldr	r1, [pc, #48]	@ (8005da4 <MX_LWIP_Init+0x260>)
 8005d74:	480a      	ldr	r0, [pc, #40]	@ (8005da0 <MX_LWIP_Init+0x25c>)
 8005d76:	f001 ffcd 	bl	8007d14 <netif_set_link_callback>
  /* USER CODE BEGIN 3 */
#ifdef USE_DHCP
  dhcp_start(&gnetif);
#endif
  /* USER CODE END 3 */
}
 8005d7a:	bf00      	nop
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000218 	.word	0x20000218
 8005d84:	2000021c 	.word	0x2000021c
 8005d88:	20000220 	.word	0x20000220
 8005d8c:	2000020c 	.word	0x2000020c
 8005d90:	20000210 	.word	0x20000210
 8005d94:	20000214 	.word	0x20000214
 8005d98:	08013d75 	.word	0x08013d75
 8005d9c:	08006029 	.word	0x08006029
 8005da0:	200001d4 	.word	0x200001d4
 8005da4:	080060d1 	.word	0x080060d1

08005da8 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4_1 */
  /* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8005dac:	4805      	ldr	r0, [pc, #20]	@ (8005dc4 <MX_LWIP_Process+0x1c>)
 8005dae:	f000 f91b 	bl	8005fe8 <ethernetif_input>

  /* USER CODE BEGIN 4_2 */
  ethernet_transmit();
 8005db2:	f000 f9a5 	bl	8006100 <ethernet_transmit>

  /* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8005db6:	f009 f8b3 	bl	800ef20 <sys_check_timeouts>

  /* USER CODE BEGIN 4_3 */
  ethernetif_set_link(&gnetif);
 8005dba:	4802      	ldr	r0, [pc, #8]	@ (8005dc4 <MX_LWIP_Process+0x1c>)
 8005dbc:	f000 f96a 	bl	8006094 <ethernetif_set_link>

  /* USER CODE END 4_3 */
}
 8005dc0:	bf00      	nop
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	200001d4 	.word	0x200001d4

08005dc8 <ENC_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void ENC_MspInit(ENC_HandleTypeDef* encHandle)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b088      	sub	sp, #32
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dd0:	4b12      	ldr	r3, [pc, #72]	@ (8005e1c <ENC_MspInit+0x54>)
 8005dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dd4:	4a11      	ldr	r2, [pc, #68]	@ (8005e1c <ENC_MspInit+0x54>)
 8005dd6:	f043 0302 	orr.w	r3, r3, #2
 8005dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8005e1c <ENC_MspInit+0x54>)
 8005dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de0:	f003 0302 	and.w	r3, r3, #2
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]

  /* ENC28J60_CS ----------------------> PB12 */
  /*Configure GPIO pins : PB12 */
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8005de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005dec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005dee:	2301      	movs	r3, #1
 8005df0:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8005df6:	2301      	movs	r3, #1
 8005df8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005dfa:	f107 030c 	add.w	r3, r7, #12
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4807      	ldr	r0, [pc, #28]	@ (8005e20 <ENC_MspInit+0x58>)
 8005e02:	f7fc f8f3 	bl	8001fec <HAL_GPIO_Init>

  /* Deselect ENC28J60 module */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8005e06:	2201      	movs	r2, #1
 8005e08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e0c:	4804      	ldr	r0, [pc, #16]	@ (8005e20 <ENC_MspInit+0x58>)
 8005e0e:	f7fc fa97 	bl	8002340 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
}
 8005e12:	bf00      	nop
 8005e14:	3720      	adds	r7, #32
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40021000 	.word	0x40021000
 8005e20:	48000400 	.word	0x48000400

08005e24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2206      	movs	r2, #6
 8005e30:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] = 0x00;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] = 0x80;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2280      	movs	r2, #128	@ 0x80
 8005e40:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] = 0xE1;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	22e1      	movs	r2, #225	@ 0xe1
 8005e48:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] = 0x00;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] = 0x00;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] = 0x00;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  EncHandle.Init.MACAddr = netif->hwaddr;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	332a      	adds	r3, #42	@ 0x2a
 8005e68:	4a18      	ldr	r2, [pc, #96]	@ (8005ecc <low_level_init+0xa8>)
 8005e6a:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005e6c:	4b17      	ldr	r3, [pc, #92]	@ (8005ecc <low_level_init+0xa8>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8005e72:	4b16      	ldr	r3, [pc, #88]	@ (8005ecc <low_level_init+0xa8>)
 8005e74:	2200      	movs	r2, #0
 8005e76:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits = EIE_LINKIE;
 8005e78:	4b14      	ldr	r3, [pc, #80]	@ (8005ecc <low_level_init+0xa8>)
 8005e7a:	2210      	movs	r2, #16
 8005e7c:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC_MspInit(&EncHandle);
 8005e7e:	4813      	ldr	r0, [pc, #76]	@ (8005ecc <low_level_init+0xa8>)
 8005e80:	f7ff ffa2 	bl	8005dc8 <ENC_MspInit>

  /* maximum transfer unit */
  netif->mtu = 1500;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8005e8a:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005e92:	f043 030a 	orr.w	r3, r3, #10
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Start the EN28J60 module */
  if(enc_start(&EncHandle))
 8005e9e:	480b      	ldr	r0, [pc, #44]	@ (8005ecc <low_level_init+0xa8>)
 8005ea0:	f7fa fc22 	bl	80006e8 <enc_start>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <low_level_init+0x9e>
  {
    /* Set the MAC address */
    enc_set_MAC(&EncHandle);
 8005eaa:	4808      	ldr	r0, [pc, #32]	@ (8005ecc <low_level_init+0xa8>)
 8005eac:	f7fa fd08 	bl	80008c0 <enc_set_MAC>

    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005eb6:	f043 0304 	orr.w	r3, r3, #4
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000224 	.word	0x20000224

08005ed0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 8005eda:	2300      	movs	r3, #0
 8005edc:	613b      	str	r3, [r7, #16]

  /* Prepare ENC28J60 Tx buffer */
  errval = enc_prepare_txbuffer(&EncHandle, p->tot_len);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	891b      	ldrh	r3, [r3, #8]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	481a      	ldr	r0, [pc, #104]	@ (8005f50 <low_level_output+0x80>)
 8005ee6:	f7fa fd28 	bl	800093a <enc_prepare_txbuffer>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
  if(errval != ERR_OK)
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <low_level_output+0x2c>
  {
    return errval;
 8005ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005efa:	e024      	b.n	8005f46 <low_level_output+0x76>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p;q != NULL;q = q->next)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e010      	b.n	8005f24 <low_level_output+0x54>
  {
    enc_wrbuffer(q->payload, q->len);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	685a      	ldr	r2, [r3, #4]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	895b      	ldrh	r3, [r3, #10]
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	4610      	mov	r0, r2
 8005f0e:	f7fa fd69 	bl	80009e4 <enc_wrbuffer>
    framelength += q->len;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	895b      	ldrh	r3, [r3, #10]
 8005f16:	461a      	mov	r2, r3
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	613b      	str	r3, [r7, #16]
  for(q = p;q != NULL;q = q->next)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	617b      	str	r3, [r7, #20]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d1eb      	bne.n	8005f02 <low_level_output+0x32>
  }

  if(framelength != p->tot_len)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	891b      	ldrh	r3, [r3, #8]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d002      	beq.n	8005f3c <low_level_output+0x6c>
  {
    return ERR_BUF;
 8005f36:	f06f 0301 	mvn.w	r3, #1
 8005f3a:	e004      	b.n	8005f46 <low_level_output+0x76>
  }

  EncHandle.transmitLength = p->tot_len;
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	891a      	ldrh	r2, [r3, #8]
 8005f40:	4b03      	ldr	r3, [pc, #12]	@ (8005f50 <low_level_output+0x80>)
 8005f42:	831a      	strh	r2, [r3, #24]
  /* Actual transmission is triggered in main loop */

  return ERR_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000224 	.word	0x20000224

08005f54 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]

  if(!enc_get_received_frame(&EncHandle))
 8005f64:	481e      	ldr	r0, [pc, #120]	@ (8005fe0 <low_level_input+0x8c>)
 8005f66:	f7fa fdb7 	bl	8000ad8 <enc_get_received_frame>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	f083 0301 	eor.w	r3, r3, #1
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <low_level_input+0x26>
  {
    return NULL;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e02e      	b.n	8005fd8 <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 8005f7a:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <low_level_input+0x8c>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t*) EncHandle.RxFrameInfos.buffer;
 8005f80:	4b18      	ldr	r3, [pc, #96]	@ (8005fe4 <low_level_input+0x90>)
 8005f82:	60fb      	str	r3, [r7, #12]

  if(len > 0)
 8005f84:	8a7b      	ldrh	r3, [r7, #18]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005f8a:	8a7b      	ldrh	r3, [r7, #18]
 8005f8c:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005f90:	4619      	mov	r1, r3
 8005f92:	2000      	movs	r0, #0
 8005f94:	f001 ff5a 	bl	8007e4c <pbuf_alloc>
 8005f98:	61f8      	str	r0, [r7, #28]
  }

  if(p != NULL)
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d01a      	beq.n	8005fd6 <low_level_input+0x82>
  {
    bufferoffset = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]

    for(q = p;q != NULL;q = q->next)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	61bb      	str	r3, [r7, #24]
 8005fa8:	e012      	b.n	8005fd0 <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy((uint8_t*) ((uint8_t*) q->payload), (uint8_t*) ((uint8_t*) buffer + bufferoffset), q->len);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	6858      	ldr	r0, [r3, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	18d1      	adds	r1, r2, r3
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	895b      	ldrh	r3, [r3, #10]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f00e f9c6 	bl	801434a <memcpy>
      bufferoffset = bufferoffset + q->len;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	895b      	ldrh	r3, [r3, #10]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	4413      	add	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]
    for(q = p;q != NULL;q = q->next)
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	61bb      	str	r3, [r7, #24]
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1e9      	bne.n	8005faa <low_level_input+0x56>
    }
  }

  return p;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20000224 	.word	0x20000224
 8005fe4:	20000250 	.word	0x20000250

08005fe8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f7ff ffaf 	bl	8005f54 <low_level_input>
 8005ff6:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if(p == NULL)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d010      	beq.n	8006020 <ethernetif_input+0x38>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	4798      	blx	r3
 8006008:	4603      	mov	r3, r0
 800600a:	72fb      	strb	r3, [r7, #11]

  if(err != ERR_OK)
 800600c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f002 f9fd 	bl	8008414 <pbuf_free>
    p = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e000      	b.n	8006022 <ethernetif_input+0x3a>
    return;
 8006020:	bf00      	nop
  }
}
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d106      	bne.n	8006044 <ethernetif_init+0x1c>
 8006036:	4b0e      	ldr	r3, [pc, #56]	@ (8006070 <ethernetif_init+0x48>)
 8006038:	f240 121b 	movw	r2, #283	@ 0x11b
 800603c:	490d      	ldr	r1, [pc, #52]	@ (8006074 <ethernetif_init+0x4c>)
 800603e:	480e      	ldr	r0, [pc, #56]	@ (8006078 <ethernetif_init+0x50>)
 8006040:	f00e f86e 	bl	8014120 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2265      	movs	r2, #101	@ 0x65
 8006048:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	226e      	movs	r2, #110	@ 0x6e
 8006050:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a09      	ldr	r2, [pc, #36]	@ (800607c <ethernetif_init+0x54>)
 8006058:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a08      	ldr	r2, [pc, #32]	@ (8006080 <ethernetif_init+0x58>)
 800605e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f7ff fedf 	bl	8005e24 <low_level_init>

  return ERR_OK;
 8006066:	2300      	movs	r3, #0
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	080153a8 	.word	0x080153a8
 8006074:	080153c4 	.word	0x080153c4
 8006078:	080153d4 	.word	0x080153d4
 800607c:	08012091 	.word	0x08012091
 8006080:	08005ed1 	.word	0x08005ed1

08006084 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006088:	f7fb fe9e 	bl	8001dc8 <HAL_GetTick>
 800608c:	4603      	mov	r3, r0
}
 800608e:	4618      	mov	r0, r3
 8006090:	bd80      	pop	{r7, pc}
	...

08006094 <ethernetif_set_link>:
 * @retval None
 */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Handle ENC28J60 interrupt */
  enc_irq_handler(&EncHandle);
 800609c:	480b      	ldr	r0, [pc, #44]	@ (80060cc <ethernetif_set_link+0x38>)
 800609e:	f7fa fdb7 	bl	8000c10 <enc_irq_handler>

  /* Check whether the link is up or down*/
  if(((EncHandle.LinkStatus) & PHSTAT2_LSTAT) != 0)
 80060a2:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <ethernetif_set_link+0x38>)
 80060a4:	8adb      	ldrh	r3, [r3, #22]
 80060a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <ethernetif_set_link+0x22>
  {
    netif_set_link_up(netif);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 fdc8 	bl	8007c44 <netif_set_link_up>
 80060b4:	e002      	b.n	80060bc <ethernetif_set_link+0x28>
  }
  else
  {
    netif_set_link_down(netif);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f001 fdfc 	bl	8007cb4 <netif_set_link_down>
  }

  /* Reenable interrupts */
  enc_enable_interrupts(EIE_INTIE);
 80060bc:	2080      	movs	r0, #128	@ 0x80
 80060be:	f7fa fd99 	bl	8000bf4 <enc_enable_interrupts>
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000224 	.word	0x20000224

080060d0 <ethernetif_update_config>:
 *         to update low level driver configuration.
 * @param  netif: The network interface
 * @retval None
 */
void ethernetif_update_config(struct netif *netif)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80060de:	089b      	lsrs	r3, r3, #2
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d002      	beq.n	80060f0 <ethernetif_update_config+0x20>
  {
    /* Restart the EN28J60 module */
    low_level_init(netif);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7ff fe9a 	bl	8005e24 <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff fc2d 	bl	8005950 <ethernetif_notify_conn_changed>
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
	...

08006100 <ethernet_transmit>:
/* USER CODE END 8 */
#endif /* LWIP_NETIF_LINK_CALLBACK */

/* USER CODE BEGIN 9 */
void ethernet_transmit(void)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	af00      	add	r7, sp, #0
  enc_transmit(&EncHandle);
 8006104:	4802      	ldr	r0, [pc, #8]	@ (8006110 <ethernet_transmit+0x10>)
 8006106:	f7fa fc87 	bl	8000a18 <enc_transmit>
}
 800610a:	bf00      	nop
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20000224 	.word	0x20000224

08006114 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	683a      	ldr	r2, [r7, #0]
 8006138:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	683a      	ldr	r2, [r7, #0]
 800613e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	3714      	adds	r7, #20
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr

0800615c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6892      	ldr	r2, [r2, #8]
 8006172:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	6852      	ldr	r2, [r2, #4]
 800617c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	429a      	cmp	r2, r3
 8006186:	d103      	bne.n	8006190 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1e5a      	subs	r2, r3, #1
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b086      	sub	sp, #24
 80061b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061ba:	4b4f      	ldr	r3, [pc, #316]	@ (80062f8 <xTaskIncrementTick+0x148>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 808f 	bne.w	80062e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80061c4:	4b4d      	ldr	r3, [pc, #308]	@ (80062fc <xTaskIncrementTick+0x14c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	3301      	adds	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80061cc:	4a4b      	ldr	r2, [pc, #300]	@ (80062fc <xTaskIncrementTick+0x14c>)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d121      	bne.n	800621c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80061d8:	4b49      	ldr	r3, [pc, #292]	@ (8006300 <xTaskIncrementTick+0x150>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00b      	beq.n	80061fa <xTaskIncrementTick+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	e7fd      	b.n	80061f6 <xTaskIncrementTick+0x46>
 80061fa:	4b41      	ldr	r3, [pc, #260]	@ (8006300 <xTaskIncrementTick+0x150>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	4b40      	ldr	r3, [pc, #256]	@ (8006304 <xTaskIncrementTick+0x154>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a3e      	ldr	r2, [pc, #248]	@ (8006300 <xTaskIncrementTick+0x150>)
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4a3e      	ldr	r2, [pc, #248]	@ (8006304 <xTaskIncrementTick+0x154>)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6013      	str	r3, [r2, #0]
 800620e:	4b3e      	ldr	r3, [pc, #248]	@ (8006308 <xTaskIncrementTick+0x158>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	4a3c      	ldr	r2, [pc, #240]	@ (8006308 <xTaskIncrementTick+0x158>)
 8006216:	6013      	str	r3, [r2, #0]
 8006218:	f000 f8e0 	bl	80063dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800621c:	4b3b      	ldr	r3, [pc, #236]	@ (800630c <xTaskIncrementTick+0x15c>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	429a      	cmp	r2, r3
 8006224:	d348      	bcc.n	80062b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006226:	4b36      	ldr	r3, [pc, #216]	@ (8006300 <xTaskIncrementTick+0x150>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d104      	bne.n	800623a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006230:	4b36      	ldr	r3, [pc, #216]	@ (800630c <xTaskIncrementTick+0x15c>)
 8006232:	f04f 32ff 	mov.w	r2, #4294967295
 8006236:	601a      	str	r2, [r3, #0]
					break;
 8006238:	e03e      	b.n	80062b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800623a:	4b31      	ldr	r3, [pc, #196]	@ (8006300 <xTaskIncrementTick+0x150>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800624a:	693a      	ldr	r2, [r7, #16]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	429a      	cmp	r2, r3
 8006250:	d203      	bcs.n	800625a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006252:	4a2e      	ldr	r2, [pc, #184]	@ (800630c <xTaskIncrementTick+0x15c>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006258:	e02e      	b.n	80062b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	3304      	adds	r3, #4
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ff7c 	bl	800615c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	3318      	adds	r3, #24
 8006270:	4618      	mov	r0, r3
 8006272:	f7ff ff73 	bl	800615c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	2201      	movs	r2, #1
 800627c:	409a      	lsls	r2, r3
 800627e:	4b24      	ldr	r3, [pc, #144]	@ (8006310 <xTaskIncrementTick+0x160>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4313      	orrs	r3, r2
 8006284:	4a22      	ldr	r2, [pc, #136]	@ (8006310 <xTaskIncrementTick+0x160>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a1f      	ldr	r2, [pc, #124]	@ (8006314 <xTaskIncrementTick+0x164>)
 8006296:	441a      	add	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7ff ff38 	bl	8006114 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a8:	4b1b      	ldr	r3, [pc, #108]	@ (8006318 <xTaskIncrementTick+0x168>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d3b9      	bcc.n	8006226 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80062b2:	2301      	movs	r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062b6:	e7b6      	b.n	8006226 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80062b8:	4b17      	ldr	r3, [pc, #92]	@ (8006318 <xTaskIncrementTick+0x168>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062be:	4915      	ldr	r1, [pc, #84]	@ (8006314 <xTaskIncrementTick+0x164>)
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	440b      	add	r3, r1
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d901      	bls.n	80062d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80062d0:	2301      	movs	r3, #1
 80062d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80062d4:	4b11      	ldr	r3, [pc, #68]	@ (800631c <xTaskIncrementTick+0x16c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d007      	beq.n	80062ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80062dc:	2301      	movs	r3, #1
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	e004      	b.n	80062ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80062e2:	4b0f      	ldr	r3, [pc, #60]	@ (8006320 <xTaskIncrementTick+0x170>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a0d      	ldr	r2, [pc, #52]	@ (8006320 <xTaskIncrementTick+0x170>)
 80062ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80062ec:	697b      	ldr	r3, [r7, #20]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000904 	.word	0x20000904
 80062fc:	200008ec 	.word	0x200008ec
 8006300:	200008e4 	.word	0x200008e4
 8006304:	200008e8 	.word	0x200008e8
 8006308:	200008fc 	.word	0x200008fc
 800630c:	20000900 	.word	0x20000900
 8006310:	200008f0 	.word	0x200008f0
 8006314:	20000858 	.word	0x20000858
 8006318:	20000854 	.word	0x20000854
 800631c:	200008f8 	.word	0x200008f8
 8006320:	200008f4 	.word	0x200008f4

08006324 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800632a:	4b27      	ldr	r3, [pc, #156]	@ (80063c8 <vTaskSwitchContext+0xa4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006332:	4b26      	ldr	r3, [pc, #152]	@ (80063cc <vTaskSwitchContext+0xa8>)
 8006334:	2201      	movs	r2, #1
 8006336:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006338:	e040      	b.n	80063bc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800633a:	4b24      	ldr	r3, [pc, #144]	@ (80063cc <vTaskSwitchContext+0xa8>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006340:	4b23      	ldr	r3, [pc, #140]	@ (80063d0 <vTaskSwitchContext+0xac>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	fab3 f383 	clz	r3, r3
 800634c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800634e:	7afb      	ldrb	r3, [r7, #11]
 8006350:	f1c3 031f 	rsb	r3, r3, #31
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	491f      	ldr	r1, [pc, #124]	@ (80063d4 <vTaskSwitchContext+0xb0>)
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	4613      	mov	r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	440b      	add	r3, r1
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10b      	bne.n	8006382 <vTaskSwitchContext+0x5e>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	607b      	str	r3, [r7, #4]
}
 800637c:	bf00      	nop
 800637e:	bf00      	nop
 8006380:	e7fd      	b.n	800637e <vTaskSwitchContext+0x5a>
 8006382:	697a      	ldr	r2, [r7, #20]
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4a11      	ldr	r2, [pc, #68]	@ (80063d4 <vTaskSwitchContext+0xb0>)
 800638e:	4413      	add	r3, r2
 8006390:	613b      	str	r3, [r7, #16]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	3308      	adds	r3, #8
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d104      	bne.n	80063b2 <vTaskSwitchContext+0x8e>
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	4a07      	ldr	r2, [pc, #28]	@ (80063d8 <vTaskSwitchContext+0xb4>)
 80063ba:	6013      	str	r3, [r2, #0]
}
 80063bc:	bf00      	nop
 80063be:	371c      	adds	r7, #28
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	20000904 	.word	0x20000904
 80063cc:	200008f8 	.word	0x200008f8
 80063d0:	200008f0 	.word	0x200008f0
 80063d4:	20000858 	.word	0x20000858
 80063d8:	20000854 	.word	0x20000854

080063dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006414 <prvResetNextTaskUnblockTime+0x38>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <prvResetNextTaskUnblockTime+0x3c>)
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063f4:	e008      	b.n	8006408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b07      	ldr	r3, [pc, #28]	@ (8006414 <prvResetNextTaskUnblockTime+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a04      	ldr	r2, [pc, #16]	@ (8006418 <prvResetNextTaskUnblockTime+0x3c>)
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	200008e4 	.word	0x200008e4
 8006418:	20000900 	.word	0x20000900
 800641c:	00000000 	.word	0x00000000

08006420 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	@ (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000854 	.word	0x20000854
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
	...

08006450 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006450:	f3ef 8009 	mrs	r0, PSP
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	4b15      	ldr	r3, [pc, #84]	@ (80064b0 <pxCurrentTCBConst>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	f01e 0f10 	tst.w	lr, #16
 8006460:	bf08      	it	eq
 8006462:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006466:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006470:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006474:	f380 8811 	msr	BASEPRI, r0
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f7ff ff50 	bl	8006324 <vTaskSwitchContext>
 8006484:	f04f 0000 	mov.w	r0, #0
 8006488:	f380 8811 	msr	BASEPRI, r0
 800648c:	bc09      	pop	{r0, r3}
 800648e:	6819      	ldr	r1, [r3, #0]
 8006490:	6808      	ldr	r0, [r1, #0]
 8006492:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006496:	f01e 0f10 	tst.w	lr, #16
 800649a:	bf08      	it	eq
 800649c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064a0:	f380 8809 	msr	PSP, r0
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4770      	bx	lr
 80064aa:	bf00      	nop
 80064ac:	f3af 8000 	nop.w

080064b0 <pxCurrentTCBConst>:
 80064b0:	20000854 	.word	0x20000854
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop

080064b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	607b      	str	r3, [r7, #4]
}
 80064d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80064d2:	f7ff fe6d 	bl	80061b0 <xTaskIncrementTick>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d003      	beq.n	80064e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80064dc:	4b06      	ldr	r3, [pc, #24]	@ (80064f8 <SysTick_Handler+0x40>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80064f0:	bf00      	nop
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	e000ed04 	.word	0xe000ed04

080064fc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	4603      	mov	r3, r0
 8006504:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006506:	88fb      	ldrh	r3, [r7, #6]
 8006508:	021b      	lsls	r3, r3, #8
 800650a:	b21a      	sxth	r2, r3
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	b29b      	uxth	r3, r3
 8006512:	b21b      	sxth	r3, r3
 8006514:	4313      	orrs	r3, r2
 8006516:	b21b      	sxth	r3, r3
 8006518:	b29b      	uxth	r3, r3
}
 800651a:	4618      	mov	r0, r3
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr

08006526 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006526:	b480      	push	{r7}
 8006528:	b083      	sub	sp, #12
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	061a      	lsls	r2, r3, #24
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	021b      	lsls	r3, r3, #8
 8006536:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	0a1b      	lsrs	r3, r3, #8
 8006540:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	0e1b      	lsrs	r3, r3, #24
 800654a:	4313      	orrs	r3, r2
}
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr
	...

08006568 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	6039      	str	r1, [r7, #0]
 8006572:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8006574:	79fb      	ldrb	r3, [r7, #7]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d80f      	bhi.n	800659a <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d006      	beq.n	800658e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8006580:	79fb      	ldrb	r3, [r7, #7]
 8006582:	4909      	ldr	r1, [pc, #36]	@ (80065a8 <dns_setserver+0x40>)
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800658c:	e005      	b.n	800659a <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	4905      	ldr	r1, [pc, #20]	@ (80065a8 <dns_setserver+0x40>)
 8006592:	4a06      	ldr	r2, [pc, #24]	@ (80065ac <dns_setserver+0x44>)
 8006594:	6812      	ldr	r2, [r2, #0]
 8006596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800659a:	bf00      	nop
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000d88 	.word	0x20000d88
 80065ac:	08018314 	.word	0x08018314

080065b0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80065b4:	f000 faa8 	bl	8006b08 <dns_check_entries>
}
 80065b8:	bf00      	nop
 80065ba:	bd80      	pop	{r7, pc}

080065bc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b090      	sub	sp, #64	@ 0x40
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80065c6:	79fa      	ldrb	r2, [r7, #7]
 80065c8:	4613      	mov	r3, r2
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	4413      	add	r3, r2
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	4a6c      	ldr	r2, [pc, #432]	@ (8006784 <dns_send+0x1c8>)
 80065d2:	4413      	add	r3, r2
 80065d4:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	7adb      	ldrb	r3, [r3, #11]
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d906      	bls.n	80065ec <dns_send+0x30>
 80065de:	4b6a      	ldr	r3, [pc, #424]	@ (8006788 <dns_send+0x1cc>)
 80065e0:	f240 22fa 	movw	r2, #762	@ 0x2fa
 80065e4:	4969      	ldr	r1, [pc, #420]	@ (800678c <dns_send+0x1d0>)
 80065e6:	486a      	ldr	r0, [pc, #424]	@ (8006790 <dns_send+0x1d4>)
 80065e8:	f00d fd9a 	bl	8014120 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80065ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ee:	7adb      	ldrb	r3, [r3, #11]
 80065f0:	461a      	mov	r2, r3
 80065f2:	4b68      	ldr	r3, [pc, #416]	@ (8006794 <dns_send+0x1d8>)
 80065f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d109      	bne.n	8006610 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2100      	movs	r1, #0
 8006600:	4618      	mov	r0, r3
 8006602:	f000 f8cb 	bl	800679c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8006606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006608:	2200      	movs	r2, #0
 800660a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800660c:	2300      	movs	r3, #0
 800660e:	e0b4      	b.n	800677a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8006610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006612:	3310      	adds	r3, #16
 8006614:	4618      	mov	r0, r3
 8006616:	f7f9 fddb 	bl	80001d0 <strlen>
 800661a:	4603      	mov	r3, r0
 800661c:	b29b      	uxth	r3, r3
 800661e:	3312      	adds	r3, #18
 8006620:	b29b      	uxth	r3, r3
 8006622:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8006626:	4619      	mov	r1, r3
 8006628:	2036      	movs	r0, #54	@ 0x36
 800662a:	f001 fc0f 	bl	8007e4c <pbuf_alloc>
 800662e:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8006630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006632:	2b00      	cmp	r3, #0
 8006634:	f000 8095 	beq.w	8006762 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8006638:	f107 0310 	add.w	r3, r7, #16
 800663c:	220c      	movs	r2, #12
 800663e:	2100      	movs	r1, #0
 8006640:	4618      	mov	r0, r3
 8006642:	f00d fe0c 	bl	801425e <memset>
    hdr.id = lwip_htons(entry->txid);
 8006646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006648:	891b      	ldrh	r3, [r3, #8]
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff ff56 	bl	80064fc <lwip_htons>
 8006650:	4603      	mov	r3, r0
 8006652:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8006654:	2301      	movs	r3, #1
 8006656:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8006658:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800665c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800665e:	f107 0310 	add.w	r3, r7, #16
 8006662:	220c      	movs	r2, #12
 8006664:	4619      	mov	r1, r3
 8006666:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006668:	f002 f97c 	bl	8008964 <pbuf_take>
    hostname = entry->name;
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	3310      	adds	r3, #16
 8006670:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	3b01      	subs	r3, #1
 8006676:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8006678:	230c      	movs	r3, #12
 800667a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800667c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800667e:	3301      	adds	r3, #1
 8006680:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800668c:	e007      	b.n	800669e <dns_send+0xe2>
        ++n;
 800668e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006692:	3301      	adds	r3, #1
 8006694:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8006698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800669a:	3301      	adds	r3, #1
 800669c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800669e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066a4:	d003      	beq.n	80066ae <dns_send+0xf2>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ef      	bne.n	800668e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80066ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80066b6:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80066b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066bc:	4413      	add	r3, r2
 80066be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80066c2:	4293      	cmp	r3, r2
 80066c4:	dc53      	bgt.n	800676e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80066c6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80066ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066cc:	4619      	mov	r1, r3
 80066ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066d0:	f002 fa76 	bl	8008bc0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80066d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066d6:	3301      	adds	r3, #1
 80066d8:	b29b      	uxth	r3, r3
 80066da:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80066dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80066e0:	f002 f9d2 	bl	8008a88 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80066e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80066e8:	b29a      	uxth	r2, r3
 80066ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066ec:	4413      	add	r3, r2
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3301      	adds	r3, #1
 80066f2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 80066f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1bf      	bne.n	800667c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80066fc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80066fe:	2200      	movs	r2, #0
 8006700:	4619      	mov	r1, r3
 8006702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006704:	f002 fa5c 	bl	8008bc0 <pbuf_put_at>
    query_idx++;
 8006708:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800670a:	3301      	adds	r3, #1
 800670c:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800670e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006712:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8006714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006718:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800671a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800671c:	f107 010c 	add.w	r1, r7, #12
 8006720:	2204      	movs	r2, #4
 8006722:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006724:	f002 f9b0 	bl	8008a88 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8006728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800672a:	7bdb      	ldrb	r3, [r3, #15]
 800672c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8006730:	2335      	movs	r3, #53	@ 0x35
 8006732:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 8006734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006736:	7adb      	ldrb	r3, [r3, #11]
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4a16      	ldr	r2, [pc, #88]	@ (8006794 <dns_send+0x1d8>)
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8006740:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006744:	4a14      	ldr	r2, [pc, #80]	@ (8006798 <dns_send+0x1dc>)
 8006746:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800674a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006750:	f008 fe02 	bl	800f358 <udp_sendto>
 8006754:	4603      	mov	r3, r0
 8006756:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800675a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800675c:	f001 fe5a 	bl	8008414 <pbuf_free>
 8006760:	e002      	b.n	8006768 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8006762:	23ff      	movs	r3, #255	@ 0xff
 8006764:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8006768:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800676c:	e005      	b.n	800677a <dns_send+0x1be>
        goto overflow_return;
 800676e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8006770:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006772:	f001 fe4f 	bl	8008414 <pbuf_free>
  return ERR_VAL;
 8006776:	f06f 0305 	mvn.w	r3, #5
}
 800677a:	4618      	mov	r0, r3
 800677c:	3740      	adds	r7, #64	@ 0x40
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	20000918 	.word	0x20000918
 8006788:	080153fc 	.word	0x080153fc
 800678c:	0801542c 	.word	0x0801542c
 8006790:	08015444 	.word	0x08015444
 8006794:	20000d88 	.word	0x20000d88
 8006798:	20000908 	.word	0x20000908

0800679c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	4603      	mov	r3, r0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80067a8:	2300      	movs	r3, #0
 80067aa:	73fb      	strb	r3, [r7, #15]
 80067ac:	e03d      	b.n	800682a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80067ae:	7bfa      	ldrb	r2, [r7, #15]
 80067b0:	4957      	ldr	r1, [pc, #348]	@ (8006910 <dns_call_found+0x174>)
 80067b2:	4613      	mov	r3, r2
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	4413      	add	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	440b      	add	r3, r1
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d030      	beq.n	8006824 <dns_call_found+0x88>
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	4952      	ldr	r1, [pc, #328]	@ (8006910 <dns_call_found+0x174>)
 80067c6:	4613      	mov	r3, r2
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	440b      	add	r3, r1
 80067d0:	3308      	adds	r3, #8
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	79fa      	ldrb	r2, [r7, #7]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d124      	bne.n	8006824 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80067da:	7bfa      	ldrb	r2, [r7, #15]
 80067dc:	494c      	ldr	r1, [pc, #304]	@ (8006910 <dns_call_found+0x174>)
 80067de:	4613      	mov	r3, r2
 80067e0:	005b      	lsls	r3, r3, #1
 80067e2:	4413      	add	r3, r2
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	440b      	add	r3, r1
 80067e8:	681c      	ldr	r4, [r3, #0]
 80067ea:	79fa      	ldrb	r2, [r7, #7]
 80067ec:	4613      	mov	r3, r2
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	4413      	add	r3, r2
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	3310      	adds	r3, #16
 80067f6:	4a47      	ldr	r2, [pc, #284]	@ (8006914 <dns_call_found+0x178>)
 80067f8:	1898      	adds	r0, r3, r2
 80067fa:	7bfa      	ldrb	r2, [r7, #15]
 80067fc:	4944      	ldr	r1, [pc, #272]	@ (8006910 <dns_call_found+0x174>)
 80067fe:	4613      	mov	r3, r2
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	4413      	add	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	3304      	adds	r3, #4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8006812:	7bfa      	ldrb	r2, [r7, #15]
 8006814:	493e      	ldr	r1, [pc, #248]	@ (8006910 <dns_call_found+0x174>)
 8006816:	4613      	mov	r3, r2
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	4413      	add	r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	440b      	add	r3, r1
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	3301      	adds	r3, #1
 8006828:	73fb      	strb	r3, [r7, #15]
 800682a:	7bfb      	ldrb	r3, [r7, #15]
 800682c:	2b03      	cmp	r3, #3
 800682e:	d9be      	bls.n	80067ae <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006830:	2300      	movs	r3, #0
 8006832:	73fb      	strb	r3, [r7, #15]
 8006834:	e031      	b.n	800689a <dns_call_found+0xfe>
    if (i == idx) {
 8006836:	7bfa      	ldrb	r2, [r7, #15]
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	429a      	cmp	r2, r3
 800683c:	d029      	beq.n	8006892 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800683e:	7bfa      	ldrb	r2, [r7, #15]
 8006840:	4934      	ldr	r1, [pc, #208]	@ (8006914 <dns_call_found+0x178>)
 8006842:	4613      	mov	r3, r2
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	4413      	add	r3, r2
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	440b      	add	r3, r1
 800684c:	330a      	adds	r3, #10
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b02      	cmp	r3, #2
 8006852:	d11f      	bne.n	8006894 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8006854:	7bfa      	ldrb	r2, [r7, #15]
 8006856:	492f      	ldr	r1, [pc, #188]	@ (8006914 <dns_call_found+0x178>)
 8006858:	4613      	mov	r3, r2
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	4413      	add	r3, r2
 800685e:	011b      	lsls	r3, r3, #4
 8006860:	440b      	add	r3, r1
 8006862:	330f      	adds	r3, #15
 8006864:	7819      	ldrb	r1, [r3, #0]
 8006866:	79fa      	ldrb	r2, [r7, #7]
 8006868:	482a      	ldr	r0, [pc, #168]	@ (8006914 <dns_call_found+0x178>)
 800686a:	4613      	mov	r3, r2
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	4413      	add	r3, r2
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	4403      	add	r3, r0
 8006874:	330f      	adds	r3, #15
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	4299      	cmp	r1, r3
 800687a:	d10b      	bne.n	8006894 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800687c:	79fa      	ldrb	r2, [r7, #7]
 800687e:	4925      	ldr	r1, [pc, #148]	@ (8006914 <dns_call_found+0x178>)
 8006880:	4613      	mov	r3, r2
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	4413      	add	r3, r2
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	440b      	add	r3, r1
 800688a:	330f      	adds	r3, #15
 800688c:	2204      	movs	r2, #4
 800688e:	701a      	strb	r2, [r3, #0]
        break;
 8006890:	e006      	b.n	80068a0 <dns_call_found+0x104>
      continue; /* only check other requests */
 8006892:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8006894:	7bfb      	ldrb	r3, [r7, #15]
 8006896:	3301      	adds	r3, #1
 8006898:	73fb      	strb	r3, [r7, #15]
 800689a:	7bfb      	ldrb	r3, [r7, #15]
 800689c:	2b03      	cmp	r3, #3
 800689e:	d9ca      	bls.n	8006836 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80068a0:	79fa      	ldrb	r2, [r7, #7]
 80068a2:	491c      	ldr	r1, [pc, #112]	@ (8006914 <dns_call_found+0x178>)
 80068a4:	4613      	mov	r3, r2
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	4413      	add	r3, r2
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	440b      	add	r3, r1
 80068ae:	330f      	adds	r3, #15
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d827      	bhi.n	8006906 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80068b6:	79fa      	ldrb	r2, [r7, #7]
 80068b8:	4916      	ldr	r1, [pc, #88]	@ (8006914 <dns_call_found+0x178>)
 80068ba:	4613      	mov	r3, r2
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	4413      	add	r3, r2
 80068c0:	011b      	lsls	r3, r3, #4
 80068c2:	440b      	add	r3, r1
 80068c4:	330f      	adds	r3, #15
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	4b13      	ldr	r3, [pc, #76]	@ (8006918 <dns_call_found+0x17c>)
 80068cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f009 f827 	bl	800f924 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80068d6:	79fa      	ldrb	r2, [r7, #7]
 80068d8:	490e      	ldr	r1, [pc, #56]	@ (8006914 <dns_call_found+0x178>)
 80068da:	4613      	mov	r3, r2
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4413      	add	r3, r2
 80068e0:	011b      	lsls	r3, r3, #4
 80068e2:	440b      	add	r3, r1
 80068e4:	330f      	adds	r3, #15
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	4619      	mov	r1, r3
 80068ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <dns_call_found+0x17c>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80068f2:	79fa      	ldrb	r2, [r7, #7]
 80068f4:	4907      	ldr	r1, [pc, #28]	@ (8006914 <dns_call_found+0x178>)
 80068f6:	4613      	mov	r3, r2
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	4413      	add	r3, r2
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	440b      	add	r3, r1
 8006900:	330f      	adds	r3, #15
 8006902:	2204      	movs	r2, #4
 8006904:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8006906:	bf00      	nop
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	bd90      	pop	{r4, r7, pc}
 800690e:	bf00      	nop
 8006910:	20000d58 	.word	0x20000d58
 8006914:	20000918 	.word	0x20000918
 8006918:	20000908 	.word	0x20000908

0800691c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8006922:	f00d fafd 	bl	8013f20 <rand>
 8006926:	4603      	mov	r3, r0
 8006928:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800692a:	2300      	movs	r3, #0
 800692c:	71fb      	strb	r3, [r7, #7]
 800692e:	e01a      	b.n	8006966 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006930:	79fa      	ldrb	r2, [r7, #7]
 8006932:	4911      	ldr	r1, [pc, #68]	@ (8006978 <dns_create_txid+0x5c>)
 8006934:	4613      	mov	r3, r2
 8006936:	011b      	lsls	r3, r3, #4
 8006938:	4413      	add	r3, r2
 800693a:	011b      	lsls	r3, r3, #4
 800693c:	440b      	add	r3, r1
 800693e:	330a      	adds	r3, #10
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d10c      	bne.n	8006960 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8006946:	79fa      	ldrb	r2, [r7, #7]
 8006948:	490b      	ldr	r1, [pc, #44]	@ (8006978 <dns_create_txid+0x5c>)
 800694a:	4613      	mov	r3, r2
 800694c:	011b      	lsls	r3, r3, #4
 800694e:	4413      	add	r3, r2
 8006950:	011b      	lsls	r3, r3, #4
 8006952:	440b      	add	r3, r1
 8006954:	3308      	adds	r3, #8
 8006956:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8006958:	88ba      	ldrh	r2, [r7, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	d100      	bne.n	8006960 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800695e:	e7e0      	b.n	8006922 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8006960:	79fb      	ldrb	r3, [r7, #7]
 8006962:	3301      	adds	r3, #1
 8006964:	71fb      	strb	r3, [r7, #7]
 8006966:	79fb      	ldrb	r3, [r7, #7]
 8006968:	2b03      	cmp	r3, #3
 800696a:	d9e1      	bls.n	8006930 <dns_create_txid+0x14>
    }
  }

  return txid;
 800696c:	88bb      	ldrh	r3, [r7, #4]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000918 	.word	0x20000918

0800697c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d00d      	beq.n	80069aa <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	7adb      	ldrb	r3, [r3, #11]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d109      	bne.n	80069aa <dns_backupserver_available+0x2e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	7adb      	ldrb	r3, [r3, #11]
 800699a:	3301      	adds	r3, #1
 800699c:	4a06      	ldr	r2, [pc, #24]	@ (80069b8 <dns_backupserver_available+0x3c>)
 800699e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <dns_backupserver_available+0x2e>
      ret = 1;
 80069a6:	2301      	movs	r3, #1
 80069a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3714      	adds	r7, #20
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	20000d88 	.word	0x20000d88

080069bc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	4603      	mov	r3, r0
 80069c4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80069c6:	79fa      	ldrb	r2, [r7, #7]
 80069c8:	4613      	mov	r3, r2
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	4413      	add	r3, r2
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	4a48      	ldr	r2, [pc, #288]	@ (8006af4 <dns_check_entry+0x138>)
 80069d2:	4413      	add	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80069d6:	79fb      	ldrb	r3, [r7, #7]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d906      	bls.n	80069ea <dns_check_entry+0x2e>
 80069dc:	4b46      	ldr	r3, [pc, #280]	@ (8006af8 <dns_check_entry+0x13c>)
 80069de:	f240 421c 	movw	r2, #1052	@ 0x41c
 80069e2:	4946      	ldr	r1, [pc, #280]	@ (8006afc <dns_check_entry+0x140>)
 80069e4:	4846      	ldr	r0, [pc, #280]	@ (8006b00 <dns_check_entry+0x144>)
 80069e6:	f00d fb9b 	bl	8014120 <iprintf>

  switch (entry->state) {
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	7a9b      	ldrb	r3, [r3, #10]
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d86f      	bhi.n	8006ad2 <dns_check_entry+0x116>
 80069f2:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <dns_check_entry+0x3c>)
 80069f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f8:	08006ae3 	.word	0x08006ae3
 80069fc:	08006a09 	.word	0x08006a09
 8006a00:	08006a3b 	.word	0x08006a3b
 8006a04:	08006ab1 	.word	0x08006ab1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8006a08:	f7ff ff88 	bl	800691c <dns_create_txid>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2202      	movs	r2, #2
 8006a18:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7ff fdc4 	bl	80065bc <dns_send>
 8006a34:	4603      	mov	r3, r0
 8006a36:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8006a38:	e058      	b.n	8006aec <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	7b1b      	ldrb	r3, [r3, #12]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	731a      	strb	r2, [r3, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	7b1b      	ldrb	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d14b      	bne.n	8006ae6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	7b5b      	ldrb	r3, [r3, #13]
 8006a52:	3301      	adds	r3, #1
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	735a      	strb	r2, [r3, #13]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	7b5b      	ldrb	r3, [r3, #13]
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d11b      	bne.n	8006a9a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7ff ff8a 	bl	800697c <dns_backupserver_available>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	7adb      	ldrb	r3, [r3, #11]
 8006a72:	3301      	adds	r3, #1
 8006a74:	b2da      	uxtb	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2200      	movs	r2, #0
 8006a84:	735a      	strb	r2, [r3, #13]
 8006a86:	e00c      	b.n	8006aa2 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	2100      	movs	r1, #0
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fe85 	bl	800679c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	729a      	strb	r2, [r3, #10]
            break;
 8006a98:	e028      	b.n	8006aec <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	7b5a      	ldrb	r2, [r3, #13]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8006aa2:	79fb      	ldrb	r3, [r7, #7]
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7ff fd89 	bl	80065bc <dns_send>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8006aae:	e01a      	b.n	8006ae6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d008      	beq.n	8006aca <dns_check_entry+0x10e>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	1e5a      	subs	r2, r3, #1
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d10f      	bne.n	8006aea <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	729a      	strb	r2, [r3, #10]
      }
      break;
 8006ad0:	e00b      	b.n	8006aea <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8006ad2:	4b09      	ldr	r3, [pc, #36]	@ (8006af8 <dns_check_entry+0x13c>)
 8006ad4:	f240 425b 	movw	r2, #1115	@ 0x45b
 8006ad8:	490a      	ldr	r1, [pc, #40]	@ (8006b04 <dns_check_entry+0x148>)
 8006ada:	4809      	ldr	r0, [pc, #36]	@ (8006b00 <dns_check_entry+0x144>)
 8006adc:	f00d fb20 	bl	8014120 <iprintf>
      break;
 8006ae0:	e004      	b.n	8006aec <dns_check_entry+0x130>
      break;
 8006ae2:	bf00      	nop
 8006ae4:	e002      	b.n	8006aec <dns_check_entry+0x130>
      break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <dns_check_entry+0x130>
      break;
 8006aea:	bf00      	nop
  }
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000918 	.word	0x20000918
 8006af8:	080153fc 	.word	0x080153fc
 8006afc:	0801546c 	.word	0x0801546c
 8006b00:	08015444 	.word	0x08015444
 8006b04:	08015488 	.word	0x08015488

08006b08 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b082      	sub	sp, #8
 8006b0c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006b0e:	2300      	movs	r3, #0
 8006b10:	71fb      	strb	r3, [r7, #7]
 8006b12:	e006      	b.n	8006b22 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8006b14:	79fb      	ldrb	r3, [r7, #7]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff ff50 	bl	80069bc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	71fb      	strb	r3, [r7, #7]
 8006b22:	79fb      	ldrb	r3, [r7, #7]
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d9f5      	bls.n	8006b14 <dns_check_entries+0xc>
  }
}
 8006b28:	bf00      	nop
 8006b2a:	bf00      	nop
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b089      	sub	sp, #36	@ 0x24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00d      	beq.n	8006b72 <lwip_standard_chksum+0x40>
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	dd0a      	ble.n	8006b72 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8006b5c:	69fa      	ldr	r2, [r7, #28]
 8006b5e:	1c53      	adds	r3, r2, #1
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	f107 030e 	add.w	r3, r7, #14
 8006b66:	3301      	adds	r3, #1
 8006b68:	7812      	ldrb	r2, [r2, #0]
 8006b6a:	701a      	strb	r2, [r3, #0]
    len--;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8006b76:	e00a      	b.n	8006b8e <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	61ba      	str	r2, [r7, #24]
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	4413      	add	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
    len -= 2;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	3b02      	subs	r3, #2
 8006b8c:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	dcf1      	bgt.n	8006b78 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd04      	ble.n	8006ba4 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8006b9a:	f107 030e 	add.w	r3, r7, #14
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	7812      	ldrb	r2, [r2, #0]
 8006ba2:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 8006ba4:	89fb      	ldrh	r3, [r7, #14]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	4413      	add	r3, r2
 8006bac:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	0c1a      	lsrs	r2, r3, #16
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	4413      	add	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	0c1a      	lsrs	r2, r3, #16
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	021b      	lsls	r3, r3, #8
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	0a1b      	lsrs	r3, r3, #8
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	b29b      	uxth	r3, r3
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3724      	adds	r7, #36	@ 0x24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	607b      	str	r3, [r7, #4]
 8006bf6:	460b      	mov	r3, r1
 8006bf8:	72fb      	strb	r3, [r7, #11]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	e02b      	b.n	8006c60 <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	895b      	ldrh	r3, [r3, #10]
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7ff ff8d 	bl	8006b32 <lwip_standard_chksum>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4413      	add	r3, r2
 8006c20:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0c1a      	lsrs	r2, r3, #16
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	895b      	ldrh	r3, [r3, #10]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00e      	beq.n	8006c5a <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf0c      	ite	eq
 8006c42:	2301      	moveq	r3, #1
 8006c44:	2300      	movne	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	0a1b      	lsrs	r3, r3, #8
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	4313      	orrs	r3, r2
 8006c58:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	617b      	str	r3, [r7, #20]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1d0      	bne.n	8006c08 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	021b      	lsls	r3, r3, #8
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	0a1b      	lsrs	r3, r3, #8
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8006c7c:	7afb      	ldrb	r3, [r7, #11]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7ff fc3b 	bl	80064fc <lwip_htons>
 8006c86:	4603      	mov	r3, r0
 8006c88:	461a      	mov	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 8006c90:	893b      	ldrh	r3, [r7, #8]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fc32 	bl	80064fc <lwip_htons>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	0c1a      	lsrs	r2, r3, #16
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	4413      	add	r3, r2
 8006cac:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	0c1a      	lsrs	r2, r3, #16
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4413      	add	r3, r2
 8006cb8:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	43db      	mvns	r3, r3
 8006cc0:	b29b      	uxth	r3, r3
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	60f8      	str	r0, [r7, #12]
 8006cd2:	607b      	str	r3, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	72fb      	strb	r3, [r7, #11]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	0c1b      	lsrs	r3, r3, #16
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	4413      	add	r3, r2
 8006cf0:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 8006cf2:	6a3b      	ldr	r3, [r7, #32]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	0c1b      	lsrs	r3, r3, #16
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4413      	add	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	0c1a      	lsrs	r2, r3, #16
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	b29b      	uxth	r3, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	0c1a      	lsrs	r2, r3, #16
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	4413      	add	r3, r2
 8006d22:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 8006d24:	893a      	ldrh	r2, [r7, #8]
 8006d26:	7af9      	ldrb	r1, [r7, #11]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7ff ff5e 	bl	8006bec <inet_cksum_pseudo_base>
 8006d30:	4603      	mov	r3, r0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af02      	add	r7, sp, #8
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	607b      	str	r3, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	72fb      	strb	r3, [r7, #11]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8006d4c:	893a      	ldrh	r2, [r7, #8]
 8006d4e:	7af9      	ldrb	r1, [r7, #11]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68f8      	ldr	r0, [r7, #12]
 8006d58:	f7ff ffb7 	bl	8006cca <inet_chksum_pseudo>
 8006d5c:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b082      	sub	sp, #8
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8006d72:	887b      	ldrh	r3, [r7, #2]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fedb 	bl	8006b32 <lwip_standard_chksum>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	b29b      	uxth	r3, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3708      	adds	r7, #8
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b086      	sub	sp, #24
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	613b      	str	r3, [r7, #16]
 8006d9e:	e02b      	b.n	8006df8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	895b      	ldrh	r3, [r3, #10]
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f7ff fec1 	bl	8006b32 <lwip_standard_chksum>
 8006db0:	4603      	mov	r3, r0
 8006db2:	461a      	mov	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	4413      	add	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	0c1a      	lsrs	r2, r3, #16
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	4413      	add	r3, r2
 8006dc4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	895b      	ldrh	r3, [r3, #10]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00e      	beq.n	8006df2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	bf0c      	ite	eq
 8006dda:	2301      	moveq	r3, #1
 8006ddc:	2300      	movne	r3, #0
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	0a1b      	lsrs	r3, r3, #8
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1d0      	bne.n	8006da0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	0a1b      	lsrs	r3, r3, #8
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	4313      	orrs	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	43db      	mvns	r3, r3
 8006e1a:	b29b      	uxth	r3, r3
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006e2e:	f000 f8d7 	bl	8006fe0 <mem_init>
  memp_init();
 8006e32:	f000 fbdd 	bl	80075f0 <memp_init>
  pbuf_init();
  netif_init();
 8006e36:	f000 fc95 	bl	8007764 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006e3a:	f008 f8b3 	bl	800efa4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8006e3e:	f001 fee1 	bl	8008c04 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8006e42:	f7ff fb89 	bl	8006558 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006e46:	f008 f823 	bl	800ee90 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006e5e:	4b05      	ldr	r3, [pc, #20]	@ (8006e74 <ptr_to_mem+0x20>)
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	4413      	add	r3, r2
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	370c      	adds	r7, #12
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	200013fc 	.word	0x200013fc

08006e78 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006e80:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <mem_to_ptr+0x20>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	b29b      	uxth	r3, r3
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	200013fc 	.word	0x200013fc

08006e9c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006e9c:	b590      	push	{r4, r7, lr}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006ea4:	4b45      	ldr	r3, [pc, #276]	@ (8006fbc <plug_holes+0x120>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d206      	bcs.n	8006ebc <plug_holes+0x20>
 8006eae:	4b44      	ldr	r3, [pc, #272]	@ (8006fc0 <plug_holes+0x124>)
 8006eb0:	f240 12df 	movw	r2, #479	@ 0x1df
 8006eb4:	4943      	ldr	r1, [pc, #268]	@ (8006fc4 <plug_holes+0x128>)
 8006eb6:	4844      	ldr	r0, [pc, #272]	@ (8006fc8 <plug_holes+0x12c>)
 8006eb8:	f00d f932 	bl	8014120 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ebc:	4b43      	ldr	r3, [pc, #268]	@ (8006fcc <plug_holes+0x130>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d306      	bcc.n	8006ed4 <plug_holes+0x38>
 8006ec6:	4b3e      	ldr	r3, [pc, #248]	@ (8006fc0 <plug_holes+0x124>)
 8006ec8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006ecc:	4940      	ldr	r1, [pc, #256]	@ (8006fd0 <plug_holes+0x134>)
 8006ece:	483e      	ldr	r0, [pc, #248]	@ (8006fc8 <plug_holes+0x12c>)
 8006ed0:	f00d f926 	bl	8014120 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	791b      	ldrb	r3, [r3, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d006      	beq.n	8006eea <plug_holes+0x4e>
 8006edc:	4b38      	ldr	r3, [pc, #224]	@ (8006fc0 <plug_holes+0x124>)
 8006ede:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006ee2:	493c      	ldr	r1, [pc, #240]	@ (8006fd4 <plug_holes+0x138>)
 8006ee4:	4838      	ldr	r0, [pc, #224]	@ (8006fc8 <plug_holes+0x12c>)
 8006ee6:	f00d f91b 	bl	8014120 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006ef2:	d906      	bls.n	8006f02 <plug_holes+0x66>
 8006ef4:	4b32      	ldr	r3, [pc, #200]	@ (8006fc0 <plug_holes+0x124>)
 8006ef6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006efa:	4937      	ldr	r1, [pc, #220]	@ (8006fd8 <plug_holes+0x13c>)
 8006efc:	4832      	ldr	r0, [pc, #200]	@ (8006fc8 <plug_holes+0x12c>)
 8006efe:	f00d f90f 	bl	8014120 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	881b      	ldrh	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7ff ffa4 	bl	8006e54 <ptr_to_mem>
 8006f0c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d024      	beq.n	8006f60 <plug_holes+0xc4>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	791b      	ldrb	r3, [r3, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d120      	bne.n	8006f60 <plug_holes+0xc4>
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <plug_holes+0x130>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d01b      	beq.n	8006f60 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006f28:	4b2c      	ldr	r3, [pc, #176]	@ (8006fdc <plug_holes+0x140>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d102      	bne.n	8006f38 <plug_holes+0x9c>
      lfree = mem;
 8006f32:	4a2a      	ldr	r2, [pc, #168]	@ (8006fdc <plug_holes+0x140>)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	881a      	ldrh	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	881b      	ldrh	r3, [r3, #0]
 8006f44:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006f48:	d00a      	beq.n	8006f60 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7ff ff80 	bl	8006e54 <ptr_to_mem>
 8006f54:	4604      	mov	r4, r0
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7ff ff8e 	bl	8006e78 <mem_to_ptr>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	885b      	ldrh	r3, [r3, #2]
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7ff ff75 	bl	8006e54 <ptr_to_mem>
 8006f6a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d01f      	beq.n	8006fb4 <plug_holes+0x118>
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	791b      	ldrb	r3, [r3, #4]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11b      	bne.n	8006fb4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006f7c:	4b17      	ldr	r3, [pc, #92]	@ (8006fdc <plug_holes+0x140>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d102      	bne.n	8006f8c <plug_holes+0xf0>
      lfree = pmem;
 8006f86:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <plug_holes+0x140>)
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	881a      	ldrh	r2, [r3, #0]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	881b      	ldrh	r3, [r3, #0]
 8006f98:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8006f9c:	d00a      	beq.n	8006fb4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	881b      	ldrh	r3, [r3, #0]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ff56 	bl	8006e54 <ptr_to_mem>
 8006fa8:	4604      	mov	r4, r0
 8006faa:	68b8      	ldr	r0, [r7, #8]
 8006fac:	f7ff ff64 	bl	8006e78 <mem_to_ptr>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006fb4:	bf00      	nop
 8006fb6:	3714      	adds	r7, #20
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd90      	pop	{r4, r7, pc}
 8006fbc:	200013fc 	.word	0x200013fc
 8006fc0:	080154a8 	.word	0x080154a8
 8006fc4:	080154d8 	.word	0x080154d8
 8006fc8:	080154f0 	.word	0x080154f0
 8006fcc:	20001400 	.word	0x20001400
 8006fd0:	08015518 	.word	0x08015518
 8006fd4:	08015534 	.word	0x08015534
 8006fd8:	08015550 	.word	0x08015550
 8006fdc:	20001404 	.word	0x20001404

08006fe0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006fe6:	4b18      	ldr	r3, [pc, #96]	@ (8007048 <mem_init+0x68>)
 8006fe8:	3303      	adds	r3, #3
 8006fea:	f023 0303 	bic.w	r3, r3, #3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	4b16      	ldr	r3, [pc, #88]	@ (800704c <mem_init+0x6c>)
 8006ff2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006ff4:	4b15      	ldr	r3, [pc, #84]	@ (800704c <mem_init+0x6c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007000:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2200      	movs	r2, #0
 8007006:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800700e:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8007012:	f7ff ff1f 	bl	8006e54 <ptr_to_mem>
 8007016:	4603      	mov	r3, r0
 8007018:	4a0d      	ldr	r2, [pc, #52]	@ (8007050 <mem_init+0x70>)
 800701a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800701c:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <mem_init+0x70>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2201      	movs	r2, #1
 8007022:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007024:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <mem_init+0x70>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800702c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800702e:	4b08      	ldr	r3, [pc, #32]	@ (8007050 <mem_init+0x70>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8007036:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007038:	4b04      	ldr	r3, [pc, #16]	@ (800704c <mem_init+0x6c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a05      	ldr	r2, [pc, #20]	@ (8007054 <mem_init+0x74>)
 800703e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007040:	bf00      	nop
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20000da8 	.word	0x20000da8
 800704c:	200013fc 	.word	0x200013fc
 8007050:	20001400 	.word	0x20001400
 8007054:	20001404 	.word	0x20001404

08007058 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f7ff ff09 	bl	8006e78 <mem_to_ptr>
 8007066:	4603      	mov	r3, r0
 8007068:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	4618      	mov	r0, r3
 8007070:	f7ff fef0 	bl	8006e54 <ptr_to_mem>
 8007074:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	4618      	mov	r0, r3
 800707c:	f7ff feea 	bl	8006e54 <ptr_to_mem>
 8007080:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	881b      	ldrh	r3, [r3, #0]
 8007086:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800708a:	d818      	bhi.n	80070be <mem_link_valid+0x66>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	885b      	ldrh	r3, [r3, #2]
 8007090:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007094:	d813      	bhi.n	80070be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800709a:	8afa      	ldrh	r2, [r7, #22]
 800709c:	429a      	cmp	r2, r3
 800709e:	d004      	beq.n	80070aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	881b      	ldrh	r3, [r3, #0]
 80070a4:	8afa      	ldrh	r2, [r7, #22]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d109      	bne.n	80070be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070aa:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <mem_link_valid+0x74>)
 80070ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d006      	beq.n	80070c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	8afa      	ldrh	r2, [r7, #22]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d001      	beq.n	80070c2 <mem_link_valid+0x6a>
    return 0;
 80070be:	2300      	movs	r3, #0
 80070c0:	e000      	b.n	80070c4 <mem_link_valid+0x6c>
  }
  return 1;
 80070c2:	2301      	movs	r3, #1
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20001400 	.word	0x20001400

080070d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d04c      	beq.n	8007178 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f003 0303 	and.w	r3, r3, #3
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d007      	beq.n	80070f8 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <mem_free+0xb0>)
 80070ea:	f240 2273 	movw	r2, #627	@ 0x273
 80070ee:	4925      	ldr	r1, [pc, #148]	@ (8007184 <mem_free+0xb4>)
 80070f0:	4825      	ldr	r0, [pc, #148]	@ (8007188 <mem_free+0xb8>)
 80070f2:	f00d f815 	bl	8014120 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80070f6:	e040      	b.n	800717a <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	3b08      	subs	r3, #8
 80070fc:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80070fe:	4b23      	ldr	r3, [pc, #140]	@ (800718c <mem_free+0xbc>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	429a      	cmp	r2, r3
 8007106:	d306      	bcc.n	8007116 <mem_free+0x46>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f103 020c 	add.w	r2, r3, #12
 800710e:	4b20      	ldr	r3, [pc, #128]	@ (8007190 <mem_free+0xc0>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d907      	bls.n	8007126 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007116:	4b1a      	ldr	r3, [pc, #104]	@ (8007180 <mem_free+0xb0>)
 8007118:	f240 227f 	movw	r2, #639	@ 0x27f
 800711c:	491d      	ldr	r1, [pc, #116]	@ (8007194 <mem_free+0xc4>)
 800711e:	481a      	ldr	r0, [pc, #104]	@ (8007188 <mem_free+0xb8>)
 8007120:	f00c fffe 	bl	8014120 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007124:	e029      	b.n	800717a <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	791b      	ldrb	r3, [r3, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d107      	bne.n	800713e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800712e:	4b14      	ldr	r3, [pc, #80]	@ (8007180 <mem_free+0xb0>)
 8007130:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 8007134:	4918      	ldr	r1, [pc, #96]	@ (8007198 <mem_free+0xc8>)
 8007136:	4814      	ldr	r0, [pc, #80]	@ (8007188 <mem_free+0xb8>)
 8007138:	f00c fff2 	bl	8014120 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800713c:	e01d      	b.n	800717a <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f7ff ff8a 	bl	8007058 <mem_link_valid>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d107      	bne.n	800715a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800714a:	4b0d      	ldr	r3, [pc, #52]	@ (8007180 <mem_free+0xb0>)
 800714c:	f240 2295 	movw	r2, #661	@ 0x295
 8007150:	4912      	ldr	r1, [pc, #72]	@ (800719c <mem_free+0xcc>)
 8007152:	480d      	ldr	r0, [pc, #52]	@ (8007188 <mem_free+0xb8>)
 8007154:	f00c ffe4 	bl	8014120 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007158:	e00f      	b.n	800717a <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007160:	4b0f      	ldr	r3, [pc, #60]	@ (80071a0 <mem_free+0xd0>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	429a      	cmp	r2, r3
 8007168:	d202      	bcs.n	8007170 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800716a:	4a0d      	ldr	r2, [pc, #52]	@ (80071a0 <mem_free+0xd0>)
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007170:	68f8      	ldr	r0, [r7, #12]
 8007172:	f7ff fe93 	bl	8006e9c <plug_holes>
 8007176:	e000      	b.n	800717a <mem_free+0xaa>
    return;
 8007178:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	080154a8 	.word	0x080154a8
 8007184:	0801557c 	.word	0x0801557c
 8007188:	080154f0 	.word	0x080154f0
 800718c:	200013fc 	.word	0x200013fc
 8007190:	20001400 	.word	0x20001400
 8007194:	080155a0 	.word	0x080155a0
 8007198:	080155bc 	.word	0x080155bc
 800719c:	080155e4 	.word	0x080155e4
 80071a0:	20001404 	.word	0x20001404

080071a4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b088      	sub	sp, #32
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	460b      	mov	r3, r1
 80071ae:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80071b0:	887b      	ldrh	r3, [r7, #2]
 80071b2:	3303      	adds	r3, #3
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	f023 0303 	bic.w	r3, r3, #3
 80071ba:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80071bc:	8bfb      	ldrh	r3, [r7, #30]
 80071be:	2b0b      	cmp	r3, #11
 80071c0:	d801      	bhi.n	80071c6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80071c2:	230c      	movs	r3, #12
 80071c4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80071c6:	8bfb      	ldrh	r3, [r7, #30]
 80071c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80071cc:	d803      	bhi.n	80071d6 <mem_trim+0x32>
 80071ce:	8bfa      	ldrh	r2, [r7, #30]
 80071d0:	887b      	ldrh	r3, [r7, #2]
 80071d2:	429a      	cmp	r2, r3
 80071d4:	d201      	bcs.n	80071da <mem_trim+0x36>
    return NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	e0cc      	b.n	8007374 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80071da:	4b68      	ldr	r3, [pc, #416]	@ (800737c <mem_trim+0x1d8>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d304      	bcc.n	80071ee <mem_trim+0x4a>
 80071e4:	4b66      	ldr	r3, [pc, #408]	@ (8007380 <mem_trim+0x1dc>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d306      	bcc.n	80071fc <mem_trim+0x58>
 80071ee:	4b65      	ldr	r3, [pc, #404]	@ (8007384 <mem_trim+0x1e0>)
 80071f0:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80071f4:	4964      	ldr	r1, [pc, #400]	@ (8007388 <mem_trim+0x1e4>)
 80071f6:	4865      	ldr	r0, [pc, #404]	@ (800738c <mem_trim+0x1e8>)
 80071f8:	f00c ff92 	bl	8014120 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80071fc:	4b5f      	ldr	r3, [pc, #380]	@ (800737c <mem_trim+0x1d8>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	429a      	cmp	r2, r3
 8007204:	d304      	bcc.n	8007210 <mem_trim+0x6c>
 8007206:	4b5e      	ldr	r3, [pc, #376]	@ (8007380 <mem_trim+0x1dc>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	429a      	cmp	r2, r3
 800720e:	d301      	bcc.n	8007214 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	e0af      	b.n	8007374 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3b08      	subs	r3, #8
 8007218:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800721a:	69b8      	ldr	r0, [r7, #24]
 800721c:	f7ff fe2c 	bl	8006e78 <mem_to_ptr>
 8007220:	4603      	mov	r3, r0
 8007222:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	881a      	ldrh	r2, [r3, #0]
 8007228:	8afb      	ldrh	r3, [r7, #22]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	b29b      	uxth	r3, r3
 800722e:	3b08      	subs	r3, #8
 8007230:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007232:	8bfa      	ldrh	r2, [r7, #30]
 8007234:	8abb      	ldrh	r3, [r7, #20]
 8007236:	429a      	cmp	r2, r3
 8007238:	d906      	bls.n	8007248 <mem_trim+0xa4>
 800723a:	4b52      	ldr	r3, [pc, #328]	@ (8007384 <mem_trim+0x1e0>)
 800723c:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8007240:	4953      	ldr	r1, [pc, #332]	@ (8007390 <mem_trim+0x1ec>)
 8007242:	4852      	ldr	r0, [pc, #328]	@ (800738c <mem_trim+0x1e8>)
 8007244:	f00c ff6c 	bl	8014120 <iprintf>
  if (newsize > size) {
 8007248:	8bfa      	ldrh	r2, [r7, #30]
 800724a:	8abb      	ldrh	r3, [r7, #20]
 800724c:	429a      	cmp	r2, r3
 800724e:	d901      	bls.n	8007254 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	e08f      	b.n	8007374 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8007254:	8bfa      	ldrh	r2, [r7, #30]
 8007256:	8abb      	ldrh	r3, [r7, #20]
 8007258:	429a      	cmp	r2, r3
 800725a:	d101      	bne.n	8007260 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	e089      	b.n	8007374 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	4618      	mov	r0, r3
 8007266:	f7ff fdf5 	bl	8006e54 <ptr_to_mem>
 800726a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	791b      	ldrb	r3, [r3, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d13f      	bne.n	80072f4 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800727c:	d106      	bne.n	800728c <mem_trim+0xe8>
 800727e:	4b41      	ldr	r3, [pc, #260]	@ (8007384 <mem_trim+0x1e0>)
 8007280:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007284:	4943      	ldr	r1, [pc, #268]	@ (8007394 <mem_trim+0x1f0>)
 8007286:	4841      	ldr	r0, [pc, #260]	@ (800738c <mem_trim+0x1e8>)
 8007288:	f00c ff4a 	bl	8014120 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007292:	8afa      	ldrh	r2, [r7, #22]
 8007294:	8bfb      	ldrh	r3, [r7, #30]
 8007296:	4413      	add	r3, r2
 8007298:	b29b      	uxth	r3, r3
 800729a:	3308      	adds	r3, #8
 800729c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800729e:	4b3e      	ldr	r3, [pc, #248]	@ (8007398 <mem_trim+0x1f4>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d106      	bne.n	80072b6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7ff fdd2 	bl	8006e54 <ptr_to_mem>
 80072b0:	4603      	mov	r3, r0
 80072b2:	4a39      	ldr	r2, [pc, #228]	@ (8007398 <mem_trim+0x1f4>)
 80072b4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80072b6:	89fb      	ldrh	r3, [r7, #14]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7ff fdcb 	bl	8006e54 <ptr_to_mem>
 80072be:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	2200      	movs	r2, #0
 80072c4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	89ba      	ldrh	r2, [r7, #12]
 80072ca:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	8afa      	ldrh	r2, [r7, #22]
 80072d0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	89fa      	ldrh	r2, [r7, #14]
 80072d6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80072e0:	d047      	beq.n	8007372 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	881b      	ldrh	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff fdb4 	bl	8006e54 <ptr_to_mem>
 80072ec:	4602      	mov	r2, r0
 80072ee:	89fb      	ldrh	r3, [r7, #14]
 80072f0:	8053      	strh	r3, [r2, #2]
 80072f2:	e03e      	b.n	8007372 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80072f4:	8bfb      	ldrh	r3, [r7, #30]
 80072f6:	f103 0214 	add.w	r2, r3, #20
 80072fa:	8abb      	ldrh	r3, [r7, #20]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d838      	bhi.n	8007372 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007300:	8afa      	ldrh	r2, [r7, #22]
 8007302:	8bfb      	ldrh	r3, [r7, #30]
 8007304:	4413      	add	r3, r2
 8007306:	b29b      	uxth	r3, r3
 8007308:	3308      	adds	r3, #8
 800730a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	881b      	ldrh	r3, [r3, #0]
 8007310:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007314:	d106      	bne.n	8007324 <mem_trim+0x180>
 8007316:	4b1b      	ldr	r3, [pc, #108]	@ (8007384 <mem_trim+0x1e0>)
 8007318:	f240 3216 	movw	r2, #790	@ 0x316
 800731c:	491d      	ldr	r1, [pc, #116]	@ (8007394 <mem_trim+0x1f0>)
 800731e:	481b      	ldr	r0, [pc, #108]	@ (800738c <mem_trim+0x1e8>)
 8007320:	f00c fefe 	bl	8014120 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8007324:	89fb      	ldrh	r3, [r7, #14]
 8007326:	4618      	mov	r0, r3
 8007328:	f7ff fd94 	bl	8006e54 <ptr_to_mem>
 800732c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800732e:	4b1a      	ldr	r3, [pc, #104]	@ (8007398 <mem_trim+0x1f4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	429a      	cmp	r2, r3
 8007336:	d202      	bcs.n	800733e <mem_trim+0x19a>
      lfree = mem2;
 8007338:	4a17      	ldr	r2, [pc, #92]	@ (8007398 <mem_trim+0x1f4>)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	2200      	movs	r2, #0
 8007342:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	881a      	ldrh	r2, [r3, #0]
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	8afa      	ldrh	r2, [r7, #22]
 8007350:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	89fa      	ldrh	r2, [r7, #14]
 8007356:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8007360:	d007      	beq.n	8007372 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fd74 	bl	8006e54 <ptr_to_mem>
 800736c:	4602      	mov	r2, r0
 800736e:	89fb      	ldrh	r3, [r7, #14]
 8007370:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007372:	687b      	ldr	r3, [r7, #4]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	200013fc 	.word	0x200013fc
 8007380:	20001400 	.word	0x20001400
 8007384:	080154a8 	.word	0x080154a8
 8007388:	08015618 	.word	0x08015618
 800738c:	080154f0 	.word	0x080154f0
 8007390:	08015630 	.word	0x08015630
 8007394:	08015650 	.word	0x08015650
 8007398:	20001404 	.word	0x20001404

0800739c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b088      	sub	sp, #32
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <mem_malloc+0x14>
    return NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e0d9      	b.n	8007564 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	3303      	adds	r3, #3
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80073bc:	8bbb      	ldrh	r3, [r7, #28]
 80073be:	2b0b      	cmp	r3, #11
 80073c0:	d801      	bhi.n	80073c6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80073c2:	230c      	movs	r3, #12
 80073c4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80073c6:	8bbb      	ldrh	r3, [r7, #28]
 80073c8:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80073cc:	d803      	bhi.n	80073d6 <mem_malloc+0x3a>
 80073ce:	8bba      	ldrh	r2, [r7, #28]
 80073d0:	88fb      	ldrh	r3, [r7, #6]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d201      	bcs.n	80073da <mem_malloc+0x3e>
    return NULL;
 80073d6:	2300      	movs	r3, #0
 80073d8:	e0c4      	b.n	8007564 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80073da:	4b64      	ldr	r3, [pc, #400]	@ (800756c <mem_malloc+0x1d0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4618      	mov	r0, r3
 80073e0:	f7ff fd4a 	bl	8006e78 <mem_to_ptr>
 80073e4:	4603      	mov	r3, r0
 80073e6:	83fb      	strh	r3, [r7, #30]
 80073e8:	e0b4      	b.n	8007554 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80073ea:	8bfb      	ldrh	r3, [r7, #30]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7ff fd31 	bl	8006e54 <ptr_to_mem>
 80073f2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f040 80a4 	bne.w	8007546 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	8bfb      	ldrh	r3, [r7, #30]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f1a3 0208 	sub.w	r2, r3, #8
 800740c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800740e:	429a      	cmp	r2, r3
 8007410:	f0c0 8099 	bcc.w	8007546 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	881b      	ldrh	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	8bfb      	ldrh	r3, [r7, #30]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	f1a3 0208 	sub.w	r2, r3, #8
 8007422:	8bbb      	ldrh	r3, [r7, #28]
 8007424:	3314      	adds	r3, #20
 8007426:	429a      	cmp	r2, r3
 8007428:	d333      	bcc.n	8007492 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800742a:	8bfa      	ldrh	r2, [r7, #30]
 800742c:	8bbb      	ldrh	r3, [r7, #28]
 800742e:	4413      	add	r3, r2
 8007430:	b29b      	uxth	r3, r3
 8007432:	3308      	adds	r3, #8
 8007434:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007436:	8a7b      	ldrh	r3, [r7, #18]
 8007438:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800743c:	d106      	bne.n	800744c <mem_malloc+0xb0>
 800743e:	4b4c      	ldr	r3, [pc, #304]	@ (8007570 <mem_malloc+0x1d4>)
 8007440:	f240 3287 	movw	r2, #903	@ 0x387
 8007444:	494b      	ldr	r1, [pc, #300]	@ (8007574 <mem_malloc+0x1d8>)
 8007446:	484c      	ldr	r0, [pc, #304]	@ (8007578 <mem_malloc+0x1dc>)
 8007448:	f00c fe6a 	bl	8014120 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800744c:	8a7b      	ldrh	r3, [r7, #18]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fd00 	bl	8006e54 <ptr_to_mem>
 8007454:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	881a      	ldrh	r2, [r3, #0]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8bfa      	ldrh	r2, [r7, #30]
 8007468:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	8a7a      	ldrh	r2, [r7, #18]
 800746e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	2201      	movs	r2, #1
 8007474:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	881b      	ldrh	r3, [r3, #0]
 800747a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800747e:	d00b      	beq.n	8007498 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fce5 	bl	8006e54 <ptr_to_mem>
 800748a:	4602      	mov	r2, r0
 800748c:	8a7b      	ldrh	r3, [r7, #18]
 800748e:	8053      	strh	r3, [r2, #2]
 8007490:	e002      	b.n	8007498 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	2201      	movs	r2, #1
 8007496:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007498:	4b34      	ldr	r3, [pc, #208]	@ (800756c <mem_malloc+0x1d0>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d127      	bne.n	80074f2 <mem_malloc+0x156>
          struct mem *cur = lfree;
 80074a2:	4b32      	ldr	r3, [pc, #200]	@ (800756c <mem_malloc+0x1d0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80074a8:	e005      	b.n	80074b6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fcd0 	bl	8006e54 <ptr_to_mem>
 80074b4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	791b      	ldrb	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <mem_malloc+0x12c>
 80074be:	4b2f      	ldr	r3, [pc, #188]	@ (800757c <mem_malloc+0x1e0>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	69ba      	ldr	r2, [r7, #24]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d1f0      	bne.n	80074aa <mem_malloc+0x10e>
          }
          lfree = cur;
 80074c8:	4a28      	ldr	r2, [pc, #160]	@ (800756c <mem_malloc+0x1d0>)
 80074ca:	69bb      	ldr	r3, [r7, #24]
 80074cc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80074ce:	4b27      	ldr	r3, [pc, #156]	@ (800756c <mem_malloc+0x1d0>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	4b2a      	ldr	r3, [pc, #168]	@ (800757c <mem_malloc+0x1e0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d00b      	beq.n	80074f2 <mem_malloc+0x156>
 80074da:	4b24      	ldr	r3, [pc, #144]	@ (800756c <mem_malloc+0x1d0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	791b      	ldrb	r3, [r3, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d006      	beq.n	80074f2 <mem_malloc+0x156>
 80074e4:	4b22      	ldr	r3, [pc, #136]	@ (8007570 <mem_malloc+0x1d4>)
 80074e6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80074ea:	4925      	ldr	r1, [pc, #148]	@ (8007580 <mem_malloc+0x1e4>)
 80074ec:	4822      	ldr	r0, [pc, #136]	@ (8007578 <mem_malloc+0x1dc>)
 80074ee:	f00c fe17 	bl	8014120 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80074f2:	8bba      	ldrh	r2, [r7, #28]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	4413      	add	r3, r2
 80074f8:	3308      	adds	r3, #8
 80074fa:	4a20      	ldr	r2, [pc, #128]	@ (800757c <mem_malloc+0x1e0>)
 80074fc:	6812      	ldr	r2, [r2, #0]
 80074fe:	4293      	cmp	r3, r2
 8007500:	d906      	bls.n	8007510 <mem_malloc+0x174>
 8007502:	4b1b      	ldr	r3, [pc, #108]	@ (8007570 <mem_malloc+0x1d4>)
 8007504:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8007508:	491e      	ldr	r1, [pc, #120]	@ (8007584 <mem_malloc+0x1e8>)
 800750a:	481b      	ldr	r0, [pc, #108]	@ (8007578 <mem_malloc+0x1dc>)
 800750c:	f00c fe08 	bl	8014120 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f003 0303 	and.w	r3, r3, #3
 8007516:	2b00      	cmp	r3, #0
 8007518:	d006      	beq.n	8007528 <mem_malloc+0x18c>
 800751a:	4b15      	ldr	r3, [pc, #84]	@ (8007570 <mem_malloc+0x1d4>)
 800751c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8007520:	4919      	ldr	r1, [pc, #100]	@ (8007588 <mem_malloc+0x1ec>)
 8007522:	4815      	ldr	r0, [pc, #84]	@ (8007578 <mem_malloc+0x1dc>)
 8007524:	f00c fdfc 	bl	8014120 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	2b00      	cmp	r3, #0
 8007530:	d006      	beq.n	8007540 <mem_malloc+0x1a4>
 8007532:	4b0f      	ldr	r3, [pc, #60]	@ (8007570 <mem_malloc+0x1d4>)
 8007534:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007538:	4914      	ldr	r1, [pc, #80]	@ (800758c <mem_malloc+0x1f0>)
 800753a:	480f      	ldr	r0, [pc, #60]	@ (8007578 <mem_malloc+0x1dc>)
 800753c:	f00c fdf0 	bl	8014120 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	3308      	adds	r3, #8
 8007544:	e00e      	b.n	8007564 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8007546:	8bfb      	ldrh	r3, [r7, #30]
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fc83 	bl	8006e54 <ptr_to_mem>
 800754e:	4603      	mov	r3, r0
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007554:	8bfa      	ldrh	r2, [r7, #30]
 8007556:	8bbb      	ldrh	r3, [r7, #28]
 8007558:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800755c:	429a      	cmp	r2, r3
 800755e:	f4ff af44 	bcc.w	80073ea <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20001404 	.word	0x20001404
 8007570:	080154a8 	.word	0x080154a8
 8007574:	08015650 	.word	0x08015650
 8007578:	080154f0 	.word	0x080154f0
 800757c:	20001400 	.word	0x20001400
 8007580:	08015664 	.word	0x08015664
 8007584:	08015680 	.word	0x08015680
 8007588:	080156b0 	.word	0x080156b0
 800758c:	080156e0 	.word	0x080156e0

08007590 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2200      	movs	r2, #0
 800759e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	3303      	adds	r3, #3
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e011      	b.n	80075d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	881b      	ldrh	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	4413      	add	r3, r2
 80075ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60fb      	str	r3, [r7, #12]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	461a      	mov	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	4293      	cmp	r3, r2
 80075e0:	dbe7      	blt.n	80075b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80075f6:	2300      	movs	r3, #0
 80075f8:	80fb      	strh	r3, [r7, #6]
 80075fa:	e009      	b.n	8007610 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80075fc:	88fb      	ldrh	r3, [r7, #6]
 80075fe:	4a08      	ldr	r2, [pc, #32]	@ (8007620 <memp_init+0x30>)
 8007600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff ffc3 	bl	8007590 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	3301      	adds	r3, #1
 800760e:	80fb      	strh	r3, [r7, #6]
 8007610:	88fb      	ldrh	r3, [r7, #6]
 8007612:	2b08      	cmp	r3, #8
 8007614:	d9f2      	bls.n	80075fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08018298 	.word	0x08018298

08007624 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d012      	beq.n	8007660 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	6812      	ldr	r2, [r2, #0]
 8007642:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f003 0303 	and.w	r3, r3, #3
 800764a:	2b00      	cmp	r3, #0
 800764c:	d006      	beq.n	800765c <do_memp_malloc_pool+0x38>
 800764e:	4b07      	ldr	r3, [pc, #28]	@ (800766c <do_memp_malloc_pool+0x48>)
 8007650:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007654:	4906      	ldr	r1, [pc, #24]	@ (8007670 <do_memp_malloc_pool+0x4c>)
 8007656:	4807      	ldr	r0, [pc, #28]	@ (8007674 <do_memp_malloc_pool+0x50>)
 8007658:	f00c fd62 	bl	8014120 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	e000      	b.n	8007662 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	08015704 	.word	0x08015704
 8007670:	08015734 	.word	0x08015734
 8007674:	08015758 	.word	0x08015758

08007678 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	4603      	mov	r3, r0
 8007680:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	2b08      	cmp	r3, #8
 8007686:	d908      	bls.n	800769a <memp_malloc+0x22>
 8007688:	4b0a      	ldr	r3, [pc, #40]	@ (80076b4 <memp_malloc+0x3c>)
 800768a:	f240 1257 	movw	r2, #343	@ 0x157
 800768e:	490a      	ldr	r1, [pc, #40]	@ (80076b8 <memp_malloc+0x40>)
 8007690:	480a      	ldr	r0, [pc, #40]	@ (80076bc <memp_malloc+0x44>)
 8007692:	f00c fd45 	bl	8014120 <iprintf>
 8007696:	2300      	movs	r3, #0
 8007698:	e008      	b.n	80076ac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	4a08      	ldr	r2, [pc, #32]	@ (80076c0 <memp_malloc+0x48>)
 800769e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7ff ffbe 	bl	8007624 <do_memp_malloc_pool>
 80076a8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80076aa:	68fb      	ldr	r3, [r7, #12]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	08015704 	.word	0x08015704
 80076b8:	08015794 	.word	0x08015794
 80076bc:	08015758 	.word	0x08015758
 80076c0:	08018298 	.word	0x08018298

080076c4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	f003 0303 	and.w	r3, r3, #3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d006      	beq.n	80076e6 <do_memp_free_pool+0x22>
 80076d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007704 <do_memp_free_pool+0x40>)
 80076da:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80076de:	490a      	ldr	r1, [pc, #40]	@ (8007708 <do_memp_free_pool+0x44>)
 80076e0:	480a      	ldr	r0, [pc, #40]	@ (800770c <do_memp_free_pool+0x48>)
 80076e2:	f00c fd1d 	bl	8014120 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80076fc:	bf00      	nop
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}
 8007704:	08015704 	.word	0x08015704
 8007708:	080157b4 	.word	0x080157b4
 800770c:	08015758 	.word	0x08015758

08007710 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b08      	cmp	r3, #8
 8007720:	d907      	bls.n	8007732 <memp_free+0x22>
 8007722:	4b0c      	ldr	r3, [pc, #48]	@ (8007754 <memp_free+0x44>)
 8007724:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007728:	490b      	ldr	r1, [pc, #44]	@ (8007758 <memp_free+0x48>)
 800772a:	480c      	ldr	r0, [pc, #48]	@ (800775c <memp_free+0x4c>)
 800772c:	f00c fcf8 	bl	8014120 <iprintf>
 8007730:	e00c      	b.n	800774c <memp_free+0x3c>

  if (mem == NULL) {
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	4a09      	ldr	r2, [pc, #36]	@ (8007760 <memp_free+0x50>)
 800773c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007740:	6839      	ldr	r1, [r7, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff ffbe 	bl	80076c4 <do_memp_free_pool>
 8007748:	e000      	b.n	800774c <memp_free+0x3c>
    return;
 800774a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800774c:	3708      	adds	r7, #8
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	08015704 	.word	0x08015704
 8007758:	080157d4 	.word	0x080157d4
 800775c:	08015758 	.word	0x08015758
 8007760:	08018298 	.word	0x08018298

08007764 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8007764:	b480      	push	{r7}
 8007766:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8007768:	bf00      	nop
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b086      	sub	sp, #24
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d108      	bne.n	800779a <netif_add+0x26>
 8007788:	4b5b      	ldr	r3, [pc, #364]	@ (80078f8 <netif_add+0x184>)
 800778a:	f240 1227 	movw	r2, #295	@ 0x127
 800778e:	495b      	ldr	r1, [pc, #364]	@ (80078fc <netif_add+0x188>)
 8007790:	485b      	ldr	r0, [pc, #364]	@ (8007900 <netif_add+0x18c>)
 8007792:	f00c fcc5 	bl	8014120 <iprintf>
 8007796:	2300      	movs	r3, #0
 8007798:	e0a9      	b.n	80078ee <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800779a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779c:	2b00      	cmp	r3, #0
 800779e:	d108      	bne.n	80077b2 <netif_add+0x3e>
 80077a0:	4b55      	ldr	r3, [pc, #340]	@ (80078f8 <netif_add+0x184>)
 80077a2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80077a6:	4957      	ldr	r1, [pc, #348]	@ (8007904 <netif_add+0x190>)
 80077a8:	4855      	ldr	r0, [pc, #340]	@ (8007900 <netif_add+0x18c>)
 80077aa:	f00c fcb9 	bl	8014120 <iprintf>
 80077ae:	2300      	movs	r3, #0
 80077b0:	e09d      	b.n	80078ee <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d101      	bne.n	80077bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80077b8:	4b53      	ldr	r3, [pc, #332]	@ (8007908 <netif_add+0x194>)
 80077ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80077c2:	4b51      	ldr	r3, [pc, #324]	@ (8007908 <netif_add+0x194>)
 80077c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d101      	bne.n	80077d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80077cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007908 <netif_add+0x194>)
 80077ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4a49      	ldr	r2, [pc, #292]	@ (800790c <netif_add+0x198>)
 80077e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3324      	adds	r3, #36	@ 0x24
 80077fa:	2204      	movs	r2, #4
 80077fc:	2100      	movs	r1, #0
 80077fe:	4618      	mov	r0, r3
 8007800:	f00c fd2d 	bl	801425e <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	6a3a      	ldr	r2, [r7, #32]
 800780e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007810:	4b3f      	ldr	r3, [pc, #252]	@ (8007910 <netif_add+0x19c>)
 8007812:	781a      	ldrb	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800781e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	68b9      	ldr	r1, [r7, #8]
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f914 	bl	8007a54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800782c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	4798      	blx	r3
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d001      	beq.n	800783c <netif_add+0xc8>
    return NULL;
 8007838:	2300      	movs	r3, #0
 800783a:	e058      	b.n	80078ee <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007842:	2bff      	cmp	r3, #255	@ 0xff
 8007844:	d103      	bne.n	800784e <netif_add+0xda>
        netif->num = 0;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800784e:	2300      	movs	r3, #0
 8007850:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007852:	4b30      	ldr	r3, [pc, #192]	@ (8007914 <netif_add+0x1a0>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	617b      	str	r3, [r7, #20]
 8007858:	e02b      	b.n	80078b2 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	429a      	cmp	r2, r3
 8007860:	d106      	bne.n	8007870 <netif_add+0xfc>
 8007862:	4b25      	ldr	r3, [pc, #148]	@ (80078f8 <netif_add+0x184>)
 8007864:	f240 128b 	movw	r2, #395	@ 0x18b
 8007868:	492b      	ldr	r1, [pc, #172]	@ (8007918 <netif_add+0x1a4>)
 800786a:	4825      	ldr	r0, [pc, #148]	@ (8007900 <netif_add+0x18c>)
 800786c:	f00c fc58 	bl	8014120 <iprintf>
        num_netifs++;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3301      	adds	r3, #1
 8007874:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	2bff      	cmp	r3, #255	@ 0xff
 800787a:	dd06      	ble.n	800788a <netif_add+0x116>
 800787c:	4b1e      	ldr	r3, [pc, #120]	@ (80078f8 <netif_add+0x184>)
 800787e:	f240 128d 	movw	r2, #397	@ 0x18d
 8007882:	4926      	ldr	r1, [pc, #152]	@ (800791c <netif_add+0x1a8>)
 8007884:	481e      	ldr	r0, [pc, #120]	@ (8007900 <netif_add+0x18c>)
 8007886:	f00c fc4b 	bl	8014120 <iprintf>
        if (netif2->num == netif->num) {
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007896:	429a      	cmp	r2, r3
 8007898:	d108      	bne.n	80078ac <netif_add+0x138>
          netif->num++;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078a0:	3301      	adds	r3, #1
 80078a2:	b2da      	uxtb	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 80078aa:	e005      	b.n	80078b8 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	617b      	str	r3, [r7, #20]
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1d0      	bne.n	800785a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1be      	bne.n	800783c <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078c4:	2bfe      	cmp	r3, #254	@ 0xfe
 80078c6:	d103      	bne.n	80078d0 <netif_add+0x15c>
    netif_num = 0;
 80078c8:	4b11      	ldr	r3, [pc, #68]	@ (8007910 <netif_add+0x19c>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	701a      	strb	r2, [r3, #0]
 80078ce:	e006      	b.n	80078de <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078d6:	3301      	adds	r3, #1
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	4b0d      	ldr	r3, [pc, #52]	@ (8007910 <netif_add+0x19c>)
 80078dc:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80078de:	4b0d      	ldr	r3, [pc, #52]	@ (8007914 <netif_add+0x1a0>)
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80078e6:	4a0b      	ldr	r2, [pc, #44]	@ (8007914 <netif_add+0x1a0>)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	080157f0 	.word	0x080157f0
 80078fc:	08015884 	.word	0x08015884
 8007900:	08015840 	.word	0x08015840
 8007904:	080158a0 	.word	0x080158a0
 8007908:	08018314 	.word	0x08018314
 800790c:	08007d37 	.word	0x08007d37
 8007910:	2000432c 	.word	0x2000432c
 8007914:	20004324 	.word	0x20004324
 8007918:	080158c4 	.word	0x080158c4
 800791c:	080158d8 	.word	0x080158d8

08007920 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800792a:	6839      	ldr	r1, [r7, #0]
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f002 ff53 	bl	800a7d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007932:	6839      	ldr	r1, [r7, #0]
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f008 f84f 	bl	800f9d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
	...

08007944 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b086      	sub	sp, #24
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d106      	bne.n	8007964 <netif_do_set_ipaddr+0x20>
 8007956:	4b1d      	ldr	r3, [pc, #116]	@ (80079cc <netif_do_set_ipaddr+0x88>)
 8007958:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800795c:	491c      	ldr	r1, [pc, #112]	@ (80079d0 <netif_do_set_ipaddr+0x8c>)
 800795e:	481d      	ldr	r0, [pc, #116]	@ (80079d4 <netif_do_set_ipaddr+0x90>)
 8007960:	f00c fbde 	bl	8014120 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d106      	bne.n	8007978 <netif_do_set_ipaddr+0x34>
 800796a:	4b18      	ldr	r3, [pc, #96]	@ (80079cc <netif_do_set_ipaddr+0x88>)
 800796c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8007970:	4917      	ldr	r1, [pc, #92]	@ (80079d0 <netif_do_set_ipaddr+0x8c>)
 8007972:	4818      	ldr	r0, [pc, #96]	@ (80079d4 <netif_do_set_ipaddr+0x90>)
 8007974:	f00c fbd4 	bl	8014120 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	429a      	cmp	r2, r3
 8007984:	d01c      	beq.n	80079c0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3304      	adds	r3, #4
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8007996:	f107 0314 	add.w	r3, r7, #20
 800799a:	4619      	mov	r1, r3
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f7ff ffbf 	bl	8007920 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <netif_do_set_ipaddr+0x6a>
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	e000      	b.n	80079b0 <netif_do_set_ipaddr+0x6c>
 80079ae:	2300      	movs	r3, #0
 80079b0:	68fa      	ldr	r2, [r7, #12]
 80079b2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80079b4:	2101      	movs	r1, #1
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f8d2 	bl	8007b60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80079bc:	2301      	movs	r3, #1
 80079be:	e000      	b.n	80079c2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	080157f0 	.word	0x080157f0
 80079d0:	08015908 	.word	0x08015908
 80079d4:	08015840 	.word	0x08015840

080079d8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	3308      	adds	r3, #8
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d00a      	beq.n	8007a08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <netif_do_set_netmask+0x26>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	e000      	b.n	8007a00 <netif_do_set_netmask+0x28>
 80079fe:	2300      	movs	r3, #0
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007a04:	2301      	movs	r3, #1
 8007a06:	e000      	b.n	8007a0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a14:	4770      	bx	lr

08007a16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007a16:	b480      	push	{r7}
 8007a18:	b085      	sub	sp, #20
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	60f8      	str	r0, [r7, #12]
 8007a1e:	60b9      	str	r1, [r7, #8]
 8007a20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	681a      	ldr	r2, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	330c      	adds	r3, #12
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d00a      	beq.n	8007a46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <netif_do_set_gw+0x26>
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	e000      	b.n	8007a3e <netif_do_set_gw+0x28>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b088      	sub	sp, #32
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d101      	bne.n	8007a74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007a70:	4b1c      	ldr	r3, [pc, #112]	@ (8007ae4 <netif_set_addr+0x90>)
 8007a72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae4 <netif_set_addr+0x90>)
 8007a7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007a84:	4b17      	ldr	r3, [pc, #92]	@ (8007ae4 <netif_set_addr+0x90>)
 8007a86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d003      	beq.n	8007a96 <netif_set_addr+0x42>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <netif_set_addr+0x46>
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <netif_set_addr+0x48>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007aa4:	f107 0310 	add.w	r3, r7, #16
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	68b9      	ldr	r1, [r7, #8]
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ff49 	bl	8007944 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007ab2:	69fa      	ldr	r2, [r7, #28]
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f7ff ff8e 	bl	80079d8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007abc:	69ba      	ldr	r2, [r7, #24]
 8007abe:	6839      	ldr	r1, [r7, #0]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f7ff ffa8 	bl	8007a16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d106      	bne.n	8007ada <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007acc:	f107 0310 	add.w	r3, r7, #16
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	68b9      	ldr	r1, [r7, #8]
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff ff35 	bl	8007944 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007ada:	bf00      	nop
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	08018314 	.word	0x08018314

08007ae8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007af0:	4a04      	ldr	r2, [pc, #16]	@ (8007b04 <netif_set_default+0x1c>)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20004328 	.word	0x20004328

08007b08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d107      	bne.n	8007b26 <netif_set_up+0x1e>
 8007b16:	4b0f      	ldr	r3, [pc, #60]	@ (8007b54 <netif_set_up+0x4c>)
 8007b18:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007b1c:	490e      	ldr	r1, [pc, #56]	@ (8007b58 <netif_set_up+0x50>)
 8007b1e:	480f      	ldr	r0, [pc, #60]	@ (8007b5c <netif_set_up+0x54>)
 8007b20:	f00c fafe 	bl	8014120 <iprintf>
 8007b24:	e013      	b.n	8007b4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10c      	bne.n	8007b4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b3a:	f043 0301 	orr.w	r3, r3, #1
 8007b3e:	b2da      	uxtb	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007b46:	2103      	movs	r1, #3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f809 	bl	8007b60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	080157f0 	.word	0x080157f0
 8007b58:	08015978 	.word	0x08015978
 8007b5c:	08015840 	.word	0x08015840

08007b60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d106      	bne.n	8007b80 <netif_issue_reports+0x20>
 8007b72:	4b18      	ldr	r3, [pc, #96]	@ (8007bd4 <netif_issue_reports+0x74>)
 8007b74:	f240 326d 	movw	r2, #877	@ 0x36d
 8007b78:	4917      	ldr	r1, [pc, #92]	@ (8007bd8 <netif_issue_reports+0x78>)
 8007b7a:	4818      	ldr	r0, [pc, #96]	@ (8007bdc <netif_issue_reports+0x7c>)
 8007b7c:	f00c fad0 	bl	8014120 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01e      	beq.n	8007bcc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d017      	beq.n	8007bcc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d013      	beq.n	8007bce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00e      	beq.n	8007bce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3304      	adds	r3, #4
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f00a fd51 	bl	801266c <etharp_request>
 8007bca:	e000      	b.n	8007bce <netif_issue_reports+0x6e>
    return;
 8007bcc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	080157f0 	.word	0x080157f0
 8007bd8:	08015994 	.word	0x08015994
 8007bdc:	08015840 	.word	0x08015840

08007be0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d107      	bne.n	8007bfe <netif_set_down+0x1e>
 8007bee:	4b12      	ldr	r3, [pc, #72]	@ (8007c38 <netif_set_down+0x58>)
 8007bf0:	f240 329b 	movw	r2, #923	@ 0x39b
 8007bf4:	4911      	ldr	r1, [pc, #68]	@ (8007c3c <netif_set_down+0x5c>)
 8007bf6:	4812      	ldr	r0, [pc, #72]	@ (8007c40 <netif_set_down+0x60>)
 8007bf8:	f00c fa92 	bl	8014120 <iprintf>
 8007bfc:	e019      	b.n	8007c32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c04:	f003 0301 	and.w	r3, r3, #1
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d012      	beq.n	8007c32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c12:	f023 0301 	bic.w	r3, r3, #1
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c24:	f003 0308 	and.w	r3, r3, #8
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f00a f8d7 	bl	8011de0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	080157f0 	.word	0x080157f0
 8007c3c:	080159b8 	.word	0x080159b8
 8007c40:	08015840 	.word	0x08015840

08007c44 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d107      	bne.n	8007c62 <netif_set_link_up+0x1e>
 8007c52:	4b15      	ldr	r3, [pc, #84]	@ (8007ca8 <netif_set_link_up+0x64>)
 8007c54:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007c58:	4914      	ldr	r1, [pc, #80]	@ (8007cac <netif_set_link_up+0x68>)
 8007c5a:	4815      	ldr	r0, [pc, #84]	@ (8007cb0 <netif_set_link_up+0x6c>)
 8007c5c:	f00c fa60 	bl	8014120 <iprintf>
 8007c60:	e01e      	b.n	8007ca0 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d117      	bne.n	8007ca0 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f008 faf2 	bl	801026c <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007c88:	2103      	movs	r1, #3
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f7ff ff68 	bl	8007b60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <netif_set_link_up+0x5c>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	080157f0 	.word	0x080157f0
 8007cac:	080159d8 	.word	0x080159d8
 8007cb0:	08015840 	.word	0x08015840

08007cb4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d107      	bne.n	8007cd2 <netif_set_link_down+0x1e>
 8007cc2:	4b11      	ldr	r3, [pc, #68]	@ (8007d08 <netif_set_link_down+0x54>)
 8007cc4:	f240 4206 	movw	r2, #1030	@ 0x406
 8007cc8:	4910      	ldr	r1, [pc, #64]	@ (8007d0c <netif_set_link_down+0x58>)
 8007cca:	4811      	ldr	r0, [pc, #68]	@ (8007d10 <netif_set_link_down+0x5c>)
 8007ccc:	f00c fa28 	bl	8014120 <iprintf>
 8007cd0:	e017      	b.n	8007d02 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d010      	beq.n	8007d02 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007ce6:	f023 0304 	bic.w	r3, r3, #4
 8007cea:	b2da      	uxtb	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d003      	beq.n	8007d02 <netif_set_link_down+0x4e>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69db      	ldr	r3, [r3, #28]
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	080157f0 	.word	0x080157f0
 8007d0c:	080159fc 	.word	0x080159fc
 8007d10:	08015840 	.word	0x08015840

08007d14 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d002      	beq.n	8007d2a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	61da      	str	r2, [r3, #28]
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b085      	sub	sp, #20
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	60f8      	str	r0, [r7, #12]
 8007d3e:	60b9      	str	r1, [r7, #8]
 8007d40:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007d42:	f06f 030b 	mvn.w	r3, #11
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3714      	adds	r7, #20
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007d5e:	79fb      	ldrb	r3, [r7, #7]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d013      	beq.n	8007d8c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8007d64:	4b0d      	ldr	r3, [pc, #52]	@ (8007d9c <netif_get_by_index+0x48>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	60fb      	str	r3, [r7, #12]
 8007d6a:	e00c      	b.n	8007d86 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007d72:	3301      	adds	r3, #1
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	79fa      	ldrb	r2, [r7, #7]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d101      	bne.n	8007d80 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	e006      	b.n	8007d8e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1ef      	bne.n	8007d6c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3714      	adds	r7, #20
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	20004324 	.word	0x20004324

08007da0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007da6:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd8 <pbuf_free_ooseq+0x38>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007dac:	4b0b      	ldr	r3, [pc, #44]	@ (8007ddc <pbuf_free_ooseq+0x3c>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	607b      	str	r3, [r7, #4]
 8007db2:	e00a      	b.n	8007dca <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d003      	beq.n	8007dc4 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f002 fd49 	bl	800a854 <tcp_free_ooseq>
      return;
 8007dc2:	e005      	b.n	8007dd0 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	607b      	str	r3, [r7, #4]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f1      	bne.n	8007db4 <pbuf_free_ooseq+0x14>
    }
  }
}
 8007dd0:	3708      	adds	r7, #8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	2000432d 	.word	0x2000432d
 8007ddc:	2000433c 	.word	0x2000433c

08007de0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8007de0:	b480      	push	{r7}
 8007de2:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8007de4:	4b03      	ldr	r3, [pc, #12]	@ (8007df4 <pbuf_pool_is_empty+0x14>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8007dea:	bf00      	nop
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	2000432d 	.word	0x2000432d

08007df8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4611      	mov	r1, r2
 8007e04:	461a      	mov	r2, r3
 8007e06:	460b      	mov	r3, r1
 8007e08:	80fb      	strh	r3, [r7, #6]
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	88fa      	ldrh	r2, [r7, #6]
 8007e1e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	88ba      	ldrh	r2, [r7, #4]
 8007e24:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007e26:	8b3b      	ldrh	r3, [r7, #24]
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	7f3a      	ldrb	r2, [r7, #28]
 8007e32:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	73da      	strb	r2, [r3, #15]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08c      	sub	sp, #48	@ 0x30
 8007e50:	af02      	add	r7, sp, #8
 8007e52:	4603      	mov	r3, r0
 8007e54:	71fb      	strb	r3, [r7, #7]
 8007e56:	460b      	mov	r3, r1
 8007e58:	80bb      	strh	r3, [r7, #4]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007e62:	887b      	ldrh	r3, [r7, #2]
 8007e64:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007e68:	d07f      	beq.n	8007f6a <pbuf_alloc+0x11e>
 8007e6a:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007e6e:	f300 80c8 	bgt.w	8008002 <pbuf_alloc+0x1b6>
 8007e72:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007e76:	d010      	beq.n	8007e9a <pbuf_alloc+0x4e>
 8007e78:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007e7c:	f300 80c1 	bgt.w	8008002 <pbuf_alloc+0x1b6>
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d002      	beq.n	8007e8a <pbuf_alloc+0x3e>
 8007e84:	2b41      	cmp	r3, #65	@ 0x41
 8007e86:	f040 80bc 	bne.w	8008002 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007e8a:	887a      	ldrh	r2, [r7, #2]
 8007e8c:	88bb      	ldrh	r3, [r7, #4]
 8007e8e:	4619      	mov	r1, r3
 8007e90:	2000      	movs	r0, #0
 8007e92:	f000 f8d1 	bl	8008038 <pbuf_alloc_reference>
 8007e96:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007e98:	e0bd      	b.n	8008016 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007ea2:	88bb      	ldrh	r3, [r7, #4]
 8007ea4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007ea6:	2008      	movs	r0, #8
 8007ea8:	f7ff fbe6 	bl	8007678 <memp_malloc>
 8007eac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d109      	bne.n	8007ec8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8007eb4:	f7ff ff94 	bl	8007de0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8007ebe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ec0:	f000 faa8 	bl	8008414 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e0a7      	b.n	8008018 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007ec8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007eca:	3303      	adds	r3, #3
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	8b7a      	ldrh	r2, [r7, #26]
 8007edc:	4293      	cmp	r3, r2
 8007ede:	bf28      	it	cs
 8007ee0:	4613      	movcs	r3, r2
 8007ee2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007ee4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ee6:	3310      	adds	r3, #16
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	4413      	add	r3, r2
 8007eec:	3303      	adds	r3, #3
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	89f9      	ldrh	r1, [r7, #14]
 8007ef6:	8b7a      	ldrh	r2, [r7, #26]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	9301      	str	r3, [sp, #4]
 8007efc:	887b      	ldrh	r3, [r7, #2]
 8007efe:	9300      	str	r3, [sp, #0]
 8007f00:	460b      	mov	r3, r1
 8007f02:	4601      	mov	r1, r0
 8007f04:	6938      	ldr	r0, [r7, #16]
 8007f06:	f7ff ff77 	bl	8007df8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d006      	beq.n	8007f24 <pbuf_alloc+0xd8>
 8007f16:	4b42      	ldr	r3, [pc, #264]	@ (8008020 <pbuf_alloc+0x1d4>)
 8007f18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f1c:	4941      	ldr	r1, [pc, #260]	@ (8008024 <pbuf_alloc+0x1d8>)
 8007f1e:	4842      	ldr	r0, [pc, #264]	@ (8008028 <pbuf_alloc+0x1dc>)
 8007f20:	f00c f8fe 	bl	8014120 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007f24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007f26:	3303      	adds	r3, #3
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007f30:	d106      	bne.n	8007f40 <pbuf_alloc+0xf4>
 8007f32:	4b3b      	ldr	r3, [pc, #236]	@ (8008020 <pbuf_alloc+0x1d4>)
 8007f34:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007f38:	493c      	ldr	r1, [pc, #240]	@ (800802c <pbuf_alloc+0x1e0>)
 8007f3a:	483b      	ldr	r0, [pc, #236]	@ (8008028 <pbuf_alloc+0x1dc>)
 8007f3c:	f00c f8f0 	bl	8014120 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f4a:	e002      	b.n	8007f52 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	693a      	ldr	r2, [r7, #16]
 8007f50:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007f56:	8b7a      	ldrh	r2, [r7, #26]
 8007f58:	89fb      	ldrh	r3, [r7, #14]
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007f62:	8b7b      	ldrh	r3, [r7, #26]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d19e      	bne.n	8007ea6 <pbuf_alloc+0x5a>
      break;
 8007f68:	e055      	b.n	8008016 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007f6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007f6c:	3303      	adds	r3, #3
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f023 0303 	bic.w	r3, r3, #3
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	88bb      	ldrh	r3, [r7, #4]
 8007f78:	3303      	adds	r3, #3
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	4413      	add	r3, r2
 8007f84:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007f86:	8b3b      	ldrh	r3, [r7, #24]
 8007f88:	3310      	adds	r3, #16
 8007f8a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007f8c:	8b3a      	ldrh	r2, [r7, #24]
 8007f8e:	88bb      	ldrh	r3, [r7, #4]
 8007f90:	3303      	adds	r3, #3
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d306      	bcc.n	8007fa8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007f9a:	8afa      	ldrh	r2, [r7, #22]
 8007f9c:	88bb      	ldrh	r3, [r7, #4]
 8007f9e:	3303      	adds	r3, #3
 8007fa0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d201      	bcs.n	8007fac <pbuf_alloc+0x160>
        return NULL;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e035      	b.n	8008018 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007fac:	8afb      	ldrh	r3, [r7, #22]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f7ff f9f4 	bl	800739c <mem_malloc>
 8007fb4:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d101      	bne.n	8007fc0 <pbuf_alloc+0x174>
        return NULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	e02b      	b.n	8008018 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007fc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007fc2:	3310      	adds	r3, #16
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fc6:	4413      	add	r3, r2
 8007fc8:	3303      	adds	r3, #3
 8007fca:	f023 0303 	bic.w	r3, r3, #3
 8007fce:	4618      	mov	r0, r3
 8007fd0:	88b9      	ldrh	r1, [r7, #4]
 8007fd2:	88ba      	ldrh	r2, [r7, #4]
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	887b      	ldrh	r3, [r7, #2]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4601      	mov	r1, r0
 8007fe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fe2:	f7ff ff09 	bl	8007df8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f003 0303 	and.w	r3, r3, #3
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d010      	beq.n	8008014 <pbuf_alloc+0x1c8>
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <pbuf_alloc+0x1d4>)
 8007ff4:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007ff8:	490d      	ldr	r1, [pc, #52]	@ (8008030 <pbuf_alloc+0x1e4>)
 8007ffa:	480b      	ldr	r0, [pc, #44]	@ (8008028 <pbuf_alloc+0x1dc>)
 8007ffc:	f00c f890 	bl	8014120 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8008000:	e008      	b.n	8008014 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008002:	4b07      	ldr	r3, [pc, #28]	@ (8008020 <pbuf_alloc+0x1d4>)
 8008004:	f240 1227 	movw	r2, #295	@ 0x127
 8008008:	490a      	ldr	r1, [pc, #40]	@ (8008034 <pbuf_alloc+0x1e8>)
 800800a:	4807      	ldr	r0, [pc, #28]	@ (8008028 <pbuf_alloc+0x1dc>)
 800800c:	f00c f888 	bl	8014120 <iprintf>
      return NULL;
 8008010:	2300      	movs	r3, #0
 8008012:	e001      	b.n	8008018 <pbuf_alloc+0x1cc>
      break;
 8008014:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8008016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008018:	4618      	mov	r0, r3
 800801a:	3728      	adds	r7, #40	@ 0x28
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	08015a20 	.word	0x08015a20
 8008024:	08015a50 	.word	0x08015a50
 8008028:	08015a80 	.word	0x08015a80
 800802c:	08015aa8 	.word	0x08015aa8
 8008030:	08015adc 	.word	0x08015adc
 8008034:	08015b08 	.word	0x08015b08

08008038 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af02      	add	r7, sp, #8
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	807b      	strh	r3, [r7, #2]
 8008044:	4613      	mov	r3, r2
 8008046:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008048:	883b      	ldrh	r3, [r7, #0]
 800804a:	2b41      	cmp	r3, #65	@ 0x41
 800804c:	d009      	beq.n	8008062 <pbuf_alloc_reference+0x2a>
 800804e:	883b      	ldrh	r3, [r7, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d006      	beq.n	8008062 <pbuf_alloc_reference+0x2a>
 8008054:	4b0f      	ldr	r3, [pc, #60]	@ (8008094 <pbuf_alloc_reference+0x5c>)
 8008056:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800805a:	490f      	ldr	r1, [pc, #60]	@ (8008098 <pbuf_alloc_reference+0x60>)
 800805c:	480f      	ldr	r0, [pc, #60]	@ (800809c <pbuf_alloc_reference+0x64>)
 800805e:	f00c f85f 	bl	8014120 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008062:	2007      	movs	r0, #7
 8008064:	f7ff fb08 	bl	8007678 <memp_malloc>
 8008068:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008070:	2300      	movs	r3, #0
 8008072:	e00b      	b.n	800808c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8008074:	8879      	ldrh	r1, [r7, #2]
 8008076:	887a      	ldrh	r2, [r7, #2]
 8008078:	2300      	movs	r3, #0
 800807a:	9301      	str	r3, [sp, #4]
 800807c:	883b      	ldrh	r3, [r7, #0]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	460b      	mov	r3, r1
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f7ff feb7 	bl	8007df8 <pbuf_init_alloced_pbuf>
  return p;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	08015a20 	.word	0x08015a20
 8008098:	08015b24 	.word	0x08015b24
 800809c:	08015a80 	.word	0x08015a80

080080a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b088      	sub	sp, #32
 80080a4:	af02      	add	r7, sp, #8
 80080a6:	607b      	str	r3, [r7, #4]
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
 80080ac:	460b      	mov	r3, r1
 80080ae:	81bb      	strh	r3, [r7, #12]
 80080b0:	4613      	mov	r3, r2
 80080b2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
 80080b6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80080b8:	8a7b      	ldrh	r3, [r7, #18]
 80080ba:	3303      	adds	r3, #3
 80080bc:	f023 0203 	bic.w	r2, r3, #3
 80080c0:	89bb      	ldrh	r3, [r7, #12]
 80080c2:	441a      	add	r2, r3
 80080c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d901      	bls.n	80080ce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	e018      	b.n	8008100 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d007      	beq.n	80080e4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80080d4:	8a7b      	ldrh	r3, [r7, #18]
 80080d6:	3303      	adds	r3, #3
 80080d8:	f023 0303 	bic.w	r3, r3, #3
 80080dc:	6a3a      	ldr	r2, [r7, #32]
 80080de:	4413      	add	r3, r2
 80080e0:	617b      	str	r3, [r7, #20]
 80080e2:	e001      	b.n	80080e8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	89b9      	ldrh	r1, [r7, #12]
 80080ec:	89ba      	ldrh	r2, [r7, #12]
 80080ee:	2302      	movs	r3, #2
 80080f0:	9301      	str	r3, [sp, #4]
 80080f2:	897b      	ldrh	r3, [r7, #10]
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	460b      	mov	r3, r1
 80080f8:	6979      	ldr	r1, [r7, #20]
 80080fa:	f7ff fe7d 	bl	8007df8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80080fe:	687b      	ldr	r3, [r7, #4]
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	460b      	mov	r3, r1
 8008112:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <pbuf_realloc+0x20>
 800811a:	4b3a      	ldr	r3, [pc, #232]	@ (8008204 <pbuf_realloc+0xfc>)
 800811c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8008120:	4939      	ldr	r1, [pc, #228]	@ (8008208 <pbuf_realloc+0x100>)
 8008122:	483a      	ldr	r0, [pc, #232]	@ (800820c <pbuf_realloc+0x104>)
 8008124:	f00b fffc 	bl	8014120 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	891b      	ldrh	r3, [r3, #8]
 800812c:	887a      	ldrh	r2, [r7, #2]
 800812e:	429a      	cmp	r2, r3
 8008130:	d263      	bcs.n	80081fa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	891a      	ldrh	r2, [r3, #8]
 8008136:	887b      	ldrh	r3, [r7, #2]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800813c:	887b      	ldrh	r3, [r7, #2]
 800813e:	817b      	strh	r3, [r7, #10]
  q = p;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8008144:	e018      	b.n	8008178 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	895b      	ldrh	r3, [r3, #10]
 800814a:	897a      	ldrh	r2, [r7, #10]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	891a      	ldrh	r2, [r3, #8]
 8008154:	893b      	ldrh	r3, [r7, #8]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d106      	bne.n	8008178 <pbuf_realloc+0x70>
 800816a:	4b26      	ldr	r3, [pc, #152]	@ (8008204 <pbuf_realloc+0xfc>)
 800816c:	f240 12af 	movw	r2, #431	@ 0x1af
 8008170:	4927      	ldr	r1, [pc, #156]	@ (8008210 <pbuf_realloc+0x108>)
 8008172:	4826      	ldr	r0, [pc, #152]	@ (800820c <pbuf_realloc+0x104>)
 8008174:	f00b ffd4 	bl	8014120 <iprintf>
  while (rem_len > q->len) {
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	895b      	ldrh	r3, [r3, #10]
 800817c:	897a      	ldrh	r2, [r7, #10]
 800817e:	429a      	cmp	r2, r3
 8008180:	d8e1      	bhi.n	8008146 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	7b1b      	ldrb	r3, [r3, #12]
 8008186:	f003 030f 	and.w	r3, r3, #15
 800818a:	2b00      	cmp	r3, #0
 800818c:	d121      	bne.n	80081d2 <pbuf_realloc+0xca>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	895b      	ldrh	r3, [r3, #10]
 8008192:	897a      	ldrh	r2, [r7, #10]
 8008194:	429a      	cmp	r2, r3
 8008196:	d01c      	beq.n	80081d2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	7b5b      	ldrb	r3, [r3, #13]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d116      	bne.n	80081d2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685a      	ldr	r2, [r3, #4]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	897b      	ldrh	r3, [r7, #10]
 80081b0:	4413      	add	r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	4619      	mov	r1, r3
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f7fe fff4 	bl	80071a4 <mem_trim>
 80081bc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d106      	bne.n	80081d2 <pbuf_realloc+0xca>
 80081c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008204 <pbuf_realloc+0xfc>)
 80081c6:	f240 12bd 	movw	r2, #445	@ 0x1bd
 80081ca:	4912      	ldr	r1, [pc, #72]	@ (8008214 <pbuf_realloc+0x10c>)
 80081cc:	480f      	ldr	r0, [pc, #60]	@ (800820c <pbuf_realloc+0x104>)
 80081ce:	f00b ffa7 	bl	8014120 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	897a      	ldrh	r2, [r7, #10]
 80081d6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	895a      	ldrh	r2, [r3, #10]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d004      	beq.n	80081f2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f000 f911 	bl	8008414 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	e000      	b.n	80081fc <pbuf_realloc+0xf4>
    return;
 80081fa:	bf00      	nop

}
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	08015a20 	.word	0x08015a20
 8008208:	08015b38 	.word	0x08015b38
 800820c:	08015a80 	.word	0x08015a80
 8008210:	08015b50 	.word	0x08015b50
 8008214:	08015b68 	.word	0x08015b68

08008218 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	4613      	mov	r3, r2
 8008224:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d106      	bne.n	800823a <pbuf_add_header_impl+0x22>
 800822c:	4b2b      	ldr	r3, [pc, #172]	@ (80082dc <pbuf_add_header_impl+0xc4>)
 800822e:	f240 12df 	movw	r2, #479	@ 0x1df
 8008232:	492b      	ldr	r1, [pc, #172]	@ (80082e0 <pbuf_add_header_impl+0xc8>)
 8008234:	482b      	ldr	r0, [pc, #172]	@ (80082e4 <pbuf_add_header_impl+0xcc>)
 8008236:	f00b ff73 	bl	8014120 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <pbuf_add_header_impl+0x30>
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008246:	d301      	bcc.n	800824c <pbuf_add_header_impl+0x34>
    return 1;
 8008248:	2301      	movs	r3, #1
 800824a:	e043      	b.n	80082d4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <pbuf_add_header_impl+0x3e>
    return 0;
 8008252:	2300      	movs	r3, #0
 8008254:	e03e      	b.n	80082d4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	891a      	ldrh	r2, [r3, #8]
 800825e:	8a7b      	ldrh	r3, [r7, #18]
 8008260:	4413      	add	r3, r2
 8008262:	b29b      	uxth	r3, r3
 8008264:	8a7a      	ldrh	r2, [r7, #18]
 8008266:	429a      	cmp	r2, r3
 8008268:	d901      	bls.n	800826e <pbuf_add_header_impl+0x56>
    return 1;
 800826a:	2301      	movs	r3, #1
 800826c:	e032      	b.n	80082d4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	7b1b      	ldrb	r3, [r3, #12]
 8008272:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008274:	8a3b      	ldrh	r3, [r7, #16]
 8008276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800827a:	2b00      	cmp	r3, #0
 800827c:	d00c      	beq.n	8008298 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	425b      	negs	r3, r3
 8008286:	4413      	add	r3, r2
 8008288:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	3310      	adds	r3, #16
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	429a      	cmp	r2, r3
 8008292:	d20d      	bcs.n	80082b0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8008294:	2301      	movs	r3, #1
 8008296:	e01d      	b.n	80082d4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008298:	79fb      	ldrb	r3, [r7, #7]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d006      	beq.n	80082ac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	685a      	ldr	r2, [r3, #4]
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	425b      	negs	r3, r3
 80082a6:	4413      	add	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e001      	b.n	80082b0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e011      	b.n	80082d4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	895a      	ldrh	r2, [r3, #10]
 80082ba:	8a7b      	ldrh	r3, [r7, #18]
 80082bc:	4413      	add	r3, r2
 80082be:	b29a      	uxth	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	891a      	ldrh	r2, [r3, #8]
 80082c8:	8a7b      	ldrh	r3, [r7, #18]
 80082ca:	4413      	add	r3, r2
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	811a      	strh	r2, [r3, #8]


  return 0;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3718      	adds	r7, #24
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	08015a20 	.word	0x08015a20
 80082e0:	08015b84 	.word	0x08015b84
 80082e4:	08015a80 	.word	0x08015a80

080082e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80082f2:	2200      	movs	r2, #0
 80082f4:	6839      	ldr	r1, [r7, #0]
 80082f6:	6878      	ldr	r0, [r7, #4]
 80082f8:	f7ff ff8e 	bl	8008218 <pbuf_add_header_impl>
 80082fc:	4603      	mov	r3, r0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d106      	bne.n	8008326 <pbuf_remove_header+0x1e>
 8008318:	4b20      	ldr	r3, [pc, #128]	@ (800839c <pbuf_remove_header+0x94>)
 800831a:	f240 224b 	movw	r2, #587	@ 0x24b
 800831e:	4920      	ldr	r1, [pc, #128]	@ (80083a0 <pbuf_remove_header+0x98>)
 8008320:	4820      	ldr	r0, [pc, #128]	@ (80083a4 <pbuf_remove_header+0x9c>)
 8008322:	f00b fefd 	bl	8014120 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <pbuf_remove_header+0x2c>
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008332:	d301      	bcc.n	8008338 <pbuf_remove_header+0x30>
    return 1;
 8008334:	2301      	movs	r3, #1
 8008336:	e02c      	b.n	8008392 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <pbuf_remove_header+0x3a>
    return 0;
 800833e:	2300      	movs	r3, #0
 8008340:	e027      	b.n	8008392 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	895b      	ldrh	r3, [r3, #10]
 800834a:	89fa      	ldrh	r2, [r7, #14]
 800834c:	429a      	cmp	r2, r3
 800834e:	d908      	bls.n	8008362 <pbuf_remove_header+0x5a>
 8008350:	4b12      	ldr	r3, [pc, #72]	@ (800839c <pbuf_remove_header+0x94>)
 8008352:	f240 2255 	movw	r2, #597	@ 0x255
 8008356:	4914      	ldr	r1, [pc, #80]	@ (80083a8 <pbuf_remove_header+0xa0>)
 8008358:	4812      	ldr	r0, [pc, #72]	@ (80083a4 <pbuf_remove_header+0x9c>)
 800835a:	f00b fee1 	bl	8014120 <iprintf>
 800835e:	2301      	movs	r3, #1
 8008360:	e017      	b.n	8008392 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	441a      	add	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	895a      	ldrh	r2, [r3, #10]
 8008378:	89fb      	ldrh	r3, [r7, #14]
 800837a:	1ad3      	subs	r3, r2, r3
 800837c:	b29a      	uxth	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	891a      	ldrh	r2, [r3, #8]
 8008386:	89fb      	ldrh	r3, [r7, #14]
 8008388:	1ad3      	subs	r3, r2, r3
 800838a:	b29a      	uxth	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3710      	adds	r7, #16
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	08015a20 	.word	0x08015a20
 80083a0:	08015b84 	.word	0x08015b84
 80083a4:	08015a80 	.word	0x08015a80
 80083a8:	08015b90 	.word	0x08015b90

080083ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	807b      	strh	r3, [r7, #2]
 80083b8:	4613      	mov	r3, r2
 80083ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80083bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	da08      	bge.n	80083d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80083c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083c8:	425b      	negs	r3, r3
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff ff9b 	bl	8008308 <pbuf_remove_header>
 80083d2:	4603      	mov	r3, r0
 80083d4:	e007      	b.n	80083e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80083d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083da:	787a      	ldrb	r2, [r7, #1]
 80083dc:	4619      	mov	r1, r3
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff ff1a 	bl	8008218 <pbuf_add_header_impl>
 80083e4:	4603      	mov	r3, r0
  }
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
 80083f6:	460b      	mov	r3, r1
 80083f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80083fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083fe:	2201      	movs	r2, #1
 8008400:	4619      	mov	r1, r3
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7ff ffd2 	bl	80083ac <pbuf_header_impl>
 8008408:	4603      	mov	r3, r0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10b      	bne.n	800843a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d106      	bne.n	8008436 <pbuf_free+0x22>
 8008428:	4b38      	ldr	r3, [pc, #224]	@ (800850c <pbuf_free+0xf8>)
 800842a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800842e:	4938      	ldr	r1, [pc, #224]	@ (8008510 <pbuf_free+0xfc>)
 8008430:	4838      	ldr	r0, [pc, #224]	@ (8008514 <pbuf_free+0x100>)
 8008432:	f00b fe75 	bl	8014120 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8008436:	2300      	movs	r3, #0
 8008438:	e063      	b.n	8008502 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800843e:	e05c      	b.n	80084fa <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7b9b      	ldrb	r3, [r3, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d106      	bne.n	8008456 <pbuf_free+0x42>
 8008448:	4b30      	ldr	r3, [pc, #192]	@ (800850c <pbuf_free+0xf8>)
 800844a:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800844e:	4932      	ldr	r1, [pc, #200]	@ (8008518 <pbuf_free+0x104>)
 8008450:	4830      	ldr	r0, [pc, #192]	@ (8008514 <pbuf_free+0x100>)
 8008452:	f00b fe65 	bl	8014120 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	7b9b      	ldrb	r3, [r3, #14]
 800845a:	3b01      	subs	r3, #1
 800845c:	b2da      	uxtb	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	739a      	strb	r2, [r3, #14]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	7b9b      	ldrb	r3, [r3, #14]
 8008466:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008468:	7dbb      	ldrb	r3, [r7, #22]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d143      	bne.n	80084f6 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	7b1b      	ldrb	r3, [r3, #12]
 8008478:	f003 030f 	and.w	r3, r3, #15
 800847c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	7b5b      	ldrb	r3, [r3, #13]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d011      	beq.n	80084ae <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	691b      	ldr	r3, [r3, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d106      	bne.n	80084a4 <pbuf_free+0x90>
 8008496:	4b1d      	ldr	r3, [pc, #116]	@ (800850c <pbuf_free+0xf8>)
 8008498:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800849c:	491f      	ldr	r1, [pc, #124]	@ (800851c <pbuf_free+0x108>)
 800849e:	481d      	ldr	r0, [pc, #116]	@ (8008514 <pbuf_free+0x100>)
 80084a0:	f00b fe3e 	bl	8014120 <iprintf>
        pc->custom_free_function(p);
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	4798      	blx	r3
 80084ac:	e01d      	b.n	80084ea <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	d104      	bne.n	80084be <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	2008      	movs	r0, #8
 80084b8:	f7ff f92a 	bl	8007710 <memp_free>
 80084bc:	e015      	b.n	80084ea <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80084be:	7bfb      	ldrb	r3, [r7, #15]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d104      	bne.n	80084ce <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	2007      	movs	r0, #7
 80084c8:	f7ff f922 	bl	8007710 <memp_free>
 80084cc:	e00d      	b.n	80084ea <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d103      	bne.n	80084dc <pbuf_free+0xc8>
          mem_free(p);
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7fe fdfb 	bl	80070d0 <mem_free>
 80084da:	e006      	b.n	80084ea <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80084dc:	4b0b      	ldr	r3, [pc, #44]	@ (800850c <pbuf_free+0xf8>)
 80084de:	f240 320f 	movw	r2, #783	@ 0x30f
 80084e2:	490f      	ldr	r1, [pc, #60]	@ (8008520 <pbuf_free+0x10c>)
 80084e4:	480b      	ldr	r0, [pc, #44]	@ (8008514 <pbuf_free+0x100>)
 80084e6:	f00b fe1b 	bl	8014120 <iprintf>
        }
      }
      count++;
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	3301      	adds	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	607b      	str	r3, [r7, #4]
 80084f4:	e001      	b.n	80084fa <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d19f      	bne.n	8008440 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8008500:	7dfb      	ldrb	r3, [r7, #23]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	08015a20 	.word	0x08015a20
 8008510:	08015b84 	.word	0x08015b84
 8008514:	08015a80 	.word	0x08015a80
 8008518:	08015bb0 	.word	0x08015bb0
 800851c:	08015bc8 	.word	0x08015bc8
 8008520:	08015bec 	.word	0x08015bec

08008524 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008524:	b480      	push	{r7}
 8008526:	b085      	sub	sp, #20
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8008530:	e005      	b.n	800853e <pbuf_clen+0x1a>
    ++len;
 8008532:	89fb      	ldrh	r3, [r7, #14]
 8008534:	3301      	adds	r3, #1
 8008536:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1f6      	bne.n	8008532 <pbuf_clen+0xe>
  }
  return len;
 8008544:	89fb      	ldrh	r3, [r7, #14]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3714      	adds	r7, #20
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
	...

08008554 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d010      	beq.n	8008584 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	7b9b      	ldrb	r3, [r3, #14]
 8008566:	3301      	adds	r3, #1
 8008568:	b2da      	uxtb	r2, r3
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	7b9b      	ldrb	r3, [r3, #14]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d106      	bne.n	8008584 <pbuf_ref+0x30>
 8008576:	4b05      	ldr	r3, [pc, #20]	@ (800858c <pbuf_ref+0x38>)
 8008578:	f240 3242 	movw	r2, #834	@ 0x342
 800857c:	4904      	ldr	r1, [pc, #16]	@ (8008590 <pbuf_ref+0x3c>)
 800857e:	4805      	ldr	r0, [pc, #20]	@ (8008594 <pbuf_ref+0x40>)
 8008580:	f00b fdce 	bl	8014120 <iprintf>
  }
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	08015a20 	.word	0x08015a20
 8008590:	08015c00 	.word	0x08015c00
 8008594:	08015a80 	.word	0x08015a80

08008598 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b084      	sub	sp, #16
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <pbuf_cat+0x16>
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d107      	bne.n	80085be <pbuf_cat+0x26>
 80085ae:	4b20      	ldr	r3, [pc, #128]	@ (8008630 <pbuf_cat+0x98>)
 80085b0:	f240 3259 	movw	r2, #857	@ 0x359
 80085b4:	491f      	ldr	r1, [pc, #124]	@ (8008634 <pbuf_cat+0x9c>)
 80085b6:	4820      	ldr	r0, [pc, #128]	@ (8008638 <pbuf_cat+0xa0>)
 80085b8:	f00b fdb2 	bl	8014120 <iprintf>
 80085bc:	e034      	b.n	8008628 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	e00a      	b.n	80085da <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	891a      	ldrh	r2, [r3, #8]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	891b      	ldrh	r3, [r3, #8]
 80085cc:	4413      	add	r3, r2
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1f0      	bne.n	80085c4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	891a      	ldrh	r2, [r3, #8]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	895b      	ldrh	r3, [r3, #10]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d006      	beq.n	80085fc <pbuf_cat+0x64>
 80085ee:	4b10      	ldr	r3, [pc, #64]	@ (8008630 <pbuf_cat+0x98>)
 80085f0:	f240 3262 	movw	r2, #866	@ 0x362
 80085f4:	4911      	ldr	r1, [pc, #68]	@ (800863c <pbuf_cat+0xa4>)
 80085f6:	4810      	ldr	r0, [pc, #64]	@ (8008638 <pbuf_cat+0xa0>)
 80085f8:	f00b fd92 	bl	8014120 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d006      	beq.n	8008612 <pbuf_cat+0x7a>
 8008604:	4b0a      	ldr	r3, [pc, #40]	@ (8008630 <pbuf_cat+0x98>)
 8008606:	f240 3263 	movw	r2, #867	@ 0x363
 800860a:	490d      	ldr	r1, [pc, #52]	@ (8008640 <pbuf_cat+0xa8>)
 800860c:	480a      	ldr	r0, [pc, #40]	@ (8008638 <pbuf_cat+0xa0>)
 800860e:	f00b fd87 	bl	8014120 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	891a      	ldrh	r2, [r3, #8]
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	891b      	ldrh	r3, [r3, #8]
 800861a:	4413      	add	r3, r2
 800861c:	b29a      	uxth	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	683a      	ldr	r2, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008628:	3710      	adds	r7, #16
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	08015a20 	.word	0x08015a20
 8008634:	08015c14 	.word	0x08015c14
 8008638:	08015a80 	.word	0x08015a80
 800863c:	08015c4c 	.word	0x08015c4c
 8008640:	08015c7c 	.word	0x08015c7c

08008644 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7ff ffa1 	bl	8008598 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8008656:	6838      	ldr	r0, [r7, #0]
 8008658:	f7ff ff7c 	bl	8008554 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800865c:	bf00      	nop
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800866e:	2300      	movs	r3, #0
 8008670:	617b      	str	r3, [r7, #20]
 8008672:	2300      	movs	r3, #0
 8008674:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <pbuf_copy+0x2a>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d005      	beq.n	800868e <pbuf_copy+0x2a>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	891a      	ldrh	r2, [r3, #8]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	891b      	ldrh	r3, [r3, #8]
 800868a:	429a      	cmp	r2, r3
 800868c:	d209      	bcs.n	80086a2 <pbuf_copy+0x3e>
 800868e:	4b57      	ldr	r3, [pc, #348]	@ (80087ec <pbuf_copy+0x188>)
 8008690:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8008694:	4956      	ldr	r1, [pc, #344]	@ (80087f0 <pbuf_copy+0x18c>)
 8008696:	4857      	ldr	r0, [pc, #348]	@ (80087f4 <pbuf_copy+0x190>)
 8008698:	f00b fd42 	bl	8014120 <iprintf>
 800869c:	f06f 030f 	mvn.w	r3, #15
 80086a0:	e09f      	b.n	80087e2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	895b      	ldrh	r3, [r3, #10]
 80086a6:	461a      	mov	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	1ad2      	subs	r2, r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	895b      	ldrh	r3, [r3, #10]
 80086b0:	4619      	mov	r1, r3
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	1acb      	subs	r3, r1, r3
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d306      	bcc.n	80086c8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	895b      	ldrh	r3, [r3, #10]
 80086be:	461a      	mov	r2, r3
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	1ad3      	subs	r3, r2, r3
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	e005      	b.n	80086d4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	895b      	ldrh	r3, [r3, #10]
 80086cc:	461a      	mov	r2, r3
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	18d0      	adds	r0, r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	4413      	add	r3, r2
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4619      	mov	r1, r3
 80086e8:	f00b fe2f 	bl	801434a <memcpy>
    offset_to += len;
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	895b      	ldrh	r3, [r3, #10]
 8008700:	461a      	mov	r2, r3
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	4293      	cmp	r3, r2
 8008706:	d906      	bls.n	8008716 <pbuf_copy+0xb2>
 8008708:	4b38      	ldr	r3, [pc, #224]	@ (80087ec <pbuf_copy+0x188>)
 800870a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800870e:	493a      	ldr	r1, [pc, #232]	@ (80087f8 <pbuf_copy+0x194>)
 8008710:	4838      	ldr	r0, [pc, #224]	@ (80087f4 <pbuf_copy+0x190>)
 8008712:	f00b fd05 	bl	8014120 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	895b      	ldrh	r3, [r3, #10]
 800871a:	461a      	mov	r2, r3
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	4293      	cmp	r3, r2
 8008720:	d906      	bls.n	8008730 <pbuf_copy+0xcc>
 8008722:	4b32      	ldr	r3, [pc, #200]	@ (80087ec <pbuf_copy+0x188>)
 8008724:	f240 32da 	movw	r2, #986	@ 0x3da
 8008728:	4934      	ldr	r1, [pc, #208]	@ (80087fc <pbuf_copy+0x198>)
 800872a:	4832      	ldr	r0, [pc, #200]	@ (80087f4 <pbuf_copy+0x190>)
 800872c:	f00b fcf8 	bl	8014120 <iprintf>
    if (offset_from >= p_from->len) {
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	895b      	ldrh	r3, [r3, #10]
 8008734:	461a      	mov	r2, r3
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	4293      	cmp	r3, r2
 800873a:	d304      	bcc.n	8008746 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800873c:	2300      	movs	r3, #0
 800873e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	895b      	ldrh	r3, [r3, #10]
 800874a:	461a      	mov	r2, r3
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	4293      	cmp	r3, r2
 8008750:	d114      	bne.n	800877c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8008752:	2300      	movs	r3, #0
 8008754:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10c      	bne.n	800877c <pbuf_copy+0x118>
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d009      	beq.n	800877c <pbuf_copy+0x118>
 8008768:	4b20      	ldr	r3, [pc, #128]	@ (80087ec <pbuf_copy+0x188>)
 800876a:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800876e:	4924      	ldr	r1, [pc, #144]	@ (8008800 <pbuf_copy+0x19c>)
 8008770:	4820      	ldr	r0, [pc, #128]	@ (80087f4 <pbuf_copy+0x190>)
 8008772:	f00b fcd5 	bl	8014120 <iprintf>
 8008776:	f06f 030f 	mvn.w	r3, #15
 800877a:	e032      	b.n	80087e2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <pbuf_copy+0x146>
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	895a      	ldrh	r2, [r3, #10]
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	891b      	ldrh	r3, [r3, #8]
 800878a:	429a      	cmp	r2, r3
 800878c:	d10d      	bne.n	80087aa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d009      	beq.n	80087aa <pbuf_copy+0x146>
 8008796:	4b15      	ldr	r3, [pc, #84]	@ (80087ec <pbuf_copy+0x188>)
 8008798:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800879c:	4919      	ldr	r1, [pc, #100]	@ (8008804 <pbuf_copy+0x1a0>)
 800879e:	4815      	ldr	r0, [pc, #84]	@ (80087f4 <pbuf_copy+0x190>)
 80087a0:	f00b fcbe 	bl	8014120 <iprintf>
 80087a4:	f06f 0305 	mvn.w	r3, #5
 80087a8:	e01b      	b.n	80087e2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d013      	beq.n	80087d8 <pbuf_copy+0x174>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	895a      	ldrh	r2, [r3, #10]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	891b      	ldrh	r3, [r3, #8]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d10d      	bne.n	80087d8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d009      	beq.n	80087d8 <pbuf_copy+0x174>
 80087c4:	4b09      	ldr	r3, [pc, #36]	@ (80087ec <pbuf_copy+0x188>)
 80087c6:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80087ca:	490e      	ldr	r1, [pc, #56]	@ (8008804 <pbuf_copy+0x1a0>)
 80087cc:	4809      	ldr	r0, [pc, #36]	@ (80087f4 <pbuf_copy+0x190>)
 80087ce:	f00b fca7 	bl	8014120 <iprintf>
 80087d2:	f06f 0305 	mvn.w	r3, #5
 80087d6:	e004      	b.n	80087e2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f47f af61 	bne.w	80086a2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3718      	adds	r7, #24
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	08015a20 	.word	0x08015a20
 80087f0:	08015cc8 	.word	0x08015cc8
 80087f4:	08015a80 	.word	0x08015a80
 80087f8:	08015cf8 	.word	0x08015cf8
 80087fc:	08015d10 	.word	0x08015d10
 8008800:	08015d2c 	.word	0x08015d2c
 8008804:	08015d3c 	.word	0x08015d3c

08008808 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4611      	mov	r1, r2
 8008814:	461a      	mov	r2, r3
 8008816:	460b      	mov	r3, r1
 8008818:	80fb      	strh	r3, [r7, #6]
 800881a:	4613      	mov	r3, r2
 800881c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d108      	bne.n	800883e <pbuf_copy_partial+0x36>
 800882c:	4b2b      	ldr	r3, [pc, #172]	@ (80088dc <pbuf_copy_partial+0xd4>)
 800882e:	f240 420a 	movw	r2, #1034	@ 0x40a
 8008832:	492b      	ldr	r1, [pc, #172]	@ (80088e0 <pbuf_copy_partial+0xd8>)
 8008834:	482b      	ldr	r0, [pc, #172]	@ (80088e4 <pbuf_copy_partial+0xdc>)
 8008836:	f00b fc73 	bl	8014120 <iprintf>
 800883a:	2300      	movs	r3, #0
 800883c:	e04a      	b.n	80088d4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d108      	bne.n	8008856 <pbuf_copy_partial+0x4e>
 8008844:	4b25      	ldr	r3, [pc, #148]	@ (80088dc <pbuf_copy_partial+0xd4>)
 8008846:	f240 420b 	movw	r2, #1035	@ 0x40b
 800884a:	4927      	ldr	r1, [pc, #156]	@ (80088e8 <pbuf_copy_partial+0xe0>)
 800884c:	4825      	ldr	r0, [pc, #148]	@ (80088e4 <pbuf_copy_partial+0xdc>)
 800884e:	f00b fc67 	bl	8014120 <iprintf>
 8008852:	2300      	movs	r3, #0
 8008854:	e03e      	b.n	80088d4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	61fb      	str	r3, [r7, #28]
 800885a:	e034      	b.n	80088c6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800885c:	88bb      	ldrh	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00a      	beq.n	8008878 <pbuf_copy_partial+0x70>
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	895b      	ldrh	r3, [r3, #10]
 8008866:	88ba      	ldrh	r2, [r7, #4]
 8008868:	429a      	cmp	r2, r3
 800886a:	d305      	bcc.n	8008878 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	895b      	ldrh	r3, [r3, #10]
 8008870:	88ba      	ldrh	r2, [r7, #4]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	80bb      	strh	r3, [r7, #4]
 8008876:	e023      	b.n	80088c0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	895a      	ldrh	r2, [r3, #10]
 800887c:	88bb      	ldrh	r3, [r7, #4]
 800887e:	1ad3      	subs	r3, r2, r3
 8008880:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8008882:	8b3a      	ldrh	r2, [r7, #24]
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	429a      	cmp	r2, r3
 8008888:	d901      	bls.n	800888e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800888a:	88fb      	ldrh	r3, [r7, #6]
 800888c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800888e:	8b7b      	ldrh	r3, [r7, #26]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	18d0      	adds	r0, r2, r3
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	88bb      	ldrh	r3, [r7, #4]
 800889a:	4413      	add	r3, r2
 800889c:	8b3a      	ldrh	r2, [r7, #24]
 800889e:	4619      	mov	r1, r3
 80088a0:	f00b fd53 	bl	801434a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80088a4:	8afa      	ldrh	r2, [r7, #22]
 80088a6:	8b3b      	ldrh	r3, [r7, #24]
 80088a8:	4413      	add	r3, r2
 80088aa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80088ac:	8b7a      	ldrh	r2, [r7, #26]
 80088ae:	8b3b      	ldrh	r3, [r7, #24]
 80088b0:	4413      	add	r3, r2
 80088b2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80088b4:	88fa      	ldrh	r2, [r7, #6]
 80088b6:	8b3b      	ldrh	r3, [r7, #24]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	61fb      	str	r3, [r7, #28]
 80088c6:	88fb      	ldrh	r3, [r7, #6]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <pbuf_copy_partial+0xca>
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1c4      	bne.n	800885c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80088d2:	8afb      	ldrh	r3, [r7, #22]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3720      	adds	r7, #32
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	08015a20 	.word	0x08015a20
 80088e0:	08015d68 	.word	0x08015d68
 80088e4:	08015a80 	.word	0x08015a80
 80088e8:	08015d88 	.word	0x08015d88

080088ec <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b087      	sub	sp, #28
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	460b      	mov	r3, r1
 80088f6:	607a      	str	r2, [r7, #4]
 80088f8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80088fa:	897b      	ldrh	r3, [r7, #10]
 80088fc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8008902:	e007      	b.n	8008914 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	895b      	ldrh	r3, [r3, #10]
 8008908:	8afa      	ldrh	r2, [r7, #22]
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d004      	beq.n	8008924 <pbuf_skip_const+0x38>
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	895b      	ldrh	r3, [r3, #10]
 800891e:	8afa      	ldrh	r2, [r7, #22]
 8008920:	429a      	cmp	r2, r3
 8008922:	d2ef      	bcs.n	8008904 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d002      	beq.n	8008930 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	8afa      	ldrh	r2, [r7, #22]
 800892e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8008930:	693b      	ldr	r3, [r7, #16]
}
 8008932:	4618      	mov	r0, r3
 8008934:	371c      	adds	r7, #28
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b086      	sub	sp, #24
 8008942:	af00      	add	r7, sp, #0
 8008944:	60f8      	str	r0, [r7, #12]
 8008946:	460b      	mov	r3, r1
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800894c:	897b      	ldrh	r3, [r7, #10]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4619      	mov	r1, r3
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff ffca 	bl	80088ec <pbuf_skip_const>
 8008958:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800895a:	697b      	ldr	r3, [r7, #20]
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b088      	sub	sp, #32
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	4613      	mov	r3, r2
 8008970:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8008976:	2300      	movs	r3, #0
 8008978:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d109      	bne.n	8008994 <pbuf_take+0x30>
 8008980:	4b3a      	ldr	r3, [pc, #232]	@ (8008a6c <pbuf_take+0x108>)
 8008982:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8008986:	493a      	ldr	r1, [pc, #232]	@ (8008a70 <pbuf_take+0x10c>)
 8008988:	483a      	ldr	r0, [pc, #232]	@ (8008a74 <pbuf_take+0x110>)
 800898a:	f00b fbc9 	bl	8014120 <iprintf>
 800898e:	f06f 030f 	mvn.w	r3, #15
 8008992:	e067      	b.n	8008a64 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d109      	bne.n	80089ae <pbuf_take+0x4a>
 800899a:	4b34      	ldr	r3, [pc, #208]	@ (8008a6c <pbuf_take+0x108>)
 800899c:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80089a0:	4935      	ldr	r1, [pc, #212]	@ (8008a78 <pbuf_take+0x114>)
 80089a2:	4834      	ldr	r0, [pc, #208]	@ (8008a74 <pbuf_take+0x110>)
 80089a4:	f00b fbbc 	bl	8014120 <iprintf>
 80089a8:	f06f 030f 	mvn.w	r3, #15
 80089ac:	e05a      	b.n	8008a64 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	891b      	ldrh	r3, [r3, #8]
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d909      	bls.n	80089cc <pbuf_take+0x68>
 80089b8:	4b2c      	ldr	r3, [pc, #176]	@ (8008a6c <pbuf_take+0x108>)
 80089ba:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80089be:	492f      	ldr	r1, [pc, #188]	@ (8008a7c <pbuf_take+0x118>)
 80089c0:	482c      	ldr	r0, [pc, #176]	@ (8008a74 <pbuf_take+0x110>)
 80089c2:	f00b fbad 	bl	8014120 <iprintf>
 80089c6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ca:	e04b      	b.n	8008a64 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d007      	beq.n	80089e2 <pbuf_take+0x7e>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d004      	beq.n	80089e2 <pbuf_take+0x7e>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	891b      	ldrh	r3, [r3, #8]
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d902      	bls.n	80089e8 <pbuf_take+0x84>
    return ERR_ARG;
 80089e2:	f06f 030f 	mvn.w	r3, #15
 80089e6:	e03d      	b.n	8008a64 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	e028      	b.n	8008a40 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80089ee:	69fb      	ldr	r3, [r7, #28]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d106      	bne.n	8008a02 <pbuf_take+0x9e>
 80089f4:	4b1d      	ldr	r3, [pc, #116]	@ (8008a6c <pbuf_take+0x108>)
 80089f6:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80089fa:	4921      	ldr	r1, [pc, #132]	@ (8008a80 <pbuf_take+0x11c>)
 80089fc:	481d      	ldr	r0, [pc, #116]	@ (8008a74 <pbuf_take+0x110>)
 80089fe:	f00b fb8f 	bl	8014120 <iprintf>
    buf_copy_len = total_copy_len;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	895b      	ldrh	r3, [r3, #10]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d902      	bls.n	8008a18 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	895b      	ldrh	r3, [r3, #10]
 8008a16:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	6858      	ldr	r0, [r3, #4]
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	4619      	mov	r1, r3
 8008a26:	f00b fc90 	bl	801434a <memcpy>
    total_copy_len -= buf_copy_len;
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	69bb      	ldr	r3, [r7, #24]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	4413      	add	r3, r2
 8008a38:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8008a3a:	69fb      	ldr	r3, [r7, #28]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	61fb      	str	r3, [r7, #28]
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1d3      	bne.n	80089ee <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d103      	bne.n	8008a54 <pbuf_take+0xf0>
 8008a4c:	88fb      	ldrh	r3, [r7, #6]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d006      	beq.n	8008a62 <pbuf_take+0xfe>
 8008a54:	4b05      	ldr	r3, [pc, #20]	@ (8008a6c <pbuf_take+0x108>)
 8008a56:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8008a5a:	490a      	ldr	r1, [pc, #40]	@ (8008a84 <pbuf_take+0x120>)
 8008a5c:	4805      	ldr	r0, [pc, #20]	@ (8008a74 <pbuf_take+0x110>)
 8008a5e:	f00b fb5f 	bl	8014120 <iprintf>
  return ERR_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3720      	adds	r7, #32
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	08015a20 	.word	0x08015a20
 8008a70:	08015df8 	.word	0x08015df8
 8008a74:	08015a80 	.word	0x08015a80
 8008a78:	08015e10 	.word	0x08015e10
 8008a7c:	08015e2c 	.word	0x08015e2c
 8008a80:	08015e4c 	.word	0x08015e4c
 8008a84:	08015e64 	.word	0x08015e64

08008a88 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4611      	mov	r1, r2
 8008a94:	461a      	mov	r2, r3
 8008a96:	460b      	mov	r3, r1
 8008a98:	80fb      	strh	r3, [r7, #6]
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8008a9e:	f107 0210 	add.w	r2, r7, #16
 8008aa2:	88bb      	ldrh	r3, [r7, #4]
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f7ff ff49 	bl	800893e <pbuf_skip>
 8008aac:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d047      	beq.n	8008b44 <pbuf_take_at+0xbc>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	891b      	ldrh	r3, [r3, #8]
 8008ab8:	461a      	mov	r2, r3
 8008aba:	8a3b      	ldrh	r3, [r7, #16]
 8008abc:	4619      	mov	r1, r3
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	440b      	add	r3, r1
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	db3e      	blt.n	8008b44 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8008ac6:	88fb      	ldrh	r3, [r7, #6]
 8008ac8:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	895a      	ldrh	r2, [r3, #10]
 8008ad2:	8a3b      	ldrh	r3, [r7, #16]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d806      	bhi.n	8008ae6 <pbuf_take_at+0x5e>
 8008ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b50 <pbuf_take_at+0xc8>)
 8008ada:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8008ade:	491d      	ldr	r1, [pc, #116]	@ (8008b54 <pbuf_take_at+0xcc>)
 8008ae0:	481d      	ldr	r0, [pc, #116]	@ (8008b58 <pbuf_take_at+0xd0>)
 8008ae2:	f00b fb1d 	bl	8014120 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	895b      	ldrh	r3, [r3, #10]
 8008aea:	461a      	mov	r2, r3
 8008aec:	8a3b      	ldrh	r3, [r7, #16]
 8008aee:	1ad2      	subs	r2, r2, r3
 8008af0:	88fb      	ldrh	r3, [r7, #6]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	da05      	bge.n	8008b02 <pbuf_take_at+0x7a>
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	895a      	ldrh	r2, [r3, #10]
 8008afa:	8a3b      	ldrh	r3, [r7, #16]
 8008afc:	1ad3      	subs	r3, r2, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	e000      	b.n	8008b04 <pbuf_take_at+0x7c>
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	8a3a      	ldrh	r2, [r7, #16]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	8a7a      	ldrh	r2, [r7, #18]
 8008b10:	68b9      	ldr	r1, [r7, #8]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f00b fc19 	bl	801434a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8008b18:	8b7a      	ldrh	r2, [r7, #26]
 8008b1a:	8a7b      	ldrh	r3, [r7, #18]
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8008b20:	8a7b      	ldrh	r3, [r7, #18]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4413      	add	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8008b28:	8b7b      	ldrh	r3, [r7, #26]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d008      	beq.n	8008b40 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	8b7a      	ldrh	r2, [r7, #26]
 8008b34:	6979      	ldr	r1, [r7, #20]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ff14 	bl	8008964 <pbuf_take>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	e003      	b.n	8008b48 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e001      	b.n	8008b48 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8008b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	08015a20 	.word	0x08015a20
 8008b54:	08015e7c 	.word	0x08015e7c
 8008b58:	08015a80 	.word	0x08015a80

08008b5c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	4603      	mov	r3, r0
 8008b64:	603a      	str	r2, [r7, #0]
 8008b66:	71fb      	strb	r3, [r7, #7]
 8008b68:	460b      	mov	r3, r1
 8008b6a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	8919      	ldrh	r1, [r3, #8]
 8008b70:	88ba      	ldrh	r2, [r7, #4]
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff f969 	bl	8007e4c <pbuf_alloc>
 8008b7a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d101      	bne.n	8008b86 <pbuf_clone+0x2a>
    return NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	e011      	b.n	8008baa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff fd6b 	bl	8008664 <pbuf_copy>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008b92:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d006      	beq.n	8008ba8 <pbuf_clone+0x4c>
 8008b9a:	4b06      	ldr	r3, [pc, #24]	@ (8008bb4 <pbuf_clone+0x58>)
 8008b9c:	f240 5224 	movw	r2, #1316	@ 0x524
 8008ba0:	4905      	ldr	r1, [pc, #20]	@ (8008bb8 <pbuf_clone+0x5c>)
 8008ba2:	4806      	ldr	r0, [pc, #24]	@ (8008bbc <pbuf_clone+0x60>)
 8008ba4:	f00b fabc 	bl	8014120 <iprintf>
  return q;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	08015a20 	.word	0x08015a20
 8008bb8:	08015e94 	.word	0x08015e94
 8008bbc:	08015a80 	.word	0x08015a80

08008bc0 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	807b      	strh	r3, [r7, #2]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8008bd0:	f107 020a 	add.w	r2, r7, #10
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f7ff feb0 	bl	800893e <pbuf_skip>
 8008bde:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d00a      	beq.n	8008bfc <pbuf_put_at+0x3c>
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	895a      	ldrh	r2, [r3, #10]
 8008bea:	897b      	ldrh	r3, [r7, #10]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d905      	bls.n	8008bfc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	897a      	ldrh	r2, [r7, #10]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	787a      	ldrb	r2, [r7, #1]
 8008bfa:	701a      	strb	r2, [r3, #0]
  }
}
 8008bfc:	bf00      	nop
 8008bfe:	3710      	adds	r7, #16
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008c08:	f00b f98a 	bl	8013f20 <rand>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008c1a:	b29a      	uxth	r2, r3
 8008c1c:	4b01      	ldr	r3, [pc, #4]	@ (8008c24 <tcp_init+0x20>)
 8008c1e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008c20:	bf00      	nop
 8008c22:	bd80      	pop	{r7, pc}
 8008c24:	2000000a 	.word	0x2000000a

08008c28 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	7d1b      	ldrb	r3, [r3, #20]
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d105      	bne.n	8008c44 <tcp_free+0x1c>
 8008c38:	4b06      	ldr	r3, [pc, #24]	@ (8008c54 <tcp_free+0x2c>)
 8008c3a:	22d4      	movs	r2, #212	@ 0xd4
 8008c3c:	4906      	ldr	r1, [pc, #24]	@ (8008c58 <tcp_free+0x30>)
 8008c3e:	4807      	ldr	r0, [pc, #28]	@ (8008c5c <tcp_free+0x34>)
 8008c40:	f00b fa6e 	bl	8014120 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8008c44:	6879      	ldr	r1, [r7, #4]
 8008c46:	2001      	movs	r0, #1
 8008c48:	f7fe fd62 	bl	8007710 <memp_free>
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	08015f20 	.word	0x08015f20
 8008c58:	08015f50 	.word	0x08015f50
 8008c5c:	08015f64 	.word	0x08015f64

08008c60 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7d1b      	ldrb	r3, [r3, #20]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d105      	bne.n	8008c7c <tcp_free_listen+0x1c>
 8008c70:	4b06      	ldr	r3, [pc, #24]	@ (8008c8c <tcp_free_listen+0x2c>)
 8008c72:	22df      	movs	r2, #223	@ 0xdf
 8008c74:	4906      	ldr	r1, [pc, #24]	@ (8008c90 <tcp_free_listen+0x30>)
 8008c76:	4807      	ldr	r0, [pc, #28]	@ (8008c94 <tcp_free_listen+0x34>)
 8008c78:	f00b fa52 	bl	8014120 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	2002      	movs	r0, #2
 8008c80:	f7fe fd46 	bl	8007710 <memp_free>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	08015f20 	.word	0x08015f20
 8008c90:	08015f8c 	.word	0x08015f8c
 8008c94:	08015f64 	.word	0x08015f64

08008c98 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8008c9c:	f001 f85e 	bl	8009d5c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8008ca0:	4b07      	ldr	r3, [pc, #28]	@ (8008cc0 <tcp_tmr+0x28>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	4b05      	ldr	r3, [pc, #20]	@ (8008cc0 <tcp_tmr+0x28>)
 8008caa:	701a      	strb	r2, [r3, #0]
 8008cac:	4b04      	ldr	r3, [pc, #16]	@ (8008cc0 <tcp_tmr+0x28>)
 8008cae:	781b      	ldrb	r3, [r3, #0]
 8008cb0:	f003 0301 	and.w	r3, r3, #1
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8008cb8:	f000 fd0e 	bl	80096d8 <tcp_slowtmr>
  }
}
 8008cbc:	bf00      	nop
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20004345 	.word	0x20004345

08008cc4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d105      	bne.n	8008ce0 <tcp_remove_listener+0x1c>
 8008cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8008d0c <tcp_remove_listener+0x48>)
 8008cd6:	22ff      	movs	r2, #255	@ 0xff
 8008cd8:	490d      	ldr	r1, [pc, #52]	@ (8008d10 <tcp_remove_listener+0x4c>)
 8008cda:	480e      	ldr	r0, [pc, #56]	@ (8008d14 <tcp_remove_listener+0x50>)
 8008cdc:	f00b fa20 	bl	8014120 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	e00a      	b.n	8008cfc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008cea:	683a      	ldr	r2, [r7, #0]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d102      	bne.n	8008cf6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1f1      	bne.n	8008ce6 <tcp_remove_listener+0x22>
    }
  }
}
 8008d02:	bf00      	nop
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	08015f20 	.word	0x08015f20
 8008d10:	08015fa8 	.word	0x08015fa8
 8008d14:	08015f64 	.word	0x08015f64

08008d18 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <tcp_listen_closed+0x1c>
 8008d26:	4b14      	ldr	r3, [pc, #80]	@ (8008d78 <tcp_listen_closed+0x60>)
 8008d28:	f240 1211 	movw	r2, #273	@ 0x111
 8008d2c:	4913      	ldr	r1, [pc, #76]	@ (8008d7c <tcp_listen_closed+0x64>)
 8008d2e:	4814      	ldr	r0, [pc, #80]	@ (8008d80 <tcp_listen_closed+0x68>)
 8008d30:	f00b f9f6 	bl	8014120 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	7d1b      	ldrb	r3, [r3, #20]
 8008d38:	2b01      	cmp	r3, #1
 8008d3a:	d006      	beq.n	8008d4a <tcp_listen_closed+0x32>
 8008d3c:	4b0e      	ldr	r3, [pc, #56]	@ (8008d78 <tcp_listen_closed+0x60>)
 8008d3e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8008d42:	4910      	ldr	r1, [pc, #64]	@ (8008d84 <tcp_listen_closed+0x6c>)
 8008d44:	480e      	ldr	r0, [pc, #56]	@ (8008d80 <tcp_listen_closed+0x68>)
 8008d46:	f00b f9eb 	bl	8014120 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	e00b      	b.n	8008d68 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008d50:	4a0d      	ldr	r2, [pc, #52]	@ (8008d88 <tcp_listen_closed+0x70>)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff ffb1 	bl	8008cc4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3301      	adds	r3, #1
 8008d66:	60fb      	str	r3, [r7, #12]
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d9f0      	bls.n	8008d50 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8008d6e:	bf00      	nop
 8008d70:	bf00      	nop
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}
 8008d78:	08015f20 	.word	0x08015f20
 8008d7c:	08015fd0 	.word	0x08015fd0
 8008d80:	08015f64 	.word	0x08015f64
 8008d84:	08015fdc 	.word	0x08015fdc
 8008d88:	080182d4 	.word	0x080182d4

08008d8c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8008d8c:	b5b0      	push	{r4, r5, r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af04      	add	r7, sp, #16
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	460b      	mov	r3, r1
 8008d96:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <tcp_close_shutdown+0x20>
 8008d9e:	4b63      	ldr	r3, [pc, #396]	@ (8008f2c <tcp_close_shutdown+0x1a0>)
 8008da0:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8008da4:	4962      	ldr	r1, [pc, #392]	@ (8008f30 <tcp_close_shutdown+0x1a4>)
 8008da6:	4863      	ldr	r0, [pc, #396]	@ (8008f34 <tcp_close_shutdown+0x1a8>)
 8008da8:	f00b f9ba 	bl	8014120 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008dac:	78fb      	ldrb	r3, [r7, #3]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d066      	beq.n	8008e80 <tcp_close_shutdown+0xf4>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	7d1b      	ldrb	r3, [r3, #20]
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d003      	beq.n	8008dc2 <tcp_close_shutdown+0x36>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7d1b      	ldrb	r3, [r3, #20]
 8008dbe:	2b07      	cmp	r3, #7
 8008dc0:	d15e      	bne.n	8008e80 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d104      	bne.n	8008dd4 <tcp_close_shutdown+0x48>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008dce:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8008dd2:	d055      	beq.n	8008e80 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	8b5b      	ldrh	r3, [r3, #26]
 8008dd8:	f003 0310 	and.w	r3, r3, #16
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d106      	bne.n	8008dee <tcp_close_shutdown+0x62>
 8008de0:	4b52      	ldr	r3, [pc, #328]	@ (8008f2c <tcp_close_shutdown+0x1a0>)
 8008de2:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8008de6:	4954      	ldr	r1, [pc, #336]	@ (8008f38 <tcp_close_shutdown+0x1ac>)
 8008de8:	4852      	ldr	r0, [pc, #328]	@ (8008f34 <tcp_close_shutdown+0x1a8>)
 8008dea:	f00b f999 	bl	8014120 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008df6:	687d      	ldr	r5, [r7, #4]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3304      	adds	r3, #4
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	8ad2      	ldrh	r2, [r2, #22]
 8008e00:	6879      	ldr	r1, [r7, #4]
 8008e02:	8b09      	ldrh	r1, [r1, #24]
 8008e04:	9102      	str	r1, [sp, #8]
 8008e06:	9201      	str	r2, [sp, #4]
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	4622      	mov	r2, r4
 8008e0e:	4601      	mov	r1, r0
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f005 fdbb 	bl	800e98c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f001 fb68 	bl	800a4ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008e1c:	4b47      	ldr	r3, [pc, #284]	@ (8008f3c <tcp_close_shutdown+0x1b0>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d105      	bne.n	8008e32 <tcp_close_shutdown+0xa6>
 8008e26:	4b45      	ldr	r3, [pc, #276]	@ (8008f3c <tcp_close_shutdown+0x1b0>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	4a43      	ldr	r2, [pc, #268]	@ (8008f3c <tcp_close_shutdown+0x1b0>)
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	e013      	b.n	8008e5a <tcp_close_shutdown+0xce>
 8008e32:	4b42      	ldr	r3, [pc, #264]	@ (8008f3c <tcp_close_shutdown+0x1b0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	60fb      	str	r3, [r7, #12]
 8008e38:	e00c      	b.n	8008e54 <tcp_close_shutdown+0xc8>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d104      	bne.n	8008e4e <tcp_close_shutdown+0xc2>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	68da      	ldr	r2, [r3, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	60da      	str	r2, [r3, #12]
 8008e4c:	e005      	b.n	8008e5a <tcp_close_shutdown+0xce>
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	60fb      	str	r3, [r7, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1ef      	bne.n	8008e3a <tcp_close_shutdown+0xae>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	60da      	str	r2, [r3, #12]
 8008e60:	4b37      	ldr	r3, [pc, #220]	@ (8008f40 <tcp_close_shutdown+0x1b4>)
 8008e62:	2201      	movs	r2, #1
 8008e64:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8008e66:	4b37      	ldr	r3, [pc, #220]	@ (8008f44 <tcp_close_shutdown+0x1b8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d102      	bne.n	8008e76 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8008e70:	f004 f810 	bl	800ce94 <tcp_trigger_input_pcb_close>
 8008e74:	e002      	b.n	8008e7c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7ff fed6 	bl	8008c28 <tcp_free>
      }
      return ERR_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	e050      	b.n	8008f22 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	7d1b      	ldrb	r3, [r3, #20]
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d03b      	beq.n	8008f00 <tcp_close_shutdown+0x174>
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	dc44      	bgt.n	8008f16 <tcp_close_shutdown+0x18a>
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <tcp_close_shutdown+0x10a>
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d02a      	beq.n	8008eea <tcp_close_shutdown+0x15e>
 8008e94:	e03f      	b.n	8008f16 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	8adb      	ldrh	r3, [r3, #22]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d021      	beq.n	8008ee2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008e9e:	4b2a      	ldr	r3, [pc, #168]	@ (8008f48 <tcp_close_shutdown+0x1bc>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d105      	bne.n	8008eb4 <tcp_close_shutdown+0x128>
 8008ea8:	4b27      	ldr	r3, [pc, #156]	@ (8008f48 <tcp_close_shutdown+0x1bc>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	4a26      	ldr	r2, [pc, #152]	@ (8008f48 <tcp_close_shutdown+0x1bc>)
 8008eb0:	6013      	str	r3, [r2, #0]
 8008eb2:	e013      	b.n	8008edc <tcp_close_shutdown+0x150>
 8008eb4:	4b24      	ldr	r3, [pc, #144]	@ (8008f48 <tcp_close_shutdown+0x1bc>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	e00c      	b.n	8008ed6 <tcp_close_shutdown+0x14a>
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	687a      	ldr	r2, [r7, #4]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d104      	bne.n	8008ed0 <tcp_close_shutdown+0x144>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	60da      	str	r2, [r3, #12]
 8008ece:	e005      	b.n	8008edc <tcp_close_shutdown+0x150>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	60bb      	str	r3, [r7, #8]
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1ef      	bne.n	8008ebc <tcp_close_shutdown+0x130>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f7ff fea0 	bl	8008c28 <tcp_free>
      break;
 8008ee8:	e01a      	b.n	8008f20 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7ff ff14 	bl	8008d18 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008ef0:	6879      	ldr	r1, [r7, #4]
 8008ef2:	4816      	ldr	r0, [pc, #88]	@ (8008f4c <tcp_close_shutdown+0x1c0>)
 8008ef4:	f001 fb4a 	bl	800a58c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f7ff feb1 	bl	8008c60 <tcp_free_listen>
      break;
 8008efe:	e00f      	b.n	8008f20 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	480e      	ldr	r0, [pc, #56]	@ (8008f3c <tcp_close_shutdown+0x1b0>)
 8008f04:	f001 fb42 	bl	800a58c <tcp_pcb_remove>
 8008f08:	4b0d      	ldr	r3, [pc, #52]	@ (8008f40 <tcp_close_shutdown+0x1b4>)
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff fe8a 	bl	8008c28 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8008f14:	e004      	b.n	8008f20 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 f81a 	bl	8008f50 <tcp_close_shutdown_fin>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	e000      	b.n	8008f22 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bdb0      	pop	{r4, r5, r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	08015f20 	.word	0x08015f20
 8008f30:	08015ff4 	.word	0x08015ff4
 8008f34:	08015f64 	.word	0x08015f64
 8008f38:	08016014 	.word	0x08016014
 8008f3c:	2000433c 	.word	0x2000433c
 8008f40:	20004344 	.word	0x20004344
 8008f44:	2000437c 	.word	0x2000437c
 8008f48:	20004334 	.word	0x20004334
 8008f4c:	20004338 	.word	0x20004338

08008f50 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d106      	bne.n	8008f6c <tcp_close_shutdown_fin+0x1c>
 8008f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8009018 <tcp_close_shutdown_fin+0xc8>)
 8008f60:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8008f64:	492d      	ldr	r1, [pc, #180]	@ (800901c <tcp_close_shutdown_fin+0xcc>)
 8008f66:	482e      	ldr	r0, [pc, #184]	@ (8009020 <tcp_close_shutdown_fin+0xd0>)
 8008f68:	f00b f8da 	bl	8014120 <iprintf>

  switch (pcb->state) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	7d1b      	ldrb	r3, [r3, #20]
 8008f70:	2b07      	cmp	r3, #7
 8008f72:	d020      	beq.n	8008fb6 <tcp_close_shutdown_fin+0x66>
 8008f74:	2b07      	cmp	r3, #7
 8008f76:	dc2b      	bgt.n	8008fd0 <tcp_close_shutdown_fin+0x80>
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d002      	beq.n	8008f82 <tcp_close_shutdown_fin+0x32>
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d00d      	beq.n	8008f9c <tcp_close_shutdown_fin+0x4c>
 8008f80:	e026      	b.n	8008fd0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f004 fdee 	bl	800db64 <tcp_send_fin>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d11f      	bne.n	8008fd4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2205      	movs	r2, #5
 8008f98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008f9a:	e01b      	b.n	8008fd4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f004 fde1 	bl	800db64 <tcp_send_fin>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d114      	bne.n	8008fd8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fb4:	e010      	b.n	8008fd8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f004 fdd4 	bl	800db64 <tcp_send_fin>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8008fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d109      	bne.n	8008fdc <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2209      	movs	r2, #9
 8008fcc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8008fce:	e005      	b.n	8008fdc <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e01c      	b.n	800900e <tcp_close_shutdown_fin+0xbe>
      break;
 8008fd4:	bf00      	nop
 8008fd6:	e002      	b.n	8008fde <tcp_close_shutdown_fin+0x8e>
      break;
 8008fd8:	bf00      	nop
 8008fda:	e000      	b.n	8008fde <tcp_close_shutdown_fin+0x8e>
      break;
 8008fdc:	bf00      	nop
  }

  if (err == ERR_OK) {
 8008fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d103      	bne.n	8008fee <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f004 fefa 	bl	800dde0 <tcp_output>
 8008fec:	e00d      	b.n	800900a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8008fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ff6:	d108      	bne.n	800900a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	8b5b      	ldrh	r3, [r3, #26]
 8008ffc:	f043 0308 	orr.w	r3, r3, #8
 8009000:	b29a      	uxth	r2, r3
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	e001      	b.n	800900e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	08015f20 	.word	0x08015f20
 800901c:	08015fd0 	.word	0x08015fd0
 8009020:	08015f64 	.word	0x08015f64

08009024 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d109      	bne.n	8009046 <tcp_close+0x22>
 8009032:	4b0f      	ldr	r3, [pc, #60]	@ (8009070 <tcp_close+0x4c>)
 8009034:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8009038:	490e      	ldr	r1, [pc, #56]	@ (8009074 <tcp_close+0x50>)
 800903a:	480f      	ldr	r0, [pc, #60]	@ (8009078 <tcp_close+0x54>)
 800903c:	f00b f870 	bl	8014120 <iprintf>
 8009040:	f06f 030f 	mvn.w	r3, #15
 8009044:	e00f      	b.n	8009066 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	7d1b      	ldrb	r3, [r3, #20]
 800904a:	2b01      	cmp	r3, #1
 800904c:	d006      	beq.n	800905c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8b5b      	ldrh	r3, [r3, #26]
 8009052:	f043 0310 	orr.w	r3, r3, #16
 8009056:	b29a      	uxth	r2, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800905c:	2101      	movs	r1, #1
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f7ff fe94 	bl	8008d8c <tcp_close_shutdown>
 8009064:	4603      	mov	r3, r0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	08015f20 	.word	0x08015f20
 8009074:	08016030 	.word	0x08016030
 8009078:	08015f64 	.word	0x08015f64

0800907c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b08e      	sub	sp, #56	@ 0x38
 8009080:	af04      	add	r7, sp, #16
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d107      	bne.n	800909c <tcp_abandon+0x20>
 800908c:	4b52      	ldr	r3, [pc, #328]	@ (80091d8 <tcp_abandon+0x15c>)
 800908e:	f240 223d 	movw	r2, #573	@ 0x23d
 8009092:	4952      	ldr	r1, [pc, #328]	@ (80091dc <tcp_abandon+0x160>)
 8009094:	4852      	ldr	r0, [pc, #328]	@ (80091e0 <tcp_abandon+0x164>)
 8009096:	f00b f843 	bl	8014120 <iprintf>
 800909a:	e099      	b.n	80091d0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	7d1b      	ldrb	r3, [r3, #20]
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d106      	bne.n	80090b2 <tcp_abandon+0x36>
 80090a4:	4b4c      	ldr	r3, [pc, #304]	@ (80091d8 <tcp_abandon+0x15c>)
 80090a6:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80090aa:	494e      	ldr	r1, [pc, #312]	@ (80091e4 <tcp_abandon+0x168>)
 80090ac:	484c      	ldr	r0, [pc, #304]	@ (80091e0 <tcp_abandon+0x164>)
 80090ae:	f00b f837 	bl	8014120 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7d1b      	ldrb	r3, [r3, #20]
 80090b6:	2b0a      	cmp	r3, #10
 80090b8:	d107      	bne.n	80090ca <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80090ba:	6879      	ldr	r1, [r7, #4]
 80090bc:	484a      	ldr	r0, [pc, #296]	@ (80091e8 <tcp_abandon+0x16c>)
 80090be:	f001 fa65 	bl	800a58c <tcp_pcb_remove>
    tcp_free(pcb);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7ff fdb0 	bl	8008c28 <tcp_free>
 80090c8:	e082      	b.n	80091d0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090d6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090dc:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	691b      	ldr	r3, [r3, #16]
 80090ea:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	7d1b      	ldrb	r3, [r3, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d126      	bne.n	8009142 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	8adb      	ldrh	r3, [r3, #22]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d02e      	beq.n	800915a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80090fc:	4b3b      	ldr	r3, [pc, #236]	@ (80091ec <tcp_abandon+0x170>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	429a      	cmp	r2, r3
 8009104:	d105      	bne.n	8009112 <tcp_abandon+0x96>
 8009106:	4b39      	ldr	r3, [pc, #228]	@ (80091ec <tcp_abandon+0x170>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	4a37      	ldr	r2, [pc, #220]	@ (80091ec <tcp_abandon+0x170>)
 800910e:	6013      	str	r3, [r2, #0]
 8009110:	e013      	b.n	800913a <tcp_abandon+0xbe>
 8009112:	4b36      	ldr	r3, [pc, #216]	@ (80091ec <tcp_abandon+0x170>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	61fb      	str	r3, [r7, #28]
 8009118:	e00c      	b.n	8009134 <tcp_abandon+0xb8>
 800911a:	69fb      	ldr	r3, [r7, #28]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d104      	bne.n	800912e <tcp_abandon+0xb2>
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	60da      	str	r2, [r3, #12]
 800912c:	e005      	b.n	800913a <tcp_abandon+0xbe>
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	61fb      	str	r3, [r7, #28]
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1ef      	bne.n	800911a <tcp_abandon+0x9e>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	60da      	str	r2, [r3, #12]
 8009140:	e00b      	b.n	800915a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	8adb      	ldrh	r3, [r3, #22]
 800914a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800914c:	6879      	ldr	r1, [r7, #4]
 800914e:	4828      	ldr	r0, [pc, #160]	@ (80091f0 <tcp_abandon+0x174>)
 8009150:	f001 fa1c 	bl	800a58c <tcp_pcb_remove>
 8009154:	4b27      	ldr	r3, [pc, #156]	@ (80091f4 <tcp_abandon+0x178>)
 8009156:	2201      	movs	r2, #1
 8009158:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800915e:	2b00      	cmp	r3, #0
 8009160:	d004      	beq.n	800916c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fed8 	bl	8009f1c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009170:	2b00      	cmp	r3, #0
 8009172:	d004      	beq.n	800917e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fecf 	bl	8009f1c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009182:	2b00      	cmp	r3, #0
 8009184:	d004      	beq.n	8009190 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800918a:	4618      	mov	r0, r3
 800918c:	f000 fec6 	bl	8009f1c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00e      	beq.n	80091b4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8009196:	6879      	ldr	r1, [r7, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	3304      	adds	r3, #4
 800919c:	687a      	ldr	r2, [r7, #4]
 800919e:	8b12      	ldrh	r2, [r2, #24]
 80091a0:	9202      	str	r2, [sp, #8]
 80091a2:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80091a4:	9201      	str	r2, [sp, #4]
 80091a6:	9300      	str	r3, [sp, #0]
 80091a8:	460b      	mov	r3, r1
 80091aa:	697a      	ldr	r2, [r7, #20]
 80091ac:	69b9      	ldr	r1, [r7, #24]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f005 fbec 	bl	800e98c <tcp_rst>
    }
    last_state = pcb->state;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f7ff fd34 	bl	8008c28 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <tcp_abandon+0x154>
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	f06f 010c 	mvn.w	r1, #12
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	4798      	blx	r3
  }
}
 80091d0:	3728      	adds	r7, #40	@ 0x28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	08015f20 	.word	0x08015f20
 80091dc:	08016064 	.word	0x08016064
 80091e0:	08015f64 	.word	0x08015f64
 80091e4:	08016080 	.word	0x08016080
 80091e8:	20004340 	.word	0x20004340
 80091ec:	20004334 	.word	0x20004334
 80091f0:	2000433c 	.word	0x2000433c
 80091f4:	20004344 	.word	0x20004344

080091f8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8009200:	2101      	movs	r1, #1
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f7ff ff3a 	bl	800907c <tcp_abandon>
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}

08009210 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	4613      	mov	r3, r2
 800921c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800921e:	2304      	movs	r3, #4
 8009220:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d101      	bne.n	800922c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8009228:	4b3e      	ldr	r3, [pc, #248]	@ (8009324 <tcp_bind+0x114>)
 800922a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d109      	bne.n	8009246 <tcp_bind+0x36>
 8009232:	4b3d      	ldr	r3, [pc, #244]	@ (8009328 <tcp_bind+0x118>)
 8009234:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8009238:	493c      	ldr	r1, [pc, #240]	@ (800932c <tcp_bind+0x11c>)
 800923a:	483d      	ldr	r0, [pc, #244]	@ (8009330 <tcp_bind+0x120>)
 800923c:	f00a ff70 	bl	8014120 <iprintf>
 8009240:	f06f 030f 	mvn.w	r3, #15
 8009244:	e06a      	b.n	800931c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	7d1b      	ldrb	r3, [r3, #20]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d009      	beq.n	8009262 <tcp_bind+0x52>
 800924e:	4b36      	ldr	r3, [pc, #216]	@ (8009328 <tcp_bind+0x118>)
 8009250:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8009254:	4937      	ldr	r1, [pc, #220]	@ (8009334 <tcp_bind+0x124>)
 8009256:	4836      	ldr	r0, [pc, #216]	@ (8009330 <tcp_bind+0x120>)
 8009258:	f00a ff62 	bl	8014120 <iprintf>
 800925c:	f06f 0305 	mvn.w	r3, #5
 8009260:	e05c      	b.n	800931c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8009262:	88fb      	ldrh	r3, [r7, #6]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <tcp_bind+0x6c>
    port = tcp_new_port();
 8009268:	f000 f9f0 	bl	800964c <tcp_new_port>
 800926c:	4603      	mov	r3, r0
 800926e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009270:	88fb      	ldrh	r3, [r7, #6]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d135      	bne.n	80092e2 <tcp_bind+0xd2>
      return ERR_BUF;
 8009276:	f06f 0301 	mvn.w	r3, #1
 800927a:	e04f      	b.n	800931c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800927c:	2300      	movs	r3, #0
 800927e:	61fb      	str	r3, [r7, #28]
 8009280:	e02b      	b.n	80092da <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8009282:	4a2d      	ldr	r2, [pc, #180]	@ (8009338 <tcp_bind+0x128>)
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	61bb      	str	r3, [r7, #24]
 800928e:	e01e      	b.n	80092ce <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8009290:	69bb      	ldr	r3, [r7, #24]
 8009292:	8adb      	ldrh	r3, [r3, #22]
 8009294:	88fa      	ldrh	r2, [r7, #6]
 8009296:	429a      	cmp	r2, r3
 8009298:	d116      	bne.n	80092c8 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800929a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800929c:	2b00      	cmp	r3, #0
 800929e:	d010      	beq.n	80092c2 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80092a0:	69bb      	ldr	r3, [r7, #24]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00c      	beq.n	80092c2 <tcp_bind+0xb2>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d009      	beq.n	80092c2 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d005      	beq.n	80092c2 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80092be:	429a      	cmp	r2, r3
 80092c0:	d102      	bne.n	80092c8 <tcp_bind+0xb8>
              return ERR_USE;
 80092c2:	f06f 0307 	mvn.w	r3, #7
 80092c6:	e029      	b.n	800931c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	61bb      	str	r3, [r7, #24]
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1dd      	bne.n	8009290 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80092d4:	69fb      	ldr	r3, [r7, #28]
 80092d6:	3301      	adds	r3, #1
 80092d8:	61fb      	str	r3, [r7, #28]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	429a      	cmp	r2, r3
 80092e0:	dbcf      	blt.n	8009282 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00c      	beq.n	8009302 <tcp_bind+0xf2>
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d008      	beq.n	8009302 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d002      	beq.n	80092fc <tcp_bind+0xec>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	e000      	b.n	80092fe <tcp_bind+0xee>
 80092fc:	2300      	movs	r3, #0
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	88fa      	ldrh	r2, [r7, #6]
 8009306:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8009308:	4b0c      	ldr	r3, [pc, #48]	@ (800933c <tcp_bind+0x12c>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	60da      	str	r2, [r3, #12]
 8009310:	4a0a      	ldr	r2, [pc, #40]	@ (800933c <tcp_bind+0x12c>)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6013      	str	r3, [r2, #0]
 8009316:	f005 fcfb 	bl	800ed10 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	08018314 	.word	0x08018314
 8009328:	08015f20 	.word	0x08015f20
 800932c:	080160b4 	.word	0x080160b4
 8009330:	08015f64 	.word	0x08015f64
 8009334:	080160cc 	.word	0x080160cc
 8009338:	080182d4 	.word	0x080182d4
 800933c:	20004334 	.word	0x20004334

08009340 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	4613      	mov	r3, r2
 800934c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d106      	bne.n	8009362 <tcp_accept_null+0x22>
 8009354:	4b07      	ldr	r3, [pc, #28]	@ (8009374 <tcp_accept_null+0x34>)
 8009356:	f240 320f 	movw	r2, #783	@ 0x30f
 800935a:	4907      	ldr	r1, [pc, #28]	@ (8009378 <tcp_accept_null+0x38>)
 800935c:	4807      	ldr	r0, [pc, #28]	@ (800937c <tcp_accept_null+0x3c>)
 800935e:	f00a fedf 	bl	8014120 <iprintf>

  tcp_abort(pcb);
 8009362:	68b8      	ldr	r0, [r7, #8]
 8009364:	f7ff ff48 	bl	80091f8 <tcp_abort>

  return ERR_ABRT;
 8009368:	f06f 030c 	mvn.w	r3, #12
}
 800936c:	4618      	mov	r0, r3
 800936e:	3710      	adds	r7, #16
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	08015f20 	.word	0x08015f20
 8009378:	080160f4 	.word	0x080160f4
 800937c:	08015f64 	.word	0x08015f64

08009380 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	460b      	mov	r3, r1
 800938a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800938c:	78fb      	ldrb	r3, [r7, #3]
 800938e:	2200      	movs	r2, #0
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f806 	bl	80093a4 <tcp_listen_with_backlog_and_err>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
	...

080093a4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b088      	sub	sp, #32
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	60f8      	str	r0, [r7, #12]
 80093ac:	460b      	mov	r3, r1
 80093ae:	607a      	str	r2, [r7, #4]
 80093b0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d109      	bne.n	80093d0 <tcp_listen_with_backlog_and_err+0x2c>
 80093bc:	4b47      	ldr	r3, [pc, #284]	@ (80094dc <tcp_listen_with_backlog_and_err+0x138>)
 80093be:	f240 3259 	movw	r2, #857	@ 0x359
 80093c2:	4947      	ldr	r1, [pc, #284]	@ (80094e0 <tcp_listen_with_backlog_and_err+0x13c>)
 80093c4:	4847      	ldr	r0, [pc, #284]	@ (80094e4 <tcp_listen_with_backlog_and_err+0x140>)
 80093c6:	f00a feab 	bl	8014120 <iprintf>
 80093ca:	23f0      	movs	r3, #240	@ 0xf0
 80093cc:	76fb      	strb	r3, [r7, #27]
 80093ce:	e079      	b.n	80094c4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	7d1b      	ldrb	r3, [r3, #20]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <tcp_listen_with_backlog_and_err+0x48>
 80093d8:	4b40      	ldr	r3, [pc, #256]	@ (80094dc <tcp_listen_with_backlog_and_err+0x138>)
 80093da:	f240 325a 	movw	r2, #858	@ 0x35a
 80093de:	4942      	ldr	r1, [pc, #264]	@ (80094e8 <tcp_listen_with_backlog_and_err+0x144>)
 80093e0:	4840      	ldr	r0, [pc, #256]	@ (80094e4 <tcp_listen_with_backlog_and_err+0x140>)
 80093e2:	f00a fe9d 	bl	8014120 <iprintf>
 80093e6:	23f1      	movs	r3, #241	@ 0xf1
 80093e8:	76fb      	strb	r3, [r7, #27]
 80093ea:	e06b      	b.n	80094c4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	7d1b      	ldrb	r3, [r3, #20]
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d104      	bne.n	80093fe <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80093f8:	23f7      	movs	r3, #247	@ 0xf7
 80093fa:	76fb      	strb	r3, [r7, #27]
    goto done;
 80093fc:	e062      	b.n	80094c4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80093fe:	2002      	movs	r0, #2
 8009400:	f7fe f93a 	bl	8007678 <memp_malloc>
 8009404:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d102      	bne.n	8009412 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800940c:	23ff      	movs	r3, #255	@ 0xff
 800940e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8009410:	e058      	b.n	80094c4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	691a      	ldr	r2, [r3, #16]
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	8ada      	ldrh	r2, [r3, #22]
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2201      	movs	r2, #1
 8009426:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	7d5a      	ldrb	r2, [r3, #21]
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	7a5a      	ldrb	r2, [r3, #9]
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	2200      	movs	r2, #0
 800943c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	7ada      	ldrb	r2, [r3, #11]
 8009442:	69fb      	ldr	r3, [r7, #28]
 8009444:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	7a9a      	ldrb	r2, [r3, #10]
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	8adb      	ldrh	r3, [r3, #22]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d021      	beq.n	80094a2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800945e:	4b23      	ldr	r3, [pc, #140]	@ (80094ec <tcp_listen_with_backlog_and_err+0x148>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	429a      	cmp	r2, r3
 8009466:	d105      	bne.n	8009474 <tcp_listen_with_backlog_and_err+0xd0>
 8009468:	4b20      	ldr	r3, [pc, #128]	@ (80094ec <tcp_listen_with_backlog_and_err+0x148>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
 800946e:	4a1f      	ldr	r2, [pc, #124]	@ (80094ec <tcp_listen_with_backlog_and_err+0x148>)
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	e013      	b.n	800949c <tcp_listen_with_backlog_and_err+0xf8>
 8009474:	4b1d      	ldr	r3, [pc, #116]	@ (80094ec <tcp_listen_with_backlog_and_err+0x148>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	e00c      	b.n	8009496 <tcp_listen_with_backlog_and_err+0xf2>
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	429a      	cmp	r2, r3
 8009484:	d104      	bne.n	8009490 <tcp_listen_with_backlog_and_err+0xec>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	68da      	ldr	r2, [r3, #12]
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	e005      	b.n	800949c <tcp_listen_with_backlog_and_err+0xf8>
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1ef      	bne.n	800947c <tcp_listen_with_backlog_and_err+0xd8>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2200      	movs	r2, #0
 80094a0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f7ff fbc0 	bl	8008c28 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	4a11      	ldr	r2, [pc, #68]	@ (80094f0 <tcp_listen_with_backlog_and_err+0x14c>)
 80094ac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80094ae:	4b11      	ldr	r3, [pc, #68]	@ (80094f4 <tcp_listen_with_backlog_and_err+0x150>)
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	69fb      	ldr	r3, [r7, #28]
 80094b4:	60da      	str	r2, [r3, #12]
 80094b6:	4a0f      	ldr	r2, [pc, #60]	@ (80094f4 <tcp_listen_with_backlog_and_err+0x150>)
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	6013      	str	r3, [r2, #0]
 80094bc:	f005 fc28 	bl	800ed10 <tcp_timer_needed>
  res = ERR_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	7efa      	ldrb	r2, [r7, #27]
 80094ce:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80094d0:	69fb      	ldr	r3, [r7, #28]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3720      	adds	r7, #32
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	08015f20 	.word	0x08015f20
 80094e0:	08016114 	.word	0x08016114
 80094e4:	08015f64 	.word	0x08015f64
 80094e8:	08016144 	.word	0x08016144
 80094ec:	20004334 	.word	0x20004334
 80094f0:	08009341 	.word	0x08009341
 80094f4:	20004338 	.word	0x20004338

080094f8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <tcp_update_rcv_ann_wnd+0x1c>
 8009506:	4b25      	ldr	r3, [pc, #148]	@ (800959c <tcp_update_rcv_ann_wnd+0xa4>)
 8009508:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800950c:	4924      	ldr	r1, [pc, #144]	@ (80095a0 <tcp_update_rcv_ann_wnd+0xa8>)
 800950e:	4825      	ldr	r0, [pc, #148]	@ (80095a4 <tcp_update_rcv_ann_wnd+0xac>)
 8009510:	f00a fe06 	bl	8014120 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800951c:	4413      	add	r3, r2
 800951e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8009528:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800952c:	bf28      	it	cs
 800952e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8009532:	b292      	uxth	r2, r2
 8009534:	4413      	add	r3, r2
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	db08      	blt.n	8009550 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	e020      	b.n	8009592 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	dd03      	ble.n	8009566 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009564:	e014      	b.n	8009590 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009578:	d306      	bcc.n	8009588 <tcp_update_rcv_ann_wnd+0x90>
 800957a:	4b08      	ldr	r3, [pc, #32]	@ (800959c <tcp_update_rcv_ann_wnd+0xa4>)
 800957c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8009580:	4909      	ldr	r1, [pc, #36]	@ (80095a8 <tcp_update_rcv_ann_wnd+0xb0>)
 8009582:	4808      	ldr	r0, [pc, #32]	@ (80095a4 <tcp_update_rcv_ann_wnd+0xac>)
 8009584:	f00a fdcc 	bl	8014120 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	b29a      	uxth	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8009590:	2300      	movs	r3, #0
  }
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}
 800959a:	bf00      	nop
 800959c:	08015f20 	.word	0x08015f20
 80095a0:	0801617c 	.word	0x0801617c
 80095a4:	08015f64 	.word	0x08015f64
 80095a8:	080161a0 	.word	0x080161a0

080095ac <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	460b      	mov	r3, r1
 80095b6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d107      	bne.n	80095ce <tcp_recved+0x22>
 80095be:	4b1f      	ldr	r3, [pc, #124]	@ (800963c <tcp_recved+0x90>)
 80095c0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 80095c4:	491e      	ldr	r1, [pc, #120]	@ (8009640 <tcp_recved+0x94>)
 80095c6:	481f      	ldr	r0, [pc, #124]	@ (8009644 <tcp_recved+0x98>)
 80095c8:	f00a fdaa 	bl	8014120 <iprintf>
 80095cc:	e032      	b.n	8009634 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	7d1b      	ldrb	r3, [r3, #20]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d106      	bne.n	80095e4 <tcp_recved+0x38>
 80095d6:	4b19      	ldr	r3, [pc, #100]	@ (800963c <tcp_recved+0x90>)
 80095d8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 80095dc:	491a      	ldr	r1, [pc, #104]	@ (8009648 <tcp_recved+0x9c>)
 80095de:	4819      	ldr	r0, [pc, #100]	@ (8009644 <tcp_recved+0x98>)
 80095e0:	f00a fd9e 	bl	8014120 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80095e8:	887b      	ldrh	r3, [r7, #2]
 80095ea:	4413      	add	r3, r2
 80095ec:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80095ee:	89fb      	ldrh	r3, [r7, #14]
 80095f0:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80095f4:	d804      	bhi.n	8009600 <tcp_recved+0x54>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095fa:	89fa      	ldrh	r2, [r7, #14]
 80095fc:	429a      	cmp	r2, r3
 80095fe:	d204      	bcs.n	800960a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8009606:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009608:	e002      	b.n	8009610 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	89fa      	ldrh	r2, [r7, #14]
 800960e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f7ff ff71 	bl	80094f8 <tcp_update_rcv_ann_wnd>
 8009616:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800961e:	d309      	bcc.n	8009634 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	8b5b      	ldrh	r3, [r3, #26]
 8009624:	f043 0302 	orr.w	r3, r3, #2
 8009628:	b29a      	uxth	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f004 fbd6 	bl	800dde0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
 800963a:	bf00      	nop
 800963c:	08015f20 	.word	0x08015f20
 8009640:	080161bc 	.word	0x080161bc
 8009644:	08015f64 	.word	0x08015f64
 8009648:	080161d4 	.word	0x080161d4

0800964c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800964c:	b480      	push	{r7}
 800964e:	b083      	sub	sp, #12
 8009650:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8009652:	2300      	movs	r3, #0
 8009654:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8009656:	4b1e      	ldr	r3, [pc, #120]	@ (80096d0 <tcp_new_port+0x84>)
 8009658:	881b      	ldrh	r3, [r3, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	b29a      	uxth	r2, r3
 800965e:	4b1c      	ldr	r3, [pc, #112]	@ (80096d0 <tcp_new_port+0x84>)
 8009660:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8009662:	4b1b      	ldr	r3, [pc, #108]	@ (80096d0 <tcp_new_port+0x84>)
 8009664:	881b      	ldrh	r3, [r3, #0]
 8009666:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800966a:	4293      	cmp	r3, r2
 800966c:	d103      	bne.n	8009676 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800966e:	4b18      	ldr	r3, [pc, #96]	@ (80096d0 <tcp_new_port+0x84>)
 8009670:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8009674:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8009676:	2300      	movs	r3, #0
 8009678:	71fb      	strb	r3, [r7, #7]
 800967a:	e01e      	b.n	80096ba <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	4a15      	ldr	r2, [pc, #84]	@ (80096d4 <tcp_new_port+0x88>)
 8009680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	e011      	b.n	80096ae <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	8ada      	ldrh	r2, [r3, #22]
 800968e:	4b10      	ldr	r3, [pc, #64]	@ (80096d0 <tcp_new_port+0x84>)
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d108      	bne.n	80096a8 <tcp_new_port+0x5c>
        n++;
 8009696:	88bb      	ldrh	r3, [r7, #4]
 8009698:	3301      	adds	r3, #1
 800969a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800969c:	88bb      	ldrh	r3, [r7, #4]
 800969e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096a2:	d3d8      	bcc.n	8009656 <tcp_new_port+0xa>
          return 0;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e00d      	b.n	80096c4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	603b      	str	r3, [r7, #0]
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d1ea      	bne.n	800968a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	3301      	adds	r3, #1
 80096b8:	71fb      	strb	r3, [r7, #7]
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	2b03      	cmp	r3, #3
 80096be:	d9dd      	bls.n	800967c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80096c0:	4b03      	ldr	r3, [pc, #12]	@ (80096d0 <tcp_new_port+0x84>)
 80096c2:	881b      	ldrh	r3, [r3, #0]
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	2000000a 	.word	0x2000000a
 80096d4:	080182d4 	.word	0x080182d4

080096d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80096d8:	b5b0      	push	{r4, r5, r7, lr}
 80096da:	b090      	sub	sp, #64	@ 0x40
 80096dc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80096e4:	4b95      	ldr	r3, [pc, #596]	@ (800993c <tcp_slowtmr+0x264>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3301      	adds	r3, #1
 80096ea:	4a94      	ldr	r2, [pc, #592]	@ (800993c <tcp_slowtmr+0x264>)
 80096ec:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80096ee:	4b94      	ldr	r3, [pc, #592]	@ (8009940 <tcp_slowtmr+0x268>)
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	3301      	adds	r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	4b92      	ldr	r3, [pc, #584]	@ (8009940 <tcp_slowtmr+0x268>)
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	e000      	b.n	80096fe <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80096fc:	bf00      	nop
  prev = NULL;
 80096fe:	2300      	movs	r3, #0
 8009700:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8009702:	4b90      	ldr	r3, [pc, #576]	@ (8009944 <tcp_slowtmr+0x26c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009708:	e29f      	b.n	8009c4a <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800970a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d106      	bne.n	8009720 <tcp_slowtmr+0x48>
 8009712:	4b8d      	ldr	r3, [pc, #564]	@ (8009948 <tcp_slowtmr+0x270>)
 8009714:	f240 42be 	movw	r2, #1214	@ 0x4be
 8009718:	498c      	ldr	r1, [pc, #560]	@ (800994c <tcp_slowtmr+0x274>)
 800971a:	488d      	ldr	r0, [pc, #564]	@ (8009950 <tcp_slowtmr+0x278>)
 800971c:	f00a fd00 	bl	8014120 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009722:	7d1b      	ldrb	r3, [r3, #20]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d106      	bne.n	8009736 <tcp_slowtmr+0x5e>
 8009728:	4b87      	ldr	r3, [pc, #540]	@ (8009948 <tcp_slowtmr+0x270>)
 800972a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800972e:	4989      	ldr	r1, [pc, #548]	@ (8009954 <tcp_slowtmr+0x27c>)
 8009730:	4887      	ldr	r0, [pc, #540]	@ (8009950 <tcp_slowtmr+0x278>)
 8009732:	f00a fcf5 	bl	8014120 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009738:	7d1b      	ldrb	r3, [r3, #20]
 800973a:	2b0a      	cmp	r3, #10
 800973c:	d106      	bne.n	800974c <tcp_slowtmr+0x74>
 800973e:	4b82      	ldr	r3, [pc, #520]	@ (8009948 <tcp_slowtmr+0x270>)
 8009740:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8009744:	4984      	ldr	r1, [pc, #528]	@ (8009958 <tcp_slowtmr+0x280>)
 8009746:	4882      	ldr	r0, [pc, #520]	@ (8009950 <tcp_slowtmr+0x278>)
 8009748:	f00a fcea 	bl	8014120 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800974c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800974e:	7f9a      	ldrb	r2, [r3, #30]
 8009750:	4b7b      	ldr	r3, [pc, #492]	@ (8009940 <tcp_slowtmr+0x268>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d105      	bne.n	8009764 <tcp_slowtmr+0x8c>
      prev = pcb;
 8009758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800975c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8009762:	e272      	b.n	8009c4a <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8009764:	4b76      	ldr	r3, [pc, #472]	@ (8009940 <tcp_slowtmr+0x268>)
 8009766:	781a      	ldrb	r2, [r3, #0]
 8009768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800976a:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800976c:	2300      	movs	r3, #0
 800976e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	7d1b      	ldrb	r3, [r3, #20]
 800977c:	2b02      	cmp	r3, #2
 800977e:	d10a      	bne.n	8009796 <tcp_slowtmr+0xbe>
 8009780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009782:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009786:	2b05      	cmp	r3, #5
 8009788:	d905      	bls.n	8009796 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800978a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800978e:	3301      	adds	r3, #1
 8009790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009794:	e11e      	b.n	80099d4 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009798:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800979c:	2b0b      	cmp	r3, #11
 800979e:	d905      	bls.n	80097ac <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80097a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097a4:	3301      	adds	r3, #1
 80097a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097aa:	e113      	b.n	80099d4 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80097ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d075      	beq.n	80098a2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80097b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d006      	beq.n	80097cc <tcp_slowtmr+0xf4>
 80097be:	4b62      	ldr	r3, [pc, #392]	@ (8009948 <tcp_slowtmr+0x270>)
 80097c0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80097c4:	4965      	ldr	r1, [pc, #404]	@ (800995c <tcp_slowtmr+0x284>)
 80097c6:	4862      	ldr	r0, [pc, #392]	@ (8009950 <tcp_slowtmr+0x278>)
 80097c8:	f00a fcaa 	bl	8014120 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80097cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d106      	bne.n	80097e2 <tcp_slowtmr+0x10a>
 80097d4:	4b5c      	ldr	r3, [pc, #368]	@ (8009948 <tcp_slowtmr+0x270>)
 80097d6:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80097da:	4961      	ldr	r1, [pc, #388]	@ (8009960 <tcp_slowtmr+0x288>)
 80097dc:	485c      	ldr	r0, [pc, #368]	@ (8009950 <tcp_slowtmr+0x278>)
 80097de:	f00a fc9f 	bl	8014120 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80097e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80097e8:	2b0b      	cmp	r3, #11
 80097ea:	d905      	bls.n	80097f8 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80097ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80097f0:	3301      	adds	r3, #1
 80097f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80097f6:	e0ed      	b.n	80099d4 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80097f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fa:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80097fe:	3b01      	subs	r3, #1
 8009800:	4a58      	ldr	r2, [pc, #352]	@ (8009964 <tcp_slowtmr+0x28c>)
 8009802:	5cd3      	ldrb	r3, [r2, r3]
 8009804:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8009806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009808:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800980c:	7c7a      	ldrb	r2, [r7, #17]
 800980e:	429a      	cmp	r2, r3
 8009810:	d907      	bls.n	8009822 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8009812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009814:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009818:	3301      	adds	r3, #1
 800981a:	b2da      	uxtb	r2, r3
 800981c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800981e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009828:	7c7a      	ldrb	r2, [r7, #17]
 800982a:	429a      	cmp	r2, r3
 800982c:	f200 80d2 	bhi.w	80099d4 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8009830:	2301      	movs	r3, #1
 8009832:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8009834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800983a:	2b00      	cmp	r3, #0
 800983c:	d108      	bne.n	8009850 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800983e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009840:	f005 f998 	bl	800eb74 <tcp_zero_window_probe>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d014      	beq.n	8009874 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800984a:	2300      	movs	r3, #0
 800984c:	623b      	str	r3, [r7, #32]
 800984e:	e011      	b.n	8009874 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009856:	4619      	mov	r1, r3
 8009858:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800985a:	f004 f83b 	bl	800d8d4 <tcp_split_unsent_seg>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d107      	bne.n	8009874 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8009864:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009866:	f004 fabb 	bl	800dde0 <tcp_output>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d101      	bne.n	8009874 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8009870:	2300      	movs	r3, #0
 8009872:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	2b00      	cmp	r3, #0
 8009878:	f000 80ac 	beq.w	80099d4 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800987c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800987e:	2200      	movs	r2, #0
 8009880:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009886:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800988a:	2b06      	cmp	r3, #6
 800988c:	f200 80a2 	bhi.w	80099d4 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8009890:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009892:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8009896:	3301      	adds	r3, #1
 8009898:	b2da      	uxtb	r2, r3
 800989a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800989c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80098a0:	e098      	b.n	80099d4 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80098a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	db0f      	blt.n	80098cc <tcp_slowtmr+0x1f4>
 80098ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80098b2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d008      	beq.n	80098cc <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80098ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	3301      	adds	r3, #1
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	b21a      	sxth	r2, r3
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80098cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80098d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80098d8:	429a      	cmp	r2, r3
 80098da:	db7b      	blt.n	80099d4 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80098dc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80098de:	f004 fd85 	bl	800e3ec <tcp_rexmit_rto_prepare>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d007      	beq.n	80098f8 <tcp_slowtmr+0x220>
 80098e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d171      	bne.n	80099d4 <tcp_slowtmr+0x2fc>
 80098f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d06d      	beq.n	80099d4 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80098f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098fa:	7d1b      	ldrb	r3, [r3, #20]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d03a      	beq.n	8009976 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009900:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009902:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009906:	2b0c      	cmp	r3, #12
 8009908:	bf28      	it	cs
 800990a:	230c      	movcs	r3, #12
 800990c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800990e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009910:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8009914:	10db      	asrs	r3, r3, #3
 8009916:	b21b      	sxth	r3, r3
 8009918:	461a      	mov	r2, r3
 800991a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800991c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8009920:	4413      	add	r3, r2
 8009922:	7efa      	ldrb	r2, [r7, #27]
 8009924:	4910      	ldr	r1, [pc, #64]	@ (8009968 <tcp_slowtmr+0x290>)
 8009926:	5c8a      	ldrb	r2, [r1, r2]
 8009928:	4093      	lsls	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8009932:	4293      	cmp	r3, r2
 8009934:	dc1a      	bgt.n	800996c <tcp_slowtmr+0x294>
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	b21a      	sxth	r2, r3
 800993a:	e019      	b.n	8009970 <tcp_slowtmr+0x298>
 800993c:	20004330 	.word	0x20004330
 8009940:	20004346 	.word	0x20004346
 8009944:	2000433c 	.word	0x2000433c
 8009948:	08015f20 	.word	0x08015f20
 800994c:	08016264 	.word	0x08016264
 8009950:	08015f64 	.word	0x08015f64
 8009954:	08016290 	.word	0x08016290
 8009958:	080162bc 	.word	0x080162bc
 800995c:	080162ec 	.word	0x080162ec
 8009960:	08016320 	.word	0x08016320
 8009964:	080182cc 	.word	0x080182cc
 8009968:	080182bc 	.word	0x080182bc
 800996c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009972:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	2200      	movs	r2, #0
 800997a:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800997c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800997e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8009982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009984:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8009988:	4293      	cmp	r3, r2
 800998a:	bf28      	it	cs
 800998c:	4613      	movcs	r3, r2
 800998e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8009990:	8a7b      	ldrh	r3, [r7, #18]
 8009992:	085b      	lsrs	r3, r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009998:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800999c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800999e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099a6:	005b      	lsls	r3, r3, #1
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d206      	bcs.n	80099bc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80099ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80099b2:	005b      	lsls	r3, r3, #1
 80099b4:	b29a      	uxth	r2, r3
 80099b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099b8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80099bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099be:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80099c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80099c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80099ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80099d0:	f004 fd7c 	bl	800e4cc <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80099d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d6:	7d1b      	ldrb	r3, [r3, #20]
 80099d8:	2b06      	cmp	r3, #6
 80099da:	d111      	bne.n	8009a00 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	8b5b      	ldrh	r3, [r3, #26]
 80099e0:	f003 0310 	and.w	r3, r3, #16
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00b      	beq.n	8009a00 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80099e8:	4b9d      	ldr	r3, [pc, #628]	@ (8009c60 <tcp_slowtmr+0x588>)
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	1ad3      	subs	r3, r2, r3
 80099f2:	2b28      	cmp	r3, #40	@ 0x28
 80099f4:	d904      	bls.n	8009a00 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80099f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099fa:	3301      	adds	r3, #1
 80099fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a02:	7a5b      	ldrb	r3, [r3, #9]
 8009a04:	f003 0308 	and.w	r3, r3, #8
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d04c      	beq.n	8009aa6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8009a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a0e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d003      	beq.n	8009a1c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8009a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a16:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8009a18:	2b07      	cmp	r3, #7
 8009a1a:	d144      	bne.n	8009aa6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a1c:	4b90      	ldr	r3, [pc, #576]	@ (8009c60 <tcp_slowtmr+0x588>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a22:	6a1b      	ldr	r3, [r3, #32]
 8009a24:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a2c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8009a30:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8009a34:	498b      	ldr	r1, [pc, #556]	@ (8009c64 <tcp_slowtmr+0x58c>)
 8009a36:	fba1 1303 	umull	r1, r3, r1, r3
 8009a3a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d90a      	bls.n	8009a56 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8009a40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a44:	3301      	adds	r3, #1
 8009a46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8009a4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009a4e:	3301      	adds	r3, #1
 8009a50:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009a54:	e027      	b.n	8009aa6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a56:	4b82      	ldr	r3, [pc, #520]	@ (8009c60 <tcp_slowtmr+0x588>)
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a5c:	6a1b      	ldr	r3, [r3, #32]
 8009a5e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a62:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8009a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a68:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	4b7e      	ldr	r3, [pc, #504]	@ (8009c68 <tcp_slowtmr+0x590>)
 8009a70:	fb00 f303 	mul.w	r3, r0, r3
 8009a74:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009a76:	497b      	ldr	r1, [pc, #492]	@ (8009c64 <tcp_slowtmr+0x58c>)
 8009a78:	fba1 1303 	umull	r1, r3, r1, r3
 8009a7c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d911      	bls.n	8009aa6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8009a82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009a84:	f005 f836 	bl	800eaf4 <tcp_keepalive>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8009a8e:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d107      	bne.n	8009aa6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8009a9c:	3301      	adds	r3, #1
 8009a9e:	b2da      	uxtb	r2, r3
 8009aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa2:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8009aa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d011      	beq.n	8009ad2 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009aae:	4b6c      	ldr	r3, [pc, #432]	@ (8009c60 <tcp_slowtmr+0x588>)
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ab4:	6a1b      	ldr	r3, [r3, #32]
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009aba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8009abe:	4619      	mov	r1, r3
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	005b      	lsls	r3, r3, #1
 8009ac4:	440b      	add	r3, r1
 8009ac6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d302      	bcc.n	8009ad2 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 8009acc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009ace:	f000 fec1 	bl	800a854 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8009ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ad4:	7d1b      	ldrb	r3, [r3, #20]
 8009ad6:	2b03      	cmp	r3, #3
 8009ad8:	d10b      	bne.n	8009af2 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009ada:	4b61      	ldr	r3, [pc, #388]	@ (8009c60 <tcp_slowtmr+0x588>)
 8009adc:	681a      	ldr	r2, [r3, #0]
 8009ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b28      	cmp	r3, #40	@ 0x28
 8009ae6:	d904      	bls.n	8009af2 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 8009ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aec:	3301      	adds	r3, #1
 8009aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8009af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009af4:	7d1b      	ldrb	r3, [r3, #20]
 8009af6:	2b09      	cmp	r3, #9
 8009af8:	d10b      	bne.n	8009b12 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009afa:	4b59      	ldr	r3, [pc, #356]	@ (8009c60 <tcp_slowtmr+0x588>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	1ad3      	subs	r3, r2, r3
 8009b04:	2bf0      	cmp	r3, #240	@ 0xf0
 8009b06:	d904      	bls.n	8009b12 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8009b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b0c:	3301      	adds	r3, #1
 8009b0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8009b12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d060      	beq.n	8009bdc <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b20:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8009b22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b24:	f000 fce2 	bl	800a4ec <tcp_pcb_purge>
      if (prev != NULL) {
 8009b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d010      	beq.n	8009b50 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8009c6c <tcp_slowtmr+0x594>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d106      	bne.n	8009b46 <tcp_slowtmr+0x46e>
 8009b38:	4b4d      	ldr	r3, [pc, #308]	@ (8009c70 <tcp_slowtmr+0x598>)
 8009b3a:	f240 526d 	movw	r2, #1389	@ 0x56d
 8009b3e:	494d      	ldr	r1, [pc, #308]	@ (8009c74 <tcp_slowtmr+0x59c>)
 8009b40:	484d      	ldr	r0, [pc, #308]	@ (8009c78 <tcp_slowtmr+0x5a0>)
 8009b42:	f00a faed 	bl	8014120 <iprintf>
        prev->next = pcb->next;
 8009b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b48:	68da      	ldr	r2, [r3, #12]
 8009b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4c:	60da      	str	r2, [r3, #12]
 8009b4e:	e00f      	b.n	8009b70 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009b50:	4b46      	ldr	r3, [pc, #280]	@ (8009c6c <tcp_slowtmr+0x594>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d006      	beq.n	8009b68 <tcp_slowtmr+0x490>
 8009b5a:	4b45      	ldr	r3, [pc, #276]	@ (8009c70 <tcp_slowtmr+0x598>)
 8009b5c:	f240 5271 	movw	r2, #1393	@ 0x571
 8009b60:	4946      	ldr	r1, [pc, #280]	@ (8009c7c <tcp_slowtmr+0x5a4>)
 8009b62:	4845      	ldr	r0, [pc, #276]	@ (8009c78 <tcp_slowtmr+0x5a0>)
 8009b64:	f00a fadc 	bl	8014120 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8009c6c <tcp_slowtmr+0x594>)
 8009b6e:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8009b70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d013      	beq.n	8009ba0 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8009b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8009b80:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	3304      	adds	r3, #4
 8009b86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b88:	8ad2      	ldrh	r2, [r2, #22]
 8009b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009b8c:	8b09      	ldrh	r1, [r1, #24]
 8009b8e:	9102      	str	r1, [sp, #8]
 8009b90:	9201      	str	r2, [sp, #4]
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462b      	mov	r3, r5
 8009b96:	4622      	mov	r2, r4
 8009b98:	4601      	mov	r1, r0
 8009b9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009b9c:	f004 fef6 	bl	800e98c <tcp_rst>
      err_arg = pcb->callback_arg;
 8009ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8009ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba8:	7d1b      	ldrb	r3, [r3, #20]
 8009baa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8009bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bae:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8009bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009bb6:	6838      	ldr	r0, [r7, #0]
 8009bb8:	f7ff f836 	bl	8008c28 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009bbc:	4b30      	ldr	r3, [pc, #192]	@ (8009c80 <tcp_slowtmr+0x5a8>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d004      	beq.n	8009bd2 <tcp_slowtmr+0x4fa>
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f06f 010c 	mvn.w	r1, #12
 8009bce:	68b8      	ldr	r0, [r7, #8]
 8009bd0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8009bd2:	4b2b      	ldr	r3, [pc, #172]	@ (8009c80 <tcp_slowtmr+0x5a8>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d037      	beq.n	8009c4a <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8009bda:	e590      	b.n	80096fe <tcp_slowtmr+0x26>
      prev = pcb;
 8009bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bde:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	68db      	ldr	r3, [r3, #12]
 8009be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8009be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009be8:	7f1b      	ldrb	r3, [r3, #28]
 8009bea:	3301      	adds	r3, #1
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf4:	7f1a      	ldrb	r2, [r3, #28]
 8009bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf8:	7f5b      	ldrb	r3, [r3, #29]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d325      	bcc.n	8009c4a <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8009bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c00:	2200      	movs	r2, #0
 8009c02:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8009c04:	4b1e      	ldr	r3, [pc, #120]	@ (8009c80 <tcp_slowtmr+0x5a8>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8009c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d00b      	beq.n	8009c2c <tcp_slowtmr+0x554>
 8009c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009c1c:	6912      	ldr	r2, [r2, #16]
 8009c1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c20:	4610      	mov	r0, r2
 8009c22:	4798      	blx	r3
 8009c24:	4603      	mov	r3, r0
 8009c26:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8009c2a:	e002      	b.n	8009c32 <tcp_slowtmr+0x55a>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8009c32:	4b13      	ldr	r3, [pc, #76]	@ (8009c80 <tcp_slowtmr+0x5a8>)
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f ad60 	bne.w	80096fc <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8009c3c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <tcp_slowtmr+0x572>
          tcp_output(prev);
 8009c44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009c46:	f004 f8cb 	bl	800dde0 <tcp_output>
  while (pcb != NULL) {
 8009c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f47f ad5c 	bne.w	800970a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8009c56:	4b0b      	ldr	r3, [pc, #44]	@ (8009c84 <tcp_slowtmr+0x5ac>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009c5c:	e067      	b.n	8009d2e <tcp_slowtmr+0x656>
 8009c5e:	bf00      	nop
 8009c60:	20004330 	.word	0x20004330
 8009c64:	10624dd3 	.word	0x10624dd3
 8009c68:	000124f8 	.word	0x000124f8
 8009c6c:	2000433c 	.word	0x2000433c
 8009c70:	08015f20 	.word	0x08015f20
 8009c74:	08016358 	.word	0x08016358
 8009c78:	08015f64 	.word	0x08015f64
 8009c7c:	08016384 	.word	0x08016384
 8009c80:	20004344 	.word	0x20004344
 8009c84:	20004340 	.word	0x20004340
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c8a:	7d1b      	ldrb	r3, [r3, #20]
 8009c8c:	2b0a      	cmp	r3, #10
 8009c8e:	d006      	beq.n	8009c9e <tcp_slowtmr+0x5c6>
 8009c90:	4b2b      	ldr	r3, [pc, #172]	@ (8009d40 <tcp_slowtmr+0x668>)
 8009c92:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8009c96:	492b      	ldr	r1, [pc, #172]	@ (8009d44 <tcp_slowtmr+0x66c>)
 8009c98:	482b      	ldr	r0, [pc, #172]	@ (8009d48 <tcp_slowtmr+0x670>)
 8009c9a:	f00a fa41 	bl	8014120 <iprintf>
    pcb_remove = 0;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009ca4:	4b29      	ldr	r3, [pc, #164]	@ (8009d4c <tcp_slowtmr+0x674>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	2bf0      	cmp	r3, #240	@ 0xf0
 8009cb0:	d904      	bls.n	8009cbc <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8009cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8009cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d02f      	beq.n	8009d24 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8009cc4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009cc6:	f000 fc11 	bl	800a4ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d010      	beq.n	8009cf2 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009cd0:	4b1f      	ldr	r3, [pc, #124]	@ (8009d50 <tcp_slowtmr+0x678>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d106      	bne.n	8009ce8 <tcp_slowtmr+0x610>
 8009cda:	4b19      	ldr	r3, [pc, #100]	@ (8009d40 <tcp_slowtmr+0x668>)
 8009cdc:	f240 52af 	movw	r2, #1455	@ 0x5af
 8009ce0:	491c      	ldr	r1, [pc, #112]	@ (8009d54 <tcp_slowtmr+0x67c>)
 8009ce2:	4819      	ldr	r0, [pc, #100]	@ (8009d48 <tcp_slowtmr+0x670>)
 8009ce4:	f00a fa1c 	bl	8014120 <iprintf>
        prev->next = pcb->next;
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	68da      	ldr	r2, [r3, #12]
 8009cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cee:	60da      	str	r2, [r3, #12]
 8009cf0:	e00f      	b.n	8009d12 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009cf2:	4b17      	ldr	r3, [pc, #92]	@ (8009d50 <tcp_slowtmr+0x678>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d006      	beq.n	8009d0a <tcp_slowtmr+0x632>
 8009cfc:	4b10      	ldr	r3, [pc, #64]	@ (8009d40 <tcp_slowtmr+0x668>)
 8009cfe:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8009d02:	4915      	ldr	r1, [pc, #84]	@ (8009d58 <tcp_slowtmr+0x680>)
 8009d04:	4810      	ldr	r0, [pc, #64]	@ (8009d48 <tcp_slowtmr+0x670>)
 8009d06:	f00a fa0b 	bl	8014120 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	4a10      	ldr	r2, [pc, #64]	@ (8009d50 <tcp_slowtmr+0x678>)
 8009d10:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8009d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d14:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8009d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8009d1c:	69f8      	ldr	r0, [r7, #28]
 8009d1e:	f7fe ff83 	bl	8008c28 <tcp_free>
 8009d22:	e004      	b.n	8009d2e <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8009d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8009d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8009d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1a9      	bne.n	8009c88 <tcp_slowtmr+0x5b0>
    }
  }
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	3730      	adds	r7, #48	@ 0x30
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bdb0      	pop	{r4, r5, r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	08015f20 	.word	0x08015f20
 8009d44:	080163b0 	.word	0x080163b0
 8009d48:	08015f64 	.word	0x08015f64
 8009d4c:	20004330 	.word	0x20004330
 8009d50:	20004340 	.word	0x20004340
 8009d54:	080163e0 	.word	0x080163e0
 8009d58:	08016408 	.word	0x08016408

08009d5c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8009d62:	4b2d      	ldr	r3, [pc, #180]	@ (8009e18 <tcp_fasttmr+0xbc>)
 8009d64:	781b      	ldrb	r3, [r3, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	4b2b      	ldr	r3, [pc, #172]	@ (8009e18 <tcp_fasttmr+0xbc>)
 8009d6c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8009d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8009e1c <tcp_fasttmr+0xc0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8009d74:	e048      	b.n	8009e08 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	7f9a      	ldrb	r2, [r3, #30]
 8009d7a:	4b27      	ldr	r3, [pc, #156]	@ (8009e18 <tcp_fasttmr+0xbc>)
 8009d7c:	781b      	ldrb	r3, [r3, #0]
 8009d7e:	429a      	cmp	r2, r3
 8009d80:	d03f      	beq.n	8009e02 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8009d82:	4b25      	ldr	r3, [pc, #148]	@ (8009e18 <tcp_fasttmr+0xbc>)
 8009d84:	781a      	ldrb	r2, [r3, #0]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	8b5b      	ldrh	r3, [r3, #26]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d010      	beq.n	8009db8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	8b5b      	ldrh	r3, [r3, #26]
 8009d9a:	f043 0302 	orr.w	r3, r3, #2
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f004 f81b 	bl	800dde0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	8b5b      	ldrh	r3, [r3, #26]
 8009dae:	f023 0303 	bic.w	r3, r3, #3
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	8b5b      	ldrh	r3, [r3, #26]
 8009dbc:	f003 0308 	and.w	r3, r3, #8
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d009      	beq.n	8009dd8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	8b5b      	ldrh	r3, [r3, #26]
 8009dc8:	f023 0308 	bic.w	r3, r3, #8
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7ff f8bc 	bl	8008f50 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8009de6:	4b0e      	ldr	r3, [pc, #56]	@ (8009e20 <tcp_fasttmr+0xc4>)
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f819 	bl	8009e24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009df2:	4b0b      	ldr	r3, [pc, #44]	@ (8009e20 <tcp_fasttmr+0xc4>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d000      	beq.n	8009dfc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8009dfa:	e7b8      	b.n	8009d6e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	607b      	str	r3, [r7, #4]
 8009e00:	e002      	b.n	8009e08 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1b3      	bne.n	8009d76 <tcp_fasttmr+0x1a>
    }
  }
}
 8009e0e:	bf00      	nop
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	20004346 	.word	0x20004346
 8009e1c:	2000433c 	.word	0x2000433c
 8009e20:	20004344 	.word	0x20004344

08009e24 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8009e24:	b590      	push	{r4, r7, lr}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d109      	bne.n	8009e46 <tcp_process_refused_data+0x22>
 8009e32:	4b37      	ldr	r3, [pc, #220]	@ (8009f10 <tcp_process_refused_data+0xec>)
 8009e34:	f240 6209 	movw	r2, #1545	@ 0x609
 8009e38:	4936      	ldr	r1, [pc, #216]	@ (8009f14 <tcp_process_refused_data+0xf0>)
 8009e3a:	4837      	ldr	r0, [pc, #220]	@ (8009f18 <tcp_process_refused_data+0xf4>)
 8009e3c:	f00a f970 	bl	8014120 <iprintf>
 8009e40:	f06f 030f 	mvn.w	r3, #15
 8009e44:	e060      	b.n	8009f08 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e4a:	7b5b      	ldrb	r3, [r3, #13]
 8009e4c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e52:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <tcp_process_refused_data+0x58>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6918      	ldr	r0, [r3, #16]
 8009e6e:	2300      	movs	r3, #0
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	6879      	ldr	r1, [r7, #4]
 8009e74:	47a0      	blx	r4
 8009e76:	4603      	mov	r3, r0
 8009e78:	73fb      	strb	r3, [r7, #15]
 8009e7a:	e007      	b.n	8009e8c <tcp_process_refused_data+0x68>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	68ba      	ldr	r2, [r7, #8]
 8009e80:	6879      	ldr	r1, [r7, #4]
 8009e82:	2000      	movs	r0, #0
 8009e84:	f000 f8c2 	bl	800a00c <tcp_recv_null>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8009e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d12a      	bne.n	8009eea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	f003 0320 	and.w	r3, r3, #32
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d033      	beq.n	8009f06 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ea2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8009ea6:	d005      	beq.n	8009eb4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009eac:	3301      	adds	r3, #1
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d00b      	beq.n	8009ed6 <tcp_process_refused_data+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6918      	ldr	r0, [r3, #16]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	2200      	movs	r2, #0
 8009ecc:	6879      	ldr	r1, [r7, #4]
 8009ece:	47a0      	blx	r4
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	73fb      	strb	r3, [r7, #15]
 8009ed4:	e001      	b.n	8009eda <tcp_process_refused_data+0xb6>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8009eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ede:	f113 0f0d 	cmn.w	r3, #13
 8009ee2:	d110      	bne.n	8009f06 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8009ee4:	f06f 030c 	mvn.w	r3, #12
 8009ee8:	e00e      	b.n	8009f08 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8009eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009eee:	f113 0f0d 	cmn.w	r3, #13
 8009ef2:	d102      	bne.n	8009efa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8009ef4:	f06f 030c 	mvn.w	r3, #12
 8009ef8:	e006      	b.n	8009f08 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68ba      	ldr	r2, [r7, #8]
 8009efe:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8009f00:	f06f 0304 	mvn.w	r3, #4
 8009f04:	e000      	b.n	8009f08 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3714      	adds	r7, #20
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd90      	pop	{r4, r7, pc}
 8009f10:	08015f20 	.word	0x08015f20
 8009f14:	08016430 	.word	0x08016430
 8009f18:	08015f64 	.word	0x08015f64

08009f1c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8009f24:	e007      	b.n	8009f36 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f000 f80a 	bl	8009f46 <tcp_seg_free>
    seg = next;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d1f4      	bne.n	8009f26 <tcp_segs_free+0xa>
  }
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00c      	beq.n	8009f6e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	685b      	ldr	r3, [r3, #4]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d004      	beq.n	8009f66 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	4618      	mov	r0, r3
 8009f62:	f7fe fa57 	bl	8008414 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	2003      	movs	r0, #3
 8009f6a:	f7fd fbd1 	bl	8007710 <memp_free>
  }
}
 8009f6e:	bf00      	nop
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
	...

08009f78 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	460b      	mov	r3, r1
 8009f82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d107      	bne.n	8009f9a <tcp_setprio+0x22>
 8009f8a:	4b07      	ldr	r3, [pc, #28]	@ (8009fa8 <tcp_setprio+0x30>)
 8009f8c:	f44f 62ce 	mov.w	r2, #1648	@ 0x670
 8009f90:	4906      	ldr	r1, [pc, #24]	@ (8009fac <tcp_setprio+0x34>)
 8009f92:	4807      	ldr	r0, [pc, #28]	@ (8009fb0 <tcp_setprio+0x38>)
 8009f94:	f00a f8c4 	bl	8014120 <iprintf>
 8009f98:	e002      	b.n	8009fa0 <tcp_setprio+0x28>

  pcb->prio = prio;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	78fa      	ldrb	r2, [r7, #3]
 8009f9e:	755a      	strb	r2, [r3, #21]
}
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	08015f20 	.word	0x08015f20
 8009fac:	08016458 	.word	0x08016458
 8009fb0:	08015f64 	.word	0x08015f64

08009fb4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d106      	bne.n	8009fd0 <tcp_seg_copy+0x1c>
 8009fc2:	4b0f      	ldr	r3, [pc, #60]	@ (800a000 <tcp_seg_copy+0x4c>)
 8009fc4:	f240 6282 	movw	r2, #1666	@ 0x682
 8009fc8:	490e      	ldr	r1, [pc, #56]	@ (800a004 <tcp_seg_copy+0x50>)
 8009fca:	480f      	ldr	r0, [pc, #60]	@ (800a008 <tcp_seg_copy+0x54>)
 8009fcc:	f00a f8a8 	bl	8014120 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8009fd0:	2003      	movs	r0, #3
 8009fd2:	f7fd fb51 	bl	8007678 <memp_malloc>
 8009fd6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d101      	bne.n	8009fe2 <tcp_seg_copy+0x2e>
    return NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	e00a      	b.n	8009ff8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8009fe2:	2210      	movs	r2, #16
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f00a f9af 	bl	801434a <memcpy>
  pbuf_ref(cseg->p);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fe faaf 	bl	8008554 <pbuf_ref>
  return cseg;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3710      	adds	r7, #16
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bd80      	pop	{r7, pc}
 800a000:	08015f20 	.word	0x08015f20
 800a004:	08016474 	.word	0x08016474
 800a008:	08015f64 	.word	0x08015f64

0800a00c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d109      	bne.n	800a034 <tcp_recv_null+0x28>
 800a020:	4b12      	ldr	r3, [pc, #72]	@ (800a06c <tcp_recv_null+0x60>)
 800a022:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800a026:	4912      	ldr	r1, [pc, #72]	@ (800a070 <tcp_recv_null+0x64>)
 800a028:	4812      	ldr	r0, [pc, #72]	@ (800a074 <tcp_recv_null+0x68>)
 800a02a:	f00a f879 	bl	8014120 <iprintf>
 800a02e:	f06f 030f 	mvn.w	r3, #15
 800a032:	e016      	b.n	800a062 <tcp_recv_null+0x56>

  if (p != NULL) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d009      	beq.n	800a04e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	891b      	ldrh	r3, [r3, #8]
 800a03e:	4619      	mov	r1, r3
 800a040:	68b8      	ldr	r0, [r7, #8]
 800a042:	f7ff fab3 	bl	80095ac <tcp_recved>
    pbuf_free(p);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fe f9e4 	bl	8008414 <pbuf_free>
 800a04c:	e008      	b.n	800a060 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800a04e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d104      	bne.n	800a060 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800a056:	68b8      	ldr	r0, [r7, #8]
 800a058:	f7fe ffe4 	bl	8009024 <tcp_close>
 800a05c:	4603      	mov	r3, r0
 800a05e:	e000      	b.n	800a062 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	08015f20 	.word	0x08015f20
 800a070:	08016490 	.word	0x08016490
 800a074:	08015f64 	.word	0x08015f64

0800a078 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800a082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a086:	2b00      	cmp	r3, #0
 800a088:	db01      	blt.n	800a08e <tcp_kill_prio+0x16>
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	e000      	b.n	800a090 <tcp_kill_prio+0x18>
 800a08e:	237f      	movs	r3, #127	@ 0x7f
 800a090:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800a092:	7afb      	ldrb	r3, [r7, #11]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d034      	beq.n	800a102 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800a098:	7afb      	ldrb	r3, [r7, #11]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0a6:	4b19      	ldr	r3, [pc, #100]	@ (800a10c <tcp_kill_prio+0x94>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	617b      	str	r3, [r7, #20]
 800a0ac:	e01f      	b.n	800a0ee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	7d5b      	ldrb	r3, [r3, #21]
 800a0b2:	7afa      	ldrb	r2, [r7, #11]
 800a0b4:	429a      	cmp	r2, r3
 800a0b6:	d80c      	bhi.n	800a0d2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800a0bc:	7afa      	ldrb	r2, [r7, #11]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d112      	bne.n	800a0e8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800a0c2:	4b13      	ldr	r3, [pc, #76]	@ (800a110 <tcp_kill_prio+0x98>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	697b      	ldr	r3, [r7, #20]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	68fa      	ldr	r2, [r7, #12]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d80a      	bhi.n	800a0e8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800a0d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a110 <tcp_kill_prio+0x98>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	6a1b      	ldr	r3, [r3, #32]
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	7d5b      	ldrb	r3, [r3, #21]
 800a0e6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1dc      	bne.n	800a0ae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d004      	beq.n	800a104 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a0fa:	6938      	ldr	r0, [r7, #16]
 800a0fc:	f7ff f87c 	bl	80091f8 <tcp_abort>
 800a100:	e000      	b.n	800a104 <tcp_kill_prio+0x8c>
    return;
 800a102:	bf00      	nop
  }
}
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	2000433c 	.word	0x2000433c
 800a110:	20004330 	.word	0x20004330

0800a114 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800a11e:	79fb      	ldrb	r3, [r7, #7]
 800a120:	2b08      	cmp	r3, #8
 800a122:	d009      	beq.n	800a138 <tcp_kill_state+0x24>
 800a124:	79fb      	ldrb	r3, [r7, #7]
 800a126:	2b09      	cmp	r3, #9
 800a128:	d006      	beq.n	800a138 <tcp_kill_state+0x24>
 800a12a:	4b1a      	ldr	r3, [pc, #104]	@ (800a194 <tcp_kill_state+0x80>)
 800a12c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800a130:	4919      	ldr	r1, [pc, #100]	@ (800a198 <tcp_kill_state+0x84>)
 800a132:	481a      	ldr	r0, [pc, #104]	@ (800a19c <tcp_kill_state+0x88>)
 800a134:	f009 fff4 	bl	8014120 <iprintf>

  inactivity = 0;
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a140:	4b17      	ldr	r3, [pc, #92]	@ (800a1a0 <tcp_kill_state+0x8c>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e017      	b.n	800a178 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800a148:	697b      	ldr	r3, [r7, #20]
 800a14a:	7d1b      	ldrb	r3, [r3, #20]
 800a14c:	79fa      	ldrb	r2, [r7, #7]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d10f      	bne.n	800a172 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a152:	4b14      	ldr	r3, [pc, #80]	@ (800a1a4 <tcp_kill_state+0x90>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	6a1b      	ldr	r3, [r3, #32]
 800a15a:	1ad3      	subs	r3, r2, r3
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	429a      	cmp	r2, r3
 800a160:	d807      	bhi.n	800a172 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800a162:	4b10      	ldr	r3, [pc, #64]	@ (800a1a4 <tcp_kill_state+0x90>)
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	6a1b      	ldr	r3, [r3, #32]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	617b      	str	r3, [r7, #20]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e4      	bne.n	800a148 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d003      	beq.n	800a18c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800a184:	2100      	movs	r1, #0
 800a186:	6938      	ldr	r0, [r7, #16]
 800a188:	f7fe ff78 	bl	800907c <tcp_abandon>
  }
}
 800a18c:	bf00      	nop
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	08015f20 	.word	0x08015f20
 800a198:	080164ac 	.word	0x080164ac
 800a19c:	08015f64 	.word	0x08015f64
 800a1a0:	2000433c 	.word	0x2000433c
 800a1a4:	20004330 	.word	0x20004330

0800a1a8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b084      	sub	sp, #16
 800a1ac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1b6:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <tcp_kill_timewait+0x58>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e012      	b.n	800a1e4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800a1be:	4b11      	ldr	r3, [pc, #68]	@ (800a204 <tcp_kill_timewait+0x5c>)
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	6a1b      	ldr	r3, [r3, #32]
 800a1c6:	1ad3      	subs	r3, r2, r3
 800a1c8:	687a      	ldr	r2, [r7, #4]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d807      	bhi.n	800a1de <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800a1ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a204 <tcp_kill_timewait+0x5c>)
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	60fb      	str	r3, [r7, #12]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1e9      	bne.n	800a1be <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d002      	beq.n	800a1f6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800a1f0:	68b8      	ldr	r0, [r7, #8]
 800a1f2:	f7ff f801 	bl	80091f8 <tcp_abort>
  }
}
 800a1f6:	bf00      	nop
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20004340 	.word	0x20004340
 800a204:	20004330 	.word	0x20004330

0800a208 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800a20e:	4b10      	ldr	r3, [pc, #64]	@ (800a250 <tcp_handle_closepend+0x48>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800a214:	e014      	b.n	800a240 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	8b5b      	ldrh	r3, [r3, #26]
 800a220:	f003 0308 	and.w	r3, r3, #8
 800a224:	2b00      	cmp	r3, #0
 800a226:	d009      	beq.n	800a23c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	8b5b      	ldrh	r3, [r3, #26]
 800a22c:	f023 0308 	bic.w	r3, r3, #8
 800a230:	b29a      	uxth	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	f7fe fe8a 	bl	8008f50 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e7      	bne.n	800a216 <tcp_handle_closepend+0xe>
  }
}
 800a246:	bf00      	nop
 800a248:	bf00      	nop
 800a24a:	3708      	adds	r7, #8
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	2000433c 	.word	0x2000433c

0800a254 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b084      	sub	sp, #16
 800a258:	af00      	add	r7, sp, #0
 800a25a:	4603      	mov	r3, r0
 800a25c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a25e:	2001      	movs	r0, #1
 800a260:	f7fd fa0a 	bl	8007678 <memp_malloc>
 800a264:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d126      	bne.n	800a2ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800a26c:	f7ff ffcc 	bl	800a208 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800a270:	f7ff ff9a 	bl	800a1a8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a274:	2001      	movs	r0, #1
 800a276:	f7fd f9ff 	bl	8007678 <memp_malloc>
 800a27a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d11b      	bne.n	800a2ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800a282:	2009      	movs	r0, #9
 800a284:	f7ff ff46 	bl	800a114 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a288:	2001      	movs	r0, #1
 800a28a:	f7fd f9f5 	bl	8007678 <memp_malloc>
 800a28e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d111      	bne.n	800a2ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800a296:	2008      	movs	r0, #8
 800a298:	f7ff ff3c 	bl	800a114 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a29c:	2001      	movs	r0, #1
 800a29e:	f7fd f9eb 	bl	8007678 <memp_malloc>
 800a2a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d107      	bne.n	800a2ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800a2aa:	79fb      	ldrb	r3, [r7, #7]
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7ff fee3 	bl	800a078 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800a2b2:	2001      	movs	r0, #1
 800a2b4:	f7fd f9e0 	bl	8007678 <memp_malloc>
 800a2b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d03f      	beq.n	800a340 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800a2c0:	229c      	movs	r2, #156	@ 0x9c
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f009 ffca 	bl	801425e <memset>
    pcb->prio = prio;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	79fa      	ldrb	r2, [r7, #7]
 800a2ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a2d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800a2e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	22ff      	movs	r2, #255	@ 0xff
 800a2ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800a2f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2206      	movs	r2, #6
 800a2fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2206      	movs	r2, #6
 800a304:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a30c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	2201      	movs	r2, #1
 800a312:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800a316:	4b0d      	ldr	r3, [pc, #52]	@ (800a34c <tcp_alloc+0xf8>)
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800a31e:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <tcp_alloc+0xfc>)
 800a320:	781a      	ldrb	r2, [r3, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800a32c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4a08      	ldr	r2, [pc, #32]	@ (800a354 <tcp_alloc+0x100>)
 800a334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	4a07      	ldr	r2, [pc, #28]	@ (800a358 <tcp_alloc+0x104>)
 800a33c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800a340:	68fb      	ldr	r3, [r7, #12]
}
 800a342:	4618      	mov	r0, r3
 800a344:	3710      	adds	r7, #16
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20004330 	.word	0x20004330
 800a350:	20004346 	.word	0x20004346
 800a354:	0800a00d 	.word	0x0800a00d
 800a358:	006ddd00 	.word	0x006ddd00

0800a35c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800a360:	2040      	movs	r0, #64	@ 0x40
 800a362:	f7ff ff77 	bl	800a254 <tcp_alloc>
 800a366:	4603      	mov	r3, r0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d002      	beq.n	800a382 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	611a      	str	r2, [r3, #16]
  }
}
 800a382:	bf00      	nop
 800a384:	370c      	adds	r7, #12
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
	...

0800a390 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800a390:	b580      	push	{r7, lr}
 800a392:	b082      	sub	sp, #8
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00e      	beq.n	800a3be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	7d1b      	ldrb	r3, [r3, #20]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d106      	bne.n	800a3b6 <tcp_recv+0x26>
 800a3a8:	4b07      	ldr	r3, [pc, #28]	@ (800a3c8 <tcp_recv+0x38>)
 800a3aa:	f240 72df 	movw	r2, #2015	@ 0x7df
 800a3ae:	4907      	ldr	r1, [pc, #28]	@ (800a3cc <tcp_recv+0x3c>)
 800a3b0:	4807      	ldr	r0, [pc, #28]	@ (800a3d0 <tcp_recv+0x40>)
 800a3b2:	f009 feb5 	bl	8014120 <iprintf>
    pcb->recv = recv;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800a3be:	bf00      	nop
 800a3c0:	3708      	adds	r7, #8
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	08015f20 	.word	0x08015f20
 800a3cc:	080164bc 	.word	0x080164bc
 800a3d0:	08015f64 	.word	0x08015f64

0800a3d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00e      	beq.n	800a402 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	7d1b      	ldrb	r3, [r3, #20]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d106      	bne.n	800a3fa <tcp_sent+0x26>
 800a3ec:	4b07      	ldr	r3, [pc, #28]	@ (800a40c <tcp_sent+0x38>)
 800a3ee:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800a3f2:	4907      	ldr	r1, [pc, #28]	@ (800a410 <tcp_sent+0x3c>)
 800a3f4:	4807      	ldr	r0, [pc, #28]	@ (800a414 <tcp_sent+0x40>)
 800a3f6:	f009 fe93 	bl	8014120 <iprintf>
    pcb->sent = sent;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	683a      	ldr	r2, [r7, #0]
 800a3fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800a402:	bf00      	nop
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	08015f20 	.word	0x08015f20
 800a410:	080164e4 	.word	0x080164e4
 800a414:	08015f64 	.word	0x08015f64

0800a418 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00e      	beq.n	800a446 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	7d1b      	ldrb	r3, [r3, #20]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d106      	bne.n	800a43e <tcp_err+0x26>
 800a430:	4b07      	ldr	r3, [pc, #28]	@ (800a450 <tcp_err+0x38>)
 800a432:	f640 020d 	movw	r2, #2061	@ 0x80d
 800a436:	4907      	ldr	r1, [pc, #28]	@ (800a454 <tcp_err+0x3c>)
 800a438:	4807      	ldr	r0, [pc, #28]	@ (800a458 <tcp_err+0x40>)
 800a43a:	f009 fe71 	bl	8014120 <iprintf>
    pcb->errf = err;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800a446:	bf00      	nop
 800a448:	3708      	adds	r7, #8
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	08015f20 	.word	0x08015f20
 800a454:	0801650c 	.word	0x0801650c
 800a458:	08015f64 	.word	0x08015f64

0800a45c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d008      	beq.n	800a47e <tcp_accept+0x22>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	7d1b      	ldrb	r3, [r3, #20]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d104      	bne.n	800a47e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	683a      	ldr	r2, [r7, #0]
 800a47c:	619a      	str	r2, [r3, #24]
  }
}
 800a47e:	bf00      	nop
 800a480:	3714      	adds	r7, #20
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
	...

0800a48c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af00      	add	r7, sp, #0
 800a492:	60f8      	str	r0, [r7, #12]
 800a494:	60b9      	str	r1, [r7, #8]
 800a496:	4613      	mov	r3, r2
 800a498:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d107      	bne.n	800a4b0 <tcp_poll+0x24>
 800a4a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a4dc <tcp_poll+0x50>)
 800a4a2:	f640 023d 	movw	r2, #2109	@ 0x83d
 800a4a6:	490e      	ldr	r1, [pc, #56]	@ (800a4e0 <tcp_poll+0x54>)
 800a4a8:	480e      	ldr	r0, [pc, #56]	@ (800a4e4 <tcp_poll+0x58>)
 800a4aa:	f009 fe39 	bl	8014120 <iprintf>
 800a4ae:	e011      	b.n	800a4d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	7d1b      	ldrb	r3, [r3, #20]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d106      	bne.n	800a4c6 <tcp_poll+0x3a>
 800a4b8:	4b08      	ldr	r3, [pc, #32]	@ (800a4dc <tcp_poll+0x50>)
 800a4ba:	f640 023e 	movw	r2, #2110	@ 0x83e
 800a4be:	490a      	ldr	r1, [pc, #40]	@ (800a4e8 <tcp_poll+0x5c>)
 800a4c0:	4808      	ldr	r0, [pc, #32]	@ (800a4e4 <tcp_poll+0x58>)
 800a4c2:	f009 fe2d 	bl	8014120 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	79fa      	ldrb	r2, [r7, #7]
 800a4d2:	775a      	strb	r2, [r3, #29]
}
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	bf00      	nop
 800a4dc:	08015f20 	.word	0x08015f20
 800a4e0:	08016534 	.word	0x08016534
 800a4e4:	08015f64 	.word	0x08015f64
 800a4e8:	0801654c 	.word	0x0801654c

0800a4ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d107      	bne.n	800a50a <tcp_pcb_purge+0x1e>
 800a4fa:	4b21      	ldr	r3, [pc, #132]	@ (800a580 <tcp_pcb_purge+0x94>)
 800a4fc:	f640 0251 	movw	r2, #2129	@ 0x851
 800a500:	4920      	ldr	r1, [pc, #128]	@ (800a584 <tcp_pcb_purge+0x98>)
 800a502:	4821      	ldr	r0, [pc, #132]	@ (800a588 <tcp_pcb_purge+0x9c>)
 800a504:	f009 fe0c 	bl	8014120 <iprintf>
 800a508:	e037      	b.n	800a57a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	7d1b      	ldrb	r3, [r3, #20]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d033      	beq.n	800a57a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800a516:	2b0a      	cmp	r3, #10
 800a518:	d02f      	beq.n	800a57a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d02b      	beq.n	800a57a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a526:	2b00      	cmp	r3, #0
 800a528:	d007      	beq.n	800a53a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a52e:	4618      	mov	r0, r3
 800a530:	f7fd ff70 	bl	8008414 <pbuf_free>
      pcb->refused_data = NULL;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2200      	movs	r2, #0
 800a538:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d002      	beq.n	800a548 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f000 f986 	bl	800a854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a54e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a554:	4618      	mov	r0, r3
 800a556:	f7ff fce1 	bl	8009f1c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff fcdc 	bl	8009f1c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2200      	movs	r2, #0
 800a568:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2200      	movs	r2, #0
 800a576:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800a57a:	3708      	adds	r7, #8
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	08015f20 	.word	0x08015f20
 800a584:	0801656c 	.word	0x0801656c
 800a588:	08015f64 	.word	0x08015f64

0800a58c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d106      	bne.n	800a5aa <tcp_pcb_remove+0x1e>
 800a59c:	4b3e      	ldr	r3, [pc, #248]	@ (800a698 <tcp_pcb_remove+0x10c>)
 800a59e:	f640 0283 	movw	r2, #2179	@ 0x883
 800a5a2:	493e      	ldr	r1, [pc, #248]	@ (800a69c <tcp_pcb_remove+0x110>)
 800a5a4:	483e      	ldr	r0, [pc, #248]	@ (800a6a0 <tcp_pcb_remove+0x114>)
 800a5a6:	f009 fdbb 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <tcp_pcb_remove+0x32>
 800a5b0:	4b39      	ldr	r3, [pc, #228]	@ (800a698 <tcp_pcb_remove+0x10c>)
 800a5b2:	f640 0284 	movw	r2, #2180	@ 0x884
 800a5b6:	493b      	ldr	r1, [pc, #236]	@ (800a6a4 <tcp_pcb_remove+0x118>)
 800a5b8:	4839      	ldr	r0, [pc, #228]	@ (800a6a0 <tcp_pcb_remove+0x114>)
 800a5ba:	f009 fdb1 	bl	8014120 <iprintf>

  TCP_RMV(pcblist, pcb);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	683a      	ldr	r2, [r7, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d105      	bne.n	800a5d4 <tcp_pcb_remove+0x48>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	601a      	str	r2, [r3, #0]
 800a5d2:	e013      	b.n	800a5fc <tcp_pcb_remove+0x70>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	60fb      	str	r3, [r7, #12]
 800a5da:	e00c      	b.n	800a5f6 <tcp_pcb_remove+0x6a>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	68db      	ldr	r3, [r3, #12]
 800a5e0:	683a      	ldr	r2, [r7, #0]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d104      	bne.n	800a5f0 <tcp_pcb_remove+0x64>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68da      	ldr	r2, [r3, #12]
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	60da      	str	r2, [r3, #12]
 800a5ee:	e005      	b.n	800a5fc <tcp_pcb_remove+0x70>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d1ef      	bne.n	800a5dc <tcp_pcb_remove+0x50>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2200      	movs	r2, #0
 800a600:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800a602:	6838      	ldr	r0, [r7, #0]
 800a604:	f7ff ff72 	bl	800a4ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	7d1b      	ldrb	r3, [r3, #20]
 800a60c:	2b0a      	cmp	r3, #10
 800a60e:	d013      	beq.n	800a638 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800a614:	2b01      	cmp	r3, #1
 800a616:	d00f      	beq.n	800a638 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	8b5b      	ldrh	r3, [r3, #26]
 800a61c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800a620:	2b00      	cmp	r3, #0
 800a622:	d009      	beq.n	800a638 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	8b5b      	ldrh	r3, [r3, #26]
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	b29a      	uxth	r2, r3
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a632:	6838      	ldr	r0, [r7, #0]
 800a634:	f003 fbd4 	bl	800dde0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	7d1b      	ldrb	r3, [r3, #20]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d020      	beq.n	800a682 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a644:	2b00      	cmp	r3, #0
 800a646:	d006      	beq.n	800a656 <tcp_pcb_remove+0xca>
 800a648:	4b13      	ldr	r3, [pc, #76]	@ (800a698 <tcp_pcb_remove+0x10c>)
 800a64a:	f640 0293 	movw	r2, #2195	@ 0x893
 800a64e:	4916      	ldr	r1, [pc, #88]	@ (800a6a8 <tcp_pcb_remove+0x11c>)
 800a650:	4813      	ldr	r0, [pc, #76]	@ (800a6a0 <tcp_pcb_remove+0x114>)
 800a652:	f009 fd65 	bl	8014120 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d006      	beq.n	800a66c <tcp_pcb_remove+0xe0>
 800a65e:	4b0e      	ldr	r3, [pc, #56]	@ (800a698 <tcp_pcb_remove+0x10c>)
 800a660:	f640 0294 	movw	r2, #2196	@ 0x894
 800a664:	4911      	ldr	r1, [pc, #68]	@ (800a6ac <tcp_pcb_remove+0x120>)
 800a666:	480e      	ldr	r0, [pc, #56]	@ (800a6a0 <tcp_pcb_remove+0x114>)
 800a668:	f009 fd5a 	bl	8014120 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a670:	2b00      	cmp	r3, #0
 800a672:	d006      	beq.n	800a682 <tcp_pcb_remove+0xf6>
 800a674:	4b08      	ldr	r3, [pc, #32]	@ (800a698 <tcp_pcb_remove+0x10c>)
 800a676:	f640 0296 	movw	r2, #2198	@ 0x896
 800a67a:	490d      	ldr	r1, [pc, #52]	@ (800a6b0 <tcp_pcb_remove+0x124>)
 800a67c:	4808      	ldr	r0, [pc, #32]	@ (800a6a0 <tcp_pcb_remove+0x114>)
 800a67e:	f009 fd4f 	bl	8014120 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	2200      	movs	r2, #0
 800a686:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2200      	movs	r2, #0
 800a68c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800a68e:	bf00      	nop
 800a690:	3710      	adds	r7, #16
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	08015f20 	.word	0x08015f20
 800a69c:	08016588 	.word	0x08016588
 800a6a0:	08015f64 	.word	0x08015f64
 800a6a4:	080165a4 	.word	0x080165a4
 800a6a8:	080165c4 	.word	0x080165c4
 800a6ac:	080165dc 	.word	0x080165dc
 800a6b0:	080165f8 	.word	0x080165f8

0800a6b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d106      	bne.n	800a6d0 <tcp_next_iss+0x1c>
 800a6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ec <tcp_next_iss+0x38>)
 800a6c4:	f640 02af 	movw	r2, #2223	@ 0x8af
 800a6c8:	4909      	ldr	r1, [pc, #36]	@ (800a6f0 <tcp_next_iss+0x3c>)
 800a6ca:	480a      	ldr	r0, [pc, #40]	@ (800a6f4 <tcp_next_iss+0x40>)
 800a6cc:	f009 fd28 	bl	8014120 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800a6d0:	4b09      	ldr	r3, [pc, #36]	@ (800a6f8 <tcp_next_iss+0x44>)
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	4b09      	ldr	r3, [pc, #36]	@ (800a6fc <tcp_next_iss+0x48>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4413      	add	r3, r2
 800a6da:	4a07      	ldr	r2, [pc, #28]	@ (800a6f8 <tcp_next_iss+0x44>)
 800a6dc:	6013      	str	r3, [r2, #0]
  return iss;
 800a6de:	4b06      	ldr	r3, [pc, #24]	@ (800a6f8 <tcp_next_iss+0x44>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	08015f20 	.word	0x08015f20
 800a6f0:	08016610 	.word	0x08016610
 800a6f4:	08015f64 	.word	0x08015f64
 800a6f8:	2000000c 	.word	0x2000000c
 800a6fc:	20004330 	.word	0x20004330

0800a700 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b086      	sub	sp, #24
 800a704:	af00      	add	r7, sp, #0
 800a706:	4603      	mov	r3, r0
 800a708:	60b9      	str	r1, [r7, #8]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <tcp_eff_send_mss_netif+0x22>
 800a714:	4b14      	ldr	r3, [pc, #80]	@ (800a768 <tcp_eff_send_mss_netif+0x68>)
 800a716:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800a71a:	4914      	ldr	r1, [pc, #80]	@ (800a76c <tcp_eff_send_mss_netif+0x6c>)
 800a71c:	4814      	ldr	r0, [pc, #80]	@ (800a770 <tcp_eff_send_mss_netif+0x70>)
 800a71e:	f009 fcff 	bl	8014120 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d101      	bne.n	800a72c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800a728:	89fb      	ldrh	r3, [r7, #14]
 800a72a:	e019      	b.n	800a760 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a730:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800a732:	8afb      	ldrh	r3, [r7, #22]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d012      	beq.n	800a75e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800a738:	2328      	movs	r3, #40	@ 0x28
 800a73a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800a73c:	8afa      	ldrh	r2, [r7, #22]
 800a73e:	8abb      	ldrh	r3, [r7, #20]
 800a740:	429a      	cmp	r2, r3
 800a742:	d904      	bls.n	800a74e <tcp_eff_send_mss_netif+0x4e>
 800a744:	8afa      	ldrh	r2, [r7, #22]
 800a746:	8abb      	ldrh	r3, [r7, #20]
 800a748:	1ad3      	subs	r3, r2, r3
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	e000      	b.n	800a750 <tcp_eff_send_mss_netif+0x50>
 800a74e:	2300      	movs	r3, #0
 800a750:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800a752:	8a7a      	ldrh	r2, [r7, #18]
 800a754:	89fb      	ldrh	r3, [r7, #14]
 800a756:	4293      	cmp	r3, r2
 800a758:	bf28      	it	cs
 800a75a:	4613      	movcs	r3, r2
 800a75c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800a75e:	89fb      	ldrh	r3, [r7, #14]
}
 800a760:	4618      	mov	r0, r3
 800a762:	3718      	adds	r7, #24
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}
 800a768:	08015f20 	.word	0x08015f20
 800a76c:	0801662c 	.word	0x0801662c
 800a770:	08015f64 	.word	0x08015f64

0800a774 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b084      	sub	sp, #16
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d119      	bne.n	800a7bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 800a788:	4b10      	ldr	r3, [pc, #64]	@ (800a7cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800a78a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800a78e:	4910      	ldr	r1, [pc, #64]	@ (800a7d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800a790:	4810      	ldr	r0, [pc, #64]	@ (800a7d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800a792:	f009 fcc5 	bl	8014120 <iprintf>

  while (pcb != NULL) {
 800a796:	e011      	b.n	800a7bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d108      	bne.n	800a7b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7fe fd24 	bl	80091f8 <tcp_abort>
      pcb = next;
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	60fb      	str	r3, [r7, #12]
 800a7b4:	e002      	b.n	800a7bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	68db      	ldr	r3, [r3, #12]
 800a7ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1ea      	bne.n	800a798 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	08015f20 	.word	0x08015f20
 800a7d0:	08016654 	.word	0x08016654
 800a7d4:	08015f64 	.word	0x08015f64

0800a7d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d02a      	beq.n	800a83e <tcp_netif_ip_addr_changed+0x66>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d026      	beq.n	800a83e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800a7f0:	4b15      	ldr	r3, [pc, #84]	@ (800a848 <tcp_netif_ip_addr_changed+0x70>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff ffbc 	bl	800a774 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800a7fc:	4b13      	ldr	r3, [pc, #76]	@ (800a84c <tcp_netif_ip_addr_changed+0x74>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f7ff ffb6 	bl	800a774 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d017      	beq.n	800a83e <tcp_netif_ip_addr_changed+0x66>
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d013      	beq.n	800a83e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a816:	4b0e      	ldr	r3, [pc, #56]	@ (800a850 <tcp_netif_ip_addr_changed+0x78>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	60fb      	str	r3, [r7, #12]
 800a81c:	e00c      	b.n	800a838 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	429a      	cmp	r2, r3
 800a828:	d103      	bne.n	800a832 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	60fb      	str	r3, [r7, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1ef      	bne.n	800a81e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800a83e:	bf00      	nop
 800a840:	3710      	adds	r7, #16
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	2000433c 	.word	0x2000433c
 800a84c:	20004334 	.word	0x20004334
 800a850:	20004338 	.word	0x20004338

0800a854 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fb57 	bl	8009f1c <tcp_segs_free>
    pcb->ooseq = NULL;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800a874:	bf00      	nop
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}

0800a87c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800a87c:	b590      	push	{r4, r7, lr}
 800a87e:	b08d      	sub	sp, #52	@ 0x34
 800a880:	af04      	add	r7, sp, #16
 800a882:	6078      	str	r0, [r7, #4]
 800a884:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d105      	bne.n	800a898 <tcp_input+0x1c>
 800a88c:	4b8b      	ldr	r3, [pc, #556]	@ (800aabc <tcp_input+0x240>)
 800a88e:	2283      	movs	r2, #131	@ 0x83
 800a890:	498b      	ldr	r1, [pc, #556]	@ (800aac0 <tcp_input+0x244>)
 800a892:	488c      	ldr	r0, [pc, #560]	@ (800aac4 <tcp_input+0x248>)
 800a894:	f009 fc44 	bl	8014120 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	685b      	ldr	r3, [r3, #4]
 800a89c:	4a8a      	ldr	r2, [pc, #552]	@ (800aac8 <tcp_input+0x24c>)
 800a89e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	895b      	ldrh	r3, [r3, #10]
 800a8a4:	2b13      	cmp	r3, #19
 800a8a6:	f240 83e3 	bls.w	800b070 <tcp_input+0x7f4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8aa:	4b88      	ldr	r3, [pc, #544]	@ (800aacc <tcp_input+0x250>)
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	4a87      	ldr	r2, [pc, #540]	@ (800aacc <tcp_input+0x250>)
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	4611      	mov	r1, r2
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f008 fbcd 	bl	8013054 <ip4_addr_isbroadcast_u32>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	f040 83d9 	bne.w	800b074 <tcp_input+0x7f8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a8c2:	4b82      	ldr	r3, [pc, #520]	@ (800aacc <tcp_input+0x250>)
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a8ca:	2be0      	cmp	r3, #224	@ 0xe0
 800a8cc:	f000 83d2 	beq.w	800b074 <tcp_input+0x7f8>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	891a      	ldrh	r2, [r3, #8]
 800a8d4:	4b7e      	ldr	r3, [pc, #504]	@ (800aad0 <tcp_input+0x254>)
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	4b7e      	ldr	r3, [pc, #504]	@ (800aad4 <tcp_input+0x258>)
 800a8da:	2106      	movs	r1, #6
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f7fc fa2c 	bl	8006d3a <ip_chksum_pseudo>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800a8e6:	8a3b      	ldrh	r3, [r7, #16]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f040 83c5 	bne.w	800b078 <tcp_input+0x7fc>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a8ee:	4b76      	ldr	r3, [pc, #472]	@ (800aac8 <tcp_input+0x24c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	899b      	ldrh	r3, [r3, #12]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7fb fe00 	bl	80064fc <lwip_htons>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	0b1b      	lsrs	r3, r3, #12
 800a900:	b29b      	uxth	r3, r3
 800a902:	b2db      	uxtb	r3, r3
 800a904:	009b      	lsls	r3, r3, #2
 800a906:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a908:	7bfb      	ldrb	r3, [r7, #15]
 800a90a:	2b13      	cmp	r3, #19
 800a90c:	f240 83b6 	bls.w	800b07c <tcp_input+0x800>
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	b29a      	uxth	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	891b      	ldrh	r3, [r3, #8]
 800a918:	429a      	cmp	r2, r3
 800a91a:	f200 83af 	bhi.w	800b07c <tcp_input+0x800>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a91e:	7bfb      	ldrb	r3, [r7, #15]
 800a920:	b29b      	uxth	r3, r3
 800a922:	3b14      	subs	r3, #20
 800a924:	b29a      	uxth	r2, r3
 800a926:	4b6c      	ldr	r3, [pc, #432]	@ (800aad8 <tcp_input+0x25c>)
 800a928:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800a92a:	4b6c      	ldr	r3, [pc, #432]	@ (800aadc <tcp_input+0x260>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	895a      	ldrh	r2, [r3, #10]
 800a934:	7bfb      	ldrb	r3, [r7, #15]
 800a936:	b29b      	uxth	r3, r3
 800a938:	429a      	cmp	r2, r3
 800a93a:	d309      	bcc.n	800a950 <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800a93c:	4b66      	ldr	r3, [pc, #408]	@ (800aad8 <tcp_input+0x25c>)
 800a93e:	881a      	ldrh	r2, [r3, #0]
 800a940:	4b67      	ldr	r3, [pc, #412]	@ (800aae0 <tcp_input+0x264>)
 800a942:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a944:	7bfb      	ldrb	r3, [r7, #15]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7fd fcdd 	bl	8008308 <pbuf_remove_header>
 800a94e:	e04e      	b.n	800a9ee <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d105      	bne.n	800a964 <tcp_input+0xe8>
 800a958:	4b58      	ldr	r3, [pc, #352]	@ (800aabc <tcp_input+0x240>)
 800a95a:	22c2      	movs	r2, #194	@ 0xc2
 800a95c:	4961      	ldr	r1, [pc, #388]	@ (800aae4 <tcp_input+0x268>)
 800a95e:	4859      	ldr	r0, [pc, #356]	@ (800aac4 <tcp_input+0x248>)
 800a960:	f009 fbde 	bl	8014120 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800a964:	2114      	movs	r1, #20
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f7fd fcce 	bl	8008308 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	895a      	ldrh	r2, [r3, #10]
 800a970:	4b5b      	ldr	r3, [pc, #364]	@ (800aae0 <tcp_input+0x264>)
 800a972:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a974:	4b58      	ldr	r3, [pc, #352]	@ (800aad8 <tcp_input+0x25c>)
 800a976:	881a      	ldrh	r2, [r3, #0]
 800a978:	4b59      	ldr	r3, [pc, #356]	@ (800aae0 <tcp_input+0x264>)
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800a980:	4b57      	ldr	r3, [pc, #348]	@ (800aae0 <tcp_input+0x264>)
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	4619      	mov	r1, r3
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7fd fcbe 	bl	8008308 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	895b      	ldrh	r3, [r3, #10]
 800a992:	89ba      	ldrh	r2, [r7, #12]
 800a994:	429a      	cmp	r2, r3
 800a996:	f200 8373 	bhi.w	800b080 <tcp_input+0x804>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	4a4e      	ldr	r2, [pc, #312]	@ (800aadc <tcp_input+0x260>)
 800a9a2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	89ba      	ldrh	r2, [r7, #12]
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7fd fcab 	bl	8008308 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	891a      	ldrh	r2, [r3, #8]
 800a9b6:	89bb      	ldrh	r3, [r7, #12]
 800a9b8:	1ad3      	subs	r3, r2, r3
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	895b      	ldrh	r3, [r3, #10]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d005      	beq.n	800a9d4 <tcp_input+0x158>
 800a9c8:	4b3c      	ldr	r3, [pc, #240]	@ (800aabc <tcp_input+0x240>)
 800a9ca:	22df      	movs	r2, #223	@ 0xdf
 800a9cc:	4946      	ldr	r1, [pc, #280]	@ (800aae8 <tcp_input+0x26c>)
 800a9ce:	483d      	ldr	r0, [pc, #244]	@ (800aac4 <tcp_input+0x248>)
 800a9d0:	f009 fba6 	bl	8014120 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	891a      	ldrh	r2, [r3, #8]
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	891b      	ldrh	r3, [r3, #8]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d005      	beq.n	800a9ee <tcp_input+0x172>
 800a9e2:	4b36      	ldr	r3, [pc, #216]	@ (800aabc <tcp_input+0x240>)
 800a9e4:	22e0      	movs	r2, #224	@ 0xe0
 800a9e6:	4941      	ldr	r1, [pc, #260]	@ (800aaec <tcp_input+0x270>)
 800a9e8:	4836      	ldr	r0, [pc, #216]	@ (800aac4 <tcp_input+0x248>)
 800a9ea:	f009 fb99 	bl	8014120 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a9ee:	4b36      	ldr	r3, [pc, #216]	@ (800aac8 <tcp_input+0x24c>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	881b      	ldrh	r3, [r3, #0]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4a34      	ldr	r2, [pc, #208]	@ (800aac8 <tcp_input+0x24c>)
 800a9f8:	6814      	ldr	r4, [r2, #0]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7fb fd7e 	bl	80064fc <lwip_htons>
 800aa00:	4603      	mov	r3, r0
 800aa02:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aa04:	4b30      	ldr	r3, [pc, #192]	@ (800aac8 <tcp_input+0x24c>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	885b      	ldrh	r3, [r3, #2]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	4a2e      	ldr	r2, [pc, #184]	@ (800aac8 <tcp_input+0x24c>)
 800aa0e:	6814      	ldr	r4, [r2, #0]
 800aa10:	4618      	mov	r0, r3
 800aa12:	f7fb fd73 	bl	80064fc <lwip_htons>
 800aa16:	4603      	mov	r3, r0
 800aa18:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aa1a:	4b2b      	ldr	r3, [pc, #172]	@ (800aac8 <tcp_input+0x24c>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	685b      	ldr	r3, [r3, #4]
 800aa20:	4a29      	ldr	r2, [pc, #164]	@ (800aac8 <tcp_input+0x24c>)
 800aa22:	6814      	ldr	r4, [r2, #0]
 800aa24:	4618      	mov	r0, r3
 800aa26:	f7fb fd7e 	bl	8006526 <lwip_htonl>
 800aa2a:	4603      	mov	r3, r0
 800aa2c:	6063      	str	r3, [r4, #4]
 800aa2e:	6863      	ldr	r3, [r4, #4]
 800aa30:	4a2f      	ldr	r2, [pc, #188]	@ (800aaf0 <tcp_input+0x274>)
 800aa32:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aa34:	4b24      	ldr	r3, [pc, #144]	@ (800aac8 <tcp_input+0x24c>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	4a23      	ldr	r2, [pc, #140]	@ (800aac8 <tcp_input+0x24c>)
 800aa3c:	6814      	ldr	r4, [r2, #0]
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f7fb fd71 	bl	8006526 <lwip_htonl>
 800aa44:	4603      	mov	r3, r0
 800aa46:	60a3      	str	r3, [r4, #8]
 800aa48:	68a3      	ldr	r3, [r4, #8]
 800aa4a:	4a2a      	ldr	r2, [pc, #168]	@ (800aaf4 <tcp_input+0x278>)
 800aa4c:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	@ (800aac8 <tcp_input+0x24c>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	89db      	ldrh	r3, [r3, #14]
 800aa54:	b29b      	uxth	r3, r3
 800aa56:	4a1c      	ldr	r2, [pc, #112]	@ (800aac8 <tcp_input+0x24c>)
 800aa58:	6814      	ldr	r4, [r2, #0]
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fb fd4e 	bl	80064fc <lwip_htons>
 800aa60:	4603      	mov	r3, r0
 800aa62:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800aa64:	4b18      	ldr	r3, [pc, #96]	@ (800aac8 <tcp_input+0x24c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	899b      	ldrh	r3, [r3, #12]
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7fb fd45 	bl	80064fc <lwip_htons>
 800aa72:	4603      	mov	r3, r0
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	4b1e      	ldr	r3, [pc, #120]	@ (800aaf8 <tcp_input+0x27c>)
 800aa7e:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	891a      	ldrh	r2, [r3, #8]
 800aa84:	4b1d      	ldr	r3, [pc, #116]	@ (800aafc <tcp_input+0x280>)
 800aa86:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aa88:	4b1b      	ldr	r3, [pc, #108]	@ (800aaf8 <tcp_input+0x27c>)
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	f003 0303 	and.w	r3, r3, #3
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00c      	beq.n	800aaae <tcp_input+0x232>
    tcplen++;
 800aa94:	4b19      	ldr	r3, [pc, #100]	@ (800aafc <tcp_input+0x280>)
 800aa96:	881b      	ldrh	r3, [r3, #0]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	4b17      	ldr	r3, [pc, #92]	@ (800aafc <tcp_input+0x280>)
 800aa9e:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	891a      	ldrh	r2, [r3, #8]
 800aaa4:	4b15      	ldr	r3, [pc, #84]	@ (800aafc <tcp_input+0x280>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	f200 82eb 	bhi.w	800b084 <tcp_input+0x808>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800aaae:	2300      	movs	r3, #0
 800aab0:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aab2:	4b13      	ldr	r3, [pc, #76]	@ (800ab00 <tcp_input+0x284>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	61fb      	str	r3, [r7, #28]
 800aab8:	e09b      	b.n	800abf2 <tcp_input+0x376>
 800aaba:	bf00      	nop
 800aabc:	08016688 	.word	0x08016688
 800aac0:	080166bc 	.word	0x080166bc
 800aac4:	080166d4 	.word	0x080166d4
 800aac8:	20004358 	.word	0x20004358
 800aacc:	20000d90 	.word	0x20000d90
 800aad0:	20000da4 	.word	0x20000da4
 800aad4:	20000da0 	.word	0x20000da0
 800aad8:	2000435c 	.word	0x2000435c
 800aadc:	20004360 	.word	0x20004360
 800aae0:	2000435e 	.word	0x2000435e
 800aae4:	080166fc 	.word	0x080166fc
 800aae8:	0801670c 	.word	0x0801670c
 800aaec:	08016718 	.word	0x08016718
 800aaf0:	20004368 	.word	0x20004368
 800aaf4:	2000436c 	.word	0x2000436c
 800aaf8:	20004374 	.word	0x20004374
 800aafc:	20004372 	.word	0x20004372
 800ab00:	2000433c 	.word	0x2000433c
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	7d1b      	ldrb	r3, [r3, #20]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d105      	bne.n	800ab18 <tcp_input+0x29c>
 800ab0c:	4b88      	ldr	r3, [pc, #544]	@ (800ad30 <tcp_input+0x4b4>)
 800ab0e:	22fb      	movs	r2, #251	@ 0xfb
 800ab10:	4988      	ldr	r1, [pc, #544]	@ (800ad34 <tcp_input+0x4b8>)
 800ab12:	4889      	ldr	r0, [pc, #548]	@ (800ad38 <tcp_input+0x4bc>)
 800ab14:	f009 fb04 	bl	8014120 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
 800ab1c:	2b0a      	cmp	r3, #10
 800ab1e:	d105      	bne.n	800ab2c <tcp_input+0x2b0>
 800ab20:	4b83      	ldr	r3, [pc, #524]	@ (800ad30 <tcp_input+0x4b4>)
 800ab22:	22fc      	movs	r2, #252	@ 0xfc
 800ab24:	4985      	ldr	r1, [pc, #532]	@ (800ad3c <tcp_input+0x4c0>)
 800ab26:	4884      	ldr	r0, [pc, #528]	@ (800ad38 <tcp_input+0x4bc>)
 800ab28:	f009 fafa 	bl	8014120 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	7d1b      	ldrb	r3, [r3, #20]
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d105      	bne.n	800ab40 <tcp_input+0x2c4>
 800ab34:	4b7e      	ldr	r3, [pc, #504]	@ (800ad30 <tcp_input+0x4b4>)
 800ab36:	22fd      	movs	r2, #253	@ 0xfd
 800ab38:	4981      	ldr	r1, [pc, #516]	@ (800ad40 <tcp_input+0x4c4>)
 800ab3a:	487f      	ldr	r0, [pc, #508]	@ (800ad38 <tcp_input+0x4bc>)
 800ab3c:	f009 faf0 	bl	8014120 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab40:	69fb      	ldr	r3, [r7, #28]
 800ab42:	7a1b      	ldrb	r3, [r3, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d00c      	beq.n	800ab62 <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	7a1a      	ldrb	r2, [r3, #8]
 800ab4c:	4b7d      	ldr	r3, [pc, #500]	@ (800ad44 <tcp_input+0x4c8>)
 800ab4e:	685b      	ldr	r3, [r3, #4]
 800ab50:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ab54:	3301      	adds	r3, #1
 800ab56:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d002      	beq.n	800ab62 <tcp_input+0x2e6>
      prev = pcb;
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	61bb      	str	r3, [r7, #24]
      continue;
 800ab60:	e044      	b.n	800abec <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	8b1a      	ldrh	r2, [r3, #24]
 800ab66:	4b78      	ldr	r3, [pc, #480]	@ (800ad48 <tcp_input+0x4cc>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	881b      	ldrh	r3, [r3, #0]
 800ab6c:	b29b      	uxth	r3, r3
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d13a      	bne.n	800abe8 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	8ada      	ldrh	r2, [r3, #22]
 800ab76:	4b74      	ldr	r3, [pc, #464]	@ (800ad48 <tcp_input+0x4cc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	885b      	ldrh	r3, [r3, #2]
 800ab7c:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d132      	bne.n	800abe8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	685a      	ldr	r2, [r3, #4]
 800ab86:	4b6f      	ldr	r3, [pc, #444]	@ (800ad44 <tcp_input+0x4c8>)
 800ab88:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d12c      	bne.n	800abe8 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	4b6c      	ldr	r3, [pc, #432]	@ (800ad44 <tcp_input+0x4c8>)
 800ab94:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d126      	bne.n	800abe8 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	69fa      	ldr	r2, [r7, #28]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d106      	bne.n	800abb2 <tcp_input+0x336>
 800aba4:	4b62      	ldr	r3, [pc, #392]	@ (800ad30 <tcp_input+0x4b4>)
 800aba6:	f240 120d 	movw	r2, #269	@ 0x10d
 800abaa:	4968      	ldr	r1, [pc, #416]	@ (800ad4c <tcp_input+0x4d0>)
 800abac:	4862      	ldr	r0, [pc, #392]	@ (800ad38 <tcp_input+0x4bc>)
 800abae:	f009 fab7 	bl	8014120 <iprintf>
      if (prev != NULL) {
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00a      	beq.n	800abce <tcp_input+0x352>
        prev->next = pcb->next;
 800abb8:	69fb      	ldr	r3, [r7, #28]
 800abba:	68da      	ldr	r2, [r3, #12]
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800abc0:	4b63      	ldr	r3, [pc, #396]	@ (800ad50 <tcp_input+0x4d4>)
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800abc8:	4a61      	ldr	r2, [pc, #388]	@ (800ad50 <tcp_input+0x4d4>)
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800abce:	69fb      	ldr	r3, [r7, #28]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	69fa      	ldr	r2, [r7, #28]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d110      	bne.n	800abfa <tcp_input+0x37e>
 800abd8:	4b55      	ldr	r3, [pc, #340]	@ (800ad30 <tcp_input+0x4b4>)
 800abda:	f240 1215 	movw	r2, #277	@ 0x115
 800abde:	495d      	ldr	r1, [pc, #372]	@ (800ad54 <tcp_input+0x4d8>)
 800abe0:	4855      	ldr	r0, [pc, #340]	@ (800ad38 <tcp_input+0x4bc>)
 800abe2:	f009 fa9d 	bl	8014120 <iprintf>
      break;
 800abe6:	e008      	b.n	800abfa <tcp_input+0x37e>
    }
    prev = pcb;
 800abe8:	69fb      	ldr	r3, [r7, #28]
 800abea:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	61fb      	str	r3, [r7, #28]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d185      	bne.n	800ab04 <tcp_input+0x288>
 800abf8:	e000      	b.n	800abfc <tcp_input+0x380>
      break;
 800abfa:	bf00      	nop
  }

  if (pcb == NULL) {
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f040 80b0 	bne.w	800ad64 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac04:	4b54      	ldr	r3, [pc, #336]	@ (800ad58 <tcp_input+0x4dc>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	61fb      	str	r3, [r7, #28]
 800ac0a:	e03f      	b.n	800ac8c <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	7d1b      	ldrb	r3, [r3, #20]
 800ac10:	2b0a      	cmp	r3, #10
 800ac12:	d006      	beq.n	800ac22 <tcp_input+0x3a6>
 800ac14:	4b46      	ldr	r3, [pc, #280]	@ (800ad30 <tcp_input+0x4b4>)
 800ac16:	f240 121f 	movw	r2, #287	@ 0x11f
 800ac1a:	4950      	ldr	r1, [pc, #320]	@ (800ad5c <tcp_input+0x4e0>)
 800ac1c:	4846      	ldr	r0, [pc, #280]	@ (800ad38 <tcp_input+0x4bc>)
 800ac1e:	f009 fa7f 	bl	8014120 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac22:	69fb      	ldr	r3, [r7, #28]
 800ac24:	7a1b      	ldrb	r3, [r3, #8]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d009      	beq.n	800ac3e <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ac2a:	69fb      	ldr	r3, [r7, #28]
 800ac2c:	7a1a      	ldrb	r2, [r3, #8]
 800ac2e:	4b45      	ldr	r3, [pc, #276]	@ (800ad44 <tcp_input+0x4c8>)
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ac36:	3301      	adds	r3, #1
 800ac38:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d122      	bne.n	800ac84 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	8b1a      	ldrh	r2, [r3, #24]
 800ac42:	4b41      	ldr	r3, [pc, #260]	@ (800ad48 <tcp_input+0x4cc>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d11b      	bne.n	800ac86 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	8ada      	ldrh	r2, [r3, #22]
 800ac52:	4b3d      	ldr	r3, [pc, #244]	@ (800ad48 <tcp_input+0x4cc>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	885b      	ldrh	r3, [r3, #2]
 800ac58:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d113      	bne.n	800ac86 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	685a      	ldr	r2, [r3, #4]
 800ac62:	4b38      	ldr	r3, [pc, #224]	@ (800ad44 <tcp_input+0x4c8>)
 800ac64:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d10d      	bne.n	800ac86 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b35      	ldr	r3, [pc, #212]	@ (800ad44 <tcp_input+0x4c8>)
 800ac70:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d107      	bne.n	800ac86 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800ac76:	69f8      	ldr	r0, [r7, #28]
 800ac78:	f000 fb5e 	bl	800b338 <tcp_timewait_input>
        }
        pbuf_free(p);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7fd fbc9 	bl	8008414 <pbuf_free>
        return;
 800ac82:	e205      	b.n	800b090 <tcp_input+0x814>
        continue;
 800ac84:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ac86:	69fb      	ldr	r3, [r7, #28]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	61fb      	str	r3, [r7, #28]
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1bc      	bne.n	800ac0c <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800ac92:	2300      	movs	r3, #0
 800ac94:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ac96:	4b32      	ldr	r3, [pc, #200]	@ (800ad60 <tcp_input+0x4e4>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	617b      	str	r3, [r7, #20]
 800ac9c:	e02a      	b.n	800acf4 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	7a1b      	ldrb	r3, [r3, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00c      	beq.n	800acc0 <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	7a1a      	ldrb	r2, [r3, #8]
 800acaa:	4b26      	ldr	r3, [pc, #152]	@ (800ad44 <tcp_input+0x4c8>)
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800acb2:	3301      	adds	r3, #1
 800acb4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d002      	beq.n	800acc0 <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	61bb      	str	r3, [r7, #24]
        continue;
 800acbe:	e016      	b.n	800acee <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	8ada      	ldrh	r2, [r3, #22]
 800acc4:	4b20      	ldr	r3, [pc, #128]	@ (800ad48 <tcp_input+0x4cc>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	b29b      	uxth	r3, r3
 800accc:	429a      	cmp	r2, r3
 800acce:	d10c      	bne.n	800acea <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	4b1b      	ldr	r3, [pc, #108]	@ (800ad44 <tcp_input+0x4c8>)
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d00f      	beq.n	800acfc <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00d      	beq.n	800acfe <tcp_input+0x482>
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d009      	beq.n	800acfe <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	68db      	ldr	r3, [r3, #12]
 800acf2:	617b      	str	r3, [r7, #20]
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1d1      	bne.n	800ac9e <tcp_input+0x422>
 800acfa:	e000      	b.n	800acfe <tcp_input+0x482>
            break;
 800acfc:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02f      	beq.n	800ad64 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d00a      	beq.n	800ad20 <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	68da      	ldr	r2, [r3, #12]
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ad12:	4b13      	ldr	r3, [pc, #76]	@ (800ad60 <tcp_input+0x4e4>)
 800ad14:	681a      	ldr	r2, [r3, #0]
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ad1a:	4a11      	ldr	r2, [pc, #68]	@ (800ad60 <tcp_input+0x4e4>)
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ad20:	6978      	ldr	r0, [r7, #20]
 800ad22:	f000 fa0b 	bl	800b13c <tcp_listen_input>
      }
      pbuf_free(p);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7fd fb74 	bl	8008414 <pbuf_free>
      return;
 800ad2c:	e1b0      	b.n	800b090 <tcp_input+0x814>
 800ad2e:	bf00      	nop
 800ad30:	08016688 	.word	0x08016688
 800ad34:	08016738 	.word	0x08016738
 800ad38:	080166d4 	.word	0x080166d4
 800ad3c:	08016760 	.word	0x08016760
 800ad40:	0801678c 	.word	0x0801678c
 800ad44:	20000d90 	.word	0x20000d90
 800ad48:	20004358 	.word	0x20004358
 800ad4c:	080167b4 	.word	0x080167b4
 800ad50:	2000433c 	.word	0x2000433c
 800ad54:	080167e0 	.word	0x080167e0
 800ad58:	20004340 	.word	0x20004340
 800ad5c:	0801680c 	.word	0x0801680c
 800ad60:	20004338 	.word	0x20004338
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 8158 	beq.w	800b01c <tcp_input+0x7a0>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ad6c:	4b95      	ldr	r3, [pc, #596]	@ (800afc4 <tcp_input+0x748>)
 800ad6e:	2200      	movs	r2, #0
 800ad70:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	891a      	ldrh	r2, [r3, #8]
 800ad76:	4b93      	ldr	r3, [pc, #588]	@ (800afc4 <tcp_input+0x748>)
 800ad78:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ad7a:	4a92      	ldr	r2, [pc, #584]	@ (800afc4 <tcp_input+0x748>)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ad80:	4b91      	ldr	r3, [pc, #580]	@ (800afc8 <tcp_input+0x74c>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a8f      	ldr	r2, [pc, #572]	@ (800afc4 <tcp_input+0x748>)
 800ad86:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ad88:	4b90      	ldr	r3, [pc, #576]	@ (800afcc <tcp_input+0x750>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ad8e:	4b90      	ldr	r3, [pc, #576]	@ (800afd0 <tcp_input+0x754>)
 800ad90:	2200      	movs	r2, #0
 800ad92:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ad94:	4b8f      	ldr	r3, [pc, #572]	@ (800afd4 <tcp_input+0x758>)
 800ad96:	2200      	movs	r2, #0
 800ad98:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ad9a:	4b8f      	ldr	r3, [pc, #572]	@ (800afd8 <tcp_input+0x75c>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f003 0308 	and.w	r3, r3, #8
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	7b5b      	ldrb	r3, [r3, #13]
 800adaa:	f043 0301 	orr.w	r3, r3, #1
 800adae:	b2da      	uxtb	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d017      	beq.n	800adec <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adbc:	69f8      	ldr	r0, [r7, #28]
 800adbe:	f7ff f831 	bl	8009e24 <tcp_process_refused_data>
 800adc2:	4603      	mov	r3, r0
 800adc4:	f113 0f0d 	cmn.w	r3, #13
 800adc8:	d007      	beq.n	800adda <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00c      	beq.n	800adec <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800add2:	4b82      	ldr	r3, [pc, #520]	@ (800afdc <tcp_input+0x760>)
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d008      	beq.n	800adec <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800adda:	69fb      	ldr	r3, [r7, #28]
 800addc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f040 80e3 	bne.w	800afaa <tcp_input+0x72e>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ade4:	69f8      	ldr	r0, [r7, #28]
 800ade6:	f003 fe23 	bl	800ea30 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800adea:	e0de      	b.n	800afaa <tcp_input+0x72e>
      }
    }
    tcp_input_pcb = pcb;
 800adec:	4a7c      	ldr	r2, [pc, #496]	@ (800afe0 <tcp_input+0x764>)
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800adf2:	69f8      	ldr	r0, [r7, #28]
 800adf4:	f000 fb1a 	bl	800b42c <tcp_process>
 800adf8:	4603      	mov	r3, r0
 800adfa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800adfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae00:	f113 0f0d 	cmn.w	r3, #13
 800ae04:	f000 80d3 	beq.w	800afae <tcp_input+0x732>
      if (recv_flags & TF_RESET) {
 800ae08:	4b71      	ldr	r3, [pc, #452]	@ (800afd0 <tcp_input+0x754>)
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	f003 0308 	and.w	r3, r3, #8
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d015      	beq.n	800ae40 <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d008      	beq.n	800ae30 <tcp_input+0x5b4>
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	6912      	ldr	r2, [r2, #16]
 800ae28:	f06f 010d 	mvn.w	r1, #13
 800ae2c:	4610      	mov	r0, r2
 800ae2e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ae30:	69f9      	ldr	r1, [r7, #28]
 800ae32:	486c      	ldr	r0, [pc, #432]	@ (800afe4 <tcp_input+0x768>)
 800ae34:	f7ff fbaa 	bl	800a58c <tcp_pcb_remove>
        tcp_free(pcb);
 800ae38:	69f8      	ldr	r0, [r7, #28]
 800ae3a:	f7fd fef5 	bl	8008c28 <tcp_free>
 800ae3e:	e0da      	b.n	800aff6 <tcp_input+0x77a>
      } else {
        err = ERR_OK;
 800ae40:	2300      	movs	r3, #0
 800ae42:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ae44:	4b63      	ldr	r3, [pc, #396]	@ (800afd4 <tcp_input+0x758>)
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d01d      	beq.n	800ae88 <tcp_input+0x60c>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ae4c:	4b61      	ldr	r3, [pc, #388]	@ (800afd4 <tcp_input+0x758>)
 800ae4e:	881b      	ldrh	r3, [r3, #0]
 800ae50:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ae52:	69fb      	ldr	r3, [r7, #28]
 800ae54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <tcp_input+0x5f6>
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae62:	69fa      	ldr	r2, [r7, #28]
 800ae64:	6910      	ldr	r0, [r2, #16]
 800ae66:	897a      	ldrh	r2, [r7, #10]
 800ae68:	69f9      	ldr	r1, [r7, #28]
 800ae6a:	4798      	blx	r3
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	74fb      	strb	r3, [r7, #19]
 800ae70:	e001      	b.n	800ae76 <tcp_input+0x5fa>
 800ae72:	2300      	movs	r3, #0
 800ae74:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ae76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ae7a:	f113 0f0d 	cmn.w	r3, #13
 800ae7e:	f000 8098 	beq.w	800afb2 <tcp_input+0x736>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ae82:	4b54      	ldr	r3, [pc, #336]	@ (800afd4 <tcp_input+0x758>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ae88:	69f8      	ldr	r0, [r7, #28]
 800ae8a:	f000 f917 	bl	800b0bc <tcp_input_delayed_close>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	f040 8090 	bne.w	800afb6 <tcp_input+0x73a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ae96:	4b4d      	ldr	r3, [pc, #308]	@ (800afcc <tcp_input+0x750>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d041      	beq.n	800af22 <tcp_input+0x6a6>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d006      	beq.n	800aeb4 <tcp_input+0x638>
 800aea6:	4b50      	ldr	r3, [pc, #320]	@ (800afe8 <tcp_input+0x76c>)
 800aea8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800aeac:	494f      	ldr	r1, [pc, #316]	@ (800afec <tcp_input+0x770>)
 800aeae:	4850      	ldr	r0, [pc, #320]	@ (800aff0 <tcp_input+0x774>)
 800aeb0:	f009 f936 	bl	8014120 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	8b5b      	ldrh	r3, [r3, #26]
 800aeb8:	f003 0310 	and.w	r3, r3, #16
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d008      	beq.n	800aed2 <tcp_input+0x656>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800aec0:	4b42      	ldr	r3, [pc, #264]	@ (800afcc <tcp_input+0x750>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f7fd faa5 	bl	8008414 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800aeca:	69f8      	ldr	r0, [r7, #28]
 800aecc:	f7fe f994 	bl	80091f8 <tcp_abort>
            goto aborted;
 800aed0:	e091      	b.n	800aff6 <tcp_input+0x77a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00c      	beq.n	800aef6 <tcp_input+0x67a>
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800aee2:	69fb      	ldr	r3, [r7, #28]
 800aee4:	6918      	ldr	r0, [r3, #16]
 800aee6:	4b39      	ldr	r3, [pc, #228]	@ (800afcc <tcp_input+0x750>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	2300      	movs	r3, #0
 800aeec:	69f9      	ldr	r1, [r7, #28]
 800aeee:	47a0      	blx	r4
 800aef0:	4603      	mov	r3, r0
 800aef2:	74fb      	strb	r3, [r7, #19]
 800aef4:	e008      	b.n	800af08 <tcp_input+0x68c>
 800aef6:	4b35      	ldr	r3, [pc, #212]	@ (800afcc <tcp_input+0x750>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	2300      	movs	r3, #0
 800aefc:	69f9      	ldr	r1, [r7, #28]
 800aefe:	2000      	movs	r0, #0
 800af00:	f7ff f884 	bl	800a00c <tcp_recv_null>
 800af04:	4603      	mov	r3, r0
 800af06:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800af08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af0c:	f113 0f0d 	cmn.w	r3, #13
 800af10:	d053      	beq.n	800afba <tcp_input+0x73e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800af12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d003      	beq.n	800af22 <tcp_input+0x6a6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800af1a:	4b2c      	ldr	r3, [pc, #176]	@ (800afcc <tcp_input+0x750>)
 800af1c:	681a      	ldr	r2, [r3, #0]
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800af22:	4b2b      	ldr	r3, [pc, #172]	@ (800afd0 <tcp_input+0x754>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	f003 0320 	and.w	r3, r3, #32
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d030      	beq.n	800af90 <tcp_input+0x714>
          if (pcb->refused_data != NULL) {
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af32:	2b00      	cmp	r3, #0
 800af34:	d009      	beq.n	800af4a <tcp_input+0x6ce>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af3a:	7b5a      	ldrb	r2, [r3, #13]
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af40:	f042 0220 	orr.w	r2, r2, #32
 800af44:	b2d2      	uxtb	r2, r2
 800af46:	735a      	strb	r2, [r3, #13]
 800af48:	e022      	b.n	800af90 <tcp_input+0x714>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af4e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800af52:	d005      	beq.n	800af60 <tcp_input+0x6e4>
              pcb->rcv_wnd++;
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af58:	3301      	adds	r3, #1
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af66:	2b00      	cmp	r3, #0
 800af68:	d00b      	beq.n	800af82 <tcp_input+0x706>
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	6918      	ldr	r0, [r3, #16]
 800af74:	2300      	movs	r3, #0
 800af76:	2200      	movs	r2, #0
 800af78:	69f9      	ldr	r1, [r7, #28]
 800af7a:	47a0      	blx	r4
 800af7c:	4603      	mov	r3, r0
 800af7e:	74fb      	strb	r3, [r7, #19]
 800af80:	e001      	b.n	800af86 <tcp_input+0x70a>
 800af82:	2300      	movs	r3, #0
 800af84:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800af86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af8a:	f113 0f0d 	cmn.w	r3, #13
 800af8e:	d016      	beq.n	800afbe <tcp_input+0x742>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800af90:	4b13      	ldr	r3, [pc, #76]	@ (800afe0 <tcp_input+0x764>)
 800af92:	2200      	movs	r2, #0
 800af94:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800af96:	69f8      	ldr	r0, [r7, #28]
 800af98:	f000 f890 	bl	800b0bc <tcp_input_delayed_close>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d128      	bne.n	800aff4 <tcp_input+0x778>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800afa2:	69f8      	ldr	r0, [r7, #28]
 800afa4:	f002 ff1c 	bl	800dde0 <tcp_output>
 800afa8:	e025      	b.n	800aff6 <tcp_input+0x77a>
        goto aborted;
 800afaa:	bf00      	nop
 800afac:	e023      	b.n	800aff6 <tcp_input+0x77a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800afae:	bf00      	nop
 800afb0:	e021      	b.n	800aff6 <tcp_input+0x77a>
              goto aborted;
 800afb2:	bf00      	nop
 800afb4:	e01f      	b.n	800aff6 <tcp_input+0x77a>
          goto aborted;
 800afb6:	bf00      	nop
 800afb8:	e01d      	b.n	800aff6 <tcp_input+0x77a>
            goto aborted;
 800afba:	bf00      	nop
 800afbc:	e01b      	b.n	800aff6 <tcp_input+0x77a>
              goto aborted;
 800afbe:	bf00      	nop
 800afc0:	e019      	b.n	800aff6 <tcp_input+0x77a>
 800afc2:	bf00      	nop
 800afc4:	20004348 	.word	0x20004348
 800afc8:	20004358 	.word	0x20004358
 800afcc:	20004378 	.word	0x20004378
 800afd0:	20004375 	.word	0x20004375
 800afd4:	20004370 	.word	0x20004370
 800afd8:	20004374 	.word	0x20004374
 800afdc:	20004372 	.word	0x20004372
 800afe0:	2000437c 	.word	0x2000437c
 800afe4:	2000433c 	.word	0x2000433c
 800afe8:	08016688 	.word	0x08016688
 800afec:	0801683c 	.word	0x0801683c
 800aff0:	080166d4 	.word	0x080166d4
          goto aborted;
 800aff4:	bf00      	nop
    tcp_input_pcb = NULL;
 800aff6:	4b28      	ldr	r3, [pc, #160]	@ (800b098 <tcp_input+0x81c>)
 800aff8:	2200      	movs	r2, #0
 800affa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800affc:	4b27      	ldr	r3, [pc, #156]	@ (800b09c <tcp_input+0x820>)
 800affe:	2200      	movs	r2, #0
 800b000:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800b002:	4b27      	ldr	r3, [pc, #156]	@ (800b0a0 <tcp_input+0x824>)
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d041      	beq.n	800b08e <tcp_input+0x812>
      pbuf_free(inseg.p);
 800b00a:	4b25      	ldr	r3, [pc, #148]	@ (800b0a0 <tcp_input+0x824>)
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fa00 	bl	8008414 <pbuf_free>
      inseg.p = NULL;
 800b014:	4b22      	ldr	r3, [pc, #136]	@ (800b0a0 <tcp_input+0x824>)
 800b016:	2200      	movs	r2, #0
 800b018:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800b01a:	e038      	b.n	800b08e <tcp_input+0x812>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b01c:	4b21      	ldr	r3, [pc, #132]	@ (800b0a4 <tcp_input+0x828>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	899b      	ldrh	r3, [r3, #12]
 800b022:	b29b      	uxth	r3, r3
 800b024:	4618      	mov	r0, r3
 800b026:	f7fb fa69 	bl	80064fc <lwip_htons>
 800b02a:	4603      	mov	r3, r0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	f003 0304 	and.w	r3, r3, #4
 800b032:	2b00      	cmp	r3, #0
 800b034:	d118      	bne.n	800b068 <tcp_input+0x7ec>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b036:	4b1c      	ldr	r3, [pc, #112]	@ (800b0a8 <tcp_input+0x82c>)
 800b038:	6819      	ldr	r1, [r3, #0]
 800b03a:	4b1c      	ldr	r3, [pc, #112]	@ (800b0ac <tcp_input+0x830>)
 800b03c:	881b      	ldrh	r3, [r3, #0]
 800b03e:	461a      	mov	r2, r3
 800b040:	4b1b      	ldr	r3, [pc, #108]	@ (800b0b0 <tcp_input+0x834>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b046:	4b17      	ldr	r3, [pc, #92]	@ (800b0a4 <tcp_input+0x828>)
 800b048:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b04a:	885b      	ldrh	r3, [r3, #2]
 800b04c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b04e:	4a15      	ldr	r2, [pc, #84]	@ (800b0a4 <tcp_input+0x828>)
 800b050:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b052:	8812      	ldrh	r2, [r2, #0]
 800b054:	b292      	uxth	r2, r2
 800b056:	9202      	str	r2, [sp, #8]
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	4b16      	ldr	r3, [pc, #88]	@ (800b0b4 <tcp_input+0x838>)
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	4b16      	ldr	r3, [pc, #88]	@ (800b0b8 <tcp_input+0x83c>)
 800b060:	4602      	mov	r2, r0
 800b062:	2000      	movs	r0, #0
 800b064:	f003 fc92 	bl	800e98c <tcp_rst>
    pbuf_free(p);
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7fd f9d3 	bl	8008414 <pbuf_free>
  return;
 800b06e:	e00e      	b.n	800b08e <tcp_input+0x812>
    goto dropped;
 800b070:	bf00      	nop
 800b072:	e008      	b.n	800b086 <tcp_input+0x80a>
    goto dropped;
 800b074:	bf00      	nop
 800b076:	e006      	b.n	800b086 <tcp_input+0x80a>
      goto dropped;
 800b078:	bf00      	nop
 800b07a:	e004      	b.n	800b086 <tcp_input+0x80a>
    goto dropped;
 800b07c:	bf00      	nop
 800b07e:	e002      	b.n	800b086 <tcp_input+0x80a>
      goto dropped;
 800b080:	bf00      	nop
 800b082:	e000      	b.n	800b086 <tcp_input+0x80a>
      goto dropped;
 800b084:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7fd f9c4 	bl	8008414 <pbuf_free>
 800b08c:	e000      	b.n	800b090 <tcp_input+0x814>
  return;
 800b08e:	bf00      	nop
}
 800b090:	3724      	adds	r7, #36	@ 0x24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd90      	pop	{r4, r7, pc}
 800b096:	bf00      	nop
 800b098:	2000437c 	.word	0x2000437c
 800b09c:	20004378 	.word	0x20004378
 800b0a0:	20004348 	.word	0x20004348
 800b0a4:	20004358 	.word	0x20004358
 800b0a8:	2000436c 	.word	0x2000436c
 800b0ac:	20004372 	.word	0x20004372
 800b0b0:	20004368 	.word	0x20004368
 800b0b4:	20000da0 	.word	0x20000da0
 800b0b8:	20000da4 	.word	0x20000da4

0800b0bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d106      	bne.n	800b0d8 <tcp_input_delayed_close+0x1c>
 800b0ca:	4b17      	ldr	r3, [pc, #92]	@ (800b128 <tcp_input_delayed_close+0x6c>)
 800b0cc:	f240 225a 	movw	r2, #602	@ 0x25a
 800b0d0:	4916      	ldr	r1, [pc, #88]	@ (800b12c <tcp_input_delayed_close+0x70>)
 800b0d2:	4817      	ldr	r0, [pc, #92]	@ (800b130 <tcp_input_delayed_close+0x74>)
 800b0d4:	f009 f824 	bl	8014120 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800b0d8:	4b16      	ldr	r3, [pc, #88]	@ (800b134 <tcp_input_delayed_close+0x78>)
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	f003 0310 	and.w	r3, r3, #16
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d01c      	beq.n	800b11e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	8b5b      	ldrh	r3, [r3, #26]
 800b0e8:	f003 0310 	and.w	r3, r3, #16
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10d      	bne.n	800b10c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d008      	beq.n	800b10c <tcp_input_delayed_close+0x50>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	6912      	ldr	r2, [r2, #16]
 800b104:	f06f 010e 	mvn.w	r1, #14
 800b108:	4610      	mov	r0, r2
 800b10a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	480a      	ldr	r0, [pc, #40]	@ (800b138 <tcp_input_delayed_close+0x7c>)
 800b110:	f7ff fa3c 	bl	800a58c <tcp_pcb_remove>
    tcp_free(pcb);
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7fd fd87 	bl	8008c28 <tcp_free>
    return 1;
 800b11a:	2301      	movs	r3, #1
 800b11c:	e000      	b.n	800b120 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800b11e:	2300      	movs	r3, #0
}
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	08016688 	.word	0x08016688
 800b12c:	08016858 	.word	0x08016858
 800b130:	080166d4 	.word	0x080166d4
 800b134:	20004375 	.word	0x20004375
 800b138:	2000433c 	.word	0x2000433c

0800b13c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800b13c:	b590      	push	{r4, r7, lr}
 800b13e:	b08b      	sub	sp, #44	@ 0x2c
 800b140:	af04      	add	r7, sp, #16
 800b142:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800b144:	4b6f      	ldr	r3, [pc, #444]	@ (800b304 <tcp_listen_input+0x1c8>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 0304 	and.w	r3, r3, #4
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	f040 80d2 	bne.w	800b2f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d106      	bne.n	800b166 <tcp_listen_input+0x2a>
 800b158:	4b6b      	ldr	r3, [pc, #428]	@ (800b308 <tcp_listen_input+0x1cc>)
 800b15a:	f240 2281 	movw	r2, #641	@ 0x281
 800b15e:	496b      	ldr	r1, [pc, #428]	@ (800b30c <tcp_listen_input+0x1d0>)
 800b160:	486b      	ldr	r0, [pc, #428]	@ (800b310 <tcp_listen_input+0x1d4>)
 800b162:	f008 ffdd 	bl	8014120 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800b166:	4b67      	ldr	r3, [pc, #412]	@ (800b304 <tcp_listen_input+0x1c8>)
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	f003 0310 	and.w	r3, r3, #16
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d019      	beq.n	800b1a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b172:	4b68      	ldr	r3, [pc, #416]	@ (800b314 <tcp_listen_input+0x1d8>)
 800b174:	6819      	ldr	r1, [r3, #0]
 800b176:	4b68      	ldr	r3, [pc, #416]	@ (800b318 <tcp_listen_input+0x1dc>)
 800b178:	881b      	ldrh	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	4b67      	ldr	r3, [pc, #412]	@ (800b31c <tcp_listen_input+0x1e0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b182:	4b67      	ldr	r3, [pc, #412]	@ (800b320 <tcp_listen_input+0x1e4>)
 800b184:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b186:	885b      	ldrh	r3, [r3, #2]
 800b188:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b18a:	4a65      	ldr	r2, [pc, #404]	@ (800b320 <tcp_listen_input+0x1e4>)
 800b18c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b18e:	8812      	ldrh	r2, [r2, #0]
 800b190:	b292      	uxth	r2, r2
 800b192:	9202      	str	r2, [sp, #8]
 800b194:	9301      	str	r3, [sp, #4]
 800b196:	4b63      	ldr	r3, [pc, #396]	@ (800b324 <tcp_listen_input+0x1e8>)
 800b198:	9300      	str	r3, [sp, #0]
 800b19a:	4b63      	ldr	r3, [pc, #396]	@ (800b328 <tcp_listen_input+0x1ec>)
 800b19c:	4602      	mov	r2, r0
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f003 fbf4 	bl	800e98c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800b1a4:	e0a9      	b.n	800b2fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800b1a6:	4b57      	ldr	r3, [pc, #348]	@ (800b304 <tcp_listen_input+0x1c8>)
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	f003 0302 	and.w	r3, r3, #2
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 80a3 	beq.w	800b2fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	7d5b      	ldrb	r3, [r3, #21]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7ff f84b 	bl	800a254 <tcp_alloc>
 800b1be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d111      	bne.n	800b1ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	699b      	ldr	r3, [r3, #24]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d00a      	beq.n	800b1e4 <tcp_listen_input+0xa8>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	687a      	ldr	r2, [r7, #4]
 800b1d4:	6910      	ldr	r0, [r2, #16]
 800b1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b1da:	2100      	movs	r1, #0
 800b1dc:	4798      	blx	r3
 800b1de:	4603      	mov	r3, r0
 800b1e0:	73bb      	strb	r3, [r7, #14]
      return;
 800b1e2:	e08b      	b.n	800b2fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800b1e4:	23f0      	movs	r3, #240	@ 0xf0
 800b1e6:	73bb      	strb	r3, [r7, #14]
      return;
 800b1e8:	e088      	b.n	800b2fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800b1ea:	4b50      	ldr	r3, [pc, #320]	@ (800b32c <tcp_listen_input+0x1f0>)
 800b1ec:	695a      	ldr	r2, [r3, #20]
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800b1f2:	4b4e      	ldr	r3, [pc, #312]	@ (800b32c <tcp_listen_input+0x1f0>)
 800b1f4:	691a      	ldr	r2, [r3, #16]
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	8ada      	ldrh	r2, [r3, #22]
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800b202:	4b47      	ldr	r3, [pc, #284]	@ (800b320 <tcp_listen_input+0x1e4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	881b      	ldrh	r3, [r3, #0]
 800b208:	b29a      	uxth	r2, r3
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	2203      	movs	r2, #3
 800b212:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800b214:	4b41      	ldr	r3, [pc, #260]	@ (800b31c <tcp_listen_input+0x1e0>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800b226:	6978      	ldr	r0, [r7, #20]
 800b228:	f7ff fa44 	bl	800a6b4 <tcp_next_iss>
 800b22c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800b246:	4b35      	ldr	r3, [pc, #212]	@ (800b31c <tcp_listen_input+0x1e0>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	1e5a      	subs	r2, r3, #1
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691a      	ldr	r2, [r3, #16]
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	7a5b      	ldrb	r3, [r3, #9]
 800b262:	f003 030c 	and.w	r3, r3, #12
 800b266:	b2da      	uxtb	r2, r3
 800b268:	697b      	ldr	r3, [r7, #20]
 800b26a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7a1a      	ldrb	r2, [r3, #8]
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800b274:	4b2e      	ldr	r3, [pc, #184]	@ (800b330 <tcp_listen_input+0x1f4>)
 800b276:	681a      	ldr	r2, [r3, #0]
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	60da      	str	r2, [r3, #12]
 800b27c:	4a2c      	ldr	r2, [pc, #176]	@ (800b330 <tcp_listen_input+0x1f4>)
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	f003 fd45 	bl	800ed10 <tcp_timer_needed>
 800b286:	4b2b      	ldr	r3, [pc, #172]	@ (800b334 <tcp_listen_input+0x1f8>)
 800b288:	2201      	movs	r2, #1
 800b28a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800b28c:	6978      	ldr	r0, [r7, #20]
 800b28e:	f001 fd8b 	bl	800cda8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800b292:	4b23      	ldr	r3, [pc, #140]	@ (800b320 <tcp_listen_input+0x1e4>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	89db      	ldrh	r3, [r3, #14]
 800b298:	b29a      	uxth	r2, r3
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	3304      	adds	r3, #4
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f007 fba7 	bl	8012a08 <ip4_route>
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	461a      	mov	r2, r3
 800b2c2:	4620      	mov	r0, r4
 800b2c4:	f7ff fa1c 	bl	800a700 <tcp_eff_send_mss_netif>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800b2d0:	2112      	movs	r1, #18
 800b2d2:	6978      	ldr	r0, [r7, #20]
 800b2d4:	f002 fc96 	bl	800dc04 <tcp_enqueue_flags>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800b2dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d004      	beq.n	800b2ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	6978      	ldr	r0, [r7, #20]
 800b2e8:	f7fd fec8 	bl	800907c <tcp_abandon>
      return;
 800b2ec:	e006      	b.n	800b2fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800b2ee:	6978      	ldr	r0, [r7, #20]
 800b2f0:	f002 fd76 	bl	800dde0 <tcp_output>
  return;
 800b2f4:	e001      	b.n	800b2fa <tcp_listen_input+0x1be>
    return;
 800b2f6:	bf00      	nop
 800b2f8:	e000      	b.n	800b2fc <tcp_listen_input+0x1c0>
  return;
 800b2fa:	bf00      	nop
}
 800b2fc:	371c      	adds	r7, #28
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd90      	pop	{r4, r7, pc}
 800b302:	bf00      	nop
 800b304:	20004374 	.word	0x20004374
 800b308:	08016688 	.word	0x08016688
 800b30c:	08016880 	.word	0x08016880
 800b310:	080166d4 	.word	0x080166d4
 800b314:	2000436c 	.word	0x2000436c
 800b318:	20004372 	.word	0x20004372
 800b31c:	20004368 	.word	0x20004368
 800b320:	20004358 	.word	0x20004358
 800b324:	20000da0 	.word	0x20000da0
 800b328:	20000da4 	.word	0x20000da4
 800b32c:	20000d90 	.word	0x20000d90
 800b330:	2000433c 	.word	0x2000433c
 800b334:	20004344 	.word	0x20004344

0800b338 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af04      	add	r7, sp, #16
 800b33e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800b340:	4b2f      	ldr	r3, [pc, #188]	@ (800b400 <tcp_timewait_input+0xc8>)
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	f003 0304 	and.w	r3, r3, #4
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d153      	bne.n	800b3f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <tcp_timewait_input+0x28>
 800b352:	4b2c      	ldr	r3, [pc, #176]	@ (800b404 <tcp_timewait_input+0xcc>)
 800b354:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b358:	492b      	ldr	r1, [pc, #172]	@ (800b408 <tcp_timewait_input+0xd0>)
 800b35a:	482c      	ldr	r0, [pc, #176]	@ (800b40c <tcp_timewait_input+0xd4>)
 800b35c:	f008 fee0 	bl	8014120 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800b360:	4b27      	ldr	r3, [pc, #156]	@ (800b400 <tcp_timewait_input+0xc8>)
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	f003 0302 	and.w	r3, r3, #2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d02a      	beq.n	800b3c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800b36c:	4b28      	ldr	r3, [pc, #160]	@ (800b410 <tcp_timewait_input+0xd8>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b374:	1ad3      	subs	r3, r2, r3
 800b376:	2b00      	cmp	r3, #0
 800b378:	db2d      	blt.n	800b3d6 <tcp_timewait_input+0x9e>
 800b37a:	4b25      	ldr	r3, [pc, #148]	@ (800b410 <tcp_timewait_input+0xd8>)
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b386:	440b      	add	r3, r1
 800b388:	1ad3      	subs	r3, r2, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	dc23      	bgt.n	800b3d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b38e:	4b21      	ldr	r3, [pc, #132]	@ (800b414 <tcp_timewait_input+0xdc>)
 800b390:	6819      	ldr	r1, [r3, #0]
 800b392:	4b21      	ldr	r3, [pc, #132]	@ (800b418 <tcp_timewait_input+0xe0>)
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	461a      	mov	r2, r3
 800b398:	4b1d      	ldr	r3, [pc, #116]	@ (800b410 <tcp_timewait_input+0xd8>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b39e:	4b1f      	ldr	r3, [pc, #124]	@ (800b41c <tcp_timewait_input+0xe4>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3a2:	885b      	ldrh	r3, [r3, #2]
 800b3a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b3a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b41c <tcp_timewait_input+0xe4>)
 800b3a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b3aa:	8812      	ldrh	r2, [r2, #0]
 800b3ac:	b292      	uxth	r2, r2
 800b3ae:	9202      	str	r2, [sp, #8]
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	4b1b      	ldr	r3, [pc, #108]	@ (800b420 <tcp_timewait_input+0xe8>)
 800b3b4:	9300      	str	r3, [sp, #0]
 800b3b6:	4b1b      	ldr	r3, [pc, #108]	@ (800b424 <tcp_timewait_input+0xec>)
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f003 fae6 	bl	800e98c <tcp_rst>
      return;
 800b3c0:	e01b      	b.n	800b3fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800b3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b400 <tcp_timewait_input+0xc8>)
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	f003 0301 	and.w	r3, r3, #1
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d003      	beq.n	800b3d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800b3ce:	4b16      	ldr	r3, [pc, #88]	@ (800b428 <tcp_timewait_input+0xf0>)
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800b3d6:	4b10      	ldr	r3, [pc, #64]	@ (800b418 <tcp_timewait_input+0xe0>)
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00c      	beq.n	800b3f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	8b5b      	ldrh	r3, [r3, #26]
 800b3e2:	f043 0302 	orr.w	r3, r3, #2
 800b3e6:	b29a      	uxth	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 fcf7 	bl	800dde0 <tcp_output>
  }
  return;
 800b3f2:	e001      	b.n	800b3f8 <tcp_timewait_input+0xc0>
    return;
 800b3f4:	bf00      	nop
 800b3f6:	e000      	b.n	800b3fa <tcp_timewait_input+0xc2>
  return;
 800b3f8:	bf00      	nop
}
 800b3fa:	3708      	adds	r7, #8
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	20004374 	.word	0x20004374
 800b404:	08016688 	.word	0x08016688
 800b408:	080168a0 	.word	0x080168a0
 800b40c:	080166d4 	.word	0x080166d4
 800b410:	20004368 	.word	0x20004368
 800b414:	2000436c 	.word	0x2000436c
 800b418:	20004372 	.word	0x20004372
 800b41c:	20004358 	.word	0x20004358
 800b420:	20000da0 	.word	0x20000da0
 800b424:	20000da4 	.word	0x20000da4
 800b428:	20004330 	.word	0x20004330

0800b42c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800b42c:	b590      	push	{r4, r7, lr}
 800b42e:	b08d      	sub	sp, #52	@ 0x34
 800b430:	af04      	add	r7, sp, #16
 800b432:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800b434:	2300      	movs	r3, #0
 800b436:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d106      	bne.n	800b450 <tcp_process+0x24>
 800b442:	4b9d      	ldr	r3, [pc, #628]	@ (800b6b8 <tcp_process+0x28c>)
 800b444:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800b448:	499c      	ldr	r1, [pc, #624]	@ (800b6bc <tcp_process+0x290>)
 800b44a:	489d      	ldr	r0, [pc, #628]	@ (800b6c0 <tcp_process+0x294>)
 800b44c:	f008 fe68 	bl	8014120 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800b450:	4b9c      	ldr	r3, [pc, #624]	@ (800b6c4 <tcp_process+0x298>)
 800b452:	781b      	ldrb	r3, [r3, #0]
 800b454:	f003 0304 	and.w	r3, r3, #4
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d04e      	beq.n	800b4fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	7d1b      	ldrb	r3, [r3, #20]
 800b460:	2b02      	cmp	r3, #2
 800b462:	d108      	bne.n	800b476 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b468:	4b97      	ldr	r3, [pc, #604]	@ (800b6c8 <tcp_process+0x29c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d123      	bne.n	800b4b8 <tcp_process+0x8c>
        acceptable = 1;
 800b470:	2301      	movs	r3, #1
 800b472:	76fb      	strb	r3, [r7, #27]
 800b474:	e020      	b.n	800b4b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b47a:	4b94      	ldr	r3, [pc, #592]	@ (800b6cc <tcp_process+0x2a0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d102      	bne.n	800b488 <tcp_process+0x5c>
        acceptable = 1;
 800b482:	2301      	movs	r3, #1
 800b484:	76fb      	strb	r3, [r7, #27]
 800b486:	e017      	b.n	800b4b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800b488:	4b90      	ldr	r3, [pc, #576]	@ (800b6cc <tcp_process+0x2a0>)
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b490:	1ad3      	subs	r3, r2, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	db10      	blt.n	800b4b8 <tcp_process+0x8c>
 800b496:	4b8d      	ldr	r3, [pc, #564]	@ (800b6cc <tcp_process+0x2a0>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49e:	6879      	ldr	r1, [r7, #4]
 800b4a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800b4a2:	440b      	add	r3, r1
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	dc06      	bgt.n	800b4b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8b5b      	ldrh	r3, [r3, #26]
 800b4ae:	f043 0302 	orr.w	r3, r3, #2
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800b4b8:	7efb      	ldrb	r3, [r7, #27]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d01b      	beq.n	800b4f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	7d1b      	ldrb	r3, [r3, #20]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d106      	bne.n	800b4d4 <tcp_process+0xa8>
 800b4c6:	4b7c      	ldr	r3, [pc, #496]	@ (800b6b8 <tcp_process+0x28c>)
 800b4c8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800b4cc:	4980      	ldr	r1, [pc, #512]	@ (800b6d0 <tcp_process+0x2a4>)
 800b4ce:	487c      	ldr	r0, [pc, #496]	@ (800b6c0 <tcp_process+0x294>)
 800b4d0:	f008 fe26 	bl	8014120 <iprintf>
      recv_flags |= TF_RESET;
 800b4d4:	4b7f      	ldr	r3, [pc, #508]	@ (800b6d4 <tcp_process+0x2a8>)
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	f043 0308 	orr.w	r3, r3, #8
 800b4dc:	b2da      	uxtb	r2, r3
 800b4de:	4b7d      	ldr	r3, [pc, #500]	@ (800b6d4 <tcp_process+0x2a8>)
 800b4e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	8b5b      	ldrh	r3, [r3, #26]
 800b4e6:	f023 0301 	bic.w	r3, r3, #1
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800b4f0:	f06f 030d 	mvn.w	r3, #13
 800b4f4:	e37a      	b.n	800bbec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	e378      	b.n	800bbec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b4fa:	4b72      	ldr	r3, [pc, #456]	@ (800b6c4 <tcp_process+0x298>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	f003 0302 	and.w	r3, r3, #2
 800b502:	2b00      	cmp	r3, #0
 800b504:	d010      	beq.n	800b528 <tcp_process+0xfc>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	7d1b      	ldrb	r3, [r3, #20]
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d00c      	beq.n	800b528 <tcp_process+0xfc>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	7d1b      	ldrb	r3, [r3, #20]
 800b512:	2b03      	cmp	r3, #3
 800b514:	d008      	beq.n	800b528 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	8b5b      	ldrh	r3, [r3, #26]
 800b51a:	f043 0302 	orr.w	r3, r3, #2
 800b51e:	b29a      	uxth	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800b524:	2300      	movs	r3, #0
 800b526:	e361      	b.n	800bbec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8b5b      	ldrh	r3, [r3, #26]
 800b52c:	f003 0310 	and.w	r3, r3, #16
 800b530:	2b00      	cmp	r3, #0
 800b532:	d103      	bne.n	800b53c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800b534:	4b68      	ldr	r3, [pc, #416]	@ (800b6d8 <tcp_process+0x2ac>)
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2200      	movs	r2, #0
 800b540:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f001 fc2b 	bl	800cda8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	7d1b      	ldrb	r3, [r3, #20]
 800b556:	3b02      	subs	r3, #2
 800b558:	2b07      	cmp	r3, #7
 800b55a:	f200 8337 	bhi.w	800bbcc <tcp_process+0x7a0>
 800b55e:	a201      	add	r2, pc, #4	@ (adr r2, 800b564 <tcp_process+0x138>)
 800b560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b564:	0800b585 	.word	0x0800b585
 800b568:	0800b7b5 	.word	0x0800b7b5
 800b56c:	0800b92d 	.word	0x0800b92d
 800b570:	0800b957 	.word	0x0800b957
 800b574:	0800ba7b 	.word	0x0800ba7b
 800b578:	0800b92d 	.word	0x0800b92d
 800b57c:	0800bb07 	.word	0x0800bb07
 800b580:	0800bb97 	.word	0x0800bb97
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b584:	4b4f      	ldr	r3, [pc, #316]	@ (800b6c4 <tcp_process+0x298>)
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	f003 0310 	and.w	r3, r3, #16
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 80e4 	beq.w	800b75a <tcp_process+0x32e>
 800b592:	4b4c      	ldr	r3, [pc, #304]	@ (800b6c4 <tcp_process+0x298>)
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	f003 0302 	and.w	r3, r3, #2
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f000 80dd 	beq.w	800b75a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	4b48      	ldr	r3, [pc, #288]	@ (800b6c8 <tcp_process+0x29c>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	f040 80d5 	bne.w	800b75a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800b5b0:	4b46      	ldr	r3, [pc, #280]	@ (800b6cc <tcp_process+0x2a0>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	1c5a      	adds	r2, r3, #1
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800b5c2:	4b41      	ldr	r3, [pc, #260]	@ (800b6c8 <tcp_process+0x29c>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b5ca:	4b44      	ldr	r3, [pc, #272]	@ (800b6dc <tcp_process+0x2b0>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	89db      	ldrh	r3, [r3, #14]
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b5e4:	4b39      	ldr	r3, [pc, #228]	@ (800b6cc <tcp_process+0x2a0>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	1e5a      	subs	r2, r3, #1
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f007 fa03 	bl	8012a08 <ip4_route>
 800b602:	4601      	mov	r1, r0
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3304      	adds	r3, #4
 800b608:	461a      	mov	r2, r3
 800b60a:	4620      	mov	r0, r4
 800b60c:	f7ff f878 	bl	800a700 <tcp_eff_send_mss_netif>
 800b610:	4603      	mov	r3, r0
 800b612:	461a      	mov	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b61c:	009a      	lsls	r2, r3, #2
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b622:	005b      	lsls	r3, r3, #1
 800b624:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b628:	428b      	cmp	r3, r1
 800b62a:	bf38      	it	cc
 800b62c:	460b      	movcc	r3, r1
 800b62e:	429a      	cmp	r2, r3
 800b630:	d204      	bcs.n	800b63c <tcp_process+0x210>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	b29b      	uxth	r3, r3
 800b63a:	e00d      	b.n	800b658 <tcp_process+0x22c>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b640:	005b      	lsls	r3, r3, #1
 800b642:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b646:	4293      	cmp	r3, r2
 800b648:	d904      	bls.n	800b654 <tcp_process+0x228>
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b64e:	005b      	lsls	r3, r3, #1
 800b650:	b29b      	uxth	r3, r3
 800b652:	e001      	b.n	800b658 <tcp_process+0x22c>
 800b654:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b664:	2b00      	cmp	r3, #0
 800b666:	d106      	bne.n	800b676 <tcp_process+0x24a>
 800b668:	4b13      	ldr	r3, [pc, #76]	@ (800b6b8 <tcp_process+0x28c>)
 800b66a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800b66e:	491c      	ldr	r1, [pc, #112]	@ (800b6e0 <tcp_process+0x2b4>)
 800b670:	4813      	ldr	r0, [pc, #76]	@ (800b6c0 <tcp_process+0x294>)
 800b672:	f008 fd55 	bl	8014120 <iprintf>
        --pcb->snd_queuelen;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800b67c:	3b01      	subs	r3, #1
 800b67e:	b29a      	uxth	r2, r3
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b68a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d12a      	bne.n	800b6e8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b696:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d106      	bne.n	800b6ac <tcp_process+0x280>
 800b69e:	4b06      	ldr	r3, [pc, #24]	@ (800b6b8 <tcp_process+0x28c>)
 800b6a0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800b6a4:	490f      	ldr	r1, [pc, #60]	@ (800b6e4 <tcp_process+0x2b8>)
 800b6a6:	4806      	ldr	r0, [pc, #24]	@ (800b6c0 <tcp_process+0x294>)
 800b6a8:	f008 fd3a 	bl	8014120 <iprintf>
          pcb->unsent = rseg->next;
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	66da      	str	r2, [r3, #108]	@ 0x6c
 800b6b4:	e01c      	b.n	800b6f0 <tcp_process+0x2c4>
 800b6b6:	bf00      	nop
 800b6b8:	08016688 	.word	0x08016688
 800b6bc:	080168c0 	.word	0x080168c0
 800b6c0:	080166d4 	.word	0x080166d4
 800b6c4:	20004374 	.word	0x20004374
 800b6c8:	2000436c 	.word	0x2000436c
 800b6cc:	20004368 	.word	0x20004368
 800b6d0:	080168dc 	.word	0x080168dc
 800b6d4:	20004375 	.word	0x20004375
 800b6d8:	20004330 	.word	0x20004330
 800b6dc:	20004358 	.word	0x20004358
 800b6e0:	080168fc 	.word	0x080168fc
 800b6e4:	08016914 	.word	0x08016914
        } else {
          pcb->unacked = rseg->next;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800b6f0:	69f8      	ldr	r0, [r7, #28]
 800b6f2:	f7fe fc28 	bl	8009f46 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d104      	bne.n	800b708 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b704:	861a      	strh	r2, [r3, #48]	@ 0x30
 800b706:	e006      	b.n	800b716 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2200      	movs	r2, #0
 800b70c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00a      	beq.n	800b736 <tcp_process+0x30a>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b726:	687a      	ldr	r2, [r7, #4]
 800b728:	6910      	ldr	r0, [r2, #16]
 800b72a:	2200      	movs	r2, #0
 800b72c:	6879      	ldr	r1, [r7, #4]
 800b72e:	4798      	blx	r3
 800b730:	4603      	mov	r3, r0
 800b732:	76bb      	strb	r3, [r7, #26]
 800b734:	e001      	b.n	800b73a <tcp_process+0x30e>
 800b736:	2300      	movs	r3, #0
 800b738:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800b73a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b73e:	f113 0f0d 	cmn.w	r3, #13
 800b742:	d102      	bne.n	800b74a <tcp_process+0x31e>
          return ERR_ABRT;
 800b744:	f06f 030c 	mvn.w	r3, #12
 800b748:	e250      	b.n	800bbec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	8b5b      	ldrh	r3, [r3, #26]
 800b74e:	f043 0302 	orr.w	r3, r3, #2
 800b752:	b29a      	uxth	r2, r3
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800b758:	e23a      	b.n	800bbd0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800b75a:	4b98      	ldr	r3, [pc, #608]	@ (800b9bc <tcp_process+0x590>)
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f003 0310 	and.w	r3, r3, #16
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 8234 	beq.w	800bbd0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b768:	4b95      	ldr	r3, [pc, #596]	@ (800b9c0 <tcp_process+0x594>)
 800b76a:	6819      	ldr	r1, [r3, #0]
 800b76c:	4b95      	ldr	r3, [pc, #596]	@ (800b9c4 <tcp_process+0x598>)
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	461a      	mov	r2, r3
 800b772:	4b95      	ldr	r3, [pc, #596]	@ (800b9c8 <tcp_process+0x59c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b778:	4b94      	ldr	r3, [pc, #592]	@ (800b9cc <tcp_process+0x5a0>)
 800b77a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b77c:	885b      	ldrh	r3, [r3, #2]
 800b77e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b780:	4a92      	ldr	r2, [pc, #584]	@ (800b9cc <tcp_process+0x5a0>)
 800b782:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b784:	8812      	ldrh	r2, [r2, #0]
 800b786:	b292      	uxth	r2, r2
 800b788:	9202      	str	r2, [sp, #8]
 800b78a:	9301      	str	r3, [sp, #4]
 800b78c:	4b90      	ldr	r3, [pc, #576]	@ (800b9d0 <tcp_process+0x5a4>)
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4b90      	ldr	r3, [pc, #576]	@ (800b9d4 <tcp_process+0x5a8>)
 800b792:	4602      	mov	r2, r0
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f003 f8f9 	bl	800e98c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b7a0:	2b05      	cmp	r3, #5
 800b7a2:	f200 8215 	bhi.w	800bbd0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f002 feb5 	bl	800e51c <tcp_rexmit_rto>
      break;
 800b7b2:	e20d      	b.n	800bbd0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800b7b4:	4b81      	ldr	r3, [pc, #516]	@ (800b9bc <tcp_process+0x590>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f003 0310 	and.w	r3, r3, #16
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80a1 	beq.w	800b904 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b7c2:	4b7f      	ldr	r3, [pc, #508]	@ (800b9c0 <tcp_process+0x594>)
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	db7e      	blt.n	800b8d0 <tcp_process+0x4a4>
 800b7d2:	4b7b      	ldr	r3, [pc, #492]	@ (800b9c0 <tcp_process+0x594>)
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dc77      	bgt.n	800b8d0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2204      	movs	r2, #4
 800b7e4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d102      	bne.n	800b7f4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800b7ee:	23fa      	movs	r3, #250	@ 0xfa
 800b7f0:	76bb      	strb	r3, [r7, #26]
 800b7f2:	e01d      	b.n	800b830 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <tcp_process+0x3e0>
 800b7fe:	4b76      	ldr	r3, [pc, #472]	@ (800b9d8 <tcp_process+0x5ac>)
 800b800:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800b804:	4975      	ldr	r1, [pc, #468]	@ (800b9dc <tcp_process+0x5b0>)
 800b806:	4876      	ldr	r0, [pc, #472]	@ (800b9e0 <tcp_process+0x5b4>)
 800b808:	f008 fc8a 	bl	8014120 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b810:	699b      	ldr	r3, [r3, #24]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00a      	beq.n	800b82c <tcp_process+0x400>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	6910      	ldr	r0, [r2, #16]
 800b820:	2200      	movs	r2, #0
 800b822:	6879      	ldr	r1, [r7, #4]
 800b824:	4798      	blx	r3
 800b826:	4603      	mov	r3, r0
 800b828:	76bb      	strb	r3, [r7, #26]
 800b82a:	e001      	b.n	800b830 <tcp_process+0x404>
 800b82c:	23f0      	movs	r3, #240	@ 0xf0
 800b82e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800b830:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d00a      	beq.n	800b84e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800b838:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800b83c:	f113 0f0d 	cmn.w	r3, #13
 800b840:	d002      	beq.n	800b848 <tcp_process+0x41c>
              tcp_abort(pcb);
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f7fd fcd8 	bl	80091f8 <tcp_abort>
            }
            return ERR_ABRT;
 800b848:	f06f 030c 	mvn.w	r3, #12
 800b84c:	e1ce      	b.n	800bbec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 fae0 	bl	800be14 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800b854:	4b63      	ldr	r3, [pc, #396]	@ (800b9e4 <tcp_process+0x5b8>)
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d005      	beq.n	800b868 <tcp_process+0x43c>
            recv_acked--;
 800b85c:	4b61      	ldr	r3, [pc, #388]	@ (800b9e4 <tcp_process+0x5b8>)
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	3b01      	subs	r3, #1
 800b862:	b29a      	uxth	r2, r3
 800b864:	4b5f      	ldr	r3, [pc, #380]	@ (800b9e4 <tcp_process+0x5b8>)
 800b866:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b86c:	009a      	lsls	r2, r3, #2
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b872:	005b      	lsls	r3, r3, #1
 800b874:	f241 111c 	movw	r1, #4380	@ 0x111c
 800b878:	428b      	cmp	r3, r1
 800b87a:	bf38      	it	cc
 800b87c:	460b      	movcc	r3, r1
 800b87e:	429a      	cmp	r2, r3
 800b880:	d204      	bcs.n	800b88c <tcp_process+0x460>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	b29b      	uxth	r3, r3
 800b88a:	e00d      	b.n	800b8a8 <tcp_process+0x47c>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	f241 121c 	movw	r2, #4380	@ 0x111c
 800b896:	4293      	cmp	r3, r2
 800b898:	d904      	bls.n	800b8a4 <tcp_process+0x478>
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	b29b      	uxth	r3, r3
 800b8a2:	e001      	b.n	800b8a8 <tcp_process+0x47c>
 800b8a4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800b8ae:	4b4e      	ldr	r3, [pc, #312]	@ (800b9e8 <tcp_process+0x5bc>)
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d037      	beq.n	800b92a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	8b5b      	ldrh	r3, [r3, #26]
 800b8be:	f043 0302 	orr.w	r3, r3, #2
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2207      	movs	r2, #7
 800b8cc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800b8ce:	e02c      	b.n	800b92a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b9c0 <tcp_process+0x594>)
 800b8d2:	6819      	ldr	r1, [r3, #0]
 800b8d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b9c4 <tcp_process+0x598>)
 800b8d6:	881b      	ldrh	r3, [r3, #0]
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4b3b      	ldr	r3, [pc, #236]	@ (800b9c8 <tcp_process+0x59c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8e0:	4b3a      	ldr	r3, [pc, #232]	@ (800b9cc <tcp_process+0x5a0>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8e4:	885b      	ldrh	r3, [r3, #2]
 800b8e6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b8e8:	4a38      	ldr	r2, [pc, #224]	@ (800b9cc <tcp_process+0x5a0>)
 800b8ea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b8ec:	8812      	ldrh	r2, [r2, #0]
 800b8ee:	b292      	uxth	r2, r2
 800b8f0:	9202      	str	r2, [sp, #8]
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	4b36      	ldr	r3, [pc, #216]	@ (800b9d0 <tcp_process+0x5a4>)
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	4b36      	ldr	r3, [pc, #216]	@ (800b9d4 <tcp_process+0x5a8>)
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f003 f845 	bl	800e98c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800b902:	e167      	b.n	800bbd4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b904:	4b2d      	ldr	r3, [pc, #180]	@ (800b9bc <tcp_process+0x590>)
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	f003 0302 	and.w	r3, r3, #2
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	f000 8161 	beq.w	800bbd4 <tcp_process+0x7a8>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b916:	1e5a      	subs	r2, r3, #1
 800b918:	4b2b      	ldr	r3, [pc, #172]	@ (800b9c8 <tcp_process+0x59c>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	f040 8159 	bne.w	800bbd4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f002 fe1c 	bl	800e560 <tcp_rexmit>
      break;
 800b928:	e154      	b.n	800bbd4 <tcp_process+0x7a8>
 800b92a:	e153      	b.n	800bbd4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fa71 	bl	800be14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b932:	4b2d      	ldr	r3, [pc, #180]	@ (800b9e8 <tcp_process+0x5bc>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	f003 0320 	and.w	r3, r3, #32
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	f000 814c 	beq.w	800bbd8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	8b5b      	ldrh	r3, [r3, #26]
 800b944:	f043 0302 	orr.w	r3, r3, #2
 800b948:	b29a      	uxth	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2207      	movs	r2, #7
 800b952:	751a      	strb	r2, [r3, #20]
      }
      break;
 800b954:	e140      	b.n	800bbd8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa5c 	bl	800be14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b95c:	4b22      	ldr	r3, [pc, #136]	@ (800b9e8 <tcp_process+0x5bc>)
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b00      	cmp	r3, #0
 800b966:	d071      	beq.n	800ba4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b968:	4b14      	ldr	r3, [pc, #80]	@ (800b9bc <tcp_process+0x590>)
 800b96a:	781b      	ldrb	r3, [r3, #0]
 800b96c:	f003 0310 	and.w	r3, r3, #16
 800b970:	2b00      	cmp	r3, #0
 800b972:	d060      	beq.n	800ba36 <tcp_process+0x60a>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b978:	4b11      	ldr	r3, [pc, #68]	@ (800b9c0 <tcp_process+0x594>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d15a      	bne.n	800ba36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b984:	2b00      	cmp	r3, #0
 800b986:	d156      	bne.n	800ba36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	8b5b      	ldrh	r3, [r3, #26]
 800b98c:	f043 0302 	orr.w	r3, r3, #2
 800b990:	b29a      	uxth	r2, r3
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f7fe fda8 	bl	800a4ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b99c:	4b13      	ldr	r3, [pc, #76]	@ (800b9ec <tcp_process+0x5c0>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d105      	bne.n	800b9b2 <tcp_process+0x586>
 800b9a6:	4b11      	ldr	r3, [pc, #68]	@ (800b9ec <tcp_process+0x5c0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68db      	ldr	r3, [r3, #12]
 800b9ac:	4a0f      	ldr	r2, [pc, #60]	@ (800b9ec <tcp_process+0x5c0>)
 800b9ae:	6013      	str	r3, [r2, #0]
 800b9b0:	e02e      	b.n	800ba10 <tcp_process+0x5e4>
 800b9b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9ec <tcp_process+0x5c0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	617b      	str	r3, [r7, #20]
 800b9b8:	e027      	b.n	800ba0a <tcp_process+0x5de>
 800b9ba:	bf00      	nop
 800b9bc:	20004374 	.word	0x20004374
 800b9c0:	2000436c 	.word	0x2000436c
 800b9c4:	20004372 	.word	0x20004372
 800b9c8:	20004368 	.word	0x20004368
 800b9cc:	20004358 	.word	0x20004358
 800b9d0:	20000da0 	.word	0x20000da0
 800b9d4:	20000da4 	.word	0x20000da4
 800b9d8:	08016688 	.word	0x08016688
 800b9dc:	08016928 	.word	0x08016928
 800b9e0:	080166d4 	.word	0x080166d4
 800b9e4:	20004370 	.word	0x20004370
 800b9e8:	20004375 	.word	0x20004375
 800b9ec:	2000433c 	.word	0x2000433c
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d104      	bne.n	800ba04 <tcp_process+0x5d8>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	68da      	ldr	r2, [r3, #12]
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	60da      	str	r2, [r3, #12]
 800ba02:	e005      	b.n	800ba10 <tcp_process+0x5e4>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d1ef      	bne.n	800b9f0 <tcp_process+0x5c4>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2200      	movs	r2, #0
 800ba14:	60da      	str	r2, [r3, #12]
 800ba16:	4b77      	ldr	r3, [pc, #476]	@ (800bbf4 <tcp_process+0x7c8>)
 800ba18:	2201      	movs	r2, #1
 800ba1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	220a      	movs	r2, #10
 800ba20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ba22:	4b75      	ldr	r3, [pc, #468]	@ (800bbf8 <tcp_process+0x7cc>)
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	60da      	str	r2, [r3, #12]
 800ba2a:	4a73      	ldr	r2, [pc, #460]	@ (800bbf8 <tcp_process+0x7cc>)
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6013      	str	r3, [r2, #0]
 800ba30:	f003 f96e 	bl	800ed10 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ba34:	e0d2      	b.n	800bbdc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	8b5b      	ldrh	r3, [r3, #26]
 800ba3a:	f043 0302 	orr.w	r3, r3, #2
 800ba3e:	b29a      	uxth	r2, r3
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2208      	movs	r2, #8
 800ba48:	751a      	strb	r2, [r3, #20]
      break;
 800ba4a:	e0c7      	b.n	800bbdc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba4c:	4b6b      	ldr	r3, [pc, #428]	@ (800bbfc <tcp_process+0x7d0>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	f003 0310 	and.w	r3, r3, #16
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 80c1 	beq.w	800bbdc <tcp_process+0x7b0>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ba5e:	4b68      	ldr	r3, [pc, #416]	@ (800bc00 <tcp_process+0x7d4>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	f040 80ba 	bne.w	800bbdc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f040 80b5 	bne.w	800bbdc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2206      	movs	r2, #6
 800ba76:	751a      	strb	r2, [r3, #20]
      break;
 800ba78:	e0b0      	b.n	800bbdc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f9ca 	bl	800be14 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ba80:	4b60      	ldr	r3, [pc, #384]	@ (800bc04 <tcp_process+0x7d8>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	f003 0320 	and.w	r3, r3, #32
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 80a9 	beq.w	800bbe0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	8b5b      	ldrh	r3, [r3, #26]
 800ba92:	f043 0302 	orr.w	r3, r3, #2
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f7fe fd25 	bl	800a4ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800baa2:	4b59      	ldr	r3, [pc, #356]	@ (800bc08 <tcp_process+0x7dc>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	429a      	cmp	r2, r3
 800baaa:	d105      	bne.n	800bab8 <tcp_process+0x68c>
 800baac:	4b56      	ldr	r3, [pc, #344]	@ (800bc08 <tcp_process+0x7dc>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	4a55      	ldr	r2, [pc, #340]	@ (800bc08 <tcp_process+0x7dc>)
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	e013      	b.n	800bae0 <tcp_process+0x6b4>
 800bab8:	4b53      	ldr	r3, [pc, #332]	@ (800bc08 <tcp_process+0x7dc>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	613b      	str	r3, [r7, #16]
 800babe:	e00c      	b.n	800bada <tcp_process+0x6ae>
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d104      	bne.n	800bad4 <tcp_process+0x6a8>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	68da      	ldr	r2, [r3, #12]
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	60da      	str	r2, [r3, #12]
 800bad2:	e005      	b.n	800bae0 <tcp_process+0x6b4>
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	613b      	str	r3, [r7, #16]
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1ef      	bne.n	800bac0 <tcp_process+0x694>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	60da      	str	r2, [r3, #12]
 800bae6:	4b43      	ldr	r3, [pc, #268]	@ (800bbf4 <tcp_process+0x7c8>)
 800bae8:	2201      	movs	r2, #1
 800baea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	220a      	movs	r2, #10
 800baf0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800baf2:	4b41      	ldr	r3, [pc, #260]	@ (800bbf8 <tcp_process+0x7cc>)
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60da      	str	r2, [r3, #12]
 800bafa:	4a3f      	ldr	r2, [pc, #252]	@ (800bbf8 <tcp_process+0x7cc>)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	f003 f906 	bl	800ed10 <tcp_timer_needed>
      }
      break;
 800bb04:	e06c      	b.n	800bbe0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f984 	bl	800be14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bb0c:	4b3b      	ldr	r3, [pc, #236]	@ (800bbfc <tcp_process+0x7d0>)
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d065      	beq.n	800bbe4 <tcp_process+0x7b8>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb1c:	4b38      	ldr	r3, [pc, #224]	@ (800bc00 <tcp_process+0x7d4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d15f      	bne.n	800bbe4 <tcp_process+0x7b8>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d15b      	bne.n	800bbe4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f7fe fcdd 	bl	800a4ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800bb32:	4b35      	ldr	r3, [pc, #212]	@ (800bc08 <tcp_process+0x7dc>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d105      	bne.n	800bb48 <tcp_process+0x71c>
 800bb3c:	4b32      	ldr	r3, [pc, #200]	@ (800bc08 <tcp_process+0x7dc>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	4a31      	ldr	r2, [pc, #196]	@ (800bc08 <tcp_process+0x7dc>)
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	e013      	b.n	800bb70 <tcp_process+0x744>
 800bb48:	4b2f      	ldr	r3, [pc, #188]	@ (800bc08 <tcp_process+0x7dc>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	60fb      	str	r3, [r7, #12]
 800bb4e:	e00c      	b.n	800bb6a <tcp_process+0x73e>
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d104      	bne.n	800bb64 <tcp_process+0x738>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68da      	ldr	r2, [r3, #12]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	60da      	str	r2, [r3, #12]
 800bb62:	e005      	b.n	800bb70 <tcp_process+0x744>
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d1ef      	bne.n	800bb50 <tcp_process+0x724>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2200      	movs	r2, #0
 800bb74:	60da      	str	r2, [r3, #12]
 800bb76:	4b1f      	ldr	r3, [pc, #124]	@ (800bbf4 <tcp_process+0x7c8>)
 800bb78:	2201      	movs	r2, #1
 800bb7a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	220a      	movs	r2, #10
 800bb80:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800bb82:	4b1d      	ldr	r3, [pc, #116]	@ (800bbf8 <tcp_process+0x7cc>)
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	60da      	str	r2, [r3, #12]
 800bb8a:	4a1b      	ldr	r2, [pc, #108]	@ (800bbf8 <tcp_process+0x7cc>)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	f003 f8be 	bl	800ed10 <tcp_timer_needed>
      }
      break;
 800bb94:	e026      	b.n	800bbe4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 f93c 	bl	800be14 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800bb9c:	4b17      	ldr	r3, [pc, #92]	@ (800bbfc <tcp_process+0x7d0>)
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	f003 0310 	and.w	r3, r3, #16
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d01f      	beq.n	800bbe8 <tcp_process+0x7bc>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbac:	4b14      	ldr	r3, [pc, #80]	@ (800bc00 <tcp_process+0x7d4>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d119      	bne.n	800bbe8 <tcp_process+0x7bc>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d115      	bne.n	800bbe8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800bbbc:	4b11      	ldr	r3, [pc, #68]	@ (800bc04 <tcp_process+0x7d8>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	f043 0310 	orr.w	r3, r3, #16
 800bbc4:	b2da      	uxtb	r2, r3
 800bbc6:	4b0f      	ldr	r3, [pc, #60]	@ (800bc04 <tcp_process+0x7d8>)
 800bbc8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800bbca:	e00d      	b.n	800bbe8 <tcp_process+0x7bc>
    default:
      break;
 800bbcc:	bf00      	nop
 800bbce:	e00c      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbd0:	bf00      	nop
 800bbd2:	e00a      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbd4:	bf00      	nop
 800bbd6:	e008      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbd8:	bf00      	nop
 800bbda:	e006      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbdc:	bf00      	nop
 800bbde:	e004      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbe0:	bf00      	nop
 800bbe2:	e002      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbe4:	bf00      	nop
 800bbe6:	e000      	b.n	800bbea <tcp_process+0x7be>
      break;
 800bbe8:	bf00      	nop
  }
  return ERR_OK;
 800bbea:	2300      	movs	r3, #0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3724      	adds	r7, #36	@ 0x24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd90      	pop	{r4, r7, pc}
 800bbf4:	20004344 	.word	0x20004344
 800bbf8:	20004340 	.word	0x20004340
 800bbfc:	20004374 	.word	0x20004374
 800bc00:	2000436c 	.word	0x2000436c
 800bc04:	20004375 	.word	0x20004375
 800bc08:	2000433c 	.word	0x2000433c

0800bc0c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800bc0c:	b590      	push	{r4, r7, lr}
 800bc0e:	b085      	sub	sp, #20
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d106      	bne.n	800bc2a <tcp_oos_insert_segment+0x1e>
 800bc1c:	4b3b      	ldr	r3, [pc, #236]	@ (800bd0c <tcp_oos_insert_segment+0x100>)
 800bc1e:	f240 421f 	movw	r2, #1055	@ 0x41f
 800bc22:	493b      	ldr	r1, [pc, #236]	@ (800bd10 <tcp_oos_insert_segment+0x104>)
 800bc24:	483b      	ldr	r0, [pc, #236]	@ (800bd14 <tcp_oos_insert_segment+0x108>)
 800bc26:	f008 fa7b 	bl	8014120 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	899b      	ldrh	r3, [r3, #12]
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fa fc62 	bl	80064fc <lwip_htons>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	f003 0301 	and.w	r3, r3, #1
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d028      	beq.n	800bc96 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800bc44:	6838      	ldr	r0, [r7, #0]
 800bc46:	f7fe f969 	bl	8009f1c <tcp_segs_free>
    next = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	603b      	str	r3, [r7, #0]
 800bc4e:	e056      	b.n	800bcfe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	899b      	ldrh	r3, [r3, #12]
 800bc56:	b29b      	uxth	r3, r3
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7fa fc4f 	bl	80064fc <lwip_htons>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	f003 0301 	and.w	r3, r3, #1
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00d      	beq.n	800bc86 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	899b      	ldrh	r3, [r3, #12]
 800bc70:	b29c      	uxth	r4, r3
 800bc72:	2001      	movs	r0, #1
 800bc74:	f7fa fc42 	bl	80064fc <lwip_htons>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	4322      	orrs	r2, r4
 800bc82:	b292      	uxth	r2, r2
 800bc84:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f7fe f958 	bl	8009f46 <tcp_seg_free>
    while (next &&
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00e      	beq.n	800bcba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	891b      	ldrh	r3, [r3, #8]
 800bca0:	461a      	mov	r2, r3
 800bca2:	4b1d      	ldr	r3, [pc, #116]	@ (800bd18 <tcp_oos_insert_segment+0x10c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	441a      	add	r2, r3
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	685b      	ldr	r3, [r3, #4]
 800bcae:	6839      	ldr	r1, [r7, #0]
 800bcb0:	8909      	ldrh	r1, [r1, #8]
 800bcb2:	440b      	add	r3, r1
 800bcb4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	daca      	bge.n	800bc50 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d01e      	beq.n	800bcfe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	891b      	ldrh	r3, [r3, #8]
 800bcc4:	461a      	mov	r2, r3
 800bcc6:	4b14      	ldr	r3, [pc, #80]	@ (800bd18 <tcp_oos_insert_segment+0x10c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	441a      	add	r2, r3
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	dd12      	ble.n	800bcfe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd18 <tcp_oos_insert_segment+0x10c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	b29b      	uxth	r3, r3
 800bce6:	1ad3      	subs	r3, r2, r3
 800bce8:	b29a      	uxth	r2, r3
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	685a      	ldr	r2, [r3, #4]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	891b      	ldrh	r3, [r3, #8]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	4610      	mov	r0, r2
 800bcfa:	f7fc fa05 	bl	8008108 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	601a      	str	r2, [r3, #0]
}
 800bd04:	bf00      	nop
 800bd06:	3714      	adds	r7, #20
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd90      	pop	{r4, r7, pc}
 800bd0c:	08016688 	.word	0x08016688
 800bd10:	08016948 	.word	0x08016948
 800bd14:	080166d4 	.word	0x080166d4
 800bd18:	20004368 	.word	0x20004368

0800bd1c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800bd1c:	b5b0      	push	{r4, r5, r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
 800bd28:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800bd2a:	e03e      	b.n	800bdaa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800bd30:	68bb      	ldr	r3, [r7, #8]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	685b      	ldr	r3, [r3, #4]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f7fc fbf2 	bl	8008524 <pbuf_clen>
 800bd40:	4603      	mov	r3, r0
 800bd42:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bd4a:	8a7a      	ldrh	r2, [r7, #18]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d906      	bls.n	800bd5e <tcp_free_acked_segments+0x42>
 800bd50:	4b2a      	ldr	r3, [pc, #168]	@ (800bdfc <tcp_free_acked_segments+0xe0>)
 800bd52:	f240 4257 	movw	r2, #1111	@ 0x457
 800bd56:	492a      	ldr	r1, [pc, #168]	@ (800be00 <tcp_free_acked_segments+0xe4>)
 800bd58:	482a      	ldr	r0, [pc, #168]	@ (800be04 <tcp_free_acked_segments+0xe8>)
 800bd5a:	f008 f9e1 	bl	8014120 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800bd64:	8a7b      	ldrh	r3, [r7, #18]
 800bd66:	1ad3      	subs	r3, r2, r3
 800bd68:	b29a      	uxth	r2, r3
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800bd70:	697b      	ldr	r3, [r7, #20]
 800bd72:	891a      	ldrh	r2, [r3, #8]
 800bd74:	4b24      	ldr	r3, [pc, #144]	@ (800be08 <tcp_free_acked_segments+0xec>)
 800bd76:	881b      	ldrh	r3, [r3, #0]
 800bd78:	4413      	add	r3, r2
 800bd7a:	b29a      	uxth	r2, r3
 800bd7c:	4b22      	ldr	r3, [pc, #136]	@ (800be08 <tcp_free_acked_segments+0xec>)
 800bd7e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800bd80:	6978      	ldr	r0, [r7, #20]
 800bd82:	f7fe f8e0 	bl	8009f46 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00c      	beq.n	800bdaa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d109      	bne.n	800bdaa <tcp_free_acked_segments+0x8e>
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d106      	bne.n	800bdaa <tcp_free_acked_segments+0x8e>
 800bd9c:	4b17      	ldr	r3, [pc, #92]	@ (800bdfc <tcp_free_acked_segments+0xe0>)
 800bd9e:	f240 4261 	movw	r2, #1121	@ 0x461
 800bda2:	491a      	ldr	r1, [pc, #104]	@ (800be0c <tcp_free_acked_segments+0xf0>)
 800bda4:	4817      	ldr	r0, [pc, #92]	@ (800be04 <tcp_free_acked_segments+0xe8>)
 800bda6:	f008 f9bb 	bl	8014120 <iprintf>
  while (seg_list != NULL &&
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d020      	beq.n	800bdf2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f7fa fbb5 	bl	8006526 <lwip_htonl>
 800bdbc:	4604      	mov	r4, r0
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	891b      	ldrh	r3, [r3, #8]
 800bdc2:	461d      	mov	r5, r3
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	899b      	ldrh	r3, [r3, #12]
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7fa fb95 	bl	80064fc <lwip_htons>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	f003 0303 	and.w	r3, r3, #3
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d001      	beq.n	800bde2 <tcp_free_acked_segments+0xc6>
 800bdde:	2301      	movs	r3, #1
 800bde0:	e000      	b.n	800bde4 <tcp_free_acked_segments+0xc8>
 800bde2:	2300      	movs	r3, #0
 800bde4:	442b      	add	r3, r5
 800bde6:	18e2      	adds	r2, r4, r3
 800bde8:	4b09      	ldr	r3, [pc, #36]	@ (800be10 <tcp_free_acked_segments+0xf4>)
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	dd9c      	ble.n	800bd2c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800bdf2:	68bb      	ldr	r3, [r7, #8]
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3718      	adds	r7, #24
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bdb0      	pop	{r4, r5, r7, pc}
 800bdfc:	08016688 	.word	0x08016688
 800be00:	08016970 	.word	0x08016970
 800be04:	080166d4 	.word	0x080166d4
 800be08:	20004370 	.word	0x20004370
 800be0c:	08016998 	.word	0x08016998
 800be10:	2000436c 	.word	0x2000436c

0800be14 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800be14:	b5b0      	push	{r4, r5, r7, lr}
 800be16:	b094      	sub	sp, #80	@ 0x50
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d106      	bne.n	800be34 <tcp_receive+0x20>
 800be26:	4b91      	ldr	r3, [pc, #580]	@ (800c06c <tcp_receive+0x258>)
 800be28:	f240 427b 	movw	r2, #1147	@ 0x47b
 800be2c:	4990      	ldr	r1, [pc, #576]	@ (800c070 <tcp_receive+0x25c>)
 800be2e:	4891      	ldr	r0, [pc, #580]	@ (800c074 <tcp_receive+0x260>)
 800be30:	f008 f976 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7d1b      	ldrb	r3, [r3, #20]
 800be38:	2b03      	cmp	r3, #3
 800be3a:	d806      	bhi.n	800be4a <tcp_receive+0x36>
 800be3c:	4b8b      	ldr	r3, [pc, #556]	@ (800c06c <tcp_receive+0x258>)
 800be3e:	f240 427c 	movw	r2, #1148	@ 0x47c
 800be42:	498d      	ldr	r1, [pc, #564]	@ (800c078 <tcp_receive+0x264>)
 800be44:	488b      	ldr	r0, [pc, #556]	@ (800c074 <tcp_receive+0x260>)
 800be46:	f008 f96b 	bl	8014120 <iprintf>

  if (flags & TCP_ACK) {
 800be4a:	4b8c      	ldr	r3, [pc, #560]	@ (800c07c <tcp_receive+0x268>)
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	f003 0310 	and.w	r3, r3, #16
 800be52:	2b00      	cmp	r3, #0
 800be54:	f000 8264 	beq.w	800c320 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800be5e:	461a      	mov	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800be64:	4413      	add	r3, r2
 800be66:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be6c:	4b84      	ldr	r3, [pc, #528]	@ (800c080 <tcp_receive+0x26c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	2b00      	cmp	r3, #0
 800be74:	db1b      	blt.n	800beae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be7a:	4b81      	ldr	r3, [pc, #516]	@ (800c080 <tcp_receive+0x26c>)
 800be7c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800be7e:	429a      	cmp	r2, r3
 800be80:	d106      	bne.n	800be90 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be86:	4b7f      	ldr	r3, [pc, #508]	@ (800c084 <tcp_receive+0x270>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	1ad3      	subs	r3, r2, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	db0e      	blt.n	800beae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800be94:	4b7b      	ldr	r3, [pc, #492]	@ (800c084 <tcp_receive+0x270>)
 800be96:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800be98:	429a      	cmp	r2, r3
 800be9a:	d125      	bne.n	800bee8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800be9c:	4b7a      	ldr	r3, [pc, #488]	@ (800c088 <tcp_receive+0x274>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	89db      	ldrh	r3, [r3, #14]
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800beaa:	429a      	cmp	r2, r3
 800beac:	d91c      	bls.n	800bee8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800beae:	4b76      	ldr	r3, [pc, #472]	@ (800c088 <tcp_receive+0x274>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	89db      	ldrh	r3, [r3, #14]
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800bec8:	429a      	cmp	r2, r3
 800beca:	d205      	bcs.n	800bed8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800bed8:	4b69      	ldr	r3, [pc, #420]	@ (800c080 <tcp_receive+0x26c>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800bee0:	4b68      	ldr	r3, [pc, #416]	@ (800c084 <tcp_receive+0x270>)
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800bee8:	4b66      	ldr	r3, [pc, #408]	@ (800c084 <tcp_receive+0x270>)
 800beea:	681a      	ldr	r2, [r3, #0]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	dc58      	bgt.n	800bfa8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800bef6:	4b65      	ldr	r3, [pc, #404]	@ (800c08c <tcp_receive+0x278>)
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d14b      	bne.n	800bf96 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800bf08:	4413      	add	r3, r2
 800bf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d142      	bne.n	800bf96 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	db3d      	blt.n	800bf96 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bf1e:	4b59      	ldr	r3, [pc, #356]	@ (800c084 <tcp_receive+0x270>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d137      	bne.n	800bf96 <tcp_receive+0x182>
              found_dupack = 1;
 800bf26:	2301      	movs	r3, #1
 800bf28:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf30:	2bff      	cmp	r3, #255	@ 0xff
 800bf32:	d007      	beq.n	800bf44 <tcp_receive+0x130>
                ++pcb->dupacks;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf4a:	2b03      	cmp	r3, #3
 800bf4c:	d91b      	bls.n	800bf86 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf58:	4413      	add	r3, r2
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d30a      	bcc.n	800bf7c <tcp_receive+0x168>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bf70:	4413      	add	r3, r2
 800bf72:	b29a      	uxth	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800bf7a:	e004      	b.n	800bf86 <tcp_receive+0x172>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800bf82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bf8c:	2b02      	cmp	r3, #2
 800bf8e:	d902      	bls.n	800bf96 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f002 fb51 	bl	800e638 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800bf96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f040 8161 	bne.w	800c260 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bfa6:	e15b      	b.n	800c260 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800bfa8:	4b36      	ldr	r3, [pc, #216]	@ (800c084 <tcp_receive+0x270>)
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	3b01      	subs	r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	f2c0 814e 	blt.w	800c256 <tcp_receive+0x442>
 800bfba:	4b32      	ldr	r3, [pc, #200]	@ (800c084 <tcp_receive+0x270>)
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfc2:	1ad3      	subs	r3, r2, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	f300 8146 	bgt.w	800c256 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	8b5b      	ldrh	r3, [r3, #26]
 800bfce:	f003 0304 	and.w	r3, r3, #4
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d010      	beq.n	800bff8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	8b5b      	ldrh	r3, [r3, #26]
 800bfda:	f023 0304 	bic.w	r3, r3, #4
 800bfde:	b29a      	uxth	r2, r3
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2200      	movs	r2, #0
 800bffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c006:	10db      	asrs	r3, r3, #3
 800c008:	b21b      	sxth	r3, r3
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c012:	b29b      	uxth	r3, r3
 800c014:	4413      	add	r3, r2
 800c016:	b29b      	uxth	r3, r3
 800c018:	b21a      	sxth	r2, r3
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800c020:	4b18      	ldr	r3, [pc, #96]	@ (800c084 <tcp_receive+0x270>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	b29a      	uxth	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c02a:	b29b      	uxth	r3, r3
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800c038:	4b12      	ldr	r3, [pc, #72]	@ (800c084 <tcp_receive+0x270>)
 800c03a:	681a      	ldr	r2, [r3, #0]
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7d1b      	ldrb	r3, [r3, #20]
 800c044:	2b03      	cmp	r3, #3
 800c046:	f240 8097 	bls.w	800c178 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800c056:	429a      	cmp	r2, r3
 800c058:	d245      	bcs.n	800c0e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	8b5b      	ldrh	r3, [r3, #26]
 800c05e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c062:	2b00      	cmp	r3, #0
 800c064:	d014      	beq.n	800c090 <tcp_receive+0x27c>
 800c066:	2301      	movs	r3, #1
 800c068:	e013      	b.n	800c092 <tcp_receive+0x27e>
 800c06a:	bf00      	nop
 800c06c:	08016688 	.word	0x08016688
 800c070:	080169b8 	.word	0x080169b8
 800c074:	080166d4 	.word	0x080166d4
 800c078:	080169d4 	.word	0x080169d4
 800c07c:	20004374 	.word	0x20004374
 800c080:	20004368 	.word	0x20004368
 800c084:	2000436c 	.word	0x2000436c
 800c088:	20004358 	.word	0x20004358
 800c08c:	20004372 	.word	0x20004372
 800c090:	2302      	movs	r3, #2
 800c092:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800c096:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c0a0:	fb12 f303 	smulbb	r3, r2, r3
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800c0a8:	4293      	cmp	r3, r2
 800c0aa:	bf28      	it	cs
 800c0ac:	4613      	movcs	r3, r2
 800c0ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c0b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c0b8:	4413      	add	r3, r2
 800c0ba:	b29a      	uxth	r2, r3
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d309      	bcc.n	800c0da <tcp_receive+0x2c6>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c0cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c0ce:	4413      	add	r3, r2
 800c0d0:	b29a      	uxth	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c0d8:	e04e      	b.n	800c178 <tcp_receive+0x364>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c0e0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c0e4:	e048      	b.n	800c178 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c0ec:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c0ee:	4413      	add	r3, r2
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d309      	bcc.n	800c110 <tcp_receive+0x2fc>
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c102:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c104:	4413      	add	r3, r2
 800c106:	b29a      	uxth	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800c10e:	e004      	b.n	800c11a <tcp_receive+0x306>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c116:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c126:	429a      	cmp	r2, r3
 800c128:	d326      	bcc.n	800c178 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c136:	1ad3      	subs	r3, r2, r3
 800c138:	b29a      	uxth	r2, r3
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c14a:	4413      	add	r3, r2
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c154:	429a      	cmp	r2, r3
 800c156:	d30a      	bcc.n	800c16e <tcp_receive+0x35a>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c162:	4413      	add	r3, r2
 800c164:	b29a      	uxth	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800c16c:	e004      	b.n	800c178 <tcp_receive+0x364>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c174:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c180:	4a98      	ldr	r2, [pc, #608]	@ (800c3e4 <tcp_receive+0x5d0>)
 800c182:	6878      	ldr	r0, [r7, #4]
 800c184:	f7ff fdca 	bl	800bd1c <tcp_free_acked_segments>
 800c188:	4602      	mov	r2, r0
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c196:	4a94      	ldr	r2, [pc, #592]	@ (800c3e8 <tcp_receive+0x5d4>)
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f7ff fdbf 	bl	800bd1c <tcp_free_acked_segments>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d104      	bne.n	800c1b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c1b2:	861a      	strh	r2, [r3, #48]	@ 0x30
 800c1b4:	e002      	b.n	800c1bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d103      	bne.n	800c1d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800c1d8:	4b84      	ldr	r3, [pc, #528]	@ (800c3ec <tcp_receive+0x5d8>)
 800c1da:	881b      	ldrh	r3, [r3, #0]
 800c1dc:	4413      	add	r3, r2
 800c1de:	b29a      	uxth	r2, r3
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	8b5b      	ldrh	r3, [r3, #26]
 800c1ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d035      	beq.n	800c25e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d118      	bne.n	800c22c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d00c      	beq.n	800c21c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	4618      	mov	r0, r3
 800c210:	f7fa f989 	bl	8006526 <lwip_htonl>
 800c214:	4603      	mov	r3, r0
 800c216:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800c218:	2b00      	cmp	r3, #0
 800c21a:	dc20      	bgt.n	800c25e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	8b5b      	ldrh	r3, [r3, #26]
 800c220:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c224:	b29a      	uxth	r2, r3
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c22a:	e018      	b.n	800c25e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	4618      	mov	r0, r3
 800c23a:	f7fa f974 	bl	8006526 <lwip_htonl>
 800c23e:	4603      	mov	r3, r0
 800c240:	1ae3      	subs	r3, r4, r3
 800c242:	2b00      	cmp	r3, #0
 800c244:	dc0b      	bgt.n	800c25e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	8b5b      	ldrh	r3, [r3, #26]
 800c24a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c24e:	b29a      	uxth	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c254:	e003      	b.n	800c25e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f002 fbea 	bl	800ea30 <tcp_send_empty_ack>
 800c25c:	e000      	b.n	800c260 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c25e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c264:	2b00      	cmp	r3, #0
 800c266:	d05b      	beq.n	800c320 <tcp_receive+0x50c>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c26c:	4b60      	ldr	r3, [pc, #384]	@ (800c3f0 <tcp_receive+0x5dc>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	2b00      	cmp	r3, #0
 800c274:	da54      	bge.n	800c320 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800c276:	4b5f      	ldr	r3, [pc, #380]	@ (800c3f4 <tcp_receive+0x5e0>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	b29a      	uxth	r2, r3
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c280:	b29b      	uxth	r3, r3
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	b29b      	uxth	r3, r3
 800c286:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800c28a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c294:	10db      	asrs	r3, r3, #3
 800c296:	b21b      	sxth	r3, r3
 800c298:	b29b      	uxth	r3, r3
 800c29a:	1ad3      	subs	r3, r2, r3
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2ae:	4413      	add	r3, r2
 800c2b0:	b29b      	uxth	r3, r3
 800c2b2:	b21a      	sxth	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800c2b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	da05      	bge.n	800c2cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800c2c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2c4:	425b      	negs	r3, r3
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800c2cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c2d6:	109b      	asrs	r3, r3, #2
 800c2d8:	b21b      	sxth	r3, r3
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	1ad3      	subs	r3, r2, r3
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c2ea:	b29a      	uxth	r2, r3
 800c2ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c2f0:	4413      	add	r3, r2
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	b21a      	sxth	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c300:	10db      	asrs	r3, r3, #3
 800c302:	b21b      	sxth	r3, r3
 800c304:	b29a      	uxth	r2, r3
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c30c:	b29b      	uxth	r3, r3
 800c30e:	4413      	add	r3, r2
 800c310:	b29b      	uxth	r3, r3
 800c312:	b21a      	sxth	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800c320:	4b35      	ldr	r3, [pc, #212]	@ (800c3f8 <tcp_receive+0x5e4>)
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	2b00      	cmp	r3, #0
 800c326:	f000 84df 	beq.w	800cce8 <tcp_receive+0xed4>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	7d1b      	ldrb	r3, [r3, #20]
 800c32e:	2b06      	cmp	r3, #6
 800c330:	f200 84da 	bhi.w	800cce8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c338:	4b30      	ldr	r3, [pc, #192]	@ (800c3fc <tcp_receive+0x5e8>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	1ad3      	subs	r3, r2, r3
 800c33e:	3b01      	subs	r3, #1
 800c340:	2b00      	cmp	r3, #0
 800c342:	f2c0 808f 	blt.w	800c464 <tcp_receive+0x650>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c34a:	4b2b      	ldr	r3, [pc, #172]	@ (800c3f8 <tcp_receive+0x5e4>)
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	4619      	mov	r1, r3
 800c350:	4b2a      	ldr	r3, [pc, #168]	@ (800c3fc <tcp_receive+0x5e8>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	440b      	add	r3, r1
 800c356:	1ad3      	subs	r3, r2, r3
 800c358:	3301      	adds	r3, #1
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f300 8082 	bgt.w	800c464 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800c360:	4b27      	ldr	r3, [pc, #156]	@ (800c400 <tcp_receive+0x5ec>)
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c36a:	4b24      	ldr	r3, [pc, #144]	@ (800c3fc <tcp_receive+0x5e8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	1ad3      	subs	r3, r2, r3
 800c370:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800c372:	4b23      	ldr	r3, [pc, #140]	@ (800c400 <tcp_receive+0x5ec>)
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d106      	bne.n	800c388 <tcp_receive+0x574>
 800c37a:	4b22      	ldr	r3, [pc, #136]	@ (800c404 <tcp_receive+0x5f0>)
 800c37c:	f240 5294 	movw	r2, #1428	@ 0x594
 800c380:	4921      	ldr	r1, [pc, #132]	@ (800c408 <tcp_receive+0x5f4>)
 800c382:	4822      	ldr	r0, [pc, #136]	@ (800c40c <tcp_receive+0x5f8>)
 800c384:	f007 fecc 	bl	8014120 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800c388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c38a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800c38e:	4293      	cmp	r3, r2
 800c390:	d906      	bls.n	800c3a0 <tcp_receive+0x58c>
 800c392:	4b1c      	ldr	r3, [pc, #112]	@ (800c404 <tcp_receive+0x5f0>)
 800c394:	f240 5295 	movw	r2, #1429	@ 0x595
 800c398:	491d      	ldr	r1, [pc, #116]	@ (800c410 <tcp_receive+0x5fc>)
 800c39a:	481c      	ldr	r0, [pc, #112]	@ (800c40c <tcp_receive+0x5f8>)
 800c39c:	f007 fec0 	bl	8014120 <iprintf>
      off = (u16_t)off32;
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800c3a6:	4b16      	ldr	r3, [pc, #88]	@ (800c400 <tcp_receive+0x5ec>)
 800c3a8:	685b      	ldr	r3, [r3, #4]
 800c3aa:	891b      	ldrh	r3, [r3, #8]
 800c3ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d906      	bls.n	800c3c2 <tcp_receive+0x5ae>
 800c3b4:	4b13      	ldr	r3, [pc, #76]	@ (800c404 <tcp_receive+0x5f0>)
 800c3b6:	f240 5297 	movw	r2, #1431	@ 0x597
 800c3ba:	4916      	ldr	r1, [pc, #88]	@ (800c414 <tcp_receive+0x600>)
 800c3bc:	4813      	ldr	r0, [pc, #76]	@ (800c40c <tcp_receive+0x5f8>)
 800c3be:	f007 feaf 	bl	8014120 <iprintf>
      inseg.len -= off;
 800c3c2:	4b0f      	ldr	r3, [pc, #60]	@ (800c400 <tcp_receive+0x5ec>)
 800c3c4:	891a      	ldrh	r2, [r3, #8]
 800c3c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3ca:	1ad3      	subs	r3, r2, r3
 800c3cc:	b29a      	uxth	r2, r3
 800c3ce:	4b0c      	ldr	r3, [pc, #48]	@ (800c400 <tcp_receive+0x5ec>)
 800c3d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800c3d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c400 <tcp_receive+0x5ec>)
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	891a      	ldrh	r2, [r3, #8]
 800c3d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800c3e0:	e02a      	b.n	800c438 <tcp_receive+0x624>
 800c3e2:	bf00      	nop
 800c3e4:	080169f0 	.word	0x080169f0
 800c3e8:	080169f8 	.word	0x080169f8
 800c3ec:	20004370 	.word	0x20004370
 800c3f0:	2000436c 	.word	0x2000436c
 800c3f4:	20004330 	.word	0x20004330
 800c3f8:	20004372 	.word	0x20004372
 800c3fc:	20004368 	.word	0x20004368
 800c400:	20004348 	.word	0x20004348
 800c404:	08016688 	.word	0x08016688
 800c408:	08016a00 	.word	0x08016a00
 800c40c:	080166d4 	.word	0x080166d4
 800c410:	08016a10 	.word	0x08016a10
 800c414:	08016a20 	.word	0x08016a20
        off -= p->len;
 800c418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c41a:	895b      	ldrh	r3, [r3, #10]
 800c41c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800c426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c428:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c42a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800c42c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c42e:	2200      	movs	r2, #0
 800c430:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800c432:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800c438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c43a:	895b      	ldrh	r3, [r3, #10]
 800c43c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800c440:	429a      	cmp	r2, r3
 800c442:	d8e9      	bhi.n	800c418 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800c444:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c448:	4619      	mov	r1, r3
 800c44a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800c44c:	f7fb ff5c 	bl	8008308 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c454:	4a90      	ldr	r2, [pc, #576]	@ (800c698 <tcp_receive+0x884>)
 800c456:	6013      	str	r3, [r2, #0]
 800c458:	4b90      	ldr	r3, [pc, #576]	@ (800c69c <tcp_receive+0x888>)
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	4a8e      	ldr	r2, [pc, #568]	@ (800c698 <tcp_receive+0x884>)
 800c45e:	6812      	ldr	r2, [r2, #0]
 800c460:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800c462:	e00d      	b.n	800c480 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800c464:	4b8c      	ldr	r3, [pc, #560]	@ (800c698 <tcp_receive+0x884>)
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da06      	bge.n	800c480 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	8b5b      	ldrh	r3, [r3, #26]
 800c476:	f043 0302 	orr.w	r3, r3, #2
 800c47a:	b29a      	uxth	r2, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c480:	4b85      	ldr	r3, [pc, #532]	@ (800c698 <tcp_receive+0x884>)
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c488:	1ad3      	subs	r3, r2, r3
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f2c0 8427 	blt.w	800ccde <tcp_receive+0xeca>
 800c490:	4b81      	ldr	r3, [pc, #516]	@ (800c698 <tcp_receive+0x884>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c498:	6879      	ldr	r1, [r7, #4]
 800c49a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c49c:	440b      	add	r3, r1
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f300 841b 	bgt.w	800ccde <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c4ac:	4b7a      	ldr	r3, [pc, #488]	@ (800c698 <tcp_receive+0x884>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	f040 8298 	bne.w	800c9e6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800c4b6:	4b79      	ldr	r3, [pc, #484]	@ (800c69c <tcp_receive+0x888>)
 800c4b8:	891c      	ldrh	r4, [r3, #8]
 800c4ba:	4b78      	ldr	r3, [pc, #480]	@ (800c69c <tcp_receive+0x888>)
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	899b      	ldrh	r3, [r3, #12]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7fa f81a 	bl	80064fc <lwip_htons>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	f003 0303 	and.w	r3, r3, #3
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d001      	beq.n	800c4d8 <tcp_receive+0x6c4>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	e000      	b.n	800c4da <tcp_receive+0x6c6>
 800c4d8:	2300      	movs	r3, #0
 800c4da:	4423      	add	r3, r4
 800c4dc:	b29a      	uxth	r2, r3
 800c4de:	4b70      	ldr	r3, [pc, #448]	@ (800c6a0 <tcp_receive+0x88c>)
 800c4e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c4e6:	4b6e      	ldr	r3, [pc, #440]	@ (800c6a0 <tcp_receive+0x88c>)
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d274      	bcs.n	800c5d8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c4ee:	4b6b      	ldr	r3, [pc, #428]	@ (800c69c <tcp_receive+0x888>)
 800c4f0:	68db      	ldr	r3, [r3, #12]
 800c4f2:	899b      	ldrh	r3, [r3, #12]
 800c4f4:	b29b      	uxth	r3, r3
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7fa f800 	bl	80064fc <lwip_htons>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	2b00      	cmp	r3, #0
 800c506:	d01e      	beq.n	800c546 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800c508:	4b64      	ldr	r3, [pc, #400]	@ (800c69c <tcp_receive+0x888>)
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	899b      	ldrh	r3, [r3, #12]
 800c50e:	b29b      	uxth	r3, r3
 800c510:	b21b      	sxth	r3, r3
 800c512:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c516:	b21c      	sxth	r4, r3
 800c518:	4b60      	ldr	r3, [pc, #384]	@ (800c69c <tcp_receive+0x888>)
 800c51a:	68db      	ldr	r3, [r3, #12]
 800c51c:	899b      	ldrh	r3, [r3, #12]
 800c51e:	b29b      	uxth	r3, r3
 800c520:	4618      	mov	r0, r3
 800c522:	f7f9 ffeb 	bl	80064fc <lwip_htons>
 800c526:	4603      	mov	r3, r0
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800c52e:	b29b      	uxth	r3, r3
 800c530:	4618      	mov	r0, r3
 800c532:	f7f9 ffe3 	bl	80064fc <lwip_htons>
 800c536:	4603      	mov	r3, r0
 800c538:	b21b      	sxth	r3, r3
 800c53a:	4323      	orrs	r3, r4
 800c53c:	b21a      	sxth	r2, r3
 800c53e:	4b57      	ldr	r3, [pc, #348]	@ (800c69c <tcp_receive+0x888>)
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	b292      	uxth	r2, r2
 800c544:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c54a:	4b54      	ldr	r3, [pc, #336]	@ (800c69c <tcp_receive+0x888>)
 800c54c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c54e:	4b53      	ldr	r3, [pc, #332]	@ (800c69c <tcp_receive+0x888>)
 800c550:	68db      	ldr	r3, [r3, #12]
 800c552:	899b      	ldrh	r3, [r3, #12]
 800c554:	b29b      	uxth	r3, r3
 800c556:	4618      	mov	r0, r3
 800c558:	f7f9 ffd0 	bl	80064fc <lwip_htons>
 800c55c:	4603      	mov	r3, r0
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	f003 0302 	and.w	r3, r3, #2
 800c564:	2b00      	cmp	r3, #0
 800c566:	d005      	beq.n	800c574 <tcp_receive+0x760>
            inseg.len -= 1;
 800c568:	4b4c      	ldr	r3, [pc, #304]	@ (800c69c <tcp_receive+0x888>)
 800c56a:	891b      	ldrh	r3, [r3, #8]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	b29a      	uxth	r2, r3
 800c570:	4b4a      	ldr	r3, [pc, #296]	@ (800c69c <tcp_receive+0x888>)
 800c572:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800c574:	4b49      	ldr	r3, [pc, #292]	@ (800c69c <tcp_receive+0x888>)
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	4a48      	ldr	r2, [pc, #288]	@ (800c69c <tcp_receive+0x888>)
 800c57a:	8912      	ldrh	r2, [r2, #8]
 800c57c:	4611      	mov	r1, r2
 800c57e:	4618      	mov	r0, r3
 800c580:	f7fb fdc2 	bl	8008108 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800c584:	4b45      	ldr	r3, [pc, #276]	@ (800c69c <tcp_receive+0x888>)
 800c586:	891c      	ldrh	r4, [r3, #8]
 800c588:	4b44      	ldr	r3, [pc, #272]	@ (800c69c <tcp_receive+0x888>)
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	899b      	ldrh	r3, [r3, #12]
 800c58e:	b29b      	uxth	r3, r3
 800c590:	4618      	mov	r0, r3
 800c592:	f7f9 ffb3 	bl	80064fc <lwip_htons>
 800c596:	4603      	mov	r3, r0
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	f003 0303 	and.w	r3, r3, #3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <tcp_receive+0x792>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e000      	b.n	800c5a8 <tcp_receive+0x794>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	4423      	add	r3, r4
 800c5aa:	b29a      	uxth	r2, r3
 800c5ac:	4b3c      	ldr	r3, [pc, #240]	@ (800c6a0 <tcp_receive+0x88c>)
 800c5ae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800c5b0:	4b3b      	ldr	r3, [pc, #236]	@ (800c6a0 <tcp_receive+0x88c>)
 800c5b2:	881b      	ldrh	r3, [r3, #0]
 800c5b4:	461a      	mov	r2, r3
 800c5b6:	4b38      	ldr	r3, [pc, #224]	@ (800c698 <tcp_receive+0x884>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	441a      	add	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5c0:	6879      	ldr	r1, [r7, #4]
 800c5c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800c5c4:	440b      	add	r3, r1
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d006      	beq.n	800c5d8 <tcp_receive+0x7c4>
 800c5ca:	4b36      	ldr	r3, [pc, #216]	@ (800c6a4 <tcp_receive+0x890>)
 800c5cc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800c5d0:	4935      	ldr	r1, [pc, #212]	@ (800c6a8 <tcp_receive+0x894>)
 800c5d2:	4836      	ldr	r0, [pc, #216]	@ (800c6ac <tcp_receive+0x898>)
 800c5d4:	f007 fda4 	bl	8014120 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 80e6 	beq.w	800c7ae <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c5e2:	4b2e      	ldr	r3, [pc, #184]	@ (800c69c <tcp_receive+0x888>)
 800c5e4:	68db      	ldr	r3, [r3, #12]
 800c5e6:	899b      	ldrh	r3, [r3, #12]
 800c5e8:	b29b      	uxth	r3, r3
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f7f9 ff86 	bl	80064fc <lwip_htons>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	f003 0301 	and.w	r3, r3, #1
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d010      	beq.n	800c61e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800c5fc:	e00a      	b.n	800c614 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c602:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f7fd fc99 	bl	8009f46 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1f0      	bne.n	800c5fe <tcp_receive+0x7ea>
 800c61c:	e0c7      	b.n	800c7ae <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c622:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800c624:	e051      	b.n	800c6ca <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c628:	68db      	ldr	r3, [r3, #12]
 800c62a:	899b      	ldrh	r3, [r3, #12]
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	4618      	mov	r0, r3
 800c630:	f7f9 ff64 	bl	80064fc <lwip_htons>
 800c634:	4603      	mov	r3, r0
 800c636:	b2db      	uxtb	r3, r3
 800c638:	f003 0301 	and.w	r3, r3, #1
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d03c      	beq.n	800c6ba <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800c640:	4b16      	ldr	r3, [pc, #88]	@ (800c69c <tcp_receive+0x888>)
 800c642:	68db      	ldr	r3, [r3, #12]
 800c644:	899b      	ldrh	r3, [r3, #12]
 800c646:	b29b      	uxth	r3, r3
 800c648:	4618      	mov	r0, r3
 800c64a:	f7f9 ff57 	bl	80064fc <lwip_htons>
 800c64e:	4603      	mov	r3, r0
 800c650:	b2db      	uxtb	r3, r3
 800c652:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800c656:	2b00      	cmp	r3, #0
 800c658:	d12f      	bne.n	800c6ba <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800c65a:	4b10      	ldr	r3, [pc, #64]	@ (800c69c <tcp_receive+0x888>)
 800c65c:	68db      	ldr	r3, [r3, #12]
 800c65e:	899b      	ldrh	r3, [r3, #12]
 800c660:	b29c      	uxth	r4, r3
 800c662:	2001      	movs	r0, #1
 800c664:	f7f9 ff4a 	bl	80064fc <lwip_htons>
 800c668:	4603      	mov	r3, r0
 800c66a:	461a      	mov	r2, r3
 800c66c:	4b0b      	ldr	r3, [pc, #44]	@ (800c69c <tcp_receive+0x888>)
 800c66e:	68db      	ldr	r3, [r3, #12]
 800c670:	4322      	orrs	r2, r4
 800c672:	b292      	uxth	r2, r2
 800c674:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800c676:	4b09      	ldr	r3, [pc, #36]	@ (800c69c <tcp_receive+0x888>)
 800c678:	891c      	ldrh	r4, [r3, #8]
 800c67a:	4b08      	ldr	r3, [pc, #32]	@ (800c69c <tcp_receive+0x888>)
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	899b      	ldrh	r3, [r3, #12]
 800c680:	b29b      	uxth	r3, r3
 800c682:	4618      	mov	r0, r3
 800c684:	f7f9 ff3a 	bl	80064fc <lwip_htons>
 800c688:	4603      	mov	r3, r0
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	f003 0303 	and.w	r3, r3, #3
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00d      	beq.n	800c6b0 <tcp_receive+0x89c>
 800c694:	2301      	movs	r3, #1
 800c696:	e00c      	b.n	800c6b2 <tcp_receive+0x89e>
 800c698:	20004368 	.word	0x20004368
 800c69c:	20004348 	.word	0x20004348
 800c6a0:	20004372 	.word	0x20004372
 800c6a4:	08016688 	.word	0x08016688
 800c6a8:	08016a30 	.word	0x08016a30
 800c6ac:	080166d4 	.word	0x080166d4
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	4423      	add	r3, r4
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	4b98      	ldr	r3, [pc, #608]	@ (800c918 <tcp_receive+0xb04>)
 800c6b8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800c6ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6bc:	613b      	str	r3, [r7, #16]
              next = next->next;
 800c6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800c6c4:	6938      	ldr	r0, [r7, #16]
 800c6c6:	f7fd fc3e 	bl	8009f46 <tcp_seg_free>
            while (next &&
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00e      	beq.n	800c6ee <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800c6d0:	4b91      	ldr	r3, [pc, #580]	@ (800c918 <tcp_receive+0xb04>)
 800c6d2:	881b      	ldrh	r3, [r3, #0]
 800c6d4:	461a      	mov	r2, r3
 800c6d6:	4b91      	ldr	r3, [pc, #580]	@ (800c91c <tcp_receive+0xb08>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	441a      	add	r2, r3
 800c6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c6e4:	8909      	ldrh	r1, [r1, #8]
 800c6e6:	440b      	add	r3, r1
 800c6e8:	1ad3      	subs	r3, r2, r3
            while (next &&
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	da9b      	bge.n	800c626 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800c6ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d059      	beq.n	800c7a8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800c6f4:	4b88      	ldr	r3, [pc, #544]	@ (800c918 <tcp_receive+0xb04>)
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	4b88      	ldr	r3, [pc, #544]	@ (800c91c <tcp_receive+0xb08>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	441a      	add	r2, r3
 800c700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c702:	68db      	ldr	r3, [r3, #12]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	1ad3      	subs	r3, r2, r3
            if (next &&
 800c708:	2b00      	cmp	r3, #0
 800c70a:	dd4d      	ble.n	800c7a8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800c70c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	b29a      	uxth	r2, r3
 800c714:	4b81      	ldr	r3, [pc, #516]	@ (800c91c <tcp_receive+0xb08>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	b29a      	uxth	r2, r3
 800c71e:	4b80      	ldr	r3, [pc, #512]	@ (800c920 <tcp_receive+0xb0c>)
 800c720:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800c722:	4b7f      	ldr	r3, [pc, #508]	@ (800c920 <tcp_receive+0xb0c>)
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	899b      	ldrh	r3, [r3, #12]
 800c728:	b29b      	uxth	r3, r3
 800c72a:	4618      	mov	r0, r3
 800c72c:	f7f9 fee6 	bl	80064fc <lwip_htons>
 800c730:	4603      	mov	r3, r0
 800c732:	b2db      	uxtb	r3, r3
 800c734:	f003 0302 	and.w	r3, r3, #2
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d005      	beq.n	800c748 <tcp_receive+0x934>
                inseg.len -= 1;
 800c73c:	4b78      	ldr	r3, [pc, #480]	@ (800c920 <tcp_receive+0xb0c>)
 800c73e:	891b      	ldrh	r3, [r3, #8]
 800c740:	3b01      	subs	r3, #1
 800c742:	b29a      	uxth	r2, r3
 800c744:	4b76      	ldr	r3, [pc, #472]	@ (800c920 <tcp_receive+0xb0c>)
 800c746:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800c748:	4b75      	ldr	r3, [pc, #468]	@ (800c920 <tcp_receive+0xb0c>)
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	4a74      	ldr	r2, [pc, #464]	@ (800c920 <tcp_receive+0xb0c>)
 800c74e:	8912      	ldrh	r2, [r2, #8]
 800c750:	4611      	mov	r1, r2
 800c752:	4618      	mov	r0, r3
 800c754:	f7fb fcd8 	bl	8008108 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800c758:	4b71      	ldr	r3, [pc, #452]	@ (800c920 <tcp_receive+0xb0c>)
 800c75a:	891c      	ldrh	r4, [r3, #8]
 800c75c:	4b70      	ldr	r3, [pc, #448]	@ (800c920 <tcp_receive+0xb0c>)
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	899b      	ldrh	r3, [r3, #12]
 800c762:	b29b      	uxth	r3, r3
 800c764:	4618      	mov	r0, r3
 800c766:	f7f9 fec9 	bl	80064fc <lwip_htons>
 800c76a:	4603      	mov	r3, r0
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	f003 0303 	and.w	r3, r3, #3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d001      	beq.n	800c77a <tcp_receive+0x966>
 800c776:	2301      	movs	r3, #1
 800c778:	e000      	b.n	800c77c <tcp_receive+0x968>
 800c77a:	2300      	movs	r3, #0
 800c77c:	4423      	add	r3, r4
 800c77e:	b29a      	uxth	r2, r3
 800c780:	4b65      	ldr	r3, [pc, #404]	@ (800c918 <tcp_receive+0xb04>)
 800c782:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800c784:	4b64      	ldr	r3, [pc, #400]	@ (800c918 <tcp_receive+0xb04>)
 800c786:	881b      	ldrh	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	4b64      	ldr	r3, [pc, #400]	@ (800c91c <tcp_receive+0xb08>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	441a      	add	r2, r3
 800c790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	429a      	cmp	r2, r3
 800c798:	d006      	beq.n	800c7a8 <tcp_receive+0x994>
 800c79a:	4b62      	ldr	r3, [pc, #392]	@ (800c924 <tcp_receive+0xb10>)
 800c79c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800c7a0:	4961      	ldr	r1, [pc, #388]	@ (800c928 <tcp_receive+0xb14>)
 800c7a2:	4862      	ldr	r0, [pc, #392]	@ (800c92c <tcp_receive+0xb18>)
 800c7a4:	f007 fcbc 	bl	8014120 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c7ac:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800c7ae:	4b5a      	ldr	r3, [pc, #360]	@ (800c918 <tcp_receive+0xb04>)
 800c7b0:	881b      	ldrh	r3, [r3, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	4b59      	ldr	r3, [pc, #356]	@ (800c91c <tcp_receive+0xb08>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	441a      	add	r2, r3
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c7c2:	4b55      	ldr	r3, [pc, #340]	@ (800c918 <tcp_receive+0xb04>)
 800c7c4:	881b      	ldrh	r3, [r3, #0]
 800c7c6:	429a      	cmp	r2, r3
 800c7c8:	d206      	bcs.n	800c7d8 <tcp_receive+0x9c4>
 800c7ca:	4b56      	ldr	r3, [pc, #344]	@ (800c924 <tcp_receive+0xb10>)
 800c7cc:	f240 6207 	movw	r2, #1543	@ 0x607
 800c7d0:	4957      	ldr	r1, [pc, #348]	@ (800c930 <tcp_receive+0xb1c>)
 800c7d2:	4856      	ldr	r0, [pc, #344]	@ (800c92c <tcp_receive+0xb18>)
 800c7d4:	f007 fca4 	bl	8014120 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c7dc:	4b4e      	ldr	r3, [pc, #312]	@ (800c918 <tcp_receive+0xb04>)
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	1ad3      	subs	r3, r2, r3
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f7fc fe85 	bl	80094f8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800c7ee:	4b4c      	ldr	r3, [pc, #304]	@ (800c920 <tcp_receive+0xb0c>)
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	891b      	ldrh	r3, [r3, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d006      	beq.n	800c806 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800c7f8:	4b49      	ldr	r3, [pc, #292]	@ (800c920 <tcp_receive+0xb0c>)
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	4a4d      	ldr	r2, [pc, #308]	@ (800c934 <tcp_receive+0xb20>)
 800c7fe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800c800:	4b47      	ldr	r3, [pc, #284]	@ (800c920 <tcp_receive+0xb0c>)
 800c802:	2200      	movs	r2, #0
 800c804:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800c806:	4b46      	ldr	r3, [pc, #280]	@ (800c920 <tcp_receive+0xb0c>)
 800c808:	68db      	ldr	r3, [r3, #12]
 800c80a:	899b      	ldrh	r3, [r3, #12]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	4618      	mov	r0, r3
 800c810:	f7f9 fe74 	bl	80064fc <lwip_htons>
 800c814:	4603      	mov	r3, r0
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 0301 	and.w	r3, r3, #1
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	f000 80b8 	beq.w	800c992 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800c822:	4b45      	ldr	r3, [pc, #276]	@ (800c938 <tcp_receive+0xb24>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f043 0320 	orr.w	r3, r3, #32
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	4b42      	ldr	r3, [pc, #264]	@ (800c938 <tcp_receive+0xb24>)
 800c82e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800c830:	e0af      	b.n	800c992 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c836:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	4a36      	ldr	r2, [pc, #216]	@ (800c91c <tcp_receive+0xb08>)
 800c842:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	891b      	ldrh	r3, [r3, #8]
 800c848:	461c      	mov	r4, r3
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	68db      	ldr	r3, [r3, #12]
 800c84e:	899b      	ldrh	r3, [r3, #12]
 800c850:	b29b      	uxth	r3, r3
 800c852:	4618      	mov	r0, r3
 800c854:	f7f9 fe52 	bl	80064fc <lwip_htons>
 800c858:	4603      	mov	r3, r0
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	f003 0303 	and.w	r3, r3, #3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <tcp_receive+0xa54>
 800c864:	2301      	movs	r3, #1
 800c866:	e000      	b.n	800c86a <tcp_receive+0xa56>
 800c868:	2300      	movs	r3, #0
 800c86a:	191a      	adds	r2, r3, r4
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c870:	441a      	add	r2, r3
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c87a:	461c      	mov	r4, r3
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	891b      	ldrh	r3, [r3, #8]
 800c880:	461d      	mov	r5, r3
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	899b      	ldrh	r3, [r3, #12]
 800c888:	b29b      	uxth	r3, r3
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7f9 fe36 	bl	80064fc <lwip_htons>
 800c890:	4603      	mov	r3, r0
 800c892:	b2db      	uxtb	r3, r3
 800c894:	f003 0303 	and.w	r3, r3, #3
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d001      	beq.n	800c8a0 <tcp_receive+0xa8c>
 800c89c:	2301      	movs	r3, #1
 800c89e:	e000      	b.n	800c8a2 <tcp_receive+0xa8e>
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	442b      	add	r3, r5
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	d206      	bcs.n	800c8b6 <tcp_receive+0xaa2>
 800c8a8:	4b1e      	ldr	r3, [pc, #120]	@ (800c924 <tcp_receive+0xb10>)
 800c8aa:	f240 622b 	movw	r2, #1579	@ 0x62b
 800c8ae:	4923      	ldr	r1, [pc, #140]	@ (800c93c <tcp_receive+0xb28>)
 800c8b0:	481e      	ldr	r0, [pc, #120]	@ (800c92c <tcp_receive+0xb18>)
 800c8b2:	f007 fc35 	bl	8014120 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	891b      	ldrh	r3, [r3, #8]
 800c8ba:	461c      	mov	r4, r3
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	899b      	ldrh	r3, [r3, #12]
 800c8c2:	b29b      	uxth	r3, r3
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7f9 fe19 	bl	80064fc <lwip_htons>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	b2db      	uxtb	r3, r3
 800c8ce:	f003 0303 	and.w	r3, r3, #3
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d001      	beq.n	800c8da <tcp_receive+0xac6>
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	e000      	b.n	800c8dc <tcp_receive+0xac8>
 800c8da:	2300      	movs	r3, #0
 800c8dc:	1919      	adds	r1, r3, r4
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c8e2:	b28b      	uxth	r3, r1
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7fc fe03 	bl	80094f8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	891b      	ldrh	r3, [r3, #8]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d028      	beq.n	800c94e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800c8fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c934 <tcp_receive+0xb20>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01d      	beq.n	800c940 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800c904:	4b0b      	ldr	r3, [pc, #44]	@ (800c934 <tcp_receive+0xb20>)
 800c906:	681a      	ldr	r2, [r3, #0]
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	4619      	mov	r1, r3
 800c90e:	4610      	mov	r0, r2
 800c910:	f7fb fe42 	bl	8008598 <pbuf_cat>
 800c914:	e018      	b.n	800c948 <tcp_receive+0xb34>
 800c916:	bf00      	nop
 800c918:	20004372 	.word	0x20004372
 800c91c:	20004368 	.word	0x20004368
 800c920:	20004348 	.word	0x20004348
 800c924:	08016688 	.word	0x08016688
 800c928:	08016a68 	.word	0x08016a68
 800c92c:	080166d4 	.word	0x080166d4
 800c930:	08016aa4 	.word	0x08016aa4
 800c934:	20004378 	.word	0x20004378
 800c938:	20004375 	.word	0x20004375
 800c93c:	08016ac4 	.word	0x08016ac4
            } else {
              recv_data = cseg->p;
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	4a70      	ldr	r2, [pc, #448]	@ (800cb08 <tcp_receive+0xcf4>)
 800c946:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	2200      	movs	r2, #0
 800c94c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	899b      	ldrh	r3, [r3, #12]
 800c954:	b29b      	uxth	r3, r3
 800c956:	4618      	mov	r0, r3
 800c958:	f7f9 fdd0 	bl	80064fc <lwip_htons>
 800c95c:	4603      	mov	r3, r0
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	f003 0301 	and.w	r3, r3, #1
 800c964:	2b00      	cmp	r3, #0
 800c966:	d00d      	beq.n	800c984 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800c968:	4b68      	ldr	r3, [pc, #416]	@ (800cb0c <tcp_receive+0xcf8>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	f043 0320 	orr.w	r3, r3, #32
 800c970:	b2da      	uxtb	r2, r3
 800c972:	4b66      	ldr	r3, [pc, #408]	@ (800cb0c <tcp_receive+0xcf8>)
 800c974:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	7d1b      	ldrb	r3, [r3, #20]
 800c97a:	2b04      	cmp	r3, #4
 800c97c:	d102      	bne.n	800c984 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2207      	movs	r2, #7
 800c982:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	681a      	ldr	r2, [r3, #0]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800c98c:	68b8      	ldr	r0, [r7, #8]
 800c98e:	f7fd fada 	bl	8009f46 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c996:	2b00      	cmp	r3, #0
 800c998:	d008      	beq.n	800c9ac <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c99e:	68db      	ldr	r3, [r3, #12]
 800c9a0:	685a      	ldr	r2, [r3, #4]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	f43f af43 	beq.w	800c832 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	8b5b      	ldrh	r3, [r3, #26]
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00e      	beq.n	800c9d6 <tcp_receive+0xbc2>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	8b5b      	ldrh	r3, [r3, #26]
 800c9bc:	f023 0301 	bic.w	r3, r3, #1
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	835a      	strh	r2, [r3, #26]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	8b5b      	ldrh	r3, [r3, #26]
 800c9ca:	f043 0302 	orr.w	r3, r3, #2
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c9d4:	e187      	b.n	800cce6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	8b5b      	ldrh	r3, [r3, #26]
 800c9da:	f043 0301 	orr.w	r3, r3, #1
 800c9de:	b29a      	uxth	r2, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800c9e4:	e17f      	b.n	800cce6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800c9ee:	4848      	ldr	r0, [pc, #288]	@ (800cb10 <tcp_receive+0xcfc>)
 800c9f0:	f7fd fae0 	bl	8009fb4 <tcp_seg_copy>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	675a      	str	r2, [r3, #116]	@ 0x74
 800c9fa:	e16c      	b.n	800ccd6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca06:	e156      	b.n	800ccb6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800ca08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca0a:	68db      	ldr	r3, [r3, #12]
 800ca0c:	685a      	ldr	r2, [r3, #4]
 800ca0e:	4b41      	ldr	r3, [pc, #260]	@ (800cb14 <tcp_receive+0xd00>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d11d      	bne.n	800ca52 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ca16:	4b3e      	ldr	r3, [pc, #248]	@ (800cb10 <tcp_receive+0xcfc>)
 800ca18:	891a      	ldrh	r2, [r3, #8]
 800ca1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca1c:	891b      	ldrh	r3, [r3, #8]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	f240 814e 	bls.w	800ccc0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca24:	483a      	ldr	r0, [pc, #232]	@ (800cb10 <tcp_receive+0xcfc>)
 800ca26:	f7fd fac5 	bl	8009fb4 <tcp_seg_copy>
 800ca2a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	f000 8148 	beq.w	800ccc4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800ca34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d003      	beq.n	800ca42 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800ca3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca3c:	697a      	ldr	r2, [r7, #20]
 800ca3e:	601a      	str	r2, [r3, #0]
 800ca40:	e002      	b.n	800ca48 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	697a      	ldr	r2, [r7, #20]
 800ca46:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ca48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca4a:	6978      	ldr	r0, [r7, #20]
 800ca4c:	f7ff f8de 	bl	800bc0c <tcp_oos_insert_segment>
                }
                break;
 800ca50:	e138      	b.n	800ccc4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ca52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d117      	bne.n	800ca88 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ca58:	4b2e      	ldr	r3, [pc, #184]	@ (800cb14 <tcp_receive+0xd00>)
 800ca5a:	681a      	ldr	r2, [r3, #0]
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	da57      	bge.n	800cb18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ca68:	4829      	ldr	r0, [pc, #164]	@ (800cb10 <tcp_receive+0xcfc>)
 800ca6a:	f7fd faa3 	bl	8009fb4 <tcp_seg_copy>
 800ca6e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 8128 	beq.w	800ccc8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	69ba      	ldr	r2, [r7, #24]
 800ca7c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ca7e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ca80:	69b8      	ldr	r0, [r7, #24]
 800ca82:	f7ff f8c3 	bl	800bc0c <tcp_oos_insert_segment>
                  }
                  break;
 800ca86:	e11f      	b.n	800ccc8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800ca88:	4b22      	ldr	r3, [pc, #136]	@ (800cb14 <tcp_receive+0xd00>)
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	1ad3      	subs	r3, r2, r3
 800ca94:	3b01      	subs	r3, #1
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	db3e      	blt.n	800cb18 <tcp_receive+0xd04>
 800ca9a:	4b1e      	ldr	r3, [pc, #120]	@ (800cb14 <tcp_receive+0xd00>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa0:	68db      	ldr	r3, [r3, #12]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	3301      	adds	r3, #1
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	dc35      	bgt.n	800cb18 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800caac:	4818      	ldr	r0, [pc, #96]	@ (800cb10 <tcp_receive+0xcfc>)
 800caae:	f7fd fa81 	bl	8009fb4 <tcp_seg_copy>
 800cab2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	f000 8108 	beq.w	800cccc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800cabc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cabe:	68db      	ldr	r3, [r3, #12]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cac4:	8912      	ldrh	r2, [r2, #8]
 800cac6:	441a      	add	r2, r3
 800cac8:	4b12      	ldr	r3, [pc, #72]	@ (800cb14 <tcp_receive+0xd00>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	dd12      	ble.n	800caf8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800cad2:	4b10      	ldr	r3, [pc, #64]	@ (800cb14 <tcp_receive+0xd00>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	b29b      	uxth	r3, r3
 800cae0:	1ad3      	subs	r3, r2, r3
 800cae2:	b29a      	uxth	r2, r3
 800cae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cae6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800cae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caee:	891b      	ldrh	r3, [r3, #8]
 800caf0:	4619      	mov	r1, r3
 800caf2:	4610      	mov	r0, r2
 800caf4:	f7fb fb08 	bl	8008108 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800caf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cafa:	69fa      	ldr	r2, [r7, #28]
 800cafc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800cafe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800cb00:	69f8      	ldr	r0, [r7, #28]
 800cb02:	f7ff f883 	bl	800bc0c <tcp_oos_insert_segment>
                  }
                  break;
 800cb06:	e0e1      	b.n	800cccc <tcp_receive+0xeb8>
 800cb08:	20004378 	.word	0x20004378
 800cb0c:	20004375 	.word	0x20004375
 800cb10:	20004348 	.word	0x20004348
 800cb14:	20004368 	.word	0x20004368
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800cb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800cb1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	f040 80c5 	bne.w	800ccb0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800cb26:	4b7f      	ldr	r3, [pc, #508]	@ (800cd24 <tcp_receive+0xf10>)
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb2c:	68db      	ldr	r3, [r3, #12]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f340 80bc 	ble.w	800ccb0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	899b      	ldrh	r3, [r3, #12]
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7f9 fcdb 	bl	80064fc <lwip_htons>
 800cb46:	4603      	mov	r3, r0
 800cb48:	b2db      	uxtb	r3, r3
 800cb4a:	f003 0301 	and.w	r3, r3, #1
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	f040 80be 	bne.w	800ccd0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800cb54:	4874      	ldr	r0, [pc, #464]	@ (800cd28 <tcp_receive+0xf14>)
 800cb56:	f7fd fa2d 	bl	8009fb4 <tcp_seg_copy>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb5e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800cb60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 80b5 	beq.w	800ccd4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cb72:	8912      	ldrh	r2, [r2, #8]
 800cb74:	441a      	add	r2, r3
 800cb76:	4b6b      	ldr	r3, [pc, #428]	@ (800cd24 <tcp_receive+0xf10>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	1ad3      	subs	r3, r2, r3
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	dd12      	ble.n	800cba6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800cb80:	4b68      	ldr	r3, [pc, #416]	@ (800cd24 <tcp_receive+0xf10>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	b29a      	uxth	r2, r3
 800cb86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	685b      	ldr	r3, [r3, #4]
 800cb8c:	b29b      	uxth	r3, r3
 800cb8e:	1ad3      	subs	r3, r2, r3
 800cb90:	b29a      	uxth	r2, r3
 800cb92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb94:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800cb96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb98:	685a      	ldr	r2, [r3, #4]
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb9c:	891b      	ldrh	r3, [r3, #8]
 800cb9e:	4619      	mov	r1, r3
 800cba0:	4610      	mov	r0, r2
 800cba2:	f7fb fab1 	bl	8008108 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800cba6:	4b61      	ldr	r3, [pc, #388]	@ (800cd2c <tcp_receive+0xf18>)
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	4b5d      	ldr	r3, [pc, #372]	@ (800cd24 <tcp_receive+0xf10>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb6:	6879      	ldr	r1, [r7, #4]
 800cbb8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cbba:	440b      	add	r3, r1
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f340 8088 	ble.w	800ccd4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800cbc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	68db      	ldr	r3, [r3, #12]
 800cbca:	899b      	ldrh	r3, [r3, #12]
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	4618      	mov	r0, r3
 800cbd0:	f7f9 fc94 	bl	80064fc <lwip_htons>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	f003 0301 	and.w	r3, r3, #1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d021      	beq.n	800cc24 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	899b      	ldrh	r3, [r3, #12]
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	b21b      	sxth	r3, r3
 800cbec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cbf0:	b21c      	sxth	r4, r3
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	68db      	ldr	r3, [r3, #12]
 800cbf8:	899b      	ldrh	r3, [r3, #12]
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f7f9 fc7d 	bl	80064fc <lwip_htons>
 800cc02:	4603      	mov	r3, r0
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800cc0a:	b29b      	uxth	r3, r3
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	f7f9 fc75 	bl	80064fc <lwip_htons>
 800cc12:	4603      	mov	r3, r0
 800cc14:	b21b      	sxth	r3, r3
 800cc16:	4323      	orrs	r3, r4
 800cc18:	b21a      	sxth	r2, r3
 800cc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	b292      	uxth	r2, r2
 800cc22:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800cc2e:	4413      	add	r3, r2
 800cc30:	b299      	uxth	r1, r3
 800cc32:	4b3c      	ldr	r3, [pc, #240]	@ (800cd24 <tcp_receive+0xf10>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	1a8a      	subs	r2, r1, r2
 800cc3e:	b292      	uxth	r2, r2
 800cc40:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800cc42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	685a      	ldr	r2, [r3, #4]
 800cc48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	891b      	ldrh	r3, [r3, #8]
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7fb fa59 	bl	8008108 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800cc56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	891c      	ldrh	r4, [r3, #8]
 800cc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	899b      	ldrh	r3, [r3, #12]
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f9 fc48 	bl	80064fc <lwip_htons>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	b2db      	uxtb	r3, r3
 800cc70:	f003 0303 	and.w	r3, r3, #3
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <tcp_receive+0xe68>
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e000      	b.n	800cc7e <tcp_receive+0xe6a>
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	4423      	add	r3, r4
 800cc80:	b29a      	uxth	r2, r3
 800cc82:	4b2a      	ldr	r3, [pc, #168]	@ (800cd2c <tcp_receive+0xf18>)
 800cc84:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800cc86:	4b29      	ldr	r3, [pc, #164]	@ (800cd2c <tcp_receive+0xf18>)
 800cc88:	881b      	ldrh	r3, [r3, #0]
 800cc8a:	461a      	mov	r2, r3
 800cc8c:	4b25      	ldr	r3, [pc, #148]	@ (800cd24 <tcp_receive+0xf10>)
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	441a      	add	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc96:	6879      	ldr	r1, [r7, #4]
 800cc98:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cc9a:	440b      	add	r3, r1
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d019      	beq.n	800ccd4 <tcp_receive+0xec0>
 800cca0:	4b23      	ldr	r3, [pc, #140]	@ (800cd30 <tcp_receive+0xf1c>)
 800cca2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800cca6:	4923      	ldr	r1, [pc, #140]	@ (800cd34 <tcp_receive+0xf20>)
 800cca8:	4823      	ldr	r0, [pc, #140]	@ (800cd38 <tcp_receive+0xf24>)
 800ccaa:	f007 fa39 	bl	8014120 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800ccae:	e011      	b.n	800ccd4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ccb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	f47f aea5 	bne.w	800ca08 <tcp_receive+0xbf4>
 800ccbe:	e00a      	b.n	800ccd6 <tcp_receive+0xec2>
                break;
 800ccc0:	bf00      	nop
 800ccc2:	e008      	b.n	800ccd6 <tcp_receive+0xec2>
                break;
 800ccc4:	bf00      	nop
 800ccc6:	e006      	b.n	800ccd6 <tcp_receive+0xec2>
                  break;
 800ccc8:	bf00      	nop
 800ccca:	e004      	b.n	800ccd6 <tcp_receive+0xec2>
                  break;
 800cccc:	bf00      	nop
 800ccce:	e002      	b.n	800ccd6 <tcp_receive+0xec2>
                  break;
 800ccd0:	bf00      	nop
 800ccd2:	e000      	b.n	800ccd6 <tcp_receive+0xec2>
                break;
 800ccd4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f001 feaa 	bl	800ea30 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800ccdc:	e003      	b.n	800cce6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 fea6 	bl	800ea30 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cce4:	e01a      	b.n	800cd1c <tcp_receive+0xf08>
 800cce6:	e019      	b.n	800cd1c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800cce8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd24 <tcp_receive+0xf10>)
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf0:	1ad3      	subs	r3, r2, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	db0a      	blt.n	800cd0c <tcp_receive+0xef8>
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	@ (800cd24 <tcp_receive+0xf10>)
 800ccf8:	681a      	ldr	r2, [r3, #0]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccfe:	6879      	ldr	r1, [r7, #4]
 800cd00:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800cd02:	440b      	add	r3, r1
 800cd04:	1ad3      	subs	r3, r2, r3
 800cd06:	3301      	adds	r3, #1
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	dd07      	ble.n	800cd1c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	8b5b      	ldrh	r3, [r3, #26]
 800cd10:	f043 0302 	orr.w	r3, r3, #2
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800cd1a:	e7ff      	b.n	800cd1c <tcp_receive+0xf08>
 800cd1c:	bf00      	nop
 800cd1e:	3750      	adds	r7, #80	@ 0x50
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bdb0      	pop	{r4, r5, r7, pc}
 800cd24:	20004368 	.word	0x20004368
 800cd28:	20004348 	.word	0x20004348
 800cd2c:	20004372 	.word	0x20004372
 800cd30:	08016688 	.word	0x08016688
 800cd34:	08016a30 	.word	0x08016a30
 800cd38:	080166d4 	.word	0x080166d4

0800cd3c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800cd42:	4b15      	ldr	r3, [pc, #84]	@ (800cd98 <tcp_get_next_optbyte+0x5c>)
 800cd44:	881b      	ldrh	r3, [r3, #0]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	b291      	uxth	r1, r2
 800cd4a:	4a13      	ldr	r2, [pc, #76]	@ (800cd98 <tcp_get_next_optbyte+0x5c>)
 800cd4c:	8011      	strh	r1, [r2, #0]
 800cd4e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800cd50:	4b12      	ldr	r3, [pc, #72]	@ (800cd9c <tcp_get_next_optbyte+0x60>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d004      	beq.n	800cd62 <tcp_get_next_optbyte+0x26>
 800cd58:	4b11      	ldr	r3, [pc, #68]	@ (800cda0 <tcp_get_next_optbyte+0x64>)
 800cd5a:	881b      	ldrh	r3, [r3, #0]
 800cd5c:	88fa      	ldrh	r2, [r7, #6]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d208      	bcs.n	800cd74 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800cd62:	4b10      	ldr	r3, [pc, #64]	@ (800cda4 <tcp_get_next_optbyte+0x68>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3314      	adds	r3, #20
 800cd68:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	4413      	add	r3, r2
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	e00b      	b.n	800cd8c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800cd74:	88fb      	ldrh	r3, [r7, #6]
 800cd76:	b2da      	uxtb	r2, r3
 800cd78:	4b09      	ldr	r3, [pc, #36]	@ (800cda0 <tcp_get_next_optbyte+0x64>)
 800cd7a:	881b      	ldrh	r3, [r3, #0]
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	1ad3      	subs	r3, r2, r3
 800cd80:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800cd82:	4b06      	ldr	r3, [pc, #24]	@ (800cd9c <tcp_get_next_optbyte+0x60>)
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	797b      	ldrb	r3, [r7, #5]
 800cd88:	4413      	add	r3, r2
 800cd8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	20004364 	.word	0x20004364
 800cd9c:	20004360 	.word	0x20004360
 800cda0:	2000435e 	.word	0x2000435e
 800cda4:	20004358 	.word	0x20004358

0800cda8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b084      	sub	sp, #16
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d106      	bne.n	800cdc4 <tcp_parseopt+0x1c>
 800cdb6:	4b32      	ldr	r3, [pc, #200]	@ (800ce80 <tcp_parseopt+0xd8>)
 800cdb8:	f240 727d 	movw	r2, #1917	@ 0x77d
 800cdbc:	4931      	ldr	r1, [pc, #196]	@ (800ce84 <tcp_parseopt+0xdc>)
 800cdbe:	4832      	ldr	r0, [pc, #200]	@ (800ce88 <tcp_parseopt+0xe0>)
 800cdc0:	f007 f9ae 	bl	8014120 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800cdc4:	4b31      	ldr	r3, [pc, #196]	@ (800ce8c <tcp_parseopt+0xe4>)
 800cdc6:	881b      	ldrh	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d056      	beq.n	800ce7a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800cdcc:	4b30      	ldr	r3, [pc, #192]	@ (800ce90 <tcp_parseopt+0xe8>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	801a      	strh	r2, [r3, #0]
 800cdd2:	e046      	b.n	800ce62 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800cdd4:	f7ff ffb2 	bl	800cd3c <tcp_get_next_optbyte>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800cddc:	7bfb      	ldrb	r3, [r7, #15]
 800cdde:	2b02      	cmp	r3, #2
 800cde0:	d006      	beq.n	800cdf0 <tcp_parseopt+0x48>
 800cde2:	2b02      	cmp	r3, #2
 800cde4:	dc2a      	bgt.n	800ce3c <tcp_parseopt+0x94>
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d042      	beq.n	800ce70 <tcp_parseopt+0xc8>
 800cdea:	2b01      	cmp	r3, #1
 800cdec:	d038      	beq.n	800ce60 <tcp_parseopt+0xb8>
 800cdee:	e025      	b.n	800ce3c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800cdf0:	f7ff ffa4 	bl	800cd3c <tcp_get_next_optbyte>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d13c      	bne.n	800ce74 <tcp_parseopt+0xcc>
 800cdfa:	4b25      	ldr	r3, [pc, #148]	@ (800ce90 <tcp_parseopt+0xe8>)
 800cdfc:	881b      	ldrh	r3, [r3, #0]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	4a22      	ldr	r2, [pc, #136]	@ (800ce8c <tcp_parseopt+0xe4>)
 800ce02:	8812      	ldrh	r2, [r2, #0]
 800ce04:	4293      	cmp	r3, r2
 800ce06:	da35      	bge.n	800ce74 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800ce08:	f7ff ff98 	bl	800cd3c <tcp_get_next_optbyte>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	021b      	lsls	r3, r3, #8
 800ce10:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800ce12:	f7ff ff93 	bl	800cd3c <tcp_get_next_optbyte>
 800ce16:	4603      	mov	r3, r0
 800ce18:	461a      	mov	r2, r3
 800ce1a:	89bb      	ldrh	r3, [r7, #12]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ce20:	89bb      	ldrh	r3, [r7, #12]
 800ce22:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ce26:	d804      	bhi.n	800ce32 <tcp_parseopt+0x8a>
 800ce28:	89bb      	ldrh	r3, [r7, #12]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d001      	beq.n	800ce32 <tcp_parseopt+0x8a>
 800ce2e:	89ba      	ldrh	r2, [r7, #12]
 800ce30:	e001      	b.n	800ce36 <tcp_parseopt+0x8e>
 800ce32:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800ce3a:	e012      	b.n	800ce62 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ce3c:	f7ff ff7e 	bl	800cd3c <tcp_get_next_optbyte>
 800ce40:	4603      	mov	r3, r0
 800ce42:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ce44:	7afb      	ldrb	r3, [r7, #11]
 800ce46:	2b01      	cmp	r3, #1
 800ce48:	d916      	bls.n	800ce78 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ce4a:	7afb      	ldrb	r3, [r7, #11]
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	4b10      	ldr	r3, [pc, #64]	@ (800ce90 <tcp_parseopt+0xe8>)
 800ce50:	881b      	ldrh	r3, [r3, #0]
 800ce52:	4413      	add	r3, r2
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	3b02      	subs	r3, #2
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ce90 <tcp_parseopt+0xe8>)
 800ce5c:	801a      	strh	r2, [r3, #0]
 800ce5e:	e000      	b.n	800ce62 <tcp_parseopt+0xba>
          break;
 800ce60:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ce62:	4b0b      	ldr	r3, [pc, #44]	@ (800ce90 <tcp_parseopt+0xe8>)
 800ce64:	881a      	ldrh	r2, [r3, #0]
 800ce66:	4b09      	ldr	r3, [pc, #36]	@ (800ce8c <tcp_parseopt+0xe4>)
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d3b2      	bcc.n	800cdd4 <tcp_parseopt+0x2c>
 800ce6e:	e004      	b.n	800ce7a <tcp_parseopt+0xd2>
          return;
 800ce70:	bf00      	nop
 800ce72:	e002      	b.n	800ce7a <tcp_parseopt+0xd2>
            return;
 800ce74:	bf00      	nop
 800ce76:	e000      	b.n	800ce7a <tcp_parseopt+0xd2>
            return;
 800ce78:	bf00      	nop
      }
    }
  }
}
 800ce7a:	3710      	adds	r7, #16
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	08016688 	.word	0x08016688
 800ce84:	08016aec 	.word	0x08016aec
 800ce88:	080166d4 	.word	0x080166d4
 800ce8c:	2000435c 	.word	0x2000435c
 800ce90:	20004364 	.word	0x20004364

0800ce94 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ce94:	b480      	push	{r7}
 800ce96:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ce98:	4b05      	ldr	r3, [pc, #20]	@ (800ceb0 <tcp_trigger_input_pcb_close+0x1c>)
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	f043 0310 	orr.w	r3, r3, #16
 800cea0:	b2da      	uxtb	r2, r3
 800cea2:	4b03      	ldr	r3, [pc, #12]	@ (800ceb0 <tcp_trigger_input_pcb_close+0x1c>)
 800cea4:	701a      	strb	r2, [r3, #0]
}
 800cea6:	bf00      	nop
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceae:	4770      	bx	lr
 800ceb0:	20004375 	.word	0x20004375

0800ceb4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b084      	sub	sp, #16
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d00a      	beq.n	800cedc <tcp_route+0x28>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	7a1b      	ldrb	r3, [r3, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d006      	beq.n	800cedc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	7a1b      	ldrb	r3, [r3, #8]
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fa ff3e 	bl	8007d54 <netif_get_by_index>
 800ced8:	4603      	mov	r3, r0
 800ceda:	e003      	b.n	800cee4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f005 fd93 	bl	8012a08 <ip4_route>
 800cee2:	4603      	mov	r3, r0
  }
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ceec:	b590      	push	{r4, r7, lr}
 800ceee:	b087      	sub	sp, #28
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	603b      	str	r3, [r7, #0]
 800cef8:	4613      	mov	r3, r2
 800cefa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <tcp_create_segment+0x22>
 800cf02:	4b43      	ldr	r3, [pc, #268]	@ (800d010 <tcp_create_segment+0x124>)
 800cf04:	22a3      	movs	r2, #163	@ 0xa3
 800cf06:	4943      	ldr	r1, [pc, #268]	@ (800d014 <tcp_create_segment+0x128>)
 800cf08:	4843      	ldr	r0, [pc, #268]	@ (800d018 <tcp_create_segment+0x12c>)
 800cf0a:	f007 f909 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d105      	bne.n	800cf20 <tcp_create_segment+0x34>
 800cf14:	4b3e      	ldr	r3, [pc, #248]	@ (800d010 <tcp_create_segment+0x124>)
 800cf16:	22a4      	movs	r2, #164	@ 0xa4
 800cf18:	4940      	ldr	r1, [pc, #256]	@ (800d01c <tcp_create_segment+0x130>)
 800cf1a:	483f      	ldr	r0, [pc, #252]	@ (800d018 <tcp_create_segment+0x12c>)
 800cf1c:	f007 f900 	bl	8014120 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cf20:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cf24:	009b      	lsls	r3, r3, #2
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	f003 0304 	and.w	r3, r3, #4
 800cf2c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800cf2e:	2003      	movs	r0, #3
 800cf30:	f7fa fba2 	bl	8007678 <memp_malloc>
 800cf34:	6138      	str	r0, [r7, #16]
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d104      	bne.n	800cf46 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800cf3c:	68b8      	ldr	r0, [r7, #8]
 800cf3e:	f7fb fa69 	bl	8008414 <pbuf_free>
    return NULL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e060      	b.n	800d008 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800cf4c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800cf54:	693b      	ldr	r3, [r7, #16]
 800cf56:	68ba      	ldr	r2, [r7, #8]
 800cf58:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	891a      	ldrh	r2, [r3, #8]
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
 800cf60:	b29b      	uxth	r3, r3
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d205      	bcs.n	800cf72 <tcp_create_segment+0x86>
 800cf66:	4b2a      	ldr	r3, [pc, #168]	@ (800d010 <tcp_create_segment+0x124>)
 800cf68:	22b0      	movs	r2, #176	@ 0xb0
 800cf6a:	492d      	ldr	r1, [pc, #180]	@ (800d020 <tcp_create_segment+0x134>)
 800cf6c:	482a      	ldr	r0, [pc, #168]	@ (800d018 <tcp_create_segment+0x12c>)
 800cf6e:	f007 f8d7 	bl	8014120 <iprintf>
  seg->len = p->tot_len - optlen;
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	891a      	ldrh	r2, [r3, #8]
 800cf76:	7dfb      	ldrb	r3, [r7, #23]
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	1ad3      	subs	r3, r2, r3
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	693b      	ldr	r3, [r7, #16]
 800cf80:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800cf82:	2114      	movs	r1, #20
 800cf84:	68b8      	ldr	r0, [r7, #8]
 800cf86:	f7fb f9af 	bl	80082e8 <pbuf_add_header>
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d004      	beq.n	800cf9a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800cf90:	6938      	ldr	r0, [r7, #16]
 800cf92:	f7fc ffd8 	bl	8009f46 <tcp_seg_free>
    return NULL;
 800cf96:	2300      	movs	r3, #0
 800cf98:	e036      	b.n	800d008 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	685a      	ldr	r2, [r3, #4]
 800cfa0:	693b      	ldr	r3, [r7, #16]
 800cfa2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	8ada      	ldrh	r2, [r3, #22]
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	68dc      	ldr	r4, [r3, #12]
 800cfac:	4610      	mov	r0, r2
 800cfae:	f7f9 faa5 	bl	80064fc <lwip_htons>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	8b1a      	ldrh	r2, [r3, #24]
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	68dc      	ldr	r4, [r3, #12]
 800cfbe:	4610      	mov	r0, r2
 800cfc0:	f7f9 fa9c 	bl	80064fc <lwip_htons>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	68dc      	ldr	r4, [r3, #12]
 800cfcc:	6838      	ldr	r0, [r7, #0]
 800cfce:	f7f9 faaa 	bl	8006526 <lwip_htonl>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	089b      	lsrs	r3, r3, #2
 800cfda:	b2db      	uxtb	r3, r3
 800cfdc:	3305      	adds	r3, #5
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	031b      	lsls	r3, r3, #12
 800cfe2:	b29a      	uxth	r2, r3
 800cfe4:	79fb      	ldrb	r3, [r7, #7]
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	b29a      	uxth	r2, r3
 800cfec:	693b      	ldr	r3, [r7, #16]
 800cfee:	68dc      	ldr	r4, [r3, #12]
 800cff0:	4610      	mov	r0, r2
 800cff2:	f7f9 fa83 	bl	80064fc <lwip_htons>
 800cff6:	4603      	mov	r3, r0
 800cff8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800cffa:	693b      	ldr	r3, [r7, #16]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	749a      	strb	r2, [r3, #18]
 800d002:	2200      	movs	r2, #0
 800d004:	74da      	strb	r2, [r3, #19]
  return seg;
 800d006:	693b      	ldr	r3, [r7, #16]
}
 800d008:	4618      	mov	r0, r3
 800d00a:	371c      	adds	r7, #28
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}
 800d010:	08016b08 	.word	0x08016b08
 800d014:	08016b3c 	.word	0x08016b3c
 800d018:	08016b5c 	.word	0x08016b5c
 800d01c:	08016b84 	.word	0x08016b84
 800d020:	08016ba8 	.word	0x08016ba8

0800d024 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b086      	sub	sp, #24
 800d028:	af00      	add	r7, sp, #0
 800d02a:	607b      	str	r3, [r7, #4]
 800d02c:	4603      	mov	r3, r0
 800d02e:	73fb      	strb	r3, [r7, #15]
 800d030:	460b      	mov	r3, r1
 800d032:	81bb      	strh	r3, [r7, #12]
 800d034:	4613      	mov	r3, r2
 800d036:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800d038:	89bb      	ldrh	r3, [r7, #12]
 800d03a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d105      	bne.n	800d04e <tcp_pbuf_prealloc+0x2a>
 800d042:	4b30      	ldr	r3, [pc, #192]	@ (800d104 <tcp_pbuf_prealloc+0xe0>)
 800d044:	22e8      	movs	r2, #232	@ 0xe8
 800d046:	4930      	ldr	r1, [pc, #192]	@ (800d108 <tcp_pbuf_prealloc+0xe4>)
 800d048:	4830      	ldr	r0, [pc, #192]	@ (800d10c <tcp_pbuf_prealloc+0xe8>)
 800d04a:	f007 f869 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800d04e:	6a3b      	ldr	r3, [r7, #32]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d105      	bne.n	800d060 <tcp_pbuf_prealloc+0x3c>
 800d054:	4b2b      	ldr	r3, [pc, #172]	@ (800d104 <tcp_pbuf_prealloc+0xe0>)
 800d056:	22e9      	movs	r2, #233	@ 0xe9
 800d058:	492d      	ldr	r1, [pc, #180]	@ (800d110 <tcp_pbuf_prealloc+0xec>)
 800d05a:	482c      	ldr	r0, [pc, #176]	@ (800d10c <tcp_pbuf_prealloc+0xe8>)
 800d05c:	f007 f860 	bl	8014120 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800d060:	89ba      	ldrh	r2, [r7, #12]
 800d062:	897b      	ldrh	r3, [r7, #10]
 800d064:	429a      	cmp	r2, r3
 800d066:	d221      	bcs.n	800d0ac <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d068:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d06c:	f003 0302 	and.w	r3, r3, #2
 800d070:	2b00      	cmp	r3, #0
 800d072:	d111      	bne.n	800d098 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800d074:	6a3b      	ldr	r3, [r7, #32]
 800d076:	8b5b      	ldrh	r3, [r3, #26]
 800d078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d115      	bne.n	800d0ac <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800d080:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d084:	2b00      	cmp	r3, #0
 800d086:	d007      	beq.n	800d098 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d103      	bne.n	800d098 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800d090:	6a3b      	ldr	r3, [r7, #32]
 800d092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 800d094:	2b00      	cmp	r3, #0
 800d096:	d009      	beq.n	800d0ac <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800d098:	89bb      	ldrh	r3, [r7, #12]
 800d09a:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 800d09e:	f023 0203 	bic.w	r2, r3, #3
 800d0a2:	897b      	ldrh	r3, [r7, #10]
 800d0a4:	4293      	cmp	r3, r2
 800d0a6:	bf28      	it	cs
 800d0a8:	4613      	movcs	r3, r2
 800d0aa:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800d0ac:	8af9      	ldrh	r1, [r7, #22]
 800d0ae:	7bfb      	ldrb	r3, [r7, #15]
 800d0b0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fa fec9 	bl	8007e4c <pbuf_alloc>
 800d0ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d101      	bne.n	800d0c6 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	e019      	b.n	800d0fa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800d0c6:	693b      	ldr	r3, [r7, #16]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d006      	beq.n	800d0dc <tcp_pbuf_prealloc+0xb8>
 800d0ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d104 <tcp_pbuf_prealloc+0xe0>)
 800d0d0:	f240 120b 	movw	r2, #267	@ 0x10b
 800d0d4:	490f      	ldr	r1, [pc, #60]	@ (800d114 <tcp_pbuf_prealloc+0xf0>)
 800d0d6:	480d      	ldr	r0, [pc, #52]	@ (800d10c <tcp_pbuf_prealloc+0xe8>)
 800d0d8:	f007 f822 	bl	8014120 <iprintf>
  *oversize = p->len - length;
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	895a      	ldrh	r2, [r3, #10]
 800d0e0:	89bb      	ldrh	r3, [r7, #12]
 800d0e2:	1ad3      	subs	r3, r2, r3
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	89ba      	ldrh	r2, [r7, #12]
 800d0ee:	811a      	strh	r2, [r3, #8]
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	891a      	ldrh	r2, [r3, #8]
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	815a      	strh	r2, [r3, #10]
  return p;
 800d0f8:	693b      	ldr	r3, [r7, #16]
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3718      	adds	r7, #24
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}
 800d102:	bf00      	nop
 800d104:	08016b08 	.word	0x08016b08
 800d108:	08016bc0 	.word	0x08016bc0
 800d10c:	08016b5c 	.word	0x08016b5c
 800d110:	08016be4 	.word	0x08016be4
 800d114:	08016c04 	.word	0x08016c04

0800d118 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d106      	bne.n	800d138 <tcp_write_checks+0x20>
 800d12a:	4b33      	ldr	r3, [pc, #204]	@ (800d1f8 <tcp_write_checks+0xe0>)
 800d12c:	f240 1233 	movw	r2, #307	@ 0x133
 800d130:	4932      	ldr	r1, [pc, #200]	@ (800d1fc <tcp_write_checks+0xe4>)
 800d132:	4833      	ldr	r0, [pc, #204]	@ (800d200 <tcp_write_checks+0xe8>)
 800d134:	f006 fff4 	bl	8014120 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	7d1b      	ldrb	r3, [r3, #20]
 800d13c:	2b04      	cmp	r3, #4
 800d13e:	d00e      	beq.n	800d15e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800d144:	2b07      	cmp	r3, #7
 800d146:	d00a      	beq.n	800d15e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d006      	beq.n	800d15e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800d154:	2b03      	cmp	r3, #3
 800d156:	d002      	beq.n	800d15e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800d158:	f06f 030a 	mvn.w	r3, #10
 800d15c:	e048      	b.n	800d1f0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800d15e:	887b      	ldrh	r3, [r7, #2]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d101      	bne.n	800d168 <tcp_write_checks+0x50>
    return ERR_OK;
 800d164:	2300      	movs	r3, #0
 800d166:	e043      	b.n	800d1f0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d16e:	887a      	ldrh	r2, [r7, #2]
 800d170:	429a      	cmp	r2, r3
 800d172:	d909      	bls.n	800d188 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	8b5b      	ldrh	r3, [r3, #26]
 800d178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d17c:	b29a      	uxth	r2, r3
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d182:	f04f 33ff 	mov.w	r3, #4294967295
 800d186:	e033      	b.n	800d1f0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d18e:	2b08      	cmp	r3, #8
 800d190:	d909      	bls.n	800d1a6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	8b5b      	ldrh	r3, [r3, #26]
 800d196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d19a:	b29a      	uxth	r2, r3
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800d1a0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1a4:	e024      	b.n	800d1f0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d00f      	beq.n	800d1d0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d11a      	bne.n	800d1ee <tcp_write_checks+0xd6>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d116      	bne.n	800d1ee <tcp_write_checks+0xd6>
 800d1c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d1f8 <tcp_write_checks+0xe0>)
 800d1c2:	f240 1255 	movw	r2, #341	@ 0x155
 800d1c6:	490f      	ldr	r1, [pc, #60]	@ (800d204 <tcp_write_checks+0xec>)
 800d1c8:	480d      	ldr	r0, [pc, #52]	@ (800d200 <tcp_write_checks+0xe8>)
 800d1ca:	f006 ffa9 	bl	8014120 <iprintf>
 800d1ce:	e00e      	b.n	800d1ee <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d103      	bne.n	800d1e0 <tcp_write_checks+0xc8>
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d006      	beq.n	800d1ee <tcp_write_checks+0xd6>
 800d1e0:	4b05      	ldr	r3, [pc, #20]	@ (800d1f8 <tcp_write_checks+0xe0>)
 800d1e2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 800d1e6:	4908      	ldr	r1, [pc, #32]	@ (800d208 <tcp_write_checks+0xf0>)
 800d1e8:	4805      	ldr	r0, [pc, #20]	@ (800d200 <tcp_write_checks+0xe8>)
 800d1ea:	f006 ff99 	bl	8014120 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800d1ee:	2300      	movs	r3, #0
}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	08016b08 	.word	0x08016b08
 800d1fc:	08016c18 	.word	0x08016c18
 800d200:	08016b5c 	.word	0x08016b5c
 800d204:	08016c38 	.word	0x08016c38
 800d208:	08016c74 	.word	0x08016c74

0800d20c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b09b      	sub	sp, #108	@ 0x6c
 800d210:	af04      	add	r7, sp, #16
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	60b9      	str	r1, [r7, #8]
 800d216:	4611      	mov	r1, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	460b      	mov	r3, r1
 800d21c:	80fb      	strh	r3, [r7, #6]
 800d21e:	4613      	mov	r3, r2
 800d220:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800d222:	2300      	movs	r3, #0
 800d224:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800d226:	2300      	movs	r3, #0
 800d228:	653b      	str	r3, [r7, #80]	@ 0x50
 800d22a:	2300      	movs	r3, #0
 800d22c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d22e:	2300      	movs	r3, #0
 800d230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d232:	2300      	movs	r3, #0
 800d234:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800d236:	2300      	movs	r3, #0
 800d238:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800d23c:	2300      	movs	r3, #0
 800d23e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800d242:	2300      	movs	r3, #0
 800d244:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800d246:	2300      	movs	r3, #0
 800d248:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d109      	bne.n	800d268 <tcp_write+0x5c>
 800d254:	4ba4      	ldr	r3, [pc, #656]	@ (800d4e8 <tcp_write+0x2dc>)
 800d256:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800d25a:	49a4      	ldr	r1, [pc, #656]	@ (800d4ec <tcp_write+0x2e0>)
 800d25c:	48a4      	ldr	r0, [pc, #656]	@ (800d4f0 <tcp_write+0x2e4>)
 800d25e:	f006 ff5f 	bl	8014120 <iprintf>
 800d262:	f06f 030f 	mvn.w	r3, #15
 800d266:	e32a      	b.n	800d8be <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800d26e:	085b      	lsrs	r3, r3, #1
 800d270:	b29a      	uxth	r2, r3
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d276:	4293      	cmp	r3, r2
 800d278:	bf28      	it	cs
 800d27a:	4613      	movcs	r3, r2
 800d27c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800d27e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	d102      	bne.n	800d28a <tcp_write+0x7e>
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d288:	e000      	b.n	800d28c <tcp_write+0x80>
 800d28a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d28c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800d28e:	68bb      	ldr	r3, [r7, #8]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d109      	bne.n	800d2a8 <tcp_write+0x9c>
 800d294:	4b94      	ldr	r3, [pc, #592]	@ (800d4e8 <tcp_write+0x2dc>)
 800d296:	f240 12ad 	movw	r2, #429	@ 0x1ad
 800d29a:	4996      	ldr	r1, [pc, #600]	@ (800d4f4 <tcp_write+0x2e8>)
 800d29c:	4894      	ldr	r0, [pc, #592]	@ (800d4f0 <tcp_write+0x2e4>)
 800d29e:	f006 ff3f 	bl	8014120 <iprintf>
 800d2a2:	f06f 030f 	mvn.w	r3, #15
 800d2a6:	e30a      	b.n	800d8be <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800d2a8:	88fb      	ldrh	r3, [r7, #6]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	f7ff ff33 	bl	800d118 <tcp_write_checks>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 800d2b8:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <tcp_write+0xba>
    return err;
 800d2c0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 800d2c4:	e2fb      	b.n	800d8be <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d2cc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	f000 80f6 	beq.w	800d4cc <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800d2e6:	e002      	b.n	800d2ee <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800d2e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800d2ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d1f8      	bne.n	800d2e8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800d2f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2f8:	7a9b      	ldrb	r3, [r3, #10]
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	f003 0304 	and.w	r3, r3, #4
 800d302:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800d304:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d306:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d308:	891b      	ldrh	r3, [r3, #8]
 800d30a:	4619      	mov	r1, r3
 800d30c:	8c3b      	ldrh	r3, [r7, #32]
 800d30e:	440b      	add	r3, r1
 800d310:	429a      	cmp	r2, r3
 800d312:	da06      	bge.n	800d322 <tcp_write+0x116>
 800d314:	4b74      	ldr	r3, [pc, #464]	@ (800d4e8 <tcp_write+0x2dc>)
 800d316:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d31a:	4977      	ldr	r1, [pc, #476]	@ (800d4f8 <tcp_write+0x2ec>)
 800d31c:	4874      	ldr	r0, [pc, #464]	@ (800d4f0 <tcp_write+0x2e4>)
 800d31e:	f006 feff 	bl	8014120 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800d322:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d324:	891a      	ldrh	r2, [r3, #8]
 800d326:	8c3b      	ldrh	r3, [r7, #32]
 800d328:	4413      	add	r3, r2
 800d32a:	b29b      	uxth	r3, r3
 800d32c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d32e:	1ad3      	subs	r3, r2, r3
 800d330:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d338:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800d33a:	8a7b      	ldrh	r3, [r7, #18]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d026      	beq.n	800d38e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800d340:	8a7b      	ldrh	r3, [r7, #18]
 800d342:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d344:	429a      	cmp	r2, r3
 800d346:	d206      	bcs.n	800d356 <tcp_write+0x14a>
 800d348:	4b67      	ldr	r3, [pc, #412]	@ (800d4e8 <tcp_write+0x2dc>)
 800d34a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 800d34e:	496b      	ldr	r1, [pc, #428]	@ (800d4fc <tcp_write+0x2f0>)
 800d350:	4867      	ldr	r0, [pc, #412]	@ (800d4f0 <tcp_write+0x2e4>)
 800d352:	f006 fee5 	bl	8014120 <iprintf>
      seg = last_unsent;
 800d356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d358:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800d35a:	8a7b      	ldrh	r3, [r7, #18]
 800d35c:	88fa      	ldrh	r2, [r7, #6]
 800d35e:	4293      	cmp	r3, r2
 800d360:	bf28      	it	cs
 800d362:	4613      	movcs	r3, r2
 800d364:	b29b      	uxth	r3, r3
 800d366:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d368:	4293      	cmp	r3, r2
 800d36a:	bf28      	it	cs
 800d36c:	4613      	movcs	r3, r2
 800d36e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 800d370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d374:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d376:	4413      	add	r3, r2
 800d378:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 800d37c:	8a7a      	ldrh	r2, [r7, #18]
 800d37e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d380:	1ad3      	subs	r3, r2, r3
 800d382:	b29b      	uxth	r3, r3
 800d384:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800d386:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d388:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800d38e:	8a7b      	ldrh	r3, [r7, #18]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00b      	beq.n	800d3ac <tcp_write+0x1a0>
 800d394:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d398:	88fb      	ldrh	r3, [r7, #6]
 800d39a:	429a      	cmp	r2, r3
 800d39c:	d006      	beq.n	800d3ac <tcp_write+0x1a0>
 800d39e:	4b52      	ldr	r3, [pc, #328]	@ (800d4e8 <tcp_write+0x2dc>)
 800d3a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d3a4:	4956      	ldr	r1, [pc, #344]	@ (800d500 <tcp_write+0x2f4>)
 800d3a6:	4852      	ldr	r0, [pc, #328]	@ (800d4f0 <tcp_write+0x2e4>)
 800d3a8:	f006 feba 	bl	8014120 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800d3ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d3b0:	88fb      	ldrh	r3, [r7, #6]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	f080 8167 	bcs.w	800d686 <tcp_write+0x47a>
 800d3b8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	f000 8163 	beq.w	800d686 <tcp_write+0x47a>
 800d3c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3c2:	891b      	ldrh	r3, [r3, #8]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f000 815e 	beq.w	800d686 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800d3ca:	88fa      	ldrh	r2, [r7, #6]
 800d3cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d3d0:	1ad2      	subs	r2, r2, r3
 800d3d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d3d4:	4293      	cmp	r3, r2
 800d3d6:	bfa8      	it	ge
 800d3d8:	4613      	movge	r3, r2
 800d3da:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800d3dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3de:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d3e0:	797b      	ldrb	r3, [r7, #5]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d027      	beq.n	800d43a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800d3ea:	f107 0012 	add.w	r0, r7, #18
 800d3ee:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800d3f0:	8bf9      	ldrh	r1, [r7, #30]
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	9302      	str	r3, [sp, #8]
 800d3f6:	797b      	ldrb	r3, [r7, #5]
 800d3f8:	9301      	str	r3, [sp, #4]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	4603      	mov	r3, r0
 800d400:	2000      	movs	r0, #0
 800d402:	f7ff fe0f 	bl	800d024 <tcp_pbuf_prealloc>
 800d406:	6578      	str	r0, [r7, #84]	@ 0x54
 800d408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f000 8225 	beq.w	800d85a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800d410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d412:	6858      	ldr	r0, [r3, #4]
 800d414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d418:	68ba      	ldr	r2, [r7, #8]
 800d41a:	4413      	add	r3, r2
 800d41c:	8bfa      	ldrh	r2, [r7, #30]
 800d41e:	4619      	mov	r1, r3
 800d420:	f006 ff93 	bl	801434a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800d424:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d426:	f7fb f87d 	bl	8008524 <pbuf_clen>
 800d42a:	4603      	mov	r3, r0
 800d42c:	461a      	mov	r2, r3
 800d42e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d432:	4413      	add	r3, r2
 800d434:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d438:	e041      	b.n	800d4be <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800d43a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d43c:	685b      	ldr	r3, [r3, #4]
 800d43e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d440:	e002      	b.n	800d448 <tcp_write+0x23c>
 800d442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	637b      	str	r3, [r7, #52]	@ 0x34
 800d448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d1f8      	bne.n	800d442 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d452:	7b1b      	ldrb	r3, [r3, #12]
 800d454:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d115      	bne.n	800d488 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800d45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d462:	8952      	ldrh	r2, [r2, #10]
 800d464:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800d466:	68ba      	ldr	r2, [r7, #8]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d10d      	bne.n	800d488 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800d46c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d470:	2b00      	cmp	r3, #0
 800d472:	d006      	beq.n	800d482 <tcp_write+0x276>
 800d474:	4b1c      	ldr	r3, [pc, #112]	@ (800d4e8 <tcp_write+0x2dc>)
 800d476:	f240 2231 	movw	r2, #561	@ 0x231
 800d47a:	4922      	ldr	r1, [pc, #136]	@ (800d504 <tcp_write+0x2f8>)
 800d47c:	481c      	ldr	r0, [pc, #112]	@ (800d4f0 <tcp_write+0x2e4>)
 800d47e:	f006 fe4f 	bl	8014120 <iprintf>
          extendlen = seglen;
 800d482:	8bfb      	ldrh	r3, [r7, #30]
 800d484:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d486:	e01a      	b.n	800d4be <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800d488:	8bfb      	ldrh	r3, [r7, #30]
 800d48a:	2201      	movs	r2, #1
 800d48c:	4619      	mov	r1, r3
 800d48e:	2000      	movs	r0, #0
 800d490:	f7fa fcdc 	bl	8007e4c <pbuf_alloc>
 800d494:	6578      	str	r0, [r7, #84]	@ 0x54
 800d496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 81e0 	beq.w	800d85e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800d49e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d4a2:	68ba      	ldr	r2, [r7, #8]
 800d4a4:	441a      	add	r2, r3
 800d4a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800d4aa:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d4ac:	f7fb f83a 	bl	8008524 <pbuf_clen>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	461a      	mov	r2, r3
 800d4b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800d4be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d4c2:	8bfb      	ldrh	r3, [r7, #30]
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d4ca:	e0dc      	b.n	800d686 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	f000 80d7 	beq.w	800d686 <tcp_write+0x47a>
 800d4d8:	4b03      	ldr	r3, [pc, #12]	@ (800d4e8 <tcp_write+0x2dc>)
 800d4da:	f240 224a 	movw	r2, #586	@ 0x24a
 800d4de:	490a      	ldr	r1, [pc, #40]	@ (800d508 <tcp_write+0x2fc>)
 800d4e0:	4803      	ldr	r0, [pc, #12]	@ (800d4f0 <tcp_write+0x2e4>)
 800d4e2:	f006 fe1d 	bl	8014120 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800d4e6:	e0ce      	b.n	800d686 <tcp_write+0x47a>
 800d4e8:	08016b08 	.word	0x08016b08
 800d4ec:	08016ca8 	.word	0x08016ca8
 800d4f0:	08016b5c 	.word	0x08016b5c
 800d4f4:	08016cc0 	.word	0x08016cc0
 800d4f8:	08016cf4 	.word	0x08016cf4
 800d4fc:	08016d0c 	.word	0x08016d0c
 800d500:	08016d2c 	.word	0x08016d2c
 800d504:	08016d4c 	.word	0x08016d4c
 800d508:	08016d78 	.word	0x08016d78
    struct pbuf *p;
    u16_t left = len - pos;
 800d50c:	88fa      	ldrh	r2, [r7, #6]
 800d50e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d512:	1ad3      	subs	r3, r2, r3
 800d514:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800d516:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d51e:	1ad3      	subs	r3, r2, r3
 800d520:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800d522:	8b7a      	ldrh	r2, [r7, #26]
 800d524:	8bbb      	ldrh	r3, [r7, #28]
 800d526:	4293      	cmp	r3, r2
 800d528:	bf28      	it	cs
 800d52a:	4613      	movcs	r3, r2
 800d52c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800d52e:	797b      	ldrb	r3, [r7, #5]
 800d530:	f003 0301 	and.w	r3, r3, #1
 800d534:	2b00      	cmp	r3, #0
 800d536:	d036      	beq.n	800d5a6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800d538:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d53c:	b29a      	uxth	r2, r3
 800d53e:	8b3b      	ldrh	r3, [r7, #24]
 800d540:	4413      	add	r3, r2
 800d542:	b299      	uxth	r1, r3
 800d544:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d546:	2b00      	cmp	r3, #0
 800d548:	bf0c      	ite	eq
 800d54a:	2301      	moveq	r3, #1
 800d54c:	2300      	movne	r3, #0
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	f107 0012 	add.w	r0, r7, #18
 800d554:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800d556:	9302      	str	r3, [sp, #8]
 800d558:	797b      	ldrb	r3, [r7, #5]
 800d55a:	9301      	str	r3, [sp, #4]
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	9300      	str	r3, [sp, #0]
 800d560:	4603      	mov	r3, r0
 800d562:	2036      	movs	r0, #54	@ 0x36
 800d564:	f7ff fd5e 	bl	800d024 <tcp_pbuf_prealloc>
 800d568:	6338      	str	r0, [r7, #48]	@ 0x30
 800d56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8178 	beq.w	800d862 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800d572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d574:	895b      	ldrh	r3, [r3, #10]
 800d576:	8b3a      	ldrh	r2, [r7, #24]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d906      	bls.n	800d58a <tcp_write+0x37e>
 800d57c:	4b8c      	ldr	r3, [pc, #560]	@ (800d7b0 <tcp_write+0x5a4>)
 800d57e:	f240 2266 	movw	r2, #614	@ 0x266
 800d582:	498c      	ldr	r1, [pc, #560]	@ (800d7b4 <tcp_write+0x5a8>)
 800d584:	488c      	ldr	r0, [pc, #560]	@ (800d7b8 <tcp_write+0x5ac>)
 800d586:	f006 fdcb 	bl	8014120 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800d58a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d592:	18d0      	adds	r0, r2, r3
 800d594:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	4413      	add	r3, r2
 800d59c:	8b3a      	ldrh	r2, [r7, #24]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	f006 fed3 	bl	801434a <memcpy>
 800d5a4:	e02f      	b.n	800d606 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800d5a6:	8a7b      	ldrh	r3, [r7, #18]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d006      	beq.n	800d5ba <tcp_write+0x3ae>
 800d5ac:	4b80      	ldr	r3, [pc, #512]	@ (800d7b0 <tcp_write+0x5a4>)
 800d5ae:	f240 2271 	movw	r2, #625	@ 0x271
 800d5b2:	4982      	ldr	r1, [pc, #520]	@ (800d7bc <tcp_write+0x5b0>)
 800d5b4:	4880      	ldr	r0, [pc, #512]	@ (800d7b8 <tcp_write+0x5ac>)
 800d5b6:	f006 fdb3 	bl	8014120 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800d5ba:	8b3b      	ldrh	r3, [r7, #24]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	4619      	mov	r1, r3
 800d5c0:	2036      	movs	r0, #54	@ 0x36
 800d5c2:	f7fa fc43 	bl	8007e4c <pbuf_alloc>
 800d5c6:	6178      	str	r0, [r7, #20]
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	f000 814b 	beq.w	800d866 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800d5d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d5d4:	68ba      	ldr	r2, [r7, #8]
 800d5d6:	441a      	add	r2, r3
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800d5dc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	2036      	movs	r0, #54	@ 0x36
 800d5ea:	f7fa fc2f 	bl	8007e4c <pbuf_alloc>
 800d5ee:	6338      	str	r0, [r7, #48]	@ 0x30
 800d5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d103      	bne.n	800d5fe <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800d5f6:	6978      	ldr	r0, [r7, #20]
 800d5f8:	f7fa ff0c 	bl	8008414 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800d5fc:	e136      	b.n	800d86c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800d5fe:	6979      	ldr	r1, [r7, #20]
 800d600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d602:	f7fa ffc9 	bl	8008598 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800d606:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d608:	f7fa ff8c 	bl	8008524 <pbuf_clen>
 800d60c:	4603      	mov	r3, r0
 800d60e:	461a      	mov	r2, r3
 800d610:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d614:	4413      	add	r3, r2
 800d616:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800d61a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d61e:	2b09      	cmp	r3, #9
 800d620:	d903      	bls.n	800d62a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800d622:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d624:	f7fa fef6 	bl	8008414 <pbuf_free>
      goto memerr;
 800d628:	e120      	b.n	800d86c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d62e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d632:	441a      	add	r2, r3
 800d634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d638:	9300      	str	r3, [sp, #0]
 800d63a:	4613      	mov	r3, r2
 800d63c:	2200      	movs	r2, #0
 800d63e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7ff fc53 	bl	800ceec <tcp_create_segment>
 800d646:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800d648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	f000 810d 	beq.w	800d86a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800d650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d652:	2b00      	cmp	r3, #0
 800d654:	d102      	bne.n	800d65c <tcp_write+0x450>
      queue = seg;
 800d656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d658:	647b      	str	r3, [r7, #68]	@ 0x44
 800d65a:	e00c      	b.n	800d676 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800d65c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <tcp_write+0x464>
 800d662:	4b53      	ldr	r3, [pc, #332]	@ (800d7b0 <tcp_write+0x5a4>)
 800d664:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d668:	4955      	ldr	r1, [pc, #340]	@ (800d7c0 <tcp_write+0x5b4>)
 800d66a:	4853      	ldr	r0, [pc, #332]	@ (800d7b8 <tcp_write+0x5ac>)
 800d66c:	f006 fd58 	bl	8014120 <iprintf>
      prev_seg->next = seg;
 800d670:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d672:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d674:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800d676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d678:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800d67a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d67e:	8b3b      	ldrh	r3, [r7, #24]
 800d680:	4413      	add	r3, r2
 800d682:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 800d686:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d68a:	88fb      	ldrh	r3, [r7, #6]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	f4ff af3d 	bcc.w	800d50c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800d692:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d694:	2b00      	cmp	r3, #0
 800d696:	d02c      	beq.n	800d6f2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800d698:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d69e:	e01e      	b.n	800d6de <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800d6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6a2:	891a      	ldrh	r2, [r3, #8]
 800d6a4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6a6:	4413      	add	r3, r2
 800d6a8:	b29a      	uxth	r2, r3
 800d6aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6ac:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800d6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d110      	bne.n	800d6d8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800d6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6bc:	8952      	ldrh	r2, [r2, #10]
 800d6be:	4413      	add	r3, r2
 800d6c0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d6c2:	68b9      	ldr	r1, [r7, #8]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f006 fe40 	bl	801434a <memcpy>
        p->len += oversize_used;
 800d6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6cc:	895a      	ldrh	r2, [r3, #10]
 800d6ce:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6d0:	4413      	add	r3, r2
 800d6d2:	b29a      	uxth	r2, r3
 800d6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6d6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800d6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d1dd      	bne.n	800d6a0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800d6e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6e6:	891a      	ldrh	r2, [r3, #8]
 800d6e8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d6ea:	4413      	add	r3, r2
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6f0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800d6f2:	8a7a      	ldrh	r2, [r7, #18]
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800d6fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d018      	beq.n	800d732 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800d700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d702:	2b00      	cmp	r3, #0
 800d704:	d106      	bne.n	800d714 <tcp_write+0x508>
 800d706:	4b2a      	ldr	r3, [pc, #168]	@ (800d7b0 <tcp_write+0x5a4>)
 800d708:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 800d70c:	492d      	ldr	r1, [pc, #180]	@ (800d7c4 <tcp_write+0x5b8>)
 800d70e:	482a      	ldr	r0, [pc, #168]	@ (800d7b8 <tcp_write+0x5ac>)
 800d710:	f006 fd06 	bl	8014120 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800d714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d71a:	4618      	mov	r0, r3
 800d71c:	f7fa ff3c 	bl	8008598 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800d720:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d722:	891a      	ldrh	r2, [r3, #8]
 800d724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d726:	891b      	ldrh	r3, [r3, #8]
 800d728:	4413      	add	r3, r2
 800d72a:	b29a      	uxth	r2, r3
 800d72c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d72e:	811a      	strh	r2, [r3, #8]
 800d730:	e037      	b.n	800d7a2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800d732:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d034      	beq.n	800d7a2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800d738:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d003      	beq.n	800d746 <tcp_write+0x53a>
 800d73e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d106      	bne.n	800d754 <tcp_write+0x548>
 800d746:	4b1a      	ldr	r3, [pc, #104]	@ (800d7b0 <tcp_write+0x5a4>)
 800d748:	f240 22e6 	movw	r2, #742	@ 0x2e6
 800d74c:	491e      	ldr	r1, [pc, #120]	@ (800d7c8 <tcp_write+0x5bc>)
 800d74e:	481a      	ldr	r0, [pc, #104]	@ (800d7b8 <tcp_write+0x5ac>)
 800d750:	f006 fce6 	bl	8014120 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d754:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d75a:	e009      	b.n	800d770 <tcp_write+0x564>
      p->tot_len += extendlen;
 800d75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d75e:	891a      	ldrh	r2, [r3, #8]
 800d760:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d762:	4413      	add	r3, r2
 800d764:	b29a      	uxth	r2, r3
 800d766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d768:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800d76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d1f1      	bne.n	800d75c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800d778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d77a:	891a      	ldrh	r2, [r3, #8]
 800d77c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d77e:	4413      	add	r3, r2
 800d780:	b29a      	uxth	r2, r3
 800d782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d784:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800d786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d788:	895a      	ldrh	r2, [r3, #10]
 800d78a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d78c:	4413      	add	r3, r2
 800d78e:	b29a      	uxth	r2, r3
 800d790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d792:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800d794:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d796:	891a      	ldrh	r2, [r3, #8]
 800d798:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d79a:	4413      	add	r3, r2
 800d79c:	b29a      	uxth	r2, r3
 800d79e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800d7a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d111      	bne.n	800d7cc <tcp_write+0x5c0>
    pcb->unsent = queue;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 800d7ae:	e010      	b.n	800d7d2 <tcp_write+0x5c6>
 800d7b0:	08016b08 	.word	0x08016b08
 800d7b4:	08016da8 	.word	0x08016da8
 800d7b8:	08016b5c 	.word	0x08016b5c
 800d7bc:	08016de8 	.word	0x08016de8
 800d7c0:	08016df8 	.word	0x08016df8
 800d7c4:	08016e0c 	.word	0x08016e0c
 800d7c8:	08016e44 	.word	0x08016e44
  } else {
    last_unsent->next = queue;
 800d7cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d7d0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d7d6:	88fb      	ldrh	r3, [r7, #6]
 800d7d8:	441a      	add	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800d7e4:	88fb      	ldrh	r3, [r7, #6]
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	b29a      	uxth	r2, r3
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d7f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d800:	2b00      	cmp	r3, #0
 800d802:	d00e      	beq.n	800d822 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d10a      	bne.n	800d822 <tcp_write+0x616>
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d810:	2b00      	cmp	r3, #0
 800d812:	d106      	bne.n	800d822 <tcp_write+0x616>
 800d814:	4b2c      	ldr	r3, [pc, #176]	@ (800d8c8 <tcp_write+0x6bc>)
 800d816:	f240 3212 	movw	r2, #786	@ 0x312
 800d81a:	492c      	ldr	r1, [pc, #176]	@ (800d8cc <tcp_write+0x6c0>)
 800d81c:	482c      	ldr	r0, [pc, #176]	@ (800d8d0 <tcp_write+0x6c4>)
 800d81e:	f006 fc7f 	bl	8014120 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800d822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d824:	2b00      	cmp	r3, #0
 800d826:	d016      	beq.n	800d856 <tcp_write+0x64a>
 800d828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d012      	beq.n	800d856 <tcp_write+0x64a>
 800d830:	797b      	ldrb	r3, [r7, #5]
 800d832:	f003 0302 	and.w	r3, r3, #2
 800d836:	2b00      	cmp	r3, #0
 800d838:	d10d      	bne.n	800d856 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800d83a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	899b      	ldrh	r3, [r3, #12]
 800d840:	b29c      	uxth	r4, r3
 800d842:	2008      	movs	r0, #8
 800d844:	f7f8 fe5a 	bl	80064fc <lwip_htons>
 800d848:	4603      	mov	r3, r0
 800d84a:	461a      	mov	r2, r3
 800d84c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d84e:	68db      	ldr	r3, [r3, #12]
 800d850:	4322      	orrs	r2, r4
 800d852:	b292      	uxth	r2, r2
 800d854:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	e031      	b.n	800d8be <tcp_write+0x6b2>
          goto memerr;
 800d85a:	bf00      	nop
 800d85c:	e006      	b.n	800d86c <tcp_write+0x660>
            goto memerr;
 800d85e:	bf00      	nop
 800d860:	e004      	b.n	800d86c <tcp_write+0x660>
        goto memerr;
 800d862:	bf00      	nop
 800d864:	e002      	b.n	800d86c <tcp_write+0x660>
        goto memerr;
 800d866:	bf00      	nop
 800d868:	e000      	b.n	800d86c <tcp_write+0x660>
      goto memerr;
 800d86a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	8b5b      	ldrh	r3, [r3, #26]
 800d870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d874:	b29a      	uxth	r2, r3
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800d87a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d002      	beq.n	800d886 <tcp_write+0x67a>
    pbuf_free(concat_p);
 800d880:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800d882:	f7fa fdc7 	bl	8008414 <pbuf_free>
  }
  if (queue != NULL) {
 800d886:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <tcp_write+0x686>
    tcp_segs_free(queue);
 800d88c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800d88e:	f7fc fb45 	bl	8009f1c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d00e      	beq.n	800d8ba <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10a      	bne.n	800d8ba <tcp_write+0x6ae>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <tcp_write+0x6ae>
 800d8ac:	4b06      	ldr	r3, [pc, #24]	@ (800d8c8 <tcp_write+0x6bc>)
 800d8ae:	f240 3227 	movw	r2, #807	@ 0x327
 800d8b2:	4906      	ldr	r1, [pc, #24]	@ (800d8cc <tcp_write+0x6c0>)
 800d8b4:	4806      	ldr	r0, [pc, #24]	@ (800d8d0 <tcp_write+0x6c4>)
 800d8b6:	f006 fc33 	bl	8014120 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800d8ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	375c      	adds	r7, #92	@ 0x5c
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd90      	pop	{r4, r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	08016b08 	.word	0x08016b08
 800d8cc:	08016e7c 	.word	0x08016e7c
 800d8d0:	08016b5c 	.word	0x08016b5c

0800d8d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800d8d4:	b590      	push	{r4, r7, lr}
 800d8d6:	b08b      	sub	sp, #44	@ 0x2c
 800d8d8:	af02      	add	r7, sp, #8
 800d8da:	6078      	str	r0, [r7, #4]
 800d8dc:	460b      	mov	r3, r1
 800d8de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	61fb      	str	r3, [r7, #28]
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d106      	bne.n	800d900 <tcp_split_unsent_seg+0x2c>
 800d8f2:	4b95      	ldr	r3, [pc, #596]	@ (800db48 <tcp_split_unsent_seg+0x274>)
 800d8f4:	f240 324b 	movw	r2, #843	@ 0x34b
 800d8f8:	4994      	ldr	r1, [pc, #592]	@ (800db4c <tcp_split_unsent_seg+0x278>)
 800d8fa:	4895      	ldr	r0, [pc, #596]	@ (800db50 <tcp_split_unsent_seg+0x27c>)
 800d8fc:	f006 fc10 	bl	8014120 <iprintf>

  useg = pcb->unsent;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d904:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d102      	bne.n	800d912 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800d90c:	f04f 33ff 	mov.w	r3, #4294967295
 800d910:	e116      	b.n	800db40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800d912:	887b      	ldrh	r3, [r7, #2]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d109      	bne.n	800d92c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800d918:	4b8b      	ldr	r3, [pc, #556]	@ (800db48 <tcp_split_unsent_seg+0x274>)
 800d91a:	f240 3253 	movw	r2, #851	@ 0x353
 800d91e:	498d      	ldr	r1, [pc, #564]	@ (800db54 <tcp_split_unsent_seg+0x280>)
 800d920:	488b      	ldr	r0, [pc, #556]	@ (800db50 <tcp_split_unsent_seg+0x27c>)
 800d922:	f006 fbfd 	bl	8014120 <iprintf>
    return ERR_VAL;
 800d926:	f06f 0305 	mvn.w	r3, #5
 800d92a:	e109      	b.n	800db40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	891b      	ldrh	r3, [r3, #8]
 800d930:	887a      	ldrh	r2, [r7, #2]
 800d932:	429a      	cmp	r2, r3
 800d934:	d301      	bcc.n	800d93a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800d936:	2300      	movs	r3, #0
 800d938:	e102      	b.n	800db40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800d93e:	887a      	ldrh	r2, [r7, #2]
 800d940:	429a      	cmp	r2, r3
 800d942:	d906      	bls.n	800d952 <tcp_split_unsent_seg+0x7e>
 800d944:	4b80      	ldr	r3, [pc, #512]	@ (800db48 <tcp_split_unsent_seg+0x274>)
 800d946:	f240 325b 	movw	r2, #859	@ 0x35b
 800d94a:	4983      	ldr	r1, [pc, #524]	@ (800db58 <tcp_split_unsent_seg+0x284>)
 800d94c:	4880      	ldr	r0, [pc, #512]	@ (800db50 <tcp_split_unsent_seg+0x27c>)
 800d94e:	f006 fbe7 	bl	8014120 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800d952:	697b      	ldr	r3, [r7, #20]
 800d954:	891b      	ldrh	r3, [r3, #8]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d106      	bne.n	800d968 <tcp_split_unsent_seg+0x94>
 800d95a:	4b7b      	ldr	r3, [pc, #492]	@ (800db48 <tcp_split_unsent_seg+0x274>)
 800d95c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800d960:	497e      	ldr	r1, [pc, #504]	@ (800db5c <tcp_split_unsent_seg+0x288>)
 800d962:	487b      	ldr	r0, [pc, #492]	@ (800db50 <tcp_split_unsent_seg+0x27c>)
 800d964:	f006 fbdc 	bl	8014120 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	7a9b      	ldrb	r3, [r3, #10]
 800d96c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	b2db      	uxtb	r3, r3
 800d974:	f003 0304 	and.w	r3, r3, #4
 800d978:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	891a      	ldrh	r2, [r3, #8]
 800d97e:	887b      	ldrh	r3, [r7, #2]
 800d980:	1ad3      	subs	r3, r2, r3
 800d982:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800d984:	7bbb      	ldrb	r3, [r7, #14]
 800d986:	b29a      	uxth	r2, r3
 800d988:	89bb      	ldrh	r3, [r7, #12]
 800d98a:	4413      	add	r3, r2
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d992:	4619      	mov	r1, r3
 800d994:	2036      	movs	r0, #54	@ 0x36
 800d996:	f7fa fa59 	bl	8007e4c <pbuf_alloc>
 800d99a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	f000 80b7 	beq.w	800db12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	891a      	ldrh	r2, [r3, #8]
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	891b      	ldrh	r3, [r3, #8]
 800d9ae:	1ad3      	subs	r3, r2, r3
 800d9b0:	b29a      	uxth	r2, r3
 800d9b2:	887b      	ldrh	r3, [r7, #2]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800d9b8:	697b      	ldr	r3, [r7, #20]
 800d9ba:	6858      	ldr	r0, [r3, #4]
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	685a      	ldr	r2, [r3, #4]
 800d9c0:	7bbb      	ldrb	r3, [r7, #14]
 800d9c2:	18d1      	adds	r1, r2, r3
 800d9c4:	897b      	ldrh	r3, [r7, #10]
 800d9c6:	89ba      	ldrh	r2, [r7, #12]
 800d9c8:	f7fa ff1e 	bl	8008808 <pbuf_copy_partial>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	461a      	mov	r2, r3
 800d9d0:	89bb      	ldrh	r3, [r7, #12]
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	f040 809f 	bne.w	800db16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	68db      	ldr	r3, [r3, #12]
 800d9dc:	899b      	ldrh	r3, [r3, #12]
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f8 fd8b 	bl	80064fc <lwip_htons>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800d9f4:	7efb      	ldrb	r3, [r7, #27]
 800d9f6:	f003 0308 	and.w	r3, r3, #8
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d007      	beq.n	800da0e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800d9fe:	7efb      	ldrb	r3, [r7, #27]
 800da00:	f023 0308 	bic.w	r3, r3, #8
 800da04:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800da06:	7ebb      	ldrb	r3, [r7, #26]
 800da08:	f043 0308 	orr.w	r3, r3, #8
 800da0c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800da0e:	7efb      	ldrb	r3, [r7, #27]
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	2b00      	cmp	r3, #0
 800da16:	d007      	beq.n	800da28 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800da18:	7efb      	ldrb	r3, [r7, #27]
 800da1a:	f023 0301 	bic.w	r3, r3, #1
 800da1e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800da20:	7ebb      	ldrb	r3, [r7, #26]
 800da22:	f043 0301 	orr.w	r3, r3, #1
 800da26:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	4618      	mov	r0, r3
 800da30:	f7f8 fd79 	bl	8006526 <lwip_htonl>
 800da34:	4602      	mov	r2, r0
 800da36:	887b      	ldrh	r3, [r7, #2]
 800da38:	18d1      	adds	r1, r2, r3
 800da3a:	7eba      	ldrb	r2, [r7, #26]
 800da3c:	7bfb      	ldrb	r3, [r7, #15]
 800da3e:	9300      	str	r3, [sp, #0]
 800da40:	460b      	mov	r3, r1
 800da42:	6939      	ldr	r1, [r7, #16]
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7ff fa51 	bl	800ceec <tcp_create_segment>
 800da4a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800da4c:	69fb      	ldr	r3, [r7, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d063      	beq.n	800db1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	4618      	mov	r0, r3
 800da58:	f7fa fd64 	bl	8008524 <pbuf_clen>
 800da5c:	4603      	mov	r3, r0
 800da5e:	461a      	mov	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800da66:	1a9b      	subs	r3, r3, r2
 800da68:	b29a      	uxth	r2, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800da70:	697b      	ldr	r3, [r7, #20]
 800da72:	6858      	ldr	r0, [r3, #4]
 800da74:	697b      	ldr	r3, [r7, #20]
 800da76:	685b      	ldr	r3, [r3, #4]
 800da78:	891a      	ldrh	r2, [r3, #8]
 800da7a:	89bb      	ldrh	r3, [r7, #12]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	b29b      	uxth	r3, r3
 800da80:	4619      	mov	r1, r3
 800da82:	f7fa fb41 	bl	8008108 <pbuf_realloc>
  useg->len -= remainder;
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	891a      	ldrh	r2, [r3, #8]
 800da8a:	89bb      	ldrh	r3, [r7, #12]
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	b29a      	uxth	r2, r3
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	899b      	ldrh	r3, [r3, #12]
 800da9a:	b29c      	uxth	r4, r3
 800da9c:	7efb      	ldrb	r3, [r7, #27]
 800da9e:	b29b      	uxth	r3, r3
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7f8 fd2b 	bl	80064fc <lwip_htons>
 800daa6:	4603      	mov	r3, r0
 800daa8:	461a      	mov	r2, r3
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	4322      	orrs	r2, r4
 800dab0:	b292      	uxth	r2, r2
 800dab2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	4618      	mov	r0, r3
 800daba:	f7fa fd33 	bl	8008524 <pbuf_clen>
 800dabe:	4603      	mov	r3, r0
 800dac0:	461a      	mov	r2, r3
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dac8:	4413      	add	r3, r2
 800daca:	b29a      	uxth	r2, r3
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dad2:	69fb      	ldr	r3, [r7, #28]
 800dad4:	685b      	ldr	r3, [r3, #4]
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7fa fd24 	bl	8008524 <pbuf_clen>
 800dadc:	4603      	mov	r3, r0
 800dade:	461a      	mov	r2, r3
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dae6:	4413      	add	r3, r2
 800dae8:	b29a      	uxth	r2, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	69fa      	ldr	r2, [r7, #28]
 800dafc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800dafe:	69fb      	ldr	r3, [r7, #28]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d103      	bne.n	800db0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	e016      	b.n	800db40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800db12:	bf00      	nop
 800db14:	e002      	b.n	800db1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db16:	bf00      	nop
 800db18:	e000      	b.n	800db1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800db1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <tcp_split_unsent_seg+0x25c>
 800db22:	4b09      	ldr	r3, [pc, #36]	@ (800db48 <tcp_split_unsent_seg+0x274>)
 800db24:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800db28:	490d      	ldr	r1, [pc, #52]	@ (800db60 <tcp_split_unsent_seg+0x28c>)
 800db2a:	4809      	ldr	r0, [pc, #36]	@ (800db50 <tcp_split_unsent_seg+0x27c>)
 800db2c:	f006 faf8 	bl	8014120 <iprintf>
  if (p != NULL) {
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d002      	beq.n	800db3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800db36:	6938      	ldr	r0, [r7, #16]
 800db38:	f7fa fc6c 	bl	8008414 <pbuf_free>
  }

  return ERR_MEM;
 800db3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800db40:	4618      	mov	r0, r3
 800db42:	3724      	adds	r7, #36	@ 0x24
 800db44:	46bd      	mov	sp, r7
 800db46:	bd90      	pop	{r4, r7, pc}
 800db48:	08016b08 	.word	0x08016b08
 800db4c:	08016e9c 	.word	0x08016e9c
 800db50:	08016b5c 	.word	0x08016b5c
 800db54:	08016ec0 	.word	0x08016ec0
 800db58:	08016ee4 	.word	0x08016ee4
 800db5c:	08016ef4 	.word	0x08016ef4
 800db60:	08016f04 	.word	0x08016f04

0800db64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800db64:	b590      	push	{r4, r7, lr}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <tcp_send_fin+0x1c>
 800db72:	4b21      	ldr	r3, [pc, #132]	@ (800dbf8 <tcp_send_fin+0x94>)
 800db74:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800db78:	4920      	ldr	r1, [pc, #128]	@ (800dbfc <tcp_send_fin+0x98>)
 800db7a:	4821      	ldr	r0, [pc, #132]	@ (800dc00 <tcp_send_fin+0x9c>)
 800db7c:	f006 fad0 	bl	8014120 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db84:	2b00      	cmp	r3, #0
 800db86:	d02e      	beq.n	800dbe6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800db8c:	60fb      	str	r3, [r7, #12]
 800db8e:	e002      	b.n	800db96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d1f8      	bne.n	800db90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	899b      	ldrh	r3, [r3, #12]
 800dba4:	b29b      	uxth	r3, r3
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7f8 fca8 	bl	80064fc <lwip_htons>
 800dbac:	4603      	mov	r3, r0
 800dbae:	b2db      	uxtb	r3, r3
 800dbb0:	f003 0307 	and.w	r3, r3, #7
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d116      	bne.n	800dbe6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	899b      	ldrh	r3, [r3, #12]
 800dbbe:	b29c      	uxth	r4, r3
 800dbc0:	2001      	movs	r0, #1
 800dbc2:	f7f8 fc9b 	bl	80064fc <lwip_htons>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	461a      	mov	r2, r3
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	68db      	ldr	r3, [r3, #12]
 800dbce:	4322      	orrs	r2, r4
 800dbd0:	b292      	uxth	r2, r2
 800dbd2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	8b5b      	ldrh	r3, [r3, #26]
 800dbd8:	f043 0320 	orr.w	r3, r3, #32
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e004      	b.n	800dbf0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 f80b 	bl	800dc04 <tcp_enqueue_flags>
 800dbee:	4603      	mov	r3, r0
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3714      	adds	r7, #20
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd90      	pop	{r4, r7, pc}
 800dbf8:	08016b08 	.word	0x08016b08
 800dbfc:	08016f10 	.word	0x08016f10
 800dc00:	08016b5c 	.word	0x08016b5c

0800dc04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b08a      	sub	sp, #40	@ 0x28
 800dc08:	af02      	add	r7, sp, #8
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dc10:	2300      	movs	r3, #0
 800dc12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dc14:	2300      	movs	r3, #0
 800dc16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	f003 0303 	and.w	r3, r3, #3
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d106      	bne.n	800dc30 <tcp_enqueue_flags+0x2c>
 800dc22:	4b67      	ldr	r3, [pc, #412]	@ (800ddc0 <tcp_enqueue_flags+0x1bc>)
 800dc24:	f240 4211 	movw	r2, #1041	@ 0x411
 800dc28:	4966      	ldr	r1, [pc, #408]	@ (800ddc4 <tcp_enqueue_flags+0x1c0>)
 800dc2a:	4867      	ldr	r0, [pc, #412]	@ (800ddc8 <tcp_enqueue_flags+0x1c4>)
 800dc2c:	f006 fa78 	bl	8014120 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d106      	bne.n	800dc44 <tcp_enqueue_flags+0x40>
 800dc36:	4b62      	ldr	r3, [pc, #392]	@ (800ddc0 <tcp_enqueue_flags+0x1bc>)
 800dc38:	f240 4213 	movw	r2, #1043	@ 0x413
 800dc3c:	4963      	ldr	r1, [pc, #396]	@ (800ddcc <tcp_enqueue_flags+0x1c8>)
 800dc3e:	4862      	ldr	r0, [pc, #392]	@ (800ddc8 <tcp_enqueue_flags+0x1c4>)
 800dc40:	f006 fa6e 	bl	8014120 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800dc44:	78fb      	ldrb	r3, [r7, #3]
 800dc46:	f003 0302 	and.w	r3, r3, #2
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d001      	beq.n	800dc52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dc52:	7ffb      	ldrb	r3, [r7, #31]
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	f003 0304 	and.w	r3, r3, #4
 800dc5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc5e:	7dfb      	ldrb	r3, [r7, #23]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800dc66:	4619      	mov	r1, r3
 800dc68:	2036      	movs	r0, #54	@ 0x36
 800dc6a:	f7fa f8ef 	bl	8007e4c <pbuf_alloc>
 800dc6e:	6138      	str	r0, [r7, #16]
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d109      	bne.n	800dc8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	8b5b      	ldrh	r3, [r3, #26]
 800dc7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc7e:	b29a      	uxth	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dc84:	f04f 33ff 	mov.w	r3, #4294967295
 800dc88:	e095      	b.n	800ddb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	895a      	ldrh	r2, [r3, #10]
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	429a      	cmp	r2, r3
 800dc94:	d206      	bcs.n	800dca4 <tcp_enqueue_flags+0xa0>
 800dc96:	4b4a      	ldr	r3, [pc, #296]	@ (800ddc0 <tcp_enqueue_flags+0x1bc>)
 800dc98:	f240 4239 	movw	r2, #1081	@ 0x439
 800dc9c:	494c      	ldr	r1, [pc, #304]	@ (800ddd0 <tcp_enqueue_flags+0x1cc>)
 800dc9e:	484a      	ldr	r0, [pc, #296]	@ (800ddc8 <tcp_enqueue_flags+0x1c4>)
 800dca0:	f006 fa3e 	bl	8014120 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800dca8:	78fa      	ldrb	r2, [r7, #3]
 800dcaa:	7ffb      	ldrb	r3, [r7, #31]
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	460b      	mov	r3, r1
 800dcb0:	6939      	ldr	r1, [r7, #16]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	f7ff f91a 	bl	800ceec <tcp_create_segment>
 800dcb8:	60f8      	str	r0, [r7, #12]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d109      	bne.n	800dcd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	8b5b      	ldrh	r3, [r3, #26]
 800dcc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcc8:	b29a      	uxth	r2, r3
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dcce:	f04f 33ff 	mov.w	r3, #4294967295
 800dcd2:	e070      	b.n	800ddb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	68db      	ldr	r3, [r3, #12]
 800dcd8:	f003 0303 	and.w	r3, r3, #3
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d006      	beq.n	800dcee <tcp_enqueue_flags+0xea>
 800dce0:	4b37      	ldr	r3, [pc, #220]	@ (800ddc0 <tcp_enqueue_flags+0x1bc>)
 800dce2:	f240 4242 	movw	r2, #1090	@ 0x442
 800dce6:	493b      	ldr	r1, [pc, #236]	@ (800ddd4 <tcp_enqueue_flags+0x1d0>)
 800dce8:	4837      	ldr	r0, [pc, #220]	@ (800ddc8 <tcp_enqueue_flags+0x1c4>)
 800dcea:	f006 fa19 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	891b      	ldrh	r3, [r3, #8]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d006      	beq.n	800dd04 <tcp_enqueue_flags+0x100>
 800dcf6:	4b32      	ldr	r3, [pc, #200]	@ (800ddc0 <tcp_enqueue_flags+0x1bc>)
 800dcf8:	f240 4243 	movw	r2, #1091	@ 0x443
 800dcfc:	4936      	ldr	r1, [pc, #216]	@ (800ddd8 <tcp_enqueue_flags+0x1d4>)
 800dcfe:	4832      	ldr	r0, [pc, #200]	@ (800ddc8 <tcp_enqueue_flags+0x1c4>)
 800dd00:	f006 fa0e 	bl	8014120 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d103      	bne.n	800dd14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	68fa      	ldr	r2, [r7, #12]
 800dd10:	66da      	str	r2, [r3, #108]	@ 0x6c
 800dd12:	e00d      	b.n	800dd30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dd18:	61bb      	str	r3, [r7, #24]
 800dd1a:	e002      	b.n	800dd22 <tcp_enqueue_flags+0x11e>
 800dd1c:	69bb      	ldr	r3, [r7, #24]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	61bb      	str	r3, [r7, #24]
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d1f8      	bne.n	800dd1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd38:	78fb      	ldrb	r3, [r7, #3]
 800dd3a:	f003 0302 	and.w	r3, r3, #2
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d104      	bne.n	800dd4c <tcp_enqueue_flags+0x148>
 800dd42:	78fb      	ldrb	r3, [r7, #3]
 800dd44:	f003 0301 	and.w	r3, r3, #1
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d004      	beq.n	800dd56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd50:	1c5a      	adds	r2, r3, #1
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd56:	78fb      	ldrb	r3, [r7, #3]
 800dd58:	f003 0301 	and.w	r3, r3, #1
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d006      	beq.n	800dd6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	8b5b      	ldrh	r3, [r3, #26]
 800dd64:	f043 0320 	orr.w	r3, r3, #32
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	685b      	ldr	r3, [r3, #4]
 800dd72:	4618      	mov	r0, r3
 800dd74:	f7fa fbd6 	bl	8008524 <pbuf_clen>
 800dd78:	4603      	mov	r3, r0
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd82:	4413      	add	r3, r2
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00e      	beq.n	800ddb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d10a      	bne.n	800ddb4 <tcp_enqueue_flags+0x1b0>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d106      	bne.n	800ddb4 <tcp_enqueue_flags+0x1b0>
 800dda6:	4b06      	ldr	r3, [pc, #24]	@ (800ddc0 <tcp_enqueue_flags+0x1bc>)
 800dda8:	f240 4265 	movw	r2, #1125	@ 0x465
 800ddac:	490b      	ldr	r1, [pc, #44]	@ (800dddc <tcp_enqueue_flags+0x1d8>)
 800ddae:	4806      	ldr	r0, [pc, #24]	@ (800ddc8 <tcp_enqueue_flags+0x1c4>)
 800ddb0:	f006 f9b6 	bl	8014120 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3720      	adds	r7, #32
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	08016b08 	.word	0x08016b08
 800ddc4:	08016f2c 	.word	0x08016f2c
 800ddc8:	08016b5c 	.word	0x08016b5c
 800ddcc:	08016f84 	.word	0x08016f84
 800ddd0:	08016fa4 	.word	0x08016fa4
 800ddd4:	08016fe0 	.word	0x08016fe0
 800ddd8:	08016ff8 	.word	0x08016ff8
 800dddc:	08017024 	.word	0x08017024

0800dde0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800dde0:	b5b0      	push	{r4, r5, r7, lr}
 800dde2:	b08a      	sub	sp, #40	@ 0x28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d106      	bne.n	800ddfc <tcp_output+0x1c>
 800ddee:	4b8a      	ldr	r3, [pc, #552]	@ (800e018 <tcp_output+0x238>)
 800ddf0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800ddf4:	4989      	ldr	r1, [pc, #548]	@ (800e01c <tcp_output+0x23c>)
 800ddf6:	488a      	ldr	r0, [pc, #552]	@ (800e020 <tcp_output+0x240>)
 800ddf8:	f006 f992 	bl	8014120 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	7d1b      	ldrb	r3, [r3, #20]
 800de00:	2b01      	cmp	r3, #1
 800de02:	d106      	bne.n	800de12 <tcp_output+0x32>
 800de04:	4b84      	ldr	r3, [pc, #528]	@ (800e018 <tcp_output+0x238>)
 800de06:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800de0a:	4986      	ldr	r1, [pc, #536]	@ (800e024 <tcp_output+0x244>)
 800de0c:	4884      	ldr	r0, [pc, #528]	@ (800e020 <tcp_output+0x240>)
 800de0e:	f006 f987 	bl	8014120 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800de12:	4b85      	ldr	r3, [pc, #532]	@ (800e028 <tcp_output+0x248>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	429a      	cmp	r2, r3
 800de1a:	d101      	bne.n	800de20 <tcp_output+0x40>
    return ERR_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	e1ce      	b.n	800e1be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800de2c:	4293      	cmp	r3, r2
 800de2e:	bf28      	it	cs
 800de30:	4613      	movcs	r3, r2
 800de32:	b29b      	uxth	r3, r3
 800de34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800de3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d10b      	bne.n	800de5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	8b5b      	ldrh	r3, [r3, #26]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 81aa 	beq.w	800e1a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 fded 	bl	800ea30 <tcp_send_empty_ack>
 800de56:	4603      	mov	r3, r0
 800de58:	e1b1      	b.n	800e1be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800de5a:	6879      	ldr	r1, [r7, #4]
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	3304      	adds	r3, #4
 800de60:	461a      	mov	r2, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7ff f826 	bl	800ceb4 <tcp_route>
 800de68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d102      	bne.n	800de76 <tcp_output+0x96>
    return ERR_RTE;
 800de70:	f06f 0303 	mvn.w	r3, #3
 800de74:	e1a3      	b.n	800e1be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d003      	beq.n	800de84 <tcp_output+0xa4>
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d111      	bne.n	800dea8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800de84:	697b      	ldr	r3, [r7, #20]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <tcp_output+0xb0>
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	3304      	adds	r3, #4
 800de8e:	e000      	b.n	800de92 <tcp_output+0xb2>
 800de90:	2300      	movs	r3, #0
 800de92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d102      	bne.n	800dea0 <tcp_output+0xc0>
      return ERR_RTE;
 800de9a:	f06f 0303 	mvn.w	r3, #3
 800de9e:	e18e      	b.n	800e1be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	681a      	ldr	r2, [r3, #0]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800dea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	685b      	ldr	r3, [r3, #4]
 800deae:	4618      	mov	r0, r3
 800deb0:	f7f8 fb39 	bl	8006526 <lwip_htonl>
 800deb4:	4602      	mov	r2, r0
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deba:	1ad3      	subs	r3, r2, r3
 800debc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800debe:	8912      	ldrh	r2, [r2, #8]
 800dec0:	4413      	add	r3, r2
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d227      	bcs.n	800df18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dece:	461a      	mov	r2, r3
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d114      	bne.n	800df00 <tcp_output+0x120>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d110      	bne.n	800df00 <tcp_output+0x120>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10b      	bne.n	800df00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2201      	movs	r2, #1
 800def4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	8b5b      	ldrh	r3, [r3, #26]
 800df04:	f003 0302 	and.w	r3, r3, #2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	f000 814d 	beq.w	800e1a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 fd8e 	bl	800ea30 <tcp_send_empty_ack>
 800df14:	4603      	mov	r3, r0
 800df16:	e152      	b.n	800e1be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800df26:	6a3b      	ldr	r3, [r7, #32]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	f000 811c 	beq.w	800e166 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800df2e:	e002      	b.n	800df36 <tcp_output+0x156>
 800df30:	6a3b      	ldr	r3, [r7, #32]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	623b      	str	r3, [r7, #32]
 800df36:	6a3b      	ldr	r3, [r7, #32]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d1f8      	bne.n	800df30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800df3e:	e112      	b.n	800e166 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800df40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	899b      	ldrh	r3, [r3, #12]
 800df46:	b29b      	uxth	r3, r3
 800df48:	4618      	mov	r0, r3
 800df4a:	f7f8 fad7 	bl	80064fc <lwip_htons>
 800df4e:	4603      	mov	r3, r0
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	2b00      	cmp	r3, #0
 800df58:	d006      	beq.n	800df68 <tcp_output+0x188>
 800df5a:	4b2f      	ldr	r3, [pc, #188]	@ (800e018 <tcp_output+0x238>)
 800df5c:	f240 5236 	movw	r2, #1334	@ 0x536
 800df60:	4932      	ldr	r1, [pc, #200]	@ (800e02c <tcp_output+0x24c>)
 800df62:	482f      	ldr	r0, [pc, #188]	@ (800e020 <tcp_output+0x240>)
 800df64:	f006 f8dc 	bl	8014120 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01f      	beq.n	800dfb0 <tcp_output+0x1d0>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8b5b      	ldrh	r3, [r3, #26]
 800df74:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d119      	bne.n	800dfb0 <tcp_output+0x1d0>
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df80:	2b00      	cmp	r3, #0
 800df82:	d00b      	beq.n	800df9c <tcp_output+0x1bc>
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d110      	bne.n	800dfb0 <tcp_output+0x1d0>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df92:	891a      	ldrh	r2, [r3, #8]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df98:	429a      	cmp	r2, r3
 800df9a:	d209      	bcs.n	800dfb0 <tcp_output+0x1d0>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d004      	beq.n	800dfb0 <tcp_output+0x1d0>
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800dfac:	2b08      	cmp	r3, #8
 800dfae:	d901      	bls.n	800dfb4 <tcp_output+0x1d4>
 800dfb0:	2301      	movs	r3, #1
 800dfb2:	e000      	b.n	800dfb6 <tcp_output+0x1d6>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d106      	bne.n	800dfc8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8b5b      	ldrh	r3, [r3, #26]
 800dfbe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 80e4 	beq.w	800e190 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	7d1b      	ldrb	r3, [r3, #20]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d00d      	beq.n	800dfec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	899b      	ldrh	r3, [r3, #12]
 800dfd6:	b29c      	uxth	r4, r3
 800dfd8:	2010      	movs	r0, #16
 800dfda:	f7f8 fa8f 	bl	80064fc <lwip_htons>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	4322      	orrs	r2, r4
 800dfe8:	b292      	uxth	r2, r2
 800dfea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	6879      	ldr	r1, [r7, #4]
 800dff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dff2:	f000 f909 	bl	800e208 <tcp_output_segment>
 800dff6:	4603      	mov	r3, r0
 800dff8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800dffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d016      	beq.n	800e030 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	8b5b      	ldrh	r3, [r3, #26]
 800e006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e00a:	b29a      	uxth	r2, r3
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	835a      	strh	r2, [r3, #26]
      return err;
 800e010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e014:	e0d3      	b.n	800e1be <tcp_output+0x3de>
 800e016:	bf00      	nop
 800e018:	08016b08 	.word	0x08016b08
 800e01c:	0801704c 	.word	0x0801704c
 800e020:	08016b5c 	.word	0x08016b5c
 800e024:	08017064 	.word	0x08017064
 800e028:	2000437c 	.word	0x2000437c
 800e02c:	0801708c 	.word	0x0801708c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800e030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d006      	beq.n	800e04e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	8b5b      	ldrh	r3, [r3, #26]
 800e044:	f023 0303 	bic.w	r3, r3, #3
 800e048:	b29a      	uxth	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	4618      	mov	r0, r3
 800e056:	f7f8 fa66 	bl	8006526 <lwip_htonl>
 800e05a:	4604      	mov	r4, r0
 800e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e05e:	891b      	ldrh	r3, [r3, #8]
 800e060:	461d      	mov	r5, r3
 800e062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	899b      	ldrh	r3, [r3, #12]
 800e068:	b29b      	uxth	r3, r3
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7f8 fa46 	bl	80064fc <lwip_htons>
 800e070:	4603      	mov	r3, r0
 800e072:	b2db      	uxtb	r3, r3
 800e074:	f003 0303 	and.w	r3, r3, #3
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d001      	beq.n	800e080 <tcp_output+0x2a0>
 800e07c:	2301      	movs	r3, #1
 800e07e:	e000      	b.n	800e082 <tcp_output+0x2a2>
 800e080:	2300      	movs	r3, #0
 800e082:	442b      	add	r3, r5
 800e084:	4423      	add	r3, r4
 800e086:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	1ad3      	subs	r3, r2, r3
 800e090:	2b00      	cmp	r3, #0
 800e092:	da02      	bge.n	800e09a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	68ba      	ldr	r2, [r7, #8]
 800e098:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e09c:	891b      	ldrh	r3, [r3, #8]
 800e09e:	461c      	mov	r4, r3
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	899b      	ldrh	r3, [r3, #12]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f7f8 fa27 	bl	80064fc <lwip_htons>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	f003 0303 	and.w	r3, r3, #3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <tcp_output+0x2de>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	e000      	b.n	800e0c0 <tcp_output+0x2e0>
 800e0be:	2300      	movs	r3, #0
 800e0c0:	4423      	add	r3, r4
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d049      	beq.n	800e15a <tcp_output+0x37a>
      seg->next = NULL;
 800e0c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d105      	bne.n	800e0e0 <tcp_output+0x300>
        pcb->unacked = seg;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e0d8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 800e0da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0dc:	623b      	str	r3, [r7, #32]
 800e0de:	e03f      	b.n	800e160 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	68db      	ldr	r3, [r3, #12]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7f8 fa1d 	bl	8006526 <lwip_htonl>
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	6a3b      	ldr	r3, [r7, #32]
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7f8 fa16 	bl	8006526 <lwip_htonl>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	1ae3      	subs	r3, r4, r3
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	da24      	bge.n	800e14c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	3370      	adds	r3, #112	@ 0x70
 800e106:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e108:	e002      	b.n	800e110 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800e10a:	69fb      	ldr	r3, [r7, #28]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e110:	69fb      	ldr	r3, [r7, #28]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d011      	beq.n	800e13c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	685b      	ldr	r3, [r3, #4]
 800e120:	4618      	mov	r0, r3
 800e122:	f7f8 fa00 	bl	8006526 <lwip_htonl>
 800e126:	4604      	mov	r4, r0
 800e128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e12a:	68db      	ldr	r3, [r3, #12]
 800e12c:	685b      	ldr	r3, [r3, #4]
 800e12e:	4618      	mov	r0, r3
 800e130:	f7f8 f9f9 	bl	8006526 <lwip_htonl>
 800e134:	4603      	mov	r3, r0
 800e136:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e138:	2b00      	cmp	r3, #0
 800e13a:	dbe6      	blt.n	800e10a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800e13c:	69fb      	ldr	r3, [r7, #28]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e142:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e148:	601a      	str	r2, [r3, #0]
 800e14a:	e009      	b.n	800e160 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e14c:	6a3b      	ldr	r3, [r7, #32]
 800e14e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e150:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	623b      	str	r3, [r7, #32]
 800e158:	e002      	b.n	800e160 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e15a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e15c:	f7fb fef3 	bl	8009f46 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e164:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 800e166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d012      	beq.n	800e192 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e16e:	68db      	ldr	r3, [r3, #12]
 800e170:	685b      	ldr	r3, [r3, #4]
 800e172:	4618      	mov	r0, r3
 800e174:	f7f8 f9d7 	bl	8006526 <lwip_htonl>
 800e178:	4602      	mov	r2, r0
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e182:	8912      	ldrh	r2, [r2, #8]
 800e184:	4413      	add	r3, r2
  while (seg != NULL &&
 800e186:	69ba      	ldr	r2, [r7, #24]
 800e188:	429a      	cmp	r2, r3
 800e18a:	f4bf aed9 	bcs.w	800df40 <tcp_output+0x160>
 800e18e:	e000      	b.n	800e192 <tcp_output+0x3b2>
      break;
 800e190:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e196:	2b00      	cmp	r3, #0
 800e198:	d108      	bne.n	800e1ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800e1a2:	e004      	b.n	800e1ae <tcp_output+0x3ce>
    goto output_done;
 800e1a4:	bf00      	nop
 800e1a6:	e002      	b.n	800e1ae <tcp_output+0x3ce>
    goto output_done;
 800e1a8:	bf00      	nop
 800e1aa:	e000      	b.n	800e1ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800e1ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	8b5b      	ldrh	r3, [r3, #26]
 800e1b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800e1b6:	b29a      	uxth	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800e1bc:	2300      	movs	r3, #0
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3728      	adds	r7, #40	@ 0x28
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	bdb0      	pop	{r4, r5, r7, pc}
 800e1c6:	bf00      	nop

0800e1c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d106      	bne.n	800e1e4 <tcp_output_segment_busy+0x1c>
 800e1d6:	4b09      	ldr	r3, [pc, #36]	@ (800e1fc <tcp_output_segment_busy+0x34>)
 800e1d8:	f240 529a 	movw	r2, #1434	@ 0x59a
 800e1dc:	4908      	ldr	r1, [pc, #32]	@ (800e200 <tcp_output_segment_busy+0x38>)
 800e1de:	4809      	ldr	r0, [pc, #36]	@ (800e204 <tcp_output_segment_busy+0x3c>)
 800e1e0:	f005 ff9e 	bl	8014120 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	7b9b      	ldrb	r3, [r3, #14]
 800e1ea:	2b01      	cmp	r3, #1
 800e1ec:	d001      	beq.n	800e1f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}
 800e1fc:	08016b08 	.word	0x08016b08
 800e200:	080170a4 	.word	0x080170a4
 800e204:	08016b5c 	.word	0x08016b5c

0800e208 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e208:	b5b0      	push	{r4, r5, r7, lr}
 800e20a:	b08c      	sub	sp, #48	@ 0x30
 800e20c:	af04      	add	r7, sp, #16
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d106      	bne.n	800e228 <tcp_output_segment+0x20>
 800e21a:	4b6d      	ldr	r3, [pc, #436]	@ (800e3d0 <tcp_output_segment+0x1c8>)
 800e21c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 800e220:	496c      	ldr	r1, [pc, #432]	@ (800e3d4 <tcp_output_segment+0x1cc>)
 800e222:	486d      	ldr	r0, [pc, #436]	@ (800e3d8 <tcp_output_segment+0x1d0>)
 800e224:	f005 ff7c 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d106      	bne.n	800e23c <tcp_output_segment+0x34>
 800e22e:	4b68      	ldr	r3, [pc, #416]	@ (800e3d0 <tcp_output_segment+0x1c8>)
 800e230:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 800e234:	4969      	ldr	r1, [pc, #420]	@ (800e3dc <tcp_output_segment+0x1d4>)
 800e236:	4868      	ldr	r0, [pc, #416]	@ (800e3d8 <tcp_output_segment+0x1d0>)
 800e238:	f005 ff72 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d106      	bne.n	800e250 <tcp_output_segment+0x48>
 800e242:	4b63      	ldr	r3, [pc, #396]	@ (800e3d0 <tcp_output_segment+0x1c8>)
 800e244:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 800e248:	4965      	ldr	r1, [pc, #404]	@ (800e3e0 <tcp_output_segment+0x1d8>)
 800e24a:	4863      	ldr	r0, [pc, #396]	@ (800e3d8 <tcp_output_segment+0x1d0>)
 800e24c:	f005 ff68 	bl	8014120 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800e250:	68f8      	ldr	r0, [r7, #12]
 800e252:	f7ff ffb9 	bl	800e1c8 <tcp_output_segment_busy>
 800e256:	4603      	mov	r3, r0
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800e25c:	2300      	movs	r3, #0
 800e25e:	e0b3      	b.n	800e3c8 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	68dc      	ldr	r4, [r3, #12]
 800e268:	4610      	mov	r0, r2
 800e26a:	f7f8 f95c 	bl	8006526 <lwip_htonl>
 800e26e:	4603      	mov	r3, r0
 800e270:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68dc      	ldr	r4, [r3, #12]
 800e27a:	4610      	mov	r0, r2
 800e27c:	f7f8 f93e 	bl	80064fc <lwip_htons>
 800e280:	4603      	mov	r3, r0
 800e282:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e28c:	441a      	add	r2, r3
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	3314      	adds	r3, #20
 800e298:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	7a9b      	ldrb	r3, [r3, #10]
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d015      	beq.n	800e2d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	6879      	ldr	r1, [r7, #4]
 800e2ae:	f44f 7006 	mov.w	r0, #536	@ 0x218
 800e2b2:	f7fc fa25 	bl	800a700 <tcp_eff_send_mss_netif>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2ba:	8b7b      	ldrh	r3, [r7, #26]
 800e2bc:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7f8 f930 	bl	8006526 <lwip_htonl>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	69fb      	ldr	r3, [r7, #28]
 800e2ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e2cc:	69fb      	ldr	r3, [r7, #28]
 800e2ce:	3304      	adds	r3, #4
 800e2d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	da02      	bge.n	800e2e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10c      	bne.n	800e304 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800e2ea:	4b3e      	ldr	r3, [pc, #248]	@ (800e3e4 <tcp_output_segment+0x1dc>)
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	685b      	ldr	r3, [r3, #4]
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f7f8 f914 	bl	8006526 <lwip_htonl>
 800e2fe:	4602      	mov	r2, r0
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	68da      	ldr	r2, [r3, #12]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	685b      	ldr	r3, [r3, #4]
 800e30c:	685b      	ldr	r3, [r3, #4]
 800e30e:	1ad3      	subs	r3, r2, r3
 800e310:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	8959      	ldrh	r1, [r3, #10]
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	8b3a      	ldrh	r2, [r7, #24]
 800e31e:	1a8a      	subs	r2, r1, r2
 800e320:	b292      	uxth	r2, r2
 800e322:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	8919      	ldrh	r1, [r3, #8]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	8b3a      	ldrh	r2, [r7, #24]
 800e330:	1a8a      	subs	r2, r1, r2
 800e332:	b292      	uxth	r2, r2
 800e334:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	68fa      	ldr	r2, [r7, #12]
 800e33c:	68d2      	ldr	r2, [r2, #12]
 800e33e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	741a      	strb	r2, [r3, #16]
 800e348:	2200      	movs	r2, #0
 800e34a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	68da      	ldr	r2, [r3, #12]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	7a9b      	ldrb	r3, [r3, #10]
 800e354:	f003 0301 	and.w	r3, r3, #1
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d001      	beq.n	800e360 <tcp_output_segment+0x158>
 800e35c:	2318      	movs	r3, #24
 800e35e:	e000      	b.n	800e362 <tcp_output_segment+0x15a>
 800e360:	2314      	movs	r3, #20
 800e362:	4413      	add	r3, r2
 800e364:	69fa      	ldr	r2, [r7, #28]
 800e366:	429a      	cmp	r2, r3
 800e368:	d006      	beq.n	800e378 <tcp_output_segment+0x170>
 800e36a:	4b19      	ldr	r3, [pc, #100]	@ (800e3d0 <tcp_output_segment+0x1c8>)
 800e36c:	f240 621c 	movw	r2, #1564	@ 0x61c
 800e370:	491d      	ldr	r1, [pc, #116]	@ (800e3e8 <tcp_output_segment+0x1e0>)
 800e372:	4819      	ldr	r0, [pc, #100]	@ (800e3d8 <tcp_output_segment+0x1d0>)
 800e374:	f005 fed4 	bl	8014120 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e380:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 800e382:	68bd      	ldr	r5, [r7, #8]
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	68d4      	ldr	r4, [r2, #12]
 800e38c:	9300      	str	r3, [sp, #0]
 800e38e:	462b      	mov	r3, r5
 800e390:	460a      	mov	r2, r1
 800e392:	2106      	movs	r1, #6
 800e394:	f7f8 fcd1 	bl	8006d3a <ip_chksum_pseudo>
 800e398:	4603      	mov	r3, r0
 800e39a:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	6858      	ldr	r0, [r3, #4]
 800e3a0:	68b9      	ldr	r1, [r7, #8]
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	1d1c      	adds	r4, r3, #4
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	7add      	ldrb	r5, [r3, #11]
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	7a9b      	ldrb	r3, [r3, #10]
 800e3ae:	687a      	ldr	r2, [r7, #4]
 800e3b0:	9202      	str	r2, [sp, #8]
 800e3b2:	2206      	movs	r2, #6
 800e3b4:	9201      	str	r2, [sp, #4]
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	462b      	mov	r3, r5
 800e3ba:	4622      	mov	r2, r4
 800e3bc:	f004 fd0c 	bl	8012dd8 <ip4_output_if>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800e3c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3720      	adds	r7, #32
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800e3d0:	08016b08 	.word	0x08016b08
 800e3d4:	080170cc 	.word	0x080170cc
 800e3d8:	08016b5c 	.word	0x08016b5c
 800e3dc:	080170ec 	.word	0x080170ec
 800e3e0:	0801710c 	.word	0x0801710c
 800e3e4:	20004330 	.word	0x20004330
 800e3e8:	08017130 	.word	0x08017130

0800e3ec <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800e3ec:	b5b0      	push	{r4, r5, r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <tcp_rexmit_rto_prepare+0x1c>
 800e3fa:	4b31      	ldr	r3, [pc, #196]	@ (800e4c0 <tcp_rexmit_rto_prepare+0xd4>)
 800e3fc:	f240 6263 	movw	r2, #1635	@ 0x663
 800e400:	4930      	ldr	r1, [pc, #192]	@ (800e4c4 <tcp_rexmit_rto_prepare+0xd8>)
 800e402:	4831      	ldr	r0, [pc, #196]	@ (800e4c8 <tcp_rexmit_rto_prepare+0xdc>)
 800e404:	f005 fe8c 	bl	8014120 <iprintf>

  if (pcb->unacked == NULL) {
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d102      	bne.n	800e416 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800e410:	f06f 0305 	mvn.w	r3, #5
 800e414:	e050      	b.n	800e4b8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	e00b      	b.n	800e436 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800e41e:	68f8      	ldr	r0, [r7, #12]
 800e420:	f7ff fed2 	bl	800e1c8 <tcp_output_segment_busy>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d002      	beq.n	800e430 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800e42a:	f06f 0305 	mvn.w	r3, #5
 800e42e:	e043      	b.n	800e4b8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	60fb      	str	r3, [r7, #12]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1ef      	bne.n	800e41e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7ff fec2 	bl	800e1c8 <tcp_output_segment_busy>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d002      	beq.n	800e450 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800e44a:	f06f 0305 	mvn.w	r3, #5
 800e44e:	e033      	b.n	800e4b8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	2200      	movs	r2, #0
 800e464:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	8b5b      	ldrh	r3, [r3, #26]
 800e46a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800e46e:	b29a      	uxth	r2, r3
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7f8 f853 	bl	8006526 <lwip_htonl>
 800e480:	4604      	mov	r4, r0
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	891b      	ldrh	r3, [r3, #8]
 800e486:	461d      	mov	r5, r3
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	899b      	ldrh	r3, [r3, #12]
 800e48e:	b29b      	uxth	r3, r3
 800e490:	4618      	mov	r0, r3
 800e492:	f7f8 f833 	bl	80064fc <lwip_htons>
 800e496:	4603      	mov	r3, r0
 800e498:	b2db      	uxtb	r3, r3
 800e49a:	f003 0303 	and.w	r3, r3, #3
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d001      	beq.n	800e4a6 <tcp_rexmit_rto_prepare+0xba>
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	e000      	b.n	800e4a8 <tcp_rexmit_rto_prepare+0xbc>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	442b      	add	r3, r5
 800e4aa:	18e2      	adds	r2, r4, r3
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 800e4b6:	2300      	movs	r3, #0
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bdb0      	pop	{r4, r5, r7, pc}
 800e4c0:	08016b08 	.word	0x08016b08
 800e4c4:	08017144 	.word	0x08017144
 800e4c8:	08016b5c 	.word	0x08016b5c

0800e4cc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b082      	sub	sp, #8
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d106      	bne.n	800e4e8 <tcp_rexmit_rto_commit+0x1c>
 800e4da:	4b0d      	ldr	r3, [pc, #52]	@ (800e510 <tcp_rexmit_rto_commit+0x44>)
 800e4dc:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e4e0:	490c      	ldr	r1, [pc, #48]	@ (800e514 <tcp_rexmit_rto_commit+0x48>)
 800e4e2:	480d      	ldr	r0, [pc, #52]	@ (800e518 <tcp_rexmit_rto_commit+0x4c>)
 800e4e4:	f005 fe1c 	bl	8014120 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4ee:	2bff      	cmp	r3, #255	@ 0xff
 800e4f0:	d007      	beq.n	800e502 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	b2da      	uxtb	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f7ff fc6c 	bl	800dde0 <tcp_output>
}
 800e508:	bf00      	nop
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}
 800e510:	08016b08 	.word	0x08016b08
 800e514:	08017168 	.word	0x08017168
 800e518:	08016b5c 	.word	0x08016b5c

0800e51c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d106      	bne.n	800e538 <tcp_rexmit_rto+0x1c>
 800e52a:	4b0a      	ldr	r3, [pc, #40]	@ (800e554 <tcp_rexmit_rto+0x38>)
 800e52c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 800e530:	4909      	ldr	r1, [pc, #36]	@ (800e558 <tcp_rexmit_rto+0x3c>)
 800e532:	480a      	ldr	r0, [pc, #40]	@ (800e55c <tcp_rexmit_rto+0x40>)
 800e534:	f005 fdf4 	bl	8014120 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800e538:	6878      	ldr	r0, [r7, #4]
 800e53a:	f7ff ff57 	bl	800e3ec <tcp_rexmit_rto_prepare>
 800e53e:	4603      	mov	r3, r0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d102      	bne.n	800e54a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7ff ffc1 	bl	800e4cc <tcp_rexmit_rto_commit>
  }
}
 800e54a:	bf00      	nop
 800e54c:	3708      	adds	r7, #8
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}
 800e552:	bf00      	nop
 800e554:	08016b08 	.word	0x08016b08
 800e558:	0801718c 	.word	0x0801718c
 800e55c:	08016b5c 	.word	0x08016b5c

0800e560 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e560:	b590      	push	{r4, r7, lr}
 800e562:	b085      	sub	sp, #20
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d106      	bne.n	800e57c <tcp_rexmit+0x1c>
 800e56e:	4b2f      	ldr	r3, [pc, #188]	@ (800e62c <tcp_rexmit+0xcc>)
 800e570:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 800e574:	492e      	ldr	r1, [pc, #184]	@ (800e630 <tcp_rexmit+0xd0>)
 800e576:	482f      	ldr	r0, [pc, #188]	@ (800e634 <tcp_rexmit+0xd4>)
 800e578:	f005 fdd2 	bl	8014120 <iprintf>

  if (pcb->unacked == NULL) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e580:	2b00      	cmp	r3, #0
 800e582:	d102      	bne.n	800e58a <tcp_rexmit+0x2a>
    return ERR_VAL;
 800e584:	f06f 0305 	mvn.w	r3, #5
 800e588:	e04c      	b.n	800e624 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e58e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800e590:	68b8      	ldr	r0, [r7, #8]
 800e592:	f7ff fe19 	bl	800e1c8 <tcp_output_segment_busy>
 800e596:	4603      	mov	r3, r0
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800e59c:	f06f 0305 	mvn.w	r3, #5
 800e5a0:	e040      	b.n	800e624 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	681a      	ldr	r2, [r3, #0]
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	336c      	adds	r3, #108	@ 0x6c
 800e5ae:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5b0:	e002      	b.n	800e5b8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d011      	beq.n	800e5e4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7f7 ffac 	bl	8006526 <lwip_htonl>
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7f7 ffa5 	bl	8006526 <lwip_htonl>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	dbe6      	blt.n	800e5b2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	68ba      	ldr	r2, [r7, #8]
 800e5f0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d103      	bne.n	800e602 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e608:	2bff      	cmp	r3, #255	@ 0xff
 800e60a:	d007      	beq.n	800e61c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e612:	3301      	adds	r3, #1
 800e614:	b2da      	uxtb	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd90      	pop	{r4, r7, pc}
 800e62c:	08016b08 	.word	0x08016b08
 800e630:	080171a8 	.word	0x080171a8
 800e634:	08016b5c 	.word	0x08016b5c

0800e638 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d106      	bne.n	800e654 <tcp_rexmit_fast+0x1c>
 800e646:	4b2a      	ldr	r3, [pc, #168]	@ (800e6f0 <tcp_rexmit_fast+0xb8>)
 800e648:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 800e64c:	4929      	ldr	r1, [pc, #164]	@ (800e6f4 <tcp_rexmit_fast+0xbc>)
 800e64e:	482a      	ldr	r0, [pc, #168]	@ (800e6f8 <tcp_rexmit_fast+0xc0>)
 800e650:	f005 fd66 	bl	8014120 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d044      	beq.n	800e6e6 <tcp_rexmit_fast+0xae>
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	8b5b      	ldrh	r3, [r3, #26]
 800e660:	f003 0304 	and.w	r3, r3, #4
 800e664:	2b00      	cmp	r3, #0
 800e666:	d13e      	bne.n	800e6e6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff ff79 	bl	800e560 <tcp_rexmit>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d138      	bne.n	800e6e6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e680:	4293      	cmp	r3, r2
 800e682:	bf28      	it	cs
 800e684:	4613      	movcs	r3, r2
 800e686:	b29b      	uxth	r3, r3
 800e688:	0fda      	lsrs	r2, r3, #31
 800e68a:	4413      	add	r3, r2
 800e68c:	105b      	asrs	r3, r3, #1
 800e68e:	b29a      	uxth	r2, r3
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e69c:	461a      	mov	r2, r3
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6a2:	005b      	lsls	r3, r3, #1
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d206      	bcs.n	800e6b6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6ac:	005b      	lsls	r3, r3, #1
 800e6ae:	b29a      	uxth	r2, r3
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e6c0:	4619      	mov	r1, r3
 800e6c2:	0049      	lsls	r1, r1, #1
 800e6c4:	440b      	add	r3, r1
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	4413      	add	r3, r2
 800e6ca:	b29a      	uxth	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	8b5b      	ldrh	r3, [r3, #26]
 800e6d6:	f043 0304 	orr.w	r3, r3, #4
 800e6da:	b29a      	uxth	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	08016b08 	.word	0x08016b08
 800e6f4:	080171c0 	.word	0x080171c0
 800e6f8:	08016b5c 	.word	0x08016b5c

0800e6fc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	60f8      	str	r0, [r7, #12]
 800e704:	607b      	str	r3, [r7, #4]
 800e706:	460b      	mov	r3, r1
 800e708:	817b      	strh	r3, [r7, #10]
 800e70a:	4613      	mov	r3, r2
 800e70c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e70e:	897a      	ldrh	r2, [r7, #10]
 800e710:	893b      	ldrh	r3, [r7, #8]
 800e712:	4413      	add	r3, r2
 800e714:	b29b      	uxth	r3, r3
 800e716:	3314      	adds	r3, #20
 800e718:	b29b      	uxth	r3, r3
 800e71a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800e71e:	4619      	mov	r1, r3
 800e720:	2022      	movs	r0, #34	@ 0x22
 800e722:	f7f9 fb93 	bl	8007e4c <pbuf_alloc>
 800e726:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d04d      	beq.n	800e7ca <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e72e:	897b      	ldrh	r3, [r7, #10]
 800e730:	3313      	adds	r3, #19
 800e732:	697a      	ldr	r2, [r7, #20]
 800e734:	8952      	ldrh	r2, [r2, #10]
 800e736:	4293      	cmp	r3, r2
 800e738:	db06      	blt.n	800e748 <tcp_output_alloc_header_common+0x4c>
 800e73a:	4b26      	ldr	r3, [pc, #152]	@ (800e7d4 <tcp_output_alloc_header_common+0xd8>)
 800e73c:	f240 7223 	movw	r2, #1827	@ 0x723
 800e740:	4925      	ldr	r1, [pc, #148]	@ (800e7d8 <tcp_output_alloc_header_common+0xdc>)
 800e742:	4826      	ldr	r0, [pc, #152]	@ (800e7dc <tcp_output_alloc_header_common+0xe0>)
 800e744:	f005 fcec 	bl	8014120 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800e74e:	8c3b      	ldrh	r3, [r7, #32]
 800e750:	4618      	mov	r0, r3
 800e752:	f7f7 fed3 	bl	80064fc <lwip_htons>
 800e756:	4603      	mov	r3, r0
 800e758:	461a      	mov	r2, r3
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800e75e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e760:	4618      	mov	r0, r3
 800e762:	f7f7 fecb 	bl	80064fc <lwip_htons>
 800e766:	4603      	mov	r3, r0
 800e768:	461a      	mov	r2, r3
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	687a      	ldr	r2, [r7, #4]
 800e772:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f7f7 fed6 	bl	8006526 <lwip_htonl>
 800e77a:	4602      	mov	r2, r0
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800e780:	897b      	ldrh	r3, [r7, #10]
 800e782:	089b      	lsrs	r3, r3, #2
 800e784:	b29b      	uxth	r3, r3
 800e786:	3305      	adds	r3, #5
 800e788:	b29b      	uxth	r3, r3
 800e78a:	031b      	lsls	r3, r3, #12
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e792:	b29b      	uxth	r3, r3
 800e794:	4313      	orrs	r3, r2
 800e796:	b29b      	uxth	r3, r3
 800e798:	4618      	mov	r0, r3
 800e79a:	f7f7 feaf 	bl	80064fc <lwip_htons>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	461a      	mov	r2, r3
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800e7a6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7f7 fea7 	bl	80064fc <lwip_htons>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	741a      	strb	r2, [r3, #16]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e7c0:	693b      	ldr	r3, [r7, #16]
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	749a      	strb	r2, [r3, #18]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800e7ca:	697b      	ldr	r3, [r7, #20]
}
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	3718      	adds	r7, #24
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	bd80      	pop	{r7, pc}
 800e7d4:	08016b08 	.word	0x08016b08
 800e7d8:	080171e0 	.word	0x080171e0
 800e7dc:	08016b5c 	.word	0x08016b5c

0800e7e0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800e7e0:	b5b0      	push	{r4, r5, r7, lr}
 800e7e2:	b08a      	sub	sp, #40	@ 0x28
 800e7e4:	af04      	add	r7, sp, #16
 800e7e6:	60f8      	str	r0, [r7, #12]
 800e7e8:	607b      	str	r3, [r7, #4]
 800e7ea:	460b      	mov	r3, r1
 800e7ec:	817b      	strh	r3, [r7, #10]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d106      	bne.n	800e806 <tcp_output_alloc_header+0x26>
 800e7f8:	4b15      	ldr	r3, [pc, #84]	@ (800e850 <tcp_output_alloc_header+0x70>)
 800e7fa:	f240 7242 	movw	r2, #1858	@ 0x742
 800e7fe:	4915      	ldr	r1, [pc, #84]	@ (800e854 <tcp_output_alloc_header+0x74>)
 800e800:	4815      	ldr	r0, [pc, #84]	@ (800e858 <tcp_output_alloc_header+0x78>)
 800e802:	f005 fc8d 	bl	8014120 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	8adb      	ldrh	r3, [r3, #22]
 800e80e:	68fa      	ldr	r2, [r7, #12]
 800e810:	8b12      	ldrh	r2, [r2, #24]
 800e812:	68f9      	ldr	r1, [r7, #12]
 800e814:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 800e816:	893d      	ldrh	r5, [r7, #8]
 800e818:	897c      	ldrh	r4, [r7, #10]
 800e81a:	9103      	str	r1, [sp, #12]
 800e81c:	2110      	movs	r1, #16
 800e81e:	9102      	str	r1, [sp, #8]
 800e820:	9201      	str	r2, [sp, #4]
 800e822:	9300      	str	r3, [sp, #0]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	462a      	mov	r2, r5
 800e828:	4621      	mov	r1, r4
 800e82a:	f7ff ff67 	bl	800e6fc <tcp_output_alloc_header_common>
 800e82e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	2b00      	cmp	r3, #0
 800e834:	d006      	beq.n	800e844 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 800e83e:	441a      	add	r2, r3
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 800e844:	697b      	ldr	r3, [r7, #20]
}
 800e846:	4618      	mov	r0, r3
 800e848:	3718      	adds	r7, #24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bdb0      	pop	{r4, r5, r7, pc}
 800e84e:	bf00      	nop
 800e850:	08016b08 	.word	0x08016b08
 800e854:	08017210 	.word	0x08017210
 800e858:	08016b5c 	.word	0x08016b5c

0800e85c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b088      	sub	sp, #32
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	4611      	mov	r1, r2
 800e868:	461a      	mov	r2, r3
 800e86a:	460b      	mov	r3, r1
 800e86c:	71fb      	strb	r3, [r7, #7]
 800e86e:	4613      	mov	r3, r2
 800e870:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800e872:	2300      	movs	r3, #0
 800e874:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d106      	bne.n	800e88a <tcp_output_fill_options+0x2e>
 800e87c:	4b12      	ldr	r3, [pc, #72]	@ (800e8c8 <tcp_output_fill_options+0x6c>)
 800e87e:	f240 7256 	movw	r2, #1878	@ 0x756
 800e882:	4912      	ldr	r1, [pc, #72]	@ (800e8cc <tcp_output_fill_options+0x70>)
 800e884:	4812      	ldr	r0, [pc, #72]	@ (800e8d0 <tcp_output_fill_options+0x74>)
 800e886:	f005 fc4b 	bl	8014120 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800e890:	69bb      	ldr	r3, [r7, #24]
 800e892:	3314      	adds	r3, #20
 800e894:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800e896:	8bfb      	ldrh	r3, [r7, #30]
 800e898:	009b      	lsls	r3, r3, #2
 800e89a:	461a      	mov	r2, r3
 800e89c:	79fb      	ldrb	r3, [r7, #7]
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	f003 0304 	and.w	r3, r3, #4
 800e8a4:	4413      	add	r3, r2
 800e8a6:	3314      	adds	r3, #20
 800e8a8:	69ba      	ldr	r2, [r7, #24]
 800e8aa:	4413      	add	r3, r2
 800e8ac:	697a      	ldr	r2, [r7, #20]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d006      	beq.n	800e8c0 <tcp_output_fill_options+0x64>
 800e8b2:	4b05      	ldr	r3, [pc, #20]	@ (800e8c8 <tcp_output_fill_options+0x6c>)
 800e8b4:	f240 7275 	movw	r2, #1909	@ 0x775
 800e8b8:	4906      	ldr	r1, [pc, #24]	@ (800e8d4 <tcp_output_fill_options+0x78>)
 800e8ba:	4805      	ldr	r0, [pc, #20]	@ (800e8d0 <tcp_output_fill_options+0x74>)
 800e8bc:	f005 fc30 	bl	8014120 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800e8c0:	bf00      	nop
 800e8c2:	3720      	adds	r7, #32
 800e8c4:	46bd      	mov	sp, r7
 800e8c6:	bd80      	pop	{r7, pc}
 800e8c8:	08016b08 	.word	0x08016b08
 800e8cc:	08017238 	.word	0x08017238
 800e8d0:	08016b5c 	.word	0x08016b5c
 800e8d4:	08017130 	.word	0x08017130

0800e8d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b08c      	sub	sp, #48	@ 0x30
 800e8dc:	af04      	add	r7, sp, #16
 800e8de:	60f8      	str	r0, [r7, #12]
 800e8e0:	60b9      	str	r1, [r7, #8]
 800e8e2:	607a      	str	r2, [r7, #4]
 800e8e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d106      	bne.n	800e8fa <tcp_output_control_segment+0x22>
 800e8ec:	4b24      	ldr	r3, [pc, #144]	@ (800e980 <tcp_output_control_segment+0xa8>)
 800e8ee:	f240 7287 	movw	r2, #1927	@ 0x787
 800e8f2:	4924      	ldr	r1, [pc, #144]	@ (800e984 <tcp_output_control_segment+0xac>)
 800e8f4:	4824      	ldr	r0, [pc, #144]	@ (800e988 <tcp_output_control_segment+0xb0>)
 800e8f6:	f005 fc13 	bl	8014120 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800e8fa:	683a      	ldr	r2, [r7, #0]
 800e8fc:	6879      	ldr	r1, [r7, #4]
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f7fe fad8 	bl	800ceb4 <tcp_route>
 800e904:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 800e906:	69bb      	ldr	r3, [r7, #24]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d102      	bne.n	800e912 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800e90c:	23fc      	movs	r3, #252	@ 0xfc
 800e90e:	77fb      	strb	r3, [r7, #31]
 800e910:	e02c      	b.n	800e96c <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	891a      	ldrh	r2, [r3, #8]
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	9300      	str	r3, [sp, #0]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2106      	movs	r1, #6
 800e924:	68b8      	ldr	r0, [r7, #8]
 800e926:	f7f8 fa08 	bl	8006d3a <ip_chksum_pseudo>
 800e92a:	4603      	mov	r3, r0
 800e92c:	461a      	mov	r2, r3
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d006      	beq.n	800e946 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	7adb      	ldrb	r3, [r3, #11]
 800e93c:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	7a9b      	ldrb	r3, [r3, #10]
 800e942:	777b      	strb	r3, [r7, #29]
 800e944:	e003      	b.n	800e94e <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800e946:	23ff      	movs	r3, #255	@ 0xff
 800e948:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 800e94a:	2300      	movs	r3, #0
 800e94c:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800e94e:	7fba      	ldrb	r2, [r7, #30]
 800e950:	69bb      	ldr	r3, [r7, #24]
 800e952:	9302      	str	r3, [sp, #8]
 800e954:	2306      	movs	r3, #6
 800e956:	9301      	str	r3, [sp, #4]
 800e958:	7f7b      	ldrb	r3, [r7, #29]
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	4613      	mov	r3, r2
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	6879      	ldr	r1, [r7, #4]
 800e962:	68b8      	ldr	r0, [r7, #8]
 800e964:	f004 fa38 	bl	8012dd8 <ip4_output_if>
 800e968:	4603      	mov	r3, r0
 800e96a:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800e96c:	68b8      	ldr	r0, [r7, #8]
 800e96e:	f7f9 fd51 	bl	8008414 <pbuf_free>
  return err;
 800e972:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e976:	4618      	mov	r0, r3
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	08016b08 	.word	0x08016b08
 800e984:	08017260 	.word	0x08017260
 800e988:	08016b5c 	.word	0x08016b5c

0800e98c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b08b      	sub	sp, #44	@ 0x2c
 800e990:	af04      	add	r7, sp, #16
 800e992:	60f8      	str	r0, [r7, #12]
 800e994:	60b9      	str	r1, [r7, #8]
 800e996:	607a      	str	r2, [r7, #4]
 800e998:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d106      	bne.n	800e9ae <tcp_rst+0x22>
 800e9a0:	4b1f      	ldr	r3, [pc, #124]	@ (800ea20 <tcp_rst+0x94>)
 800e9a2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 800e9a6:	491f      	ldr	r1, [pc, #124]	@ (800ea24 <tcp_rst+0x98>)
 800e9a8:	481f      	ldr	r0, [pc, #124]	@ (800ea28 <tcp_rst+0x9c>)
 800e9aa:	f005 fbb9 	bl	8014120 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800e9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d106      	bne.n	800e9c2 <tcp_rst+0x36>
 800e9b4:	4b1a      	ldr	r3, [pc, #104]	@ (800ea20 <tcp_rst+0x94>)
 800e9b6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 800e9ba:	491c      	ldr	r1, [pc, #112]	@ (800ea2c <tcp_rst+0xa0>)
 800e9bc:	481a      	ldr	r0, [pc, #104]	@ (800ea28 <tcp_rst+0x9c>)
 800e9be:	f005 fbaf 	bl	8014120 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800e9c6:	f246 0308 	movw	r3, #24584	@ 0x6008
 800e9ca:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800e9cc:	7dfb      	ldrb	r3, [r7, #23]
 800e9ce:	b29c      	uxth	r4, r3
 800e9d0:	68b8      	ldr	r0, [r7, #8]
 800e9d2:	f7f7 fda8 	bl	8006526 <lwip_htonl>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	8abb      	ldrh	r3, [r7, #20]
 800e9da:	9303      	str	r3, [sp, #12]
 800e9dc:	2314      	movs	r3, #20
 800e9de:	9302      	str	r3, [sp, #8]
 800e9e0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800e9e2:	9301      	str	r3, [sp, #4]
 800e9e4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e9e6:	9300      	str	r3, [sp, #0]
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	4621      	mov	r1, r4
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f7ff fe84 	bl	800e6fc <tcp_output_alloc_header_common>
 800e9f4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800e9f6:	693b      	ldr	r3, [r7, #16]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d00c      	beq.n	800ea16 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800e9fc:	7dfb      	ldrb	r3, [r7, #23]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	6939      	ldr	r1, [r7, #16]
 800ea02:	68f8      	ldr	r0, [r7, #12]
 800ea04:	f7ff ff2a 	bl	800e85c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800ea08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	6939      	ldr	r1, [r7, #16]
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f7ff ff62 	bl	800e8d8 <tcp_output_control_segment>
 800ea14:	e000      	b.n	800ea18 <tcp_rst+0x8c>
    return;
 800ea16:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ea18:	371c      	adds	r7, #28
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd90      	pop	{r4, r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	08016b08 	.word	0x08016b08
 800ea24:	0801728c 	.word	0x0801728c
 800ea28:	08016b5c 	.word	0x08016b5c
 800ea2c:	080172a8 	.word	0x080172a8

0800ea30 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ea30:	b590      	push	{r4, r7, lr}
 800ea32:	b087      	sub	sp, #28
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d106      	bne.n	800ea54 <tcp_send_empty_ack+0x24>
 800ea46:	4b28      	ldr	r3, [pc, #160]	@ (800eae8 <tcp_send_empty_ack+0xb8>)
 800ea48:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 800ea4c:	4927      	ldr	r1, [pc, #156]	@ (800eaec <tcp_send_empty_ack+0xbc>)
 800ea4e:	4828      	ldr	r0, [pc, #160]	@ (800eaf0 <tcp_send_empty_ack+0xc0>)
 800ea50:	f005 fb66 	bl	8014120 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ea54:	7dfb      	ldrb	r3, [r7, #23]
 800ea56:	009b      	lsls	r3, r3, #2
 800ea58:	b2db      	uxtb	r3, r3
 800ea5a:	f003 0304 	and.w	r3, r3, #4
 800ea5e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ea60:	7d7b      	ldrb	r3, [r7, #21]
 800ea62:	b29c      	uxth	r4, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7f7 fd5c 	bl	8006526 <lwip_htonl>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	2200      	movs	r2, #0
 800ea72:	4621      	mov	r1, r4
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff feb3 	bl	800e7e0 <tcp_output_alloc_header>
 800ea7a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d109      	bne.n	800ea96 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	8b5b      	ldrh	r3, [r3, #26]
 800ea86:	f043 0303 	orr.w	r3, r3, #3
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800ea90:	f06f 0301 	mvn.w	r3, #1
 800ea94:	e023      	b.n	800eade <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800ea96:	7dbb      	ldrb	r3, [r7, #22]
 800ea98:	7dfa      	ldrb	r2, [r7, #23]
 800ea9a:	6939      	ldr	r1, [r7, #16]
 800ea9c:	6878      	ldr	r0, [r7, #4]
 800ea9e:	f7ff fedd 	bl	800e85c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	6939      	ldr	r1, [r7, #16]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f7ff ff14 	bl	800e8d8 <tcp_output_control_segment>
 800eab0:	4603      	mov	r3, r0
 800eab2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800eab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d007      	beq.n	800eacc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	8b5b      	ldrh	r3, [r3, #26]
 800eac0:	f043 0303 	orr.w	r3, r3, #3
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	835a      	strh	r2, [r3, #26]
 800eaca:	e006      	b.n	800eada <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	8b5b      	ldrh	r3, [r3, #26]
 800ead0:	f023 0303 	bic.w	r3, r3, #3
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800eada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	371c      	adds	r7, #28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd90      	pop	{r4, r7, pc}
 800eae6:	bf00      	nop
 800eae8:	08016b08 	.word	0x08016b08
 800eaec:	080172c4 	.word	0x080172c4
 800eaf0:	08016b5c 	.word	0x08016b5c

0800eaf4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800eaf4:	b590      	push	{r4, r7, lr}
 800eaf6:	b087      	sub	sp, #28
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eafc:	2300      	movs	r3, #0
 800eafe:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d106      	bne.n	800eb14 <tcp_keepalive+0x20>
 800eb06:	4b18      	ldr	r3, [pc, #96]	@ (800eb68 <tcp_keepalive+0x74>)
 800eb08:	f640 0224 	movw	r2, #2084	@ 0x824
 800eb0c:	4917      	ldr	r1, [pc, #92]	@ (800eb6c <tcp_keepalive+0x78>)
 800eb0e:	4818      	ldr	r0, [pc, #96]	@ (800eb70 <tcp_keepalive+0x7c>)
 800eb10:	f005 fb06 	bl	8014120 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800eb14:	7dfb      	ldrb	r3, [r7, #23]
 800eb16:	b29c      	uxth	r4, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb1c:	3b01      	subs	r3, #1
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7f7 fd01 	bl	8006526 <lwip_htonl>
 800eb24:	4603      	mov	r3, r0
 800eb26:	2200      	movs	r2, #0
 800eb28:	4621      	mov	r1, r4
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f7ff fe58 	bl	800e7e0 <tcp_output_alloc_header>
 800eb30:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d102      	bne.n	800eb3e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800eb38:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3c:	e010      	b.n	800eb60 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	2200      	movs	r2, #0
 800eb42:	6939      	ldr	r1, [r7, #16]
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f7ff fe89 	bl	800e85c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800eb4a:	687a      	ldr	r2, [r7, #4]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	3304      	adds	r3, #4
 800eb50:	6939      	ldr	r1, [r7, #16]
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f7ff fec0 	bl	800e8d8 <tcp_output_control_segment>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800eb5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	371c      	adds	r7, #28
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd90      	pop	{r4, r7, pc}
 800eb68:	08016b08 	.word	0x08016b08
 800eb6c:	080172e4 	.word	0x080172e4
 800eb70:	08016b5c 	.word	0x08016b5c

0800eb74 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800eb74:	b590      	push	{r4, r7, lr}
 800eb76:	b08b      	sub	sp, #44	@ 0x2c
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d106      	bne.n	800eb96 <tcp_zero_window_probe+0x22>
 800eb88:	4b4c      	ldr	r3, [pc, #304]	@ (800ecbc <tcp_zero_window_probe+0x148>)
 800eb8a:	f640 024f 	movw	r2, #2127	@ 0x84f
 800eb8e:	494c      	ldr	r1, [pc, #304]	@ (800ecc0 <tcp_zero_window_probe+0x14c>)
 800eb90:	484c      	ldr	r0, [pc, #304]	@ (800ecc4 <tcp_zero_window_probe+0x150>)
 800eb92:	f005 fac5 	bl	8014120 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb9a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d101      	bne.n	800eba6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	e086      	b.n	800ecb4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ebac:	2bff      	cmp	r3, #255	@ 0xff
 800ebae:	d007      	beq.n	800ebc0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800ebb6:	3301      	adds	r3, #1
 800ebb8:	b2da      	uxtb	r2, r3
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ebc0:	6a3b      	ldr	r3, [r7, #32]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	899b      	ldrh	r3, [r3, #12]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7f7 fc97 	bl	80064fc <lwip_htons>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d005      	beq.n	800ebe6 <tcp_zero_window_probe+0x72>
 800ebda:	6a3b      	ldr	r3, [r7, #32]
 800ebdc:	891b      	ldrh	r3, [r3, #8]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d101      	bne.n	800ebe6 <tcp_zero_window_probe+0x72>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e000      	b.n	800ebe8 <tcp_zero_window_probe+0x74>
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ebea:	7ffb      	ldrb	r3, [r7, #31]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	bf0c      	ite	eq
 800ebf0:	2301      	moveq	r3, #1
 800ebf2:	2300      	movne	r3, #0
 800ebf4:	b2db      	uxtb	r3, r3
 800ebf6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ebf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ebfc:	b299      	uxth	r1, r3
 800ebfe:	6a3b      	ldr	r3, [r7, #32]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	8bba      	ldrh	r2, [r7, #28]
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f7ff fdea 	bl	800e7e0 <tcp_output_alloc_header>
 800ec0c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ec0e:	69bb      	ldr	r3, [r7, #24]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d102      	bne.n	800ec1a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ec14:	f04f 33ff 	mov.w	r3, #4294967295
 800ec18:	e04c      	b.n	800ecb4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ec1a:	69bb      	ldr	r3, [r7, #24]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ec20:	7ffb      	ldrb	r3, [r7, #31]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d011      	beq.n	800ec4a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	899b      	ldrh	r3, [r3, #12]
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	b21b      	sxth	r3, r3
 800ec2e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ec32:	b21c      	sxth	r4, r3
 800ec34:	2011      	movs	r0, #17
 800ec36:	f7f7 fc61 	bl	80064fc <lwip_htons>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	b21b      	sxth	r3, r3
 800ec3e:	4323      	orrs	r3, r4
 800ec40:	b21b      	sxth	r3, r3
 800ec42:	b29a      	uxth	r2, r3
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	819a      	strh	r2, [r3, #12]
 800ec48:	e010      	b.n	800ec6c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	3314      	adds	r3, #20
 800ec50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800ec52:	6a3b      	ldr	r3, [r7, #32]
 800ec54:	6858      	ldr	r0, [r3, #4]
 800ec56:	6a3b      	ldr	r3, [r7, #32]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	891a      	ldrh	r2, [r3, #8]
 800ec5c:	6a3b      	ldr	r3, [r7, #32]
 800ec5e:	891b      	ldrh	r3, [r3, #8]
 800ec60:	1ad3      	subs	r3, r2, r3
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	2201      	movs	r2, #1
 800ec66:	6939      	ldr	r1, [r7, #16]
 800ec68:	f7f9 fdce 	bl	8008808 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800ec6c:	6a3b      	ldr	r3, [r7, #32]
 800ec6e:	68db      	ldr	r3, [r3, #12]
 800ec70:	685b      	ldr	r3, [r3, #4]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f7f7 fc57 	bl	8006526 <lwip_htonl>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	da02      	bge.n	800ec90 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ec90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec94:	2200      	movs	r2, #0
 800ec96:	69b9      	ldr	r1, [r7, #24]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f7ff fddf 	bl	800e85c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	3304      	adds	r3, #4
 800eca4:	69b9      	ldr	r1, [r7, #24]
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f7ff fe16 	bl	800e8d8 <tcp_output_control_segment>
 800ecac:	4603      	mov	r3, r0
 800ecae:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800ecb0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	372c      	adds	r7, #44	@ 0x2c
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd90      	pop	{r4, r7, pc}
 800ecbc:	08016b08 	.word	0x08016b08
 800ecc0:	08017300 	.word	0x08017300
 800ecc4:	08016b5c 	.word	0x08016b5c

0800ecc8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b082      	sub	sp, #8
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800ecd0:	f7f9 ffe2 	bl	8008c98 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ecd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ed00 <tcpip_tcp_timer+0x38>)
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d103      	bne.n	800ece4 <tcpip_tcp_timer+0x1c>
 800ecdc:	4b09      	ldr	r3, [pc, #36]	@ (800ed04 <tcpip_tcp_timer+0x3c>)
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d005      	beq.n	800ecf0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ece4:	2200      	movs	r2, #0
 800ece6:	4908      	ldr	r1, [pc, #32]	@ (800ed08 <tcpip_tcp_timer+0x40>)
 800ece8:	20fa      	movs	r0, #250	@ 0xfa
 800ecea:	f000 f8f3 	bl	800eed4 <sys_timeout>
 800ecee:	e003      	b.n	800ecf8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800ecf0:	4b06      	ldr	r3, [pc, #24]	@ (800ed0c <tcpip_tcp_timer+0x44>)
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	601a      	str	r2, [r3, #0]
  }
}
 800ecf6:	bf00      	nop
 800ecf8:	bf00      	nop
 800ecfa:	3708      	adds	r7, #8
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	2000433c 	.word	0x2000433c
 800ed04:	20004340 	.word	0x20004340
 800ed08:	0800ecc9 	.word	0x0800ecc9
 800ed0c:	20004388 	.word	0x20004388

0800ed10 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ed14:	4b0a      	ldr	r3, [pc, #40]	@ (800ed40 <tcp_timer_needed+0x30>)
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d10f      	bne.n	800ed3c <tcp_timer_needed+0x2c>
 800ed1c:	4b09      	ldr	r3, [pc, #36]	@ (800ed44 <tcp_timer_needed+0x34>)
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d103      	bne.n	800ed2c <tcp_timer_needed+0x1c>
 800ed24:	4b08      	ldr	r3, [pc, #32]	@ (800ed48 <tcp_timer_needed+0x38>)
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d007      	beq.n	800ed3c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ed2c:	4b04      	ldr	r3, [pc, #16]	@ (800ed40 <tcp_timer_needed+0x30>)
 800ed2e:	2201      	movs	r2, #1
 800ed30:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ed32:	2200      	movs	r2, #0
 800ed34:	4905      	ldr	r1, [pc, #20]	@ (800ed4c <tcp_timer_needed+0x3c>)
 800ed36:	20fa      	movs	r0, #250	@ 0xfa
 800ed38:	f000 f8cc 	bl	800eed4 <sys_timeout>
  }
}
 800ed3c:	bf00      	nop
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	20004388 	.word	0x20004388
 800ed44:	2000433c 	.word	0x2000433c
 800ed48:	20004340 	.word	0x20004340
 800ed4c:	0800ecc9 	.word	0x0800ecc9

0800ed50 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ed5c:	2006      	movs	r0, #6
 800ed5e:	f7f8 fc8b 	bl	8007678 <memp_malloc>
 800ed62:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ed64:	693b      	ldr	r3, [r7, #16]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d109      	bne.n	800ed7e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d151      	bne.n	800ee14 <sys_timeout_abs+0xc4>
 800ed70:	4b2a      	ldr	r3, [pc, #168]	@ (800ee1c <sys_timeout_abs+0xcc>)
 800ed72:	22be      	movs	r2, #190	@ 0xbe
 800ed74:	492a      	ldr	r1, [pc, #168]	@ (800ee20 <sys_timeout_abs+0xd0>)
 800ed76:	482b      	ldr	r0, [pc, #172]	@ (800ee24 <sys_timeout_abs+0xd4>)
 800ed78:	f005 f9d2 	bl	8014120 <iprintf>
    return;
 800ed7c:	e04a      	b.n	800ee14 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	2200      	movs	r2, #0
 800ed82:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	687a      	ldr	r2, [r7, #4]
 800ed8e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	68fa      	ldr	r2, [r7, #12]
 800ed94:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ed96:	4b24      	ldr	r3, [pc, #144]	@ (800ee28 <sys_timeout_abs+0xd8>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d103      	bne.n	800eda6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ed9e:	4a22      	ldr	r2, [pc, #136]	@ (800ee28 <sys_timeout_abs+0xd8>)
 800eda0:	693b      	ldr	r3, [r7, #16]
 800eda2:	6013      	str	r3, [r2, #0]
    return;
 800eda4:	e037      	b.n	800ee16 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	685a      	ldr	r2, [r3, #4]
 800edaa:	4b1f      	ldr	r3, [pc, #124]	@ (800ee28 <sys_timeout_abs+0xd8>)
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	685b      	ldr	r3, [r3, #4]
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	0fdb      	lsrs	r3, r3, #31
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d007      	beq.n	800edce <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800edbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ee28 <sys_timeout_abs+0xd8>)
 800edc0:	681a      	ldr	r2, [r3, #0]
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800edc6:	4a18      	ldr	r2, [pc, #96]	@ (800ee28 <sys_timeout_abs+0xd8>)
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	6013      	str	r3, [r2, #0]
 800edcc:	e023      	b.n	800ee16 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800edce:	4b16      	ldr	r3, [pc, #88]	@ (800ee28 <sys_timeout_abs+0xd8>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	617b      	str	r3, [r7, #20]
 800edd4:	e01a      	b.n	800ee0c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00b      	beq.n	800edf6 <sys_timeout_abs+0xa6>
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	685a      	ldr	r2, [r3, #4]
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	0fdb      	lsrs	r3, r3, #31
 800edec:	f003 0301 	and.w	r3, r3, #1
 800edf0:	b2db      	uxtb	r3, r3
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d007      	beq.n	800ee06 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	693b      	ldr	r3, [r7, #16]
 800edfc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	601a      	str	r2, [r3, #0]
        break;
 800ee04:	e007      	b.n	800ee16 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	617b      	str	r3, [r7, #20]
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d1e1      	bne.n	800edd6 <sys_timeout_abs+0x86>
 800ee12:	e000      	b.n	800ee16 <sys_timeout_abs+0xc6>
    return;
 800ee14:	bf00      	nop
      }
    }
  }
}
 800ee16:	3718      	adds	r7, #24
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	08017324 	.word	0x08017324
 800ee20:	08017358 	.word	0x08017358
 800ee24:	08017398 	.word	0x08017398
 800ee28:	20004380 	.word	0x20004380

0800ee2c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b086      	sub	sp, #24
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	685b      	ldr	r3, [r3, #4]
 800ee3c:	4798      	blx	r3

  now = sys_now();
 800ee3e:	f7f7 f921 	bl	8006084 <sys_now>
 800ee42:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800ee44:	697b      	ldr	r3, [r7, #20]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	4b0f      	ldr	r3, [pc, #60]	@ (800ee88 <lwip_cyclic_timer+0x5c>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4413      	add	r3, r2
 800ee4e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800ee50:	68fa      	ldr	r2, [r7, #12]
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	1ad3      	subs	r3, r2, r3
 800ee56:	0fdb      	lsrs	r3, r3, #31
 800ee58:	f003 0301 	and.w	r3, r3, #1
 800ee5c:	b2db      	uxtb	r3, r3
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d009      	beq.n	800ee76 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	681a      	ldr	r2, [r3, #0]
 800ee66:	693b      	ldr	r3, [r7, #16]
 800ee68:	4413      	add	r3, r2
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	4907      	ldr	r1, [pc, #28]	@ (800ee8c <lwip_cyclic_timer+0x60>)
 800ee6e:	4618      	mov	r0, r3
 800ee70:	f7ff ff6e 	bl	800ed50 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ee74:	e004      	b.n	800ee80 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	4904      	ldr	r1, [pc, #16]	@ (800ee8c <lwip_cyclic_timer+0x60>)
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f7ff ff68 	bl	800ed50 <sys_timeout_abs>
}
 800ee80:	bf00      	nop
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	20004384 	.word	0x20004384
 800ee8c:	0800ee2d 	.word	0x0800ee2d

0800ee90 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ee96:	2301      	movs	r3, #1
 800ee98:	607b      	str	r3, [r7, #4]
 800ee9a:	e00e      	b.n	800eeba <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ee9c:	4a0b      	ldr	r2, [pc, #44]	@ (800eecc <sys_timeouts_init+0x3c>)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	4a08      	ldr	r2, [pc, #32]	@ (800eecc <sys_timeouts_init+0x3c>)
 800eeaa:	4413      	add	r3, r2
 800eeac:	461a      	mov	r2, r3
 800eeae:	4908      	ldr	r1, [pc, #32]	@ (800eed0 <sys_timeouts_init+0x40>)
 800eeb0:	f000 f810 	bl	800eed4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	607b      	str	r3, [r7, #4]
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b05      	cmp	r3, #5
 800eebe:	d9ed      	bls.n	800ee9c <sys_timeouts_init+0xc>
  }
}
 800eec0:	bf00      	nop
 800eec2:	bf00      	nop
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	080182e4 	.word	0x080182e4
 800eed0:	0800ee2d 	.word	0x0800ee2d

0800eed4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	60b9      	str	r1, [r7, #8]
 800eede:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eee6:	d306      	bcc.n	800eef6 <sys_timeout+0x22>
 800eee8:	4b0a      	ldr	r3, [pc, #40]	@ (800ef14 <sys_timeout+0x40>)
 800eeea:	f240 1229 	movw	r2, #297	@ 0x129
 800eeee:	490a      	ldr	r1, [pc, #40]	@ (800ef18 <sys_timeout+0x44>)
 800eef0:	480a      	ldr	r0, [pc, #40]	@ (800ef1c <sys_timeout+0x48>)
 800eef2:	f005 f915 	bl	8014120 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800eef6:	f7f7 f8c5 	bl	8006084 <sys_now>
 800eefa:	4602      	mov	r2, r0
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	4413      	add	r3, r2
 800ef00:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ef02:	687a      	ldr	r2, [r7, #4]
 800ef04:	68b9      	ldr	r1, [r7, #8]
 800ef06:	6978      	ldr	r0, [r7, #20]
 800ef08:	f7ff ff22 	bl	800ed50 <sys_timeout_abs>
#endif
}
 800ef0c:	bf00      	nop
 800ef0e:	3718      	adds	r7, #24
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	08017324 	.word	0x08017324
 800ef18:	080173c0 	.word	0x080173c0
 800ef1c:	08017398 	.word	0x08017398

0800ef20 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ef26:	f7f7 f8ad 	bl	8006084 <sys_now>
 800ef2a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800ef2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ef98 <sys_check_timeouts+0x78>)
 800ef2e:	781b      	ldrb	r3, [r3, #0]
 800ef30:	b2db      	uxtb	r3, r3
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d001      	beq.n	800ef3a <sys_check_timeouts+0x1a>
 800ef36:	f7f8 ff33 	bl	8007da0 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800ef3a:	4b18      	ldr	r3, [pc, #96]	@ (800ef9c <sys_check_timeouts+0x7c>)
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d022      	beq.n	800ef8c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	685b      	ldr	r3, [r3, #4]
 800ef4a:	68fa      	ldr	r2, [r7, #12]
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	0fdb      	lsrs	r3, r3, #31
 800ef50:	f003 0301 	and.w	r3, r3, #1
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d11a      	bne.n	800ef90 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a0f      	ldr	r2, [pc, #60]	@ (800ef9c <sys_check_timeouts+0x7c>)
 800ef60:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	689b      	ldr	r3, [r3, #8]
 800ef66:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	68db      	ldr	r3, [r3, #12]
 800ef6c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	685b      	ldr	r3, [r3, #4]
 800ef72:	4a0b      	ldr	r2, [pc, #44]	@ (800efa0 <sys_check_timeouts+0x80>)
 800ef74:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ef76:	68b9      	ldr	r1, [r7, #8]
 800ef78:	2006      	movs	r0, #6
 800ef7a:	f7f8 fbc9 	bl	8007710 <memp_free>
    if (handler != NULL) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d0d3      	beq.n	800ef2c <sys_check_timeouts+0xc>
      handler(arg);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	6838      	ldr	r0, [r7, #0]
 800ef88:	4798      	blx	r3
  do {
 800ef8a:	e7cf      	b.n	800ef2c <sys_check_timeouts+0xc>
      return;
 800ef8c:	bf00      	nop
 800ef8e:	e000      	b.n	800ef92 <sys_check_timeouts+0x72>
      return;
 800ef90:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ef92:	3710      	adds	r7, #16
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	2000432d 	.word	0x2000432d
 800ef9c:	20004380 	.word	0x20004380
 800efa0:	20004384 	.word	0x20004384

0800efa4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800efa8:	f004 ffba 	bl	8013f20 <rand>
 800efac:	4603      	mov	r3, r0
 800efae:	b29b      	uxth	r3, r3
 800efb0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800efba:	b29a      	uxth	r2, r3
 800efbc:	4b01      	ldr	r3, [pc, #4]	@ (800efc4 <udp_init+0x20>)
 800efbe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800efc0:	bf00      	nop
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	20000010 	.word	0x20000010

0800efc8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800efce:	2300      	movs	r3, #0
 800efd0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800efd2:	4b17      	ldr	r3, [pc, #92]	@ (800f030 <udp_new_port+0x68>)
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	1c5a      	adds	r2, r3, #1
 800efd8:	b291      	uxth	r1, r2
 800efda:	4a15      	ldr	r2, [pc, #84]	@ (800f030 <udp_new_port+0x68>)
 800efdc:	8011      	strh	r1, [r2, #0]
 800efde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d103      	bne.n	800efee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800efe6:	4b12      	ldr	r3, [pc, #72]	@ (800f030 <udp_new_port+0x68>)
 800efe8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800efec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800efee:	4b11      	ldr	r3, [pc, #68]	@ (800f034 <udp_new_port+0x6c>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	603b      	str	r3, [r7, #0]
 800eff4:	e011      	b.n	800f01a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	8a5a      	ldrh	r2, [r3, #18]
 800effa:	4b0d      	ldr	r3, [pc, #52]	@ (800f030 <udp_new_port+0x68>)
 800effc:	881b      	ldrh	r3, [r3, #0]
 800effe:	429a      	cmp	r2, r3
 800f000:	d108      	bne.n	800f014 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f002:	88fb      	ldrh	r3, [r7, #6]
 800f004:	3301      	adds	r3, #1
 800f006:	80fb      	strh	r3, [r7, #6]
 800f008:	88fb      	ldrh	r3, [r7, #6]
 800f00a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800f00e:	d3e0      	bcc.n	800efd2 <udp_new_port+0xa>
        return 0;
 800f010:	2300      	movs	r3, #0
 800f012:	e007      	b.n	800f024 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	603b      	str	r3, [r7, #0]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d1ea      	bne.n	800eff6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f020:	4b03      	ldr	r3, [pc, #12]	@ (800f030 <udp_new_port+0x68>)
 800f022:	881b      	ldrh	r3, [r3, #0]
}
 800f024:	4618      	mov	r0, r3
 800f026:	370c      	adds	r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02e:	4770      	bx	lr
 800f030:	20000010 	.word	0x20000010
 800f034:	2000438c 	.word	0x2000438c

0800f038 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b084      	sub	sp, #16
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	60f8      	str	r0, [r7, #12]
 800f040:	60b9      	str	r1, [r7, #8]
 800f042:	4613      	mov	r3, r2
 800f044:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d105      	bne.n	800f058 <udp_input_local_match+0x20>
 800f04c:	4b27      	ldr	r3, [pc, #156]	@ (800f0ec <udp_input_local_match+0xb4>)
 800f04e:	2287      	movs	r2, #135	@ 0x87
 800f050:	4927      	ldr	r1, [pc, #156]	@ (800f0f0 <udp_input_local_match+0xb8>)
 800f052:	4828      	ldr	r0, [pc, #160]	@ (800f0f4 <udp_input_local_match+0xbc>)
 800f054:	f005 f864 	bl	8014120 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d105      	bne.n	800f06a <udp_input_local_match+0x32>
 800f05e:	4b23      	ldr	r3, [pc, #140]	@ (800f0ec <udp_input_local_match+0xb4>)
 800f060:	2288      	movs	r2, #136	@ 0x88
 800f062:	4925      	ldr	r1, [pc, #148]	@ (800f0f8 <udp_input_local_match+0xc0>)
 800f064:	4823      	ldr	r0, [pc, #140]	@ (800f0f4 <udp_input_local_match+0xbc>)
 800f066:	f005 f85b 	bl	8014120 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	7a1b      	ldrb	r3, [r3, #8]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00b      	beq.n	800f08a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	7a1a      	ldrb	r2, [r3, #8]
 800f076:	4b21      	ldr	r3, [pc, #132]	@ (800f0fc <udp_input_local_match+0xc4>)
 800f078:	685b      	ldr	r3, [r3, #4]
 800f07a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f07e:	3301      	adds	r3, #1
 800f080:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f082:	429a      	cmp	r2, r3
 800f084:	d001      	beq.n	800f08a <udp_input_local_match+0x52>
    return 0;
 800f086:	2300      	movs	r3, #0
 800f088:	e02b      	b.n	800f0e2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f08a:	79fb      	ldrb	r3, [r7, #7]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d018      	beq.n	800f0c2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d013      	beq.n	800f0be <udp_input_local_match+0x86>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00f      	beq.n	800f0be <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f09e:	4b17      	ldr	r3, [pc, #92]	@ (800f0fc <udp_input_local_match+0xc4>)
 800f0a0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a6:	d00a      	beq.n	800f0be <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	681a      	ldr	r2, [r3, #0]
 800f0ac:	4b13      	ldr	r3, [pc, #76]	@ (800f0fc <udp_input_local_match+0xc4>)
 800f0ae:	695b      	ldr	r3, [r3, #20]
 800f0b0:	405a      	eors	r2, r3
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	3308      	adds	r3, #8
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d110      	bne.n	800f0e0 <udp_input_local_match+0xa8>
          return 1;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	e00f      	b.n	800f0e2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d009      	beq.n	800f0dc <udp_input_local_match+0xa4>
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d005      	beq.n	800f0dc <udp_input_local_match+0xa4>
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	4b09      	ldr	r3, [pc, #36]	@ (800f0fc <udp_input_local_match+0xc4>)
 800f0d6:	695b      	ldr	r3, [r3, #20]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d101      	bne.n	800f0e0 <udp_input_local_match+0xa8>
        return 1;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	0801740c 	.word	0x0801740c
 800f0f0:	0801743c 	.word	0x0801743c
 800f0f4:	08017460 	.word	0x08017460
 800f0f8:	08017488 	.word	0x08017488
 800f0fc:	20000d90 	.word	0x20000d90

0800f100 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f100:	b590      	push	{r4, r7, lr}
 800f102:	b08d      	sub	sp, #52	@ 0x34
 800f104:	af02      	add	r7, sp, #8
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d105      	bne.n	800f120 <udp_input+0x20>
 800f114:	4b87      	ldr	r3, [pc, #540]	@ (800f334 <udp_input+0x234>)
 800f116:	22cf      	movs	r2, #207	@ 0xcf
 800f118:	4987      	ldr	r1, [pc, #540]	@ (800f338 <udp_input+0x238>)
 800f11a:	4888      	ldr	r0, [pc, #544]	@ (800f33c <udp_input+0x23c>)
 800f11c:	f005 f800 	bl	8014120 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d105      	bne.n	800f132 <udp_input+0x32>
 800f126:	4b83      	ldr	r3, [pc, #524]	@ (800f334 <udp_input+0x234>)
 800f128:	22d0      	movs	r2, #208	@ 0xd0
 800f12a:	4985      	ldr	r1, [pc, #532]	@ (800f340 <udp_input+0x240>)
 800f12c:	4883      	ldr	r0, [pc, #524]	@ (800f33c <udp_input+0x23c>)
 800f12e:	f004 fff7 	bl	8014120 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	895b      	ldrh	r3, [r3, #10]
 800f136:	2b07      	cmp	r3, #7
 800f138:	d803      	bhi.n	800f142 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7f9 f96a 	bl	8008414 <pbuf_free>
    goto end;
 800f140:	e0f0      	b.n	800f324 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f148:	4b7e      	ldr	r3, [pc, #504]	@ (800f344 <udp_input+0x244>)
 800f14a:	695b      	ldr	r3, [r3, #20]
 800f14c:	4a7d      	ldr	r2, [pc, #500]	@ (800f344 <udp_input+0x244>)
 800f14e:	6812      	ldr	r2, [r2, #0]
 800f150:	4611      	mov	r1, r2
 800f152:	4618      	mov	r0, r3
 800f154:	f003 ff7e 	bl	8013054 <ip4_addr_isbroadcast_u32>
 800f158:	4603      	mov	r3, r0
 800f15a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	881b      	ldrh	r3, [r3, #0]
 800f160:	b29b      	uxth	r3, r3
 800f162:	4618      	mov	r0, r3
 800f164:	f7f7 f9ca 	bl	80064fc <lwip_htons>
 800f168:	4603      	mov	r3, r0
 800f16a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	885b      	ldrh	r3, [r3, #2]
 800f170:	b29b      	uxth	r3, r3
 800f172:	4618      	mov	r0, r3
 800f174:	f7f7 f9c2 	bl	80064fc <lwip_htons>
 800f178:	4603      	mov	r3, r0
 800f17a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f17c:	2300      	movs	r3, #0
 800f17e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 800f180:	2300      	movs	r3, #0
 800f182:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f184:	2300      	movs	r3, #0
 800f186:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f188:	4b6f      	ldr	r3, [pc, #444]	@ (800f348 <udp_input+0x248>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f18e:	e054      	b.n	800f23a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f192:	8a5b      	ldrh	r3, [r3, #18]
 800f194:	89fa      	ldrh	r2, [r7, #14]
 800f196:	429a      	cmp	r2, r3
 800f198:	d14a      	bne.n	800f230 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f19a:	7cfb      	ldrb	r3, [r7, #19]
 800f19c:	461a      	mov	r2, r3
 800f19e:	6839      	ldr	r1, [r7, #0]
 800f1a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f1a2:	f7ff ff49 	bl	800f038 <udp_input_local_match>
 800f1a6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d041      	beq.n	800f230 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800f1ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ae:	7c1b      	ldrb	r3, [r3, #16]
 800f1b0:	f003 0304 	and.w	r3, r3, #4
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d11d      	bne.n	800f1f4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d102      	bne.n	800f1c4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800f1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e017      	b.n	800f1f4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800f1c4:	7cfb      	ldrb	r3, [r7, #19]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d014      	beq.n	800f1f4 <udp_input+0xf4>
 800f1ca:	4b5e      	ldr	r3, [pc, #376]	@ (800f344 <udp_input+0x244>)
 800f1cc:	695b      	ldr	r3, [r3, #20]
 800f1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d2:	d10f      	bne.n	800f1f4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	681a      	ldr	r2, [r3, #0]
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	3304      	adds	r3, #4
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	429a      	cmp	r2, r3
 800f1e0:	d008      	beq.n	800f1f4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e4:	681a      	ldr	r2, [r3, #0]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	3304      	adds	r3, #4
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d101      	bne.n	800f1f4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800f1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f6:	8a9b      	ldrh	r3, [r3, #20]
 800f1f8:	8a3a      	ldrh	r2, [r7, #16]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d118      	bne.n	800f230 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f200:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f202:	2b00      	cmp	r3, #0
 800f204:	d005      	beq.n	800f212 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f208:	685a      	ldr	r2, [r3, #4]
 800f20a:	4b4e      	ldr	r3, [pc, #312]	@ (800f344 <udp_input+0x244>)
 800f20c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f20e:	429a      	cmp	r2, r3
 800f210:	d10e      	bne.n	800f230 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d014      	beq.n	800f242 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f21a:	68da      	ldr	r2, [r3, #12]
 800f21c:	6a3b      	ldr	r3, [r7, #32]
 800f21e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f220:	4b49      	ldr	r3, [pc, #292]	@ (800f348 <udp_input+0x248>)
 800f222:	681a      	ldr	r2, [r3, #0]
 800f224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f226:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f228:	4a47      	ldr	r2, [pc, #284]	@ (800f348 <udp_input+0x248>)
 800f22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f22e:	e008      	b.n	800f242 <udp_input+0x142>
      }
    }

    prev = pcb;
 800f230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f232:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f236:	68db      	ldr	r3, [r3, #12]
 800f238:	627b      	str	r3, [r7, #36]	@ 0x24
 800f23a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d1a7      	bne.n	800f190 <udp_input+0x90>
 800f240:	e000      	b.n	800f244 <udp_input+0x144>
        break;
 800f242:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f246:	2b00      	cmp	r3, #0
 800f248:	d101      	bne.n	800f24e <udp_input+0x14e>
    pcb = uncon_pcb;
 800f24a:	69fb      	ldr	r3, [r7, #28]
 800f24c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f250:	2b00      	cmp	r3, #0
 800f252:	d002      	beq.n	800f25a <udp_input+0x15a>
    for_us = 1;
 800f254:	2301      	movs	r3, #1
 800f256:	76fb      	strb	r3, [r7, #27]
 800f258:	e00a      	b.n	800f270 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	3304      	adds	r3, #4
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	4b38      	ldr	r3, [pc, #224]	@ (800f344 <udp_input+0x244>)
 800f262:	695b      	ldr	r3, [r3, #20]
 800f264:	429a      	cmp	r2, r3
 800f266:	bf0c      	ite	eq
 800f268:	2301      	moveq	r3, #1
 800f26a:	2300      	movne	r3, #0
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f270:	7efb      	ldrb	r3, [r7, #27]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d052      	beq.n	800f31c <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 800f276:	697b      	ldr	r3, [r7, #20]
 800f278:	88db      	ldrh	r3, [r3, #6]
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00b      	beq.n	800f298 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	891a      	ldrh	r2, [r3, #8]
 800f284:	4b31      	ldr	r3, [pc, #196]	@ (800f34c <udp_input+0x24c>)
 800f286:	9300      	str	r3, [sp, #0]
 800f288:	4b31      	ldr	r3, [pc, #196]	@ (800f350 <udp_input+0x250>)
 800f28a:	2111      	movs	r1, #17
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f7f7 fd54 	bl	8006d3a <ip_chksum_pseudo>
 800f292:	4603      	mov	r3, r0
 800f294:	2b00      	cmp	r3, #0
 800f296:	d146      	bne.n	800f326 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800f298:	2108      	movs	r1, #8
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f7f9 f834 	bl	8008308 <pbuf_remove_header>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00a      	beq.n	800f2bc <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800f2a6:	4b23      	ldr	r3, [pc, #140]	@ (800f334 <udp_input+0x234>)
 800f2a8:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 800f2ac:	4929      	ldr	r1, [pc, #164]	@ (800f354 <udp_input+0x254>)
 800f2ae:	4823      	ldr	r0, [pc, #140]	@ (800f33c <udp_input+0x23c>)
 800f2b0:	f004 ff36 	bl	8014120 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f7f9 f8ad 	bl	8008414 <pbuf_free>
      goto end;
 800f2ba:	e033      	b.n	800f324 <udp_input+0x224>
    }

    if (pcb != NULL) {
 800f2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d012      	beq.n	800f2e8 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2c4:	699b      	ldr	r3, [r3, #24]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00a      	beq.n	800f2e0 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2cc:	699c      	ldr	r4, [r3, #24]
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2d0:	69d8      	ldr	r0, [r3, #28]
 800f2d2:	8a3b      	ldrh	r3, [r7, #16]
 800f2d4:	9300      	str	r3, [sp, #0]
 800f2d6:	4b1e      	ldr	r3, [pc, #120]	@ (800f350 <udp_input+0x250>)
 800f2d8:	687a      	ldr	r2, [r7, #4]
 800f2da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f2dc:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f2de:	e026      	b.n	800f32e <udp_input+0x22e>
        pbuf_free(p);
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f7f9 f897 	bl	8008414 <pbuf_free>
        goto end;
 800f2e6:	e01d      	b.n	800f324 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f2e8:	7cfb      	ldrb	r3, [r7, #19]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d112      	bne.n	800f314 <udp_input+0x214>
 800f2ee:	4b15      	ldr	r3, [pc, #84]	@ (800f344 <udp_input+0x244>)
 800f2f0:	695b      	ldr	r3, [r3, #20]
 800f2f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800f2f6:	2be0      	cmp	r3, #224	@ 0xe0
 800f2f8:	d00c      	beq.n	800f314 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f2fa:	4b12      	ldr	r3, [pc, #72]	@ (800f344 <udp_input+0x244>)
 800f2fc:	899b      	ldrh	r3, [r3, #12]
 800f2fe:	3308      	adds	r3, #8
 800f300:	b29b      	uxth	r3, r3
 800f302:	b21b      	sxth	r3, r3
 800f304:	4619      	mov	r1, r3
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f7f9 f871 	bl	80083ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f30c:	2103      	movs	r1, #3
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f003 fae6 	bl	80128e0 <icmp_dest_unreach>
      pbuf_free(p);
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f7f9 f87d 	bl	8008414 <pbuf_free>
  return;
 800f31a:	e008      	b.n	800f32e <udp_input+0x22e>
    pbuf_free(p);
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f7f9 f879 	bl	8008414 <pbuf_free>
  return;
 800f322:	e004      	b.n	800f32e <udp_input+0x22e>
 800f324:	e003      	b.n	800f32e <udp_input+0x22e>
            goto chkerr;
 800f326:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7f9 f873 	bl	8008414 <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f32e:	372c      	adds	r7, #44	@ 0x2c
 800f330:	46bd      	mov	sp, r7
 800f332:	bd90      	pop	{r4, r7, pc}
 800f334:	0801740c 	.word	0x0801740c
 800f338:	080174b0 	.word	0x080174b0
 800f33c:	08017460 	.word	0x08017460
 800f340:	080174c8 	.word	0x080174c8
 800f344:	20000d90 	.word	0x20000d90
 800f348:	2000438c 	.word	0x2000438c
 800f34c:	20000da4 	.word	0x20000da4
 800f350:	20000da0 	.word	0x20000da0
 800f354:	080174e4 	.word	0x080174e4

0800f358 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b088      	sub	sp, #32
 800f35c:	af02      	add	r7, sp, #8
 800f35e:	60f8      	str	r0, [r7, #12]
 800f360:	60b9      	str	r1, [r7, #8]
 800f362:	607a      	str	r2, [r7, #4]
 800f364:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d109      	bne.n	800f380 <udp_sendto+0x28>
 800f36c:	4b23      	ldr	r3, [pc, #140]	@ (800f3fc <udp_sendto+0xa4>)
 800f36e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f372:	4923      	ldr	r1, [pc, #140]	@ (800f400 <udp_sendto+0xa8>)
 800f374:	4823      	ldr	r0, [pc, #140]	@ (800f404 <udp_sendto+0xac>)
 800f376:	f004 fed3 	bl	8014120 <iprintf>
 800f37a:	f06f 030f 	mvn.w	r3, #15
 800f37e:	e038      	b.n	800f3f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800f380:	68bb      	ldr	r3, [r7, #8]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d109      	bne.n	800f39a <udp_sendto+0x42>
 800f386:	4b1d      	ldr	r3, [pc, #116]	@ (800f3fc <udp_sendto+0xa4>)
 800f388:	f240 2219 	movw	r2, #537	@ 0x219
 800f38c:	491e      	ldr	r1, [pc, #120]	@ (800f408 <udp_sendto+0xb0>)
 800f38e:	481d      	ldr	r0, [pc, #116]	@ (800f404 <udp_sendto+0xac>)
 800f390:	f004 fec6 	bl	8014120 <iprintf>
 800f394:	f06f 030f 	mvn.w	r3, #15
 800f398:	e02b      	b.n	800f3f2 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d109      	bne.n	800f3b4 <udp_sendto+0x5c>
 800f3a0:	4b16      	ldr	r3, [pc, #88]	@ (800f3fc <udp_sendto+0xa4>)
 800f3a2:	f240 221a 	movw	r2, #538	@ 0x21a
 800f3a6:	4919      	ldr	r1, [pc, #100]	@ (800f40c <udp_sendto+0xb4>)
 800f3a8:	4816      	ldr	r0, [pc, #88]	@ (800f404 <udp_sendto+0xac>)
 800f3aa:	f004 feb9 	bl	8014120 <iprintf>
 800f3ae:	f06f 030f 	mvn.w	r3, #15
 800f3b2:	e01e      	b.n	800f3f2 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	7a1b      	ldrb	r3, [r3, #8]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d006      	beq.n	800f3ca <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	7a1b      	ldrb	r3, [r3, #8]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f7f8 fcc7 	bl	8007d54 <netif_get_by_index>
 800f3c6:	6178      	str	r0, [r7, #20]
 800f3c8:	e003      	b.n	800f3d2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800f3ca:	6878      	ldr	r0, [r7, #4]
 800f3cc:	f003 fb1c 	bl	8012a08 <ip4_route>
 800f3d0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f3d2:	697b      	ldr	r3, [r7, #20]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d102      	bne.n	800f3de <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f3d8:	f06f 0303 	mvn.w	r3, #3
 800f3dc:	e009      	b.n	800f3f2 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f3de:	887a      	ldrh	r2, [r7, #2]
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	68b9      	ldr	r1, [r7, #8]
 800f3ea:	68f8      	ldr	r0, [r7, #12]
 800f3ec:	f000 f810 	bl	800f410 <udp_sendto_if>
 800f3f0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3718      	adds	r7, #24
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
 800f3fa:	bf00      	nop
 800f3fc:	0801740c 	.word	0x0801740c
 800f400:	08017530 	.word	0x08017530
 800f404:	08017460 	.word	0x08017460
 800f408:	08017548 	.word	0x08017548
 800f40c:	08017564 	.word	0x08017564

0800f410 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af02      	add	r7, sp, #8
 800f416:	60f8      	str	r0, [r7, #12]
 800f418:	60b9      	str	r1, [r7, #8]
 800f41a:	607a      	str	r2, [r7, #4]
 800f41c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d109      	bne.n	800f438 <udp_sendto_if+0x28>
 800f424:	4b2e      	ldr	r3, [pc, #184]	@ (800f4e0 <udp_sendto_if+0xd0>)
 800f426:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f42a:	492e      	ldr	r1, [pc, #184]	@ (800f4e4 <udp_sendto_if+0xd4>)
 800f42c:	482e      	ldr	r0, [pc, #184]	@ (800f4e8 <udp_sendto_if+0xd8>)
 800f42e:	f004 fe77 	bl	8014120 <iprintf>
 800f432:	f06f 030f 	mvn.w	r3, #15
 800f436:	e04f      	b.n	800f4d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d109      	bne.n	800f452 <udp_sendto_if+0x42>
 800f43e:	4b28      	ldr	r3, [pc, #160]	@ (800f4e0 <udp_sendto_if+0xd0>)
 800f440:	f240 2281 	movw	r2, #641	@ 0x281
 800f444:	4929      	ldr	r1, [pc, #164]	@ (800f4ec <udp_sendto_if+0xdc>)
 800f446:	4828      	ldr	r0, [pc, #160]	@ (800f4e8 <udp_sendto_if+0xd8>)
 800f448:	f004 fe6a 	bl	8014120 <iprintf>
 800f44c:	f06f 030f 	mvn.w	r3, #15
 800f450:	e042      	b.n	800f4d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d109      	bne.n	800f46c <udp_sendto_if+0x5c>
 800f458:	4b21      	ldr	r3, [pc, #132]	@ (800f4e0 <udp_sendto_if+0xd0>)
 800f45a:	f240 2282 	movw	r2, #642	@ 0x282
 800f45e:	4924      	ldr	r1, [pc, #144]	@ (800f4f0 <udp_sendto_if+0xe0>)
 800f460:	4821      	ldr	r0, [pc, #132]	@ (800f4e8 <udp_sendto_if+0xd8>)
 800f462:	f004 fe5d 	bl	8014120 <iprintf>
 800f466:	f06f 030f 	mvn.w	r3, #15
 800f46a:	e035      	b.n	800f4d8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800f46c:	6a3b      	ldr	r3, [r7, #32]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d109      	bne.n	800f486 <udp_sendto_if+0x76>
 800f472:	4b1b      	ldr	r3, [pc, #108]	@ (800f4e0 <udp_sendto_if+0xd0>)
 800f474:	f240 2283 	movw	r2, #643	@ 0x283
 800f478:	491e      	ldr	r1, [pc, #120]	@ (800f4f4 <udp_sendto_if+0xe4>)
 800f47a:	481b      	ldr	r0, [pc, #108]	@ (800f4e8 <udp_sendto_if+0xd8>)
 800f47c:	f004 fe50 	bl	8014120 <iprintf>
 800f480:	f06f 030f 	mvn.w	r3, #15
 800f484:	e028      	b.n	800f4d8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d009      	beq.n	800f4a0 <udp_sendto_if+0x90>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d005      	beq.n	800f4a0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f49c:	2be0      	cmp	r3, #224	@ 0xe0
 800f49e:	d103      	bne.n	800f4a8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800f4a0:	6a3b      	ldr	r3, [r7, #32]
 800f4a2:	3304      	adds	r3, #4
 800f4a4:	617b      	str	r3, [r7, #20]
 800f4a6:	e00b      	b.n	800f4c0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681a      	ldr	r2, [r3, #0]
 800f4ac:	6a3b      	ldr	r3, [r7, #32]
 800f4ae:	3304      	adds	r3, #4
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d002      	beq.n	800f4bc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800f4b6:	f06f 0303 	mvn.w	r3, #3
 800f4ba:	e00d      	b.n	800f4d8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f4c0:	887a      	ldrh	r2, [r7, #2]
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	9301      	str	r3, [sp, #4]
 800f4c6:	6a3b      	ldr	r3, [r7, #32]
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	4613      	mov	r3, r2
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f000 f811 	bl	800f4f8 <udp_sendto_if_src>
 800f4d6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3718      	adds	r7, #24
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	bd80      	pop	{r7, pc}
 800f4e0:	0801740c 	.word	0x0801740c
 800f4e4:	08017580 	.word	0x08017580
 800f4e8:	08017460 	.word	0x08017460
 800f4ec:	0801759c 	.word	0x0801759c
 800f4f0:	080175b8 	.word	0x080175b8
 800f4f4:	080175d8 	.word	0x080175d8

0800f4f8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b08c      	sub	sp, #48	@ 0x30
 800f4fc:	af04      	add	r7, sp, #16
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
 800f504:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d109      	bne.n	800f520 <udp_sendto_if_src+0x28>
 800f50c:	4b72      	ldr	r3, [pc, #456]	@ (800f6d8 <udp_sendto_if_src+0x1e0>)
 800f50e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800f512:	4972      	ldr	r1, [pc, #456]	@ (800f6dc <udp_sendto_if_src+0x1e4>)
 800f514:	4872      	ldr	r0, [pc, #456]	@ (800f6e0 <udp_sendto_if_src+0x1e8>)
 800f516:	f004 fe03 	bl	8014120 <iprintf>
 800f51a:	f06f 030f 	mvn.w	r3, #15
 800f51e:	e0d6      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800f520:	68bb      	ldr	r3, [r7, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d109      	bne.n	800f53a <udp_sendto_if_src+0x42>
 800f526:	4b6c      	ldr	r3, [pc, #432]	@ (800f6d8 <udp_sendto_if_src+0x1e0>)
 800f528:	f240 22d2 	movw	r2, #722	@ 0x2d2
 800f52c:	496d      	ldr	r1, [pc, #436]	@ (800f6e4 <udp_sendto_if_src+0x1ec>)
 800f52e:	486c      	ldr	r0, [pc, #432]	@ (800f6e0 <udp_sendto_if_src+0x1e8>)
 800f530:	f004 fdf6 	bl	8014120 <iprintf>
 800f534:	f06f 030f 	mvn.w	r3, #15
 800f538:	e0c9      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d109      	bne.n	800f554 <udp_sendto_if_src+0x5c>
 800f540:	4b65      	ldr	r3, [pc, #404]	@ (800f6d8 <udp_sendto_if_src+0x1e0>)
 800f542:	f240 22d3 	movw	r2, #723	@ 0x2d3
 800f546:	4968      	ldr	r1, [pc, #416]	@ (800f6e8 <udp_sendto_if_src+0x1f0>)
 800f548:	4865      	ldr	r0, [pc, #404]	@ (800f6e0 <udp_sendto_if_src+0x1e8>)
 800f54a:	f004 fde9 	bl	8014120 <iprintf>
 800f54e:	f06f 030f 	mvn.w	r3, #15
 800f552:	e0bc      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800f554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f556:	2b00      	cmp	r3, #0
 800f558:	d109      	bne.n	800f56e <udp_sendto_if_src+0x76>
 800f55a:	4b5f      	ldr	r3, [pc, #380]	@ (800f6d8 <udp_sendto_if_src+0x1e0>)
 800f55c:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 800f560:	4962      	ldr	r1, [pc, #392]	@ (800f6ec <udp_sendto_if_src+0x1f4>)
 800f562:	485f      	ldr	r0, [pc, #380]	@ (800f6e0 <udp_sendto_if_src+0x1e8>)
 800f564:	f004 fddc 	bl	8014120 <iprintf>
 800f568:	f06f 030f 	mvn.w	r3, #15
 800f56c:	e0af      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800f56e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f570:	2b00      	cmp	r3, #0
 800f572:	d109      	bne.n	800f588 <udp_sendto_if_src+0x90>
 800f574:	4b58      	ldr	r3, [pc, #352]	@ (800f6d8 <udp_sendto_if_src+0x1e0>)
 800f576:	f240 22d5 	movw	r2, #725	@ 0x2d5
 800f57a:	495d      	ldr	r1, [pc, #372]	@ (800f6f0 <udp_sendto_if_src+0x1f8>)
 800f57c:	4858      	ldr	r0, [pc, #352]	@ (800f6e0 <udp_sendto_if_src+0x1e8>)
 800f57e:	f004 fdcf 	bl	8014120 <iprintf>
 800f582:	f06f 030f 	mvn.w	r3, #15
 800f586:	e0a2      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	8a5b      	ldrh	r3, [r3, #18]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10f      	bne.n	800f5b0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f590:	68f9      	ldr	r1, [r7, #12]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	8a5b      	ldrh	r3, [r3, #18]
 800f596:	461a      	mov	r2, r3
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 f8ad 	bl	800f6f8 <udp_bind>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 800f5a2:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d002      	beq.n	800f5b0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f5aa:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800f5ae:	e08e      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	891b      	ldrh	r3, [r3, #8]
 800f5b4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d902      	bls.n	800f5c2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800f5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800f5c0:	e085      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800f5c2:	2108      	movs	r1, #8
 800f5c4:	68b8      	ldr	r0, [r7, #8]
 800f5c6:	f7f8 fe8f 	bl	80082e8 <pbuf_add_header>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d015      	beq.n	800f5fc <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f5d0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f5d4:	2108      	movs	r1, #8
 800f5d6:	2022      	movs	r0, #34	@ 0x22
 800f5d8:	f7f8 fc38 	bl	8007e4c <pbuf_alloc>
 800f5dc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f5de:	69fb      	ldr	r3, [r7, #28]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d102      	bne.n	800f5ea <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f5e4:	f04f 33ff 	mov.w	r3, #4294967295
 800f5e8:	e071      	b.n	800f6ce <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	891b      	ldrh	r3, [r3, #8]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d006      	beq.n	800f600 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f5f2:	68b9      	ldr	r1, [r7, #8]
 800f5f4:	69f8      	ldr	r0, [r7, #28]
 800f5f6:	f7f9 f825 	bl	8008644 <pbuf_chain>
 800f5fa:	e001      	b.n	800f600 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	895b      	ldrh	r3, [r3, #10]
 800f604:	2b07      	cmp	r3, #7
 800f606:	d806      	bhi.n	800f616 <udp_sendto_if_src+0x11e>
 800f608:	4b33      	ldr	r3, [pc, #204]	@ (800f6d8 <udp_sendto_if_src+0x1e0>)
 800f60a:	f240 320d 	movw	r2, #781	@ 0x30d
 800f60e:	4939      	ldr	r1, [pc, #228]	@ (800f6f4 <udp_sendto_if_src+0x1fc>)
 800f610:	4833      	ldr	r0, [pc, #204]	@ (800f6e0 <udp_sendto_if_src+0x1e8>)
 800f612:	f004 fd85 	bl	8014120 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f616:	69fb      	ldr	r3, [r7, #28]
 800f618:	685b      	ldr	r3, [r3, #4]
 800f61a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	8a5b      	ldrh	r3, [r3, #18]
 800f620:	4618      	mov	r0, r3
 800f622:	f7f6 ff6b 	bl	80064fc <lwip_htons>
 800f626:	4603      	mov	r3, r0
 800f628:	461a      	mov	r2, r3
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f62e:	887b      	ldrh	r3, [r7, #2]
 800f630:	4618      	mov	r0, r3
 800f632:	f7f6 ff63 	bl	80064fc <lwip_htons>
 800f636:	4603      	mov	r3, r0
 800f638:	461a      	mov	r2, r3
 800f63a:	697b      	ldr	r3, [r7, #20]
 800f63c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2200      	movs	r2, #0
 800f642:	719a      	strb	r2, [r3, #6]
 800f644:	2200      	movs	r2, #0
 800f646:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	891b      	ldrh	r3, [r3, #8]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7f6 ff55 	bl	80064fc <lwip_htons>
 800f652:	4603      	mov	r3, r0
 800f654:	461a      	mov	r2, r3
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	7c1b      	ldrb	r3, [r3, #16]
 800f65e:	f003 0301 	and.w	r3, r3, #1
 800f662:	2b00      	cmp	r3, #0
 800f664:	d113      	bne.n	800f68e <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	891a      	ldrh	r2, [r3, #8]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	9300      	str	r3, [sp, #0]
 800f66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f670:	2111      	movs	r1, #17
 800f672:	69f8      	ldr	r0, [r7, #28]
 800f674:	f7f7 fb61 	bl	8006d3a <ip_chksum_pseudo>
 800f678:	4603      	mov	r3, r0
 800f67a:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 800f67c:	8b7b      	ldrh	r3, [r7, #26]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d102      	bne.n	800f688 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 800f682:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f686:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	8b7a      	ldrh	r2, [r7, #26]
 800f68c:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f68e:	2311      	movs	r3, #17
 800f690:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	7adb      	ldrb	r3, [r3, #11]
 800f696:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	7a9b      	ldrb	r3, [r3, #10]
 800f69c:	7cb9      	ldrb	r1, [r7, #18]
 800f69e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f6a0:	9202      	str	r2, [sp, #8]
 800f6a2:	7cfa      	ldrb	r2, [r7, #19]
 800f6a4:	9201      	str	r2, [sp, #4]
 800f6a6:	9300      	str	r3, [sp, #0]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	687a      	ldr	r2, [r7, #4]
 800f6ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6ae:	69f8      	ldr	r0, [r7, #28]
 800f6b0:	f003 fbbc 	bl	8012e2c <ip4_output_if_src>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f6b8:	69fa      	ldr	r2, [r7, #28]
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d004      	beq.n	800f6ca <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 800f6c0:	69f8      	ldr	r0, [r7, #28]
 800f6c2:	f7f8 fea7 	bl	8008414 <pbuf_free>
    q = NULL;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f6ca:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3720      	adds	r7, #32
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	0801740c 	.word	0x0801740c
 800f6dc:	080175f8 	.word	0x080175f8
 800f6e0:	08017460 	.word	0x08017460
 800f6e4:	08017618 	.word	0x08017618
 800f6e8:	08017638 	.word	0x08017638
 800f6ec:	0801765c 	.word	0x0801765c
 800f6f0:	08017680 	.word	0x08017680
 800f6f4:	080176a4 	.word	0x080176a4

0800f6f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b086      	sub	sp, #24
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	60f8      	str	r0, [r7, #12]
 800f700:	60b9      	str	r1, [r7, #8]
 800f702:	4613      	mov	r3, r2
 800f704:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d101      	bne.n	800f710 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f70c:	4b39      	ldr	r3, [pc, #228]	@ (800f7f4 <udp_bind+0xfc>)
 800f70e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d109      	bne.n	800f72a <udp_bind+0x32>
 800f716:	4b38      	ldr	r3, [pc, #224]	@ (800f7f8 <udp_bind+0x100>)
 800f718:	f240 32b7 	movw	r2, #951	@ 0x3b7
 800f71c:	4937      	ldr	r1, [pc, #220]	@ (800f7fc <udp_bind+0x104>)
 800f71e:	4838      	ldr	r0, [pc, #224]	@ (800f800 <udp_bind+0x108>)
 800f720:	f004 fcfe 	bl	8014120 <iprintf>
 800f724:	f06f 030f 	mvn.w	r3, #15
 800f728:	e060      	b.n	800f7ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f72e:	4b35      	ldr	r3, [pc, #212]	@ (800f804 <udp_bind+0x10c>)
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	617b      	str	r3, [r7, #20]
 800f734:	e009      	b.n	800f74a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f736:	68fa      	ldr	r2, [r7, #12]
 800f738:	697b      	ldr	r3, [r7, #20]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d102      	bne.n	800f744 <udp_bind+0x4c>
      rebind = 1;
 800f73e:	2301      	movs	r3, #1
 800f740:	74fb      	strb	r3, [r7, #19]
      break;
 800f742:	e005      	b.n	800f750 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f744:	697b      	ldr	r3, [r7, #20]
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	617b      	str	r3, [r7, #20]
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1f2      	bne.n	800f736 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800f750:	88fb      	ldrh	r3, [r7, #6]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d109      	bne.n	800f76a <udp_bind+0x72>
    port = udp_new_port();
 800f756:	f7ff fc37 	bl	800efc8 <udp_new_port>
 800f75a:	4603      	mov	r3, r0
 800f75c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f75e:	88fb      	ldrh	r3, [r7, #6]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d12c      	bne.n	800f7be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f764:	f06f 0307 	mvn.w	r3, #7
 800f768:	e040      	b.n	800f7ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f76a:	4b26      	ldr	r3, [pc, #152]	@ (800f804 <udp_bind+0x10c>)
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	617b      	str	r3, [r7, #20]
 800f770:	e022      	b.n	800f7b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800f772:	68fa      	ldr	r2, [r7, #12]
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	429a      	cmp	r2, r3
 800f778:	d01b      	beq.n	800f7b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	8a5b      	ldrh	r3, [r3, #18]
 800f77e:	88fa      	ldrh	r2, [r7, #6]
 800f780:	429a      	cmp	r2, r3
 800f782:	d116      	bne.n	800f7b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d00d      	beq.n	800f7ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00a      	beq.n	800f7ac <udp_bind+0xb4>
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d006      	beq.n	800f7ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f79e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d003      	beq.n	800f7ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800f7a4:	697b      	ldr	r3, [r7, #20]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d102      	bne.n	800f7b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f7ac:	f06f 0307 	mvn.w	r3, #7
 800f7b0:	e01c      	b.n	800f7ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	68db      	ldr	r3, [r3, #12]
 800f7b6:	617b      	str	r3, [r7, #20]
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d1d9      	bne.n	800f772 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d002      	beq.n	800f7ca <udp_bind+0xd2>
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	e000      	b.n	800f7cc <udp_bind+0xd4>
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	68fa      	ldr	r2, [r7, #12]
 800f7ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	88fa      	ldrh	r2, [r7, #6]
 800f7d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f7d6:	7cfb      	ldrb	r3, [r7, #19]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d106      	bne.n	800f7ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f7dc:	4b09      	ldr	r3, [pc, #36]	@ (800f804 <udp_bind+0x10c>)
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f7e4:	4a07      	ldr	r2, [pc, #28]	@ (800f804 <udp_bind+0x10c>)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f7ea:	2300      	movs	r3, #0
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3718      	adds	r7, #24
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	bd80      	pop	{r7, pc}
 800f7f4:	08018314 	.word	0x08018314
 800f7f8:	0801740c 	.word	0x0801740c
 800f7fc:	080176d4 	.word	0x080176d4
 800f800:	08017460 	.word	0x08017460
 800f804:	2000438c 	.word	0x2000438c

0800f808 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	4613      	mov	r3, r2
 800f814:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d109      	bne.n	800f830 <udp_connect+0x28>
 800f81c:	4b2c      	ldr	r3, [pc, #176]	@ (800f8d0 <udp_connect+0xc8>)
 800f81e:	f240 4235 	movw	r2, #1077	@ 0x435
 800f822:	492c      	ldr	r1, [pc, #176]	@ (800f8d4 <udp_connect+0xcc>)
 800f824:	482c      	ldr	r0, [pc, #176]	@ (800f8d8 <udp_connect+0xd0>)
 800f826:	f004 fc7b 	bl	8014120 <iprintf>
 800f82a:	f06f 030f 	mvn.w	r3, #15
 800f82e:	e04b      	b.n	800f8c8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d109      	bne.n	800f84a <udp_connect+0x42>
 800f836:	4b26      	ldr	r3, [pc, #152]	@ (800f8d0 <udp_connect+0xc8>)
 800f838:	f240 4236 	movw	r2, #1078	@ 0x436
 800f83c:	4927      	ldr	r1, [pc, #156]	@ (800f8dc <udp_connect+0xd4>)
 800f83e:	4826      	ldr	r0, [pc, #152]	@ (800f8d8 <udp_connect+0xd0>)
 800f840:	f004 fc6e 	bl	8014120 <iprintf>
 800f844:	f06f 030f 	mvn.w	r3, #15
 800f848:	e03e      	b.n	800f8c8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	8a5b      	ldrh	r3, [r3, #18]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d10f      	bne.n	800f872 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f852:	68f9      	ldr	r1, [r7, #12]
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	8a5b      	ldrh	r3, [r3, #18]
 800f858:	461a      	mov	r2, r3
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	f7ff ff4c 	bl	800f6f8 <udp_bind>
 800f860:	4603      	mov	r3, r0
 800f862:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800f864:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d002      	beq.n	800f872 <udp_connect+0x6a>
      return err;
 800f86c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f870:	e02a      	b.n	800f8c8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d002      	beq.n	800f87e <udp_connect+0x76>
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	e000      	b.n	800f880 <udp_connect+0x78>
 800f87e:	2300      	movs	r3, #0
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	88fa      	ldrh	r2, [r7, #6]
 800f888:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	7c1b      	ldrb	r3, [r3, #16]
 800f88e:	f043 0304 	orr.w	r3, r3, #4
 800f892:	b2da      	uxtb	r2, r3
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f898:	4b11      	ldr	r3, [pc, #68]	@ (800f8e0 <udp_connect+0xd8>)
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	617b      	str	r3, [r7, #20]
 800f89e:	e008      	b.n	800f8b2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800f8a0:	68fa      	ldr	r2, [r7, #12]
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d101      	bne.n	800f8ac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800f8a8:	2300      	movs	r3, #0
 800f8aa:	e00d      	b.n	800f8c8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1f3      	bne.n	800f8a0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800f8b8:	4b09      	ldr	r3, [pc, #36]	@ (800f8e0 <udp_connect+0xd8>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800f8c0:	4a07      	ldr	r2, [pc, #28]	@ (800f8e0 <udp_connect+0xd8>)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800f8c6:	2300      	movs	r3, #0
}
 800f8c8:	4618      	mov	r0, r3
 800f8ca:	3718      	adds	r7, #24
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	0801740c 	.word	0x0801740c
 800f8d4:	080176ec 	.word	0x080176ec
 800f8d8:	08017460 	.word	0x08017460
 800f8dc:	08017708 	.word	0x08017708
 800f8e0:	2000438c 	.word	0x2000438c

0800f8e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b084      	sub	sp, #16
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d107      	bne.n	800f906 <udp_recv+0x22>
 800f8f6:	4b08      	ldr	r3, [pc, #32]	@ (800f918 <udp_recv+0x34>)
 800f8f8:	f240 428a 	movw	r2, #1162	@ 0x48a
 800f8fc:	4907      	ldr	r1, [pc, #28]	@ (800f91c <udp_recv+0x38>)
 800f8fe:	4808      	ldr	r0, [pc, #32]	@ (800f920 <udp_recv+0x3c>)
 800f900:	f004 fc0e 	bl	8014120 <iprintf>
 800f904:	e005      	b.n	800f912 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	61da      	str	r2, [r3, #28]
}
 800f912:	3710      	adds	r7, #16
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}
 800f918:	0801740c 	.word	0x0801740c
 800f91c:	08017740 	.word	0x08017740
 800f920:	08017460 	.word	0x08017460

0800f924 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d107      	bne.n	800f942 <udp_remove+0x1e>
 800f932:	4b19      	ldr	r3, [pc, #100]	@ (800f998 <udp_remove+0x74>)
 800f934:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 800f938:	4918      	ldr	r1, [pc, #96]	@ (800f99c <udp_remove+0x78>)
 800f93a:	4819      	ldr	r0, [pc, #100]	@ (800f9a0 <udp_remove+0x7c>)
 800f93c:	f004 fbf0 	bl	8014120 <iprintf>
 800f940:	e026      	b.n	800f990 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f942:	4b18      	ldr	r3, [pc, #96]	@ (800f9a4 <udp_remove+0x80>)
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	687a      	ldr	r2, [r7, #4]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d105      	bne.n	800f958 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f94c:	4b15      	ldr	r3, [pc, #84]	@ (800f9a4 <udp_remove+0x80>)
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	4a14      	ldr	r2, [pc, #80]	@ (800f9a4 <udp_remove+0x80>)
 800f954:	6013      	str	r3, [r2, #0]
 800f956:	e017      	b.n	800f988 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f958:	4b12      	ldr	r3, [pc, #72]	@ (800f9a4 <udp_remove+0x80>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	60fb      	str	r3, [r7, #12]
 800f95e:	e010      	b.n	800f982 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	68db      	ldr	r3, [r3, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d009      	beq.n	800f97c <udp_remove+0x58>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	68db      	ldr	r3, [r3, #12]
 800f96c:	687a      	ldr	r2, [r7, #4]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d104      	bne.n	800f97c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	68da      	ldr	r2, [r3, #12]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	60da      	str	r2, [r3, #12]
        break;
 800f97a:	e005      	b.n	800f988 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	68db      	ldr	r3, [r3, #12]
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1eb      	bne.n	800f960 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f988:	6879      	ldr	r1, [r7, #4]
 800f98a:	2000      	movs	r0, #0
 800f98c:	f7f7 fec0 	bl	8007710 <memp_free>
}
 800f990:	3710      	adds	r7, #16
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
 800f996:	bf00      	nop
 800f998:	0801740c 	.word	0x0801740c
 800f99c:	08017758 	.word	0x08017758
 800f9a0:	08017460 	.word	0x08017460
 800f9a4:	2000438c 	.word	0x2000438c

0800f9a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	f7f7 fe62 	bl	8007678 <memp_malloc>
 800f9b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d007      	beq.n	800f9cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f9bc:	2220      	movs	r2, #32
 800f9be:	2100      	movs	r1, #0
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f004 fc4c 	bl	801425e <memset>
    pcb->ttl = UDP_TTL;
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	22ff      	movs	r2, #255	@ 0xff
 800f9ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f9cc:	687b      	ldr	r3, [r7, #4]
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	3708      	adds	r7, #8
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
	...

0800f9d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b085      	sub	sp, #20
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d01e      	beq.n	800fa26 <udp_netif_ip_addr_changed+0x4e>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d01a      	beq.n	800fa26 <udp_netif_ip_addr_changed+0x4e>
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d017      	beq.n	800fa26 <udp_netif_ip_addr_changed+0x4e>
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d013      	beq.n	800fa26 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f9fe:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <udp_netif_ip_addr_changed+0x5c>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e00c      	b.n	800fa20 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d103      	bne.n	800fa1a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	60fb      	str	r3, [r7, #12]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d1ef      	bne.n	800fa06 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fa26:	bf00      	nop
 800fa28:	3714      	adds	r7, #20
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	2000438c 	.word	0x2000438c

0800fa38 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fa3c:	4b20      	ldr	r3, [pc, #128]	@ (800fac0 <dhcp_inc_pcb_refcount+0x88>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d133      	bne.n	800faac <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fa44:	4b1f      	ldr	r3, [pc, #124]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d005      	beq.n	800fa58 <dhcp_inc_pcb_refcount+0x20>
 800fa4c:	4b1e      	ldr	r3, [pc, #120]	@ (800fac8 <dhcp_inc_pcb_refcount+0x90>)
 800fa4e:	22e5      	movs	r2, #229	@ 0xe5
 800fa50:	491e      	ldr	r1, [pc, #120]	@ (800facc <dhcp_inc_pcb_refcount+0x94>)
 800fa52:	481f      	ldr	r0, [pc, #124]	@ (800fad0 <dhcp_inc_pcb_refcount+0x98>)
 800fa54:	f004 fb64 	bl	8014120 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fa58:	f7ff ffa6 	bl	800f9a8 <udp_new>
 800fa5c:	4603      	mov	r3, r0
 800fa5e:	4a19      	ldr	r2, [pc, #100]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa60:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800fa62:	4b18      	ldr	r3, [pc, #96]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d102      	bne.n	800fa70 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fa6a:	f04f 33ff 	mov.w	r3, #4294967295
 800fa6e:	e024      	b.n	800faba <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fa70:	4b14      	ldr	r3, [pc, #80]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	7a5a      	ldrb	r2, [r3, #9]
 800fa76:	4b13      	ldr	r3, [pc, #76]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f042 0220 	orr.w	r2, r2, #32
 800fa7e:	b2d2      	uxtb	r2, r2
 800fa80:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800fa82:	4b10      	ldr	r3, [pc, #64]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2244      	movs	r2, #68	@ 0x44
 800fa88:	4912      	ldr	r1, [pc, #72]	@ (800fad4 <dhcp_inc_pcb_refcount+0x9c>)
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7ff fe34 	bl	800f6f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800fa90:	4b0c      	ldr	r3, [pc, #48]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	2243      	movs	r2, #67	@ 0x43
 800fa96:	490f      	ldr	r1, [pc, #60]	@ (800fad4 <dhcp_inc_pcb_refcount+0x9c>)
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff feb5 	bl	800f808 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fa9e:	4b09      	ldr	r3, [pc, #36]	@ (800fac4 <dhcp_inc_pcb_refcount+0x8c>)
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2200      	movs	r2, #0
 800faa4:	490c      	ldr	r1, [pc, #48]	@ (800fad8 <dhcp_inc_pcb_refcount+0xa0>)
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7ff ff1c 	bl	800f8e4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800faac:	4b04      	ldr	r3, [pc, #16]	@ (800fac0 <dhcp_inc_pcb_refcount+0x88>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	3301      	adds	r3, #1
 800fab2:	b2da      	uxtb	r2, r3
 800fab4:	4b02      	ldr	r3, [pc, #8]	@ (800fac0 <dhcp_inc_pcb_refcount+0x88>)
 800fab6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	200043c8 	.word	0x200043c8
 800fac4:	200043c4 	.word	0x200043c4
 800fac8:	08017770 	.word	0x08017770
 800facc:	080177a8 	.word	0x080177a8
 800fad0:	080177d0 	.word	0x080177d0
 800fad4:	08018314 	.word	0x08018314
 800fad8:	08011401 	.word	0x08011401

0800fadc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fae0:	4b0e      	ldr	r3, [pc, #56]	@ (800fb1c <dhcp_dec_pcb_refcount+0x40>)
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d105      	bne.n	800faf4 <dhcp_dec_pcb_refcount+0x18>
 800fae8:	4b0d      	ldr	r3, [pc, #52]	@ (800fb20 <dhcp_dec_pcb_refcount+0x44>)
 800faea:	22ff      	movs	r2, #255	@ 0xff
 800faec:	490d      	ldr	r1, [pc, #52]	@ (800fb24 <dhcp_dec_pcb_refcount+0x48>)
 800faee:	480e      	ldr	r0, [pc, #56]	@ (800fb28 <dhcp_dec_pcb_refcount+0x4c>)
 800faf0:	f004 fb16 	bl	8014120 <iprintf>
  dhcp_pcb_refcount--;
 800faf4:	4b09      	ldr	r3, [pc, #36]	@ (800fb1c <dhcp_dec_pcb_refcount+0x40>)
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	3b01      	subs	r3, #1
 800fafa:	b2da      	uxtb	r2, r3
 800fafc:	4b07      	ldr	r3, [pc, #28]	@ (800fb1c <dhcp_dec_pcb_refcount+0x40>)
 800fafe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fb00:	4b06      	ldr	r3, [pc, #24]	@ (800fb1c <dhcp_dec_pcb_refcount+0x40>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d107      	bne.n	800fb18 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fb08:	4b08      	ldr	r3, [pc, #32]	@ (800fb2c <dhcp_dec_pcb_refcount+0x50>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff ff09 	bl	800f924 <udp_remove>
    dhcp_pcb = NULL;
 800fb12:	4b06      	ldr	r3, [pc, #24]	@ (800fb2c <dhcp_dec_pcb_refcount+0x50>)
 800fb14:	2200      	movs	r2, #0
 800fb16:	601a      	str	r2, [r3, #0]
  }
}
 800fb18:	bf00      	nop
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	200043c8 	.word	0x200043c8
 800fb20:	08017770 	.word	0x08017770
 800fb24:	080177f8 	.word	0x080177f8
 800fb28:	080177d0 	.word	0x080177d0
 800fb2c:	200043c4 	.word	0x200043c4

0800fb30 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fb30:	b580      	push	{r7, lr}
 800fb32:	b084      	sub	sp, #16
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb3c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fb3e:	210c      	movs	r1, #12
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f001 f86f 	bl	8010c24 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fb46:	4b06      	ldr	r3, [pc, #24]	@ (800fb60 <dhcp_handle_nak+0x30>)
 800fb48:	4a05      	ldr	r2, [pc, #20]	@ (800fb60 <dhcp_handle_nak+0x30>)
 800fb4a:	4905      	ldr	r1, [pc, #20]	@ (800fb60 <dhcp_handle_nak+0x30>)
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7f7 ff81 	bl	8007a54 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fb52:	6878      	ldr	r0, [r7, #4]
 800fb54:	f000 fc68 	bl	8010428 <dhcp_discover>
}
 800fb58:	bf00      	nop
 800fb5a:	3710      	adds	r7, #16
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	08018314 	.word	0x08018314

0800fb64 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b084      	sub	sp, #16
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fb70:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fb72:	2108      	movs	r1, #8
 800fb74:	68f8      	ldr	r0, [r7, #12]
 800fb76:	f001 f855 	bl	8010c24 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	331c      	adds	r3, #28
 800fb7e:	2200      	movs	r2, #0
 800fb80:	4619      	mov	r1, r3
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f002 fb86 	bl	8012294 <etharp_query>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	799b      	ldrb	r3, [r3, #6]
 800fb90:	2bff      	cmp	r3, #255	@ 0xff
 800fb92:	d005      	beq.n	800fba0 <dhcp_check+0x3c>
    dhcp->tries++;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	799b      	ldrb	r3, [r3, #6]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800fba0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800fba4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fba6:	893b      	ldrh	r3, [r7, #8]
 800fba8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fbac:	4a06      	ldr	r2, [pc, #24]	@ (800fbc8 <dhcp_check+0x64>)
 800fbae:	fb82 1203 	smull	r1, r2, r2, r3
 800fbb2:	1152      	asrs	r2, r2, #5
 800fbb4:	17db      	asrs	r3, r3, #31
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	b29a      	uxth	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fbbe:	bf00      	nop
 800fbc0:	3710      	adds	r7, #16
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	bd80      	pop	{r7, pc}
 800fbc6:	bf00      	nop
 800fbc8:	10624dd3 	.word	0x10624dd3

0800fbcc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbda:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fbdc:	4b0c      	ldr	r3, [pc, #48]	@ (800fc10 <dhcp_handle_offer+0x44>)
 800fbde:	789b      	ldrb	r3, [r3, #2]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d011      	beq.n	800fc08 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fbea:	4b0a      	ldr	r3, [pc, #40]	@ (800fc14 <dhcp_handle_offer+0x48>)
 800fbec:	689b      	ldr	r3, [r3, #8]
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7f6 fc99 	bl	8006526 <lwip_htonl>
 800fbf4:	4602      	mov	r2, r0
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	691a      	ldr	r2, [r3, #16]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 f808 	bl	800fc18 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800fc08:	bf00      	nop
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}
 800fc10:	200043b8 	.word	0x200043b8
 800fc14:	20004390 	.word	0x20004390

0800fc18 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fc18:	b5b0      	push	{r4, r5, r7, lr}
 800fc1a:	b08a      	sub	sp, #40	@ 0x28
 800fc1c:	af02      	add	r7, sp, #8
 800fc1e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d109      	bne.n	800fc3a <dhcp_select+0x22>
 800fc26:	4b71      	ldr	r3, [pc, #452]	@ (800fdec <dhcp_select+0x1d4>)
 800fc28:	f240 1277 	movw	r2, #375	@ 0x177
 800fc2c:	4970      	ldr	r1, [pc, #448]	@ (800fdf0 <dhcp_select+0x1d8>)
 800fc2e:	4871      	ldr	r0, [pc, #452]	@ (800fdf4 <dhcp_select+0x1dc>)
 800fc30:	f004 fa76 	bl	8014120 <iprintf>
 800fc34:	f06f 030f 	mvn.w	r3, #15
 800fc38:	e0d3      	b.n	800fde2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc3e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800fc40:	69bb      	ldr	r3, [r7, #24]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d109      	bne.n	800fc5a <dhcp_select+0x42>
 800fc46:	4b69      	ldr	r3, [pc, #420]	@ (800fdec <dhcp_select+0x1d4>)
 800fc48:	f240 1279 	movw	r2, #377	@ 0x179
 800fc4c:	496a      	ldr	r1, [pc, #424]	@ (800fdf8 <dhcp_select+0x1e0>)
 800fc4e:	4869      	ldr	r0, [pc, #420]	@ (800fdf4 <dhcp_select+0x1dc>)
 800fc50:	f004 fa66 	bl	8014120 <iprintf>
 800fc54:	f06f 0305 	mvn.w	r3, #5
 800fc58:	e0c3      	b.n	800fde2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fc5a:	2101      	movs	r1, #1
 800fc5c:	69b8      	ldr	r0, [r7, #24]
 800fc5e:	f000 ffe1 	bl	8010c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800fc62:	f107 030c 	add.w	r3, r7, #12
 800fc66:	2203      	movs	r2, #3
 800fc68:	69b9      	ldr	r1, [r7, #24]
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f001 fc96 	bl	801159c <dhcp_create_msg>
 800fc70:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f000 8085 	beq.w	800fd84 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fc80:	89b8      	ldrh	r0, [r7, #12]
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fc88:	2302      	movs	r3, #2
 800fc8a:	2239      	movs	r2, #57	@ 0x39
 800fc8c:	f000 ffe4 	bl	8010c58 <dhcp_option>
 800fc90:	4603      	mov	r3, r0
 800fc92:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800fc94:	89b8      	ldrh	r0, [r7, #12]
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fca0:	461a      	mov	r2, r3
 800fca2:	f001 f833 	bl	8010d0c <dhcp_option_short>
 800fca6:	4603      	mov	r3, r0
 800fca8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800fcaa:	89b8      	ldrh	r0, [r7, #12]
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fcb2:	2304      	movs	r3, #4
 800fcb4:	2232      	movs	r2, #50	@ 0x32
 800fcb6:	f000 ffcf 	bl	8010c58 <dhcp_option>
 800fcba:	4603      	mov	r3, r0
 800fcbc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fcbe:	89bc      	ldrh	r4, [r7, #12]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7f6 fc2b 	bl	8006526 <lwip_htonl>
 800fcd0:	4603      	mov	r3, r0
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	4629      	mov	r1, r5
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	f001 f84a 	bl	8010d70 <dhcp_option_long>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800fce0:	89b8      	ldrh	r0, [r7, #12]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fce8:	2304      	movs	r3, #4
 800fcea:	2236      	movs	r2, #54	@ 0x36
 800fcec:	f000 ffb4 	bl	8010c58 <dhcp_option>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fcf4:	89bc      	ldrh	r4, [r7, #12]
 800fcf6:	693b      	ldr	r3, [r7, #16]
 800fcf8:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	699b      	ldr	r3, [r3, #24]
 800fd00:	4618      	mov	r0, r3
 800fd02:	f7f6 fc10 	bl	8006526 <lwip_htonl>
 800fd06:	4603      	mov	r3, r0
 800fd08:	461a      	mov	r2, r3
 800fd0a:	4629      	mov	r1, r5
 800fd0c:	4620      	mov	r0, r4
 800fd0e:	f001 f82f 	bl	8010d70 <dhcp_option_long>
 800fd12:	4603      	mov	r3, r0
 800fd14:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd16:	89b8      	ldrh	r0, [r7, #12]
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fd1e:	2304      	movs	r3, #4
 800fd20:	2237      	movs	r2, #55	@ 0x37
 800fd22:	f000 ff99 	bl	8010c58 <dhcp_option>
 800fd26:	4603      	mov	r3, r0
 800fd28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	77bb      	strb	r3, [r7, #30]
 800fd2e:	e00e      	b.n	800fd4e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800fd30:	89b8      	ldrh	r0, [r7, #12]
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800fd38:	7fbb      	ldrb	r3, [r7, #30]
 800fd3a:	4a30      	ldr	r2, [pc, #192]	@ (800fdfc <dhcp_select+0x1e4>)
 800fd3c:	5cd3      	ldrb	r3, [r2, r3]
 800fd3e:	461a      	mov	r2, r3
 800fd40:	f000 ffbe 	bl	8010cc0 <dhcp_option_byte>
 800fd44:	4603      	mov	r3, r0
 800fd46:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd48:	7fbb      	ldrb	r3, [r7, #30]
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	77bb      	strb	r3, [r7, #30]
 800fd4e:	7fbb      	ldrb	r3, [r7, #30]
 800fd50:	2b03      	cmp	r3, #3
 800fd52:	d9ed      	bls.n	800fd30 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800fd54:	89b8      	ldrh	r0, [r7, #12]
 800fd56:	693b      	ldr	r3, [r7, #16]
 800fd58:	33f0      	adds	r3, #240	@ 0xf0
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	4619      	mov	r1, r3
 800fd5e:	f001 fcf3 	bl	8011748 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800fd62:	4b27      	ldr	r3, [pc, #156]	@ (800fe00 <dhcp_select+0x1e8>)
 800fd64:	6818      	ldr	r0, [r3, #0]
 800fd66:	4b27      	ldr	r3, [pc, #156]	@ (800fe04 <dhcp_select+0x1ec>)
 800fd68:	9301      	str	r3, [sp, #4]
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	9300      	str	r3, [sp, #0]
 800fd6e:	2343      	movs	r3, #67	@ 0x43
 800fd70:	4a25      	ldr	r2, [pc, #148]	@ (800fe08 <dhcp_select+0x1f0>)
 800fd72:	6979      	ldr	r1, [r7, #20]
 800fd74:	f7ff fbc0 	bl	800f4f8 <udp_sendto_if_src>
 800fd78:	4603      	mov	r3, r0
 800fd7a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800fd7c:	6978      	ldr	r0, [r7, #20]
 800fd7e:	f7f8 fb49 	bl	8008414 <pbuf_free>
 800fd82:	e001      	b.n	800fd88 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800fd84:	23ff      	movs	r3, #255	@ 0xff
 800fd86:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800fd88:	69bb      	ldr	r3, [r7, #24]
 800fd8a:	799b      	ldrb	r3, [r3, #6]
 800fd8c:	2bff      	cmp	r3, #255	@ 0xff
 800fd8e:	d005      	beq.n	800fd9c <dhcp_select+0x184>
    dhcp->tries++;
 800fd90:	69bb      	ldr	r3, [r7, #24]
 800fd92:	799b      	ldrb	r3, [r3, #6]
 800fd94:	3301      	adds	r3, #1
 800fd96:	b2da      	uxtb	r2, r3
 800fd98:	69bb      	ldr	r3, [r7, #24]
 800fd9a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800fd9c:	69bb      	ldr	r3, [r7, #24]
 800fd9e:	799b      	ldrb	r3, [r3, #6]
 800fda0:	2b05      	cmp	r3, #5
 800fda2:	d80d      	bhi.n	800fdc0 <dhcp_select+0x1a8>
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	799b      	ldrb	r3, [r3, #6]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	2301      	movs	r3, #1
 800fdac:	4093      	lsls	r3, r2
 800fdae:	b29b      	uxth	r3, r3
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	0152      	lsls	r2, r2, #5
 800fdb4:	1ad2      	subs	r2, r2, r3
 800fdb6:	0092      	lsls	r2, r2, #2
 800fdb8:	4413      	add	r3, r2
 800fdba:	00db      	lsls	r3, r3, #3
 800fdbc:	b29b      	uxth	r3, r3
 800fdbe:	e001      	b.n	800fdc4 <dhcp_select+0x1ac>
 800fdc0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800fdc4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800fdc6:	89fb      	ldrh	r3, [r7, #14]
 800fdc8:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800fdcc:	4a0f      	ldr	r2, [pc, #60]	@ (800fe0c <dhcp_select+0x1f4>)
 800fdce:	fb82 1203 	smull	r1, r2, r2, r3
 800fdd2:	1152      	asrs	r2, r2, #5
 800fdd4:	17db      	asrs	r3, r3, #31
 800fdd6:	1ad3      	subs	r3, r2, r3
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	69bb      	ldr	r3, [r7, #24]
 800fddc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3720      	adds	r7, #32
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bdb0      	pop	{r4, r5, r7, pc}
 800fdea:	bf00      	nop
 800fdec:	08017770 	.word	0x08017770
 800fdf0:	0801781c 	.word	0x0801781c
 800fdf4:	080177d0 	.word	0x080177d0
 800fdf8:	08017838 	.word	0x08017838
 800fdfc:	20000014 	.word	0x20000014
 800fe00:	200043c4 	.word	0x200043c4
 800fe04:	08018314 	.word	0x08018314
 800fe08:	08018318 	.word	0x08018318
 800fe0c:	10624dd3 	.word	0x10624dd3

0800fe10 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800fe16:	4b27      	ldr	r3, [pc, #156]	@ (800feb4 <dhcp_coarse_tmr+0xa4>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	607b      	str	r3, [r7, #4]
 800fe1c:	e042      	b.n	800fea4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe22:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d039      	beq.n	800fe9e <dhcp_coarse_tmr+0x8e>
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	795b      	ldrb	r3, [r3, #5]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d035      	beq.n	800fe9e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	8a9b      	ldrh	r3, [r3, #20]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d012      	beq.n	800fe60 <dhcp_coarse_tmr+0x50>
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	8a5b      	ldrh	r3, [r3, #18]
 800fe3e:	3301      	adds	r3, #1
 800fe40:	b29a      	uxth	r2, r3
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	825a      	strh	r2, [r3, #18]
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	8a5a      	ldrh	r2, [r3, #18]
 800fe4a:	683b      	ldr	r3, [r7, #0]
 800fe4c:	8a9b      	ldrh	r3, [r3, #20]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d106      	bne.n	800fe60 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 fe4c 	bl	8010af0 <dhcp_release_and_stop>
        dhcp_start(netif);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f000 f989 	bl	8010170 <dhcp_start>
 800fe5e:	e01e      	b.n	800fe9e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	8a1b      	ldrh	r3, [r3, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00b      	beq.n	800fe80 <dhcp_coarse_tmr+0x70>
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	8a1b      	ldrh	r3, [r3, #16]
 800fe6c:	1e5a      	subs	r2, r3, #1
 800fe6e:	b291      	uxth	r1, r2
 800fe70:	683a      	ldr	r2, [r7, #0]
 800fe72:	8211      	strh	r1, [r2, #16]
 800fe74:	2b01      	cmp	r3, #1
 800fe76:	d103      	bne.n	800fe80 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f000 f8c6 	bl	801000a <dhcp_t2_timeout>
 800fe7e:	e00e      	b.n	800fe9e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	89db      	ldrh	r3, [r3, #14]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d00a      	beq.n	800fe9e <dhcp_coarse_tmr+0x8e>
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	89db      	ldrh	r3, [r3, #14]
 800fe8c:	1e5a      	subs	r2, r3, #1
 800fe8e:	b291      	uxth	r1, r2
 800fe90:	683a      	ldr	r2, [r7, #0]
 800fe92:	81d1      	strh	r1, [r2, #14]
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d102      	bne.n	800fe9e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f888 	bl	800ffae <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	607b      	str	r3, [r7, #4]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d1b9      	bne.n	800fe1e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800feaa:	bf00      	nop
 800feac:	bf00      	nop
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}
 800feb4:	20004324 	.word	0x20004324

0800feb8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800feb8:	b580      	push	{r7, lr}
 800feba:	b082      	sub	sp, #8
 800febc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800febe:	4b16      	ldr	r3, [pc, #88]	@ (800ff18 <dhcp_fine_tmr+0x60>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	607b      	str	r3, [r7, #4]
 800fec4:	e020      	b.n	800ff08 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800feca:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800fecc:	683b      	ldr	r3, [r7, #0]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d017      	beq.n	800ff02 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	891b      	ldrh	r3, [r3, #8]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d906      	bls.n	800fee8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800feda:	683b      	ldr	r3, [r7, #0]
 800fedc:	891b      	ldrh	r3, [r3, #8]
 800fede:	3b01      	subs	r3, #1
 800fee0:	b29a      	uxth	r2, r3
 800fee2:	683b      	ldr	r3, [r7, #0]
 800fee4:	811a      	strh	r2, [r3, #8]
 800fee6:	e00c      	b.n	800ff02 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	891b      	ldrh	r3, [r3, #8]
 800feec:	2b01      	cmp	r3, #1
 800feee:	d108      	bne.n	800ff02 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	891b      	ldrh	r3, [r3, #8]
 800fef4:	3b01      	subs	r3, #1
 800fef6:	b29a      	uxth	r2, r3
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 f80d 	bl	800ff1c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	607b      	str	r3, [r7, #4]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d1db      	bne.n	800fec6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800ff0e:	bf00      	nop
 800ff10:	bf00      	nop
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}
 800ff18:	20004324 	.word	0x20004324

0800ff1c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b084      	sub	sp, #16
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff28:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	795b      	ldrb	r3, [r3, #5]
 800ff2e:	2b0c      	cmp	r3, #12
 800ff30:	d003      	beq.n	800ff3a <dhcp_timeout+0x1e>
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	795b      	ldrb	r3, [r3, #5]
 800ff36:	2b06      	cmp	r3, #6
 800ff38:	d103      	bne.n	800ff42 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 fa74 	bl	8010428 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800ff40:	e031      	b.n	800ffa6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	795b      	ldrb	r3, [r3, #5]
 800ff46:	2b01      	cmp	r3, #1
 800ff48:	d10e      	bne.n	800ff68 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	799b      	ldrb	r3, [r3, #6]
 800ff4e:	2b05      	cmp	r3, #5
 800ff50:	d803      	bhi.n	800ff5a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f7ff fe60 	bl	800fc18 <dhcp_select>
}
 800ff58:	e025      	b.n	800ffa6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f000 fdc8 	bl	8010af0 <dhcp_release_and_stop>
      dhcp_start(netif);
 800ff60:	6878      	ldr	r0, [r7, #4]
 800ff62:	f000 f905 	bl	8010170 <dhcp_start>
}
 800ff66:	e01e      	b.n	800ffa6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	795b      	ldrb	r3, [r3, #5]
 800ff6c:	2b08      	cmp	r3, #8
 800ff6e:	d10b      	bne.n	800ff88 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	799b      	ldrb	r3, [r3, #6]
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d803      	bhi.n	800ff80 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800ff78:	6878      	ldr	r0, [r7, #4]
 800ff7a:	f7ff fdf3 	bl	800fb64 <dhcp_check>
}
 800ff7e:	e012      	b.n	800ffa6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f000 faf3 	bl	801056c <dhcp_bind>
}
 800ff86:	e00e      	b.n	800ffa6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	795b      	ldrb	r3, [r3, #5]
 800ff8c:	2b03      	cmp	r3, #3
 800ff8e:	d10a      	bne.n	800ffa6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	799b      	ldrb	r3, [r3, #6]
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	d803      	bhi.n	800ffa0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 fcf5 	bl	8010988 <dhcp_reboot>
}
 800ff9e:	e002      	b.n	800ffa6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 fa41 	bl	8010428 <dhcp_discover>
}
 800ffa6:	bf00      	nop
 800ffa8:	3710      	adds	r7, #16
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b084      	sub	sp, #16
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ffba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	795b      	ldrb	r3, [r3, #5]
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d007      	beq.n	800ffd4 <dhcp_t1_timeout+0x26>
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	795b      	ldrb	r3, [r3, #5]
 800ffc8:	2b0a      	cmp	r3, #10
 800ffca:	d003      	beq.n	800ffd4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ffd0:	2b05      	cmp	r3, #5
 800ffd2:	d116      	bne.n	8010002 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f000 fba3 	bl	8010720 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	899b      	ldrh	r3, [r3, #12]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	8a5b      	ldrh	r3, [r3, #18]
 800ffe4:	1ad3      	subs	r3, r2, r3
 800ffe6:	2b01      	cmp	r3, #1
 800ffe8:	dd0b      	ble.n	8010002 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	899b      	ldrh	r3, [r3, #12]
 800ffee:	461a      	mov	r2, r3
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	8a5b      	ldrh	r3, [r3, #18]
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	0fda      	lsrs	r2, r3, #31
 800fff8:	4413      	add	r3, r2
 800fffa:	105b      	asrs	r3, r3, #1
 800fffc:	b29a      	uxth	r2, r3
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010002:	bf00      	nop
 8010004:	3710      	adds	r7, #16
 8010006:	46bd      	mov	sp, r7
 8010008:	bd80      	pop	{r7, pc}

0801000a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801000a:	b580      	push	{r7, lr}
 801000c:	b084      	sub	sp, #16
 801000e:	af00      	add	r7, sp, #0
 8010010:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010016:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	795b      	ldrb	r3, [r3, #5]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d00b      	beq.n	8010038 <dhcp_t2_timeout+0x2e>
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	795b      	ldrb	r3, [r3, #5]
 8010024:	2b0a      	cmp	r3, #10
 8010026:	d007      	beq.n	8010038 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801002c:	2b05      	cmp	r3, #5
 801002e:	d003      	beq.n	8010038 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	795b      	ldrb	r3, [r3, #5]
 8010034:	2b04      	cmp	r3, #4
 8010036:	d116      	bne.n	8010066 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8010038:	6878      	ldr	r0, [r7, #4]
 801003a:	f000 fc0b 	bl	8010854 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	8a9b      	ldrh	r3, [r3, #20]
 8010042:	461a      	mov	r2, r3
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	8a5b      	ldrh	r3, [r3, #18]
 8010048:	1ad3      	subs	r3, r2, r3
 801004a:	2b01      	cmp	r3, #1
 801004c:	dd0b      	ble.n	8010066 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	8a9b      	ldrh	r3, [r3, #20]
 8010052:	461a      	mov	r2, r3
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	8a5b      	ldrh	r3, [r3, #18]
 8010058:	1ad3      	subs	r3, r2, r3
 801005a:	0fda      	lsrs	r2, r3, #31
 801005c:	4413      	add	r3, r2
 801005e:	105b      	asrs	r3, r3, #1
 8010060:	b29a      	uxth	r2, r3
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8010066:	bf00      	nop
 8010068:	3710      	adds	r7, #16
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
	...

08010070 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b086      	sub	sp, #24
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
 8010078:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801007e:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010080:	693b      	ldr	r3, [r7, #16]
 8010082:	2200      	movs	r2, #0
 8010084:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	2200      	movs	r2, #0
 801008a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801008c:	4b36      	ldr	r3, [pc, #216]	@ (8010168 <dhcp_handle_ack+0xf8>)
 801008e:	78db      	ldrb	r3, [r3, #3]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d003      	beq.n	801009c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8010094:	4b35      	ldr	r3, [pc, #212]	@ (801016c <dhcp_handle_ack+0xfc>)
 8010096:	68da      	ldr	r2, [r3, #12]
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801009c:	4b32      	ldr	r3, [pc, #200]	@ (8010168 <dhcp_handle_ack+0xf8>)
 801009e:	791b      	ldrb	r3, [r3, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d004      	beq.n	80100ae <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80100a4:	4b31      	ldr	r3, [pc, #196]	@ (801016c <dhcp_handle_ack+0xfc>)
 80100a6:	691a      	ldr	r2, [r3, #16]
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80100ac:	e004      	b.n	80100b8 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80100b2:	085a      	lsrs	r2, r3, #1
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80100b8:	4b2b      	ldr	r3, [pc, #172]	@ (8010168 <dhcp_handle_ack+0xf8>)
 80100ba:	795b      	ldrb	r3, [r3, #5]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d004      	beq.n	80100ca <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80100c0:	4b2a      	ldr	r3, [pc, #168]	@ (801016c <dhcp_handle_ack+0xfc>)
 80100c2:	695a      	ldr	r2, [r3, #20]
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80100c8:	e007      	b.n	80100da <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80100ce:	4613      	mov	r3, r2
 80100d0:	00db      	lsls	r3, r3, #3
 80100d2:	1a9b      	subs	r3, r3, r2
 80100d4:	08da      	lsrs	r2, r3, #3
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	691a      	ldr	r2, [r3, #16]
 80100de:	693b      	ldr	r3, [r7, #16]
 80100e0:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80100e2:	4b21      	ldr	r3, [pc, #132]	@ (8010168 <dhcp_handle_ack+0xf8>)
 80100e4:	799b      	ldrb	r3, [r3, #6]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d00b      	beq.n	8010102 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80100ea:	4b20      	ldr	r3, [pc, #128]	@ (801016c <dhcp_handle_ack+0xfc>)
 80100ec:	699b      	ldr	r3, [r3, #24]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7f6 fa19 	bl	8006526 <lwip_htonl>
 80100f4:	4602      	mov	r2, r0
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80100fa:	693b      	ldr	r3, [r7, #16]
 80100fc:	2201      	movs	r2, #1
 80100fe:	71da      	strb	r2, [r3, #7]
 8010100:	e002      	b.n	8010108 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	2200      	movs	r2, #0
 8010106:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8010108:	4b17      	ldr	r3, [pc, #92]	@ (8010168 <dhcp_handle_ack+0xf8>)
 801010a:	79db      	ldrb	r3, [r3, #7]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d007      	beq.n	8010120 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8010110:	4b16      	ldr	r3, [pc, #88]	@ (801016c <dhcp_handle_ack+0xfc>)
 8010112:	69db      	ldr	r3, [r3, #28]
 8010114:	4618      	mov	r0, r3
 8010116:	f7f6 fa06 	bl	8006526 <lwip_htonl>
 801011a:	4602      	mov	r2, r0
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8010120:	2300      	movs	r3, #0
 8010122:	75fb      	strb	r3, [r7, #23]
 8010124:	e013      	b.n	801014e <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	3308      	adds	r3, #8
 801012a:	4a10      	ldr	r2, [pc, #64]	@ (801016c <dhcp_handle_ack+0xfc>)
 801012c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010130:	4618      	mov	r0, r3
 8010132:	f7f6 f9f8 	bl	8006526 <lwip_htonl>
 8010136:	4603      	mov	r3, r0
 8010138:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 801013a:	f107 020c 	add.w	r2, r7, #12
 801013e:	7dfb      	ldrb	r3, [r7, #23]
 8010140:	4611      	mov	r1, r2
 8010142:	4618      	mov	r0, r3
 8010144:	f7f6 fa10 	bl	8006568 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8010148:	7dfb      	ldrb	r3, [r7, #23]
 801014a:	3301      	adds	r3, #1
 801014c:	75fb      	strb	r3, [r7, #23]
 801014e:	7dfb      	ldrb	r3, [r7, #23]
 8010150:	2b01      	cmp	r3, #1
 8010152:	d805      	bhi.n	8010160 <dhcp_handle_ack+0xf0>
 8010154:	7dfb      	ldrb	r3, [r7, #23]
 8010156:	3308      	adds	r3, #8
 8010158:	4a03      	ldr	r2, [pc, #12]	@ (8010168 <dhcp_handle_ack+0xf8>)
 801015a:	5cd3      	ldrb	r3, [r2, r3]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d1e2      	bne.n	8010126 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8010160:	bf00      	nop
 8010162:	3718      	adds	r7, #24
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}
 8010168:	200043b8 	.word	0x200043b8
 801016c:	20004390 	.word	0x20004390

08010170 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b084      	sub	sp, #16
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d109      	bne.n	8010192 <dhcp_start+0x22>
 801017e:	4b37      	ldr	r3, [pc, #220]	@ (801025c <dhcp_start+0xec>)
 8010180:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8010184:	4936      	ldr	r1, [pc, #216]	@ (8010260 <dhcp_start+0xf0>)
 8010186:	4837      	ldr	r0, [pc, #220]	@ (8010264 <dhcp_start+0xf4>)
 8010188:	f003 ffca 	bl	8014120 <iprintf>
 801018c:	f06f 030f 	mvn.w	r3, #15
 8010190:	e060      	b.n	8010254 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d109      	bne.n	80101b4 <dhcp_start+0x44>
 80101a0:	4b2e      	ldr	r3, [pc, #184]	@ (801025c <dhcp_start+0xec>)
 80101a2:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80101a6:	4930      	ldr	r1, [pc, #192]	@ (8010268 <dhcp_start+0xf8>)
 80101a8:	482e      	ldr	r0, [pc, #184]	@ (8010264 <dhcp_start+0xf4>)
 80101aa:	f003 ffb9 	bl	8014120 <iprintf>
 80101ae:	f06f 030f 	mvn.w	r3, #15
 80101b2:	e04f      	b.n	8010254 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80101b8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80101be:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80101c2:	d202      	bcs.n	80101ca <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80101c4:	f04f 33ff 	mov.w	r3, #4294967295
 80101c8:	e044      	b.n	8010254 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d10d      	bne.n	80101ec <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80101d0:	2034      	movs	r0, #52	@ 0x34
 80101d2:	f7f7 f8e3 	bl	800739c <mem_malloc>
 80101d6:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d102      	bne.n	80101e4 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80101de:	f04f 33ff 	mov.w	r3, #4294967295
 80101e2:	e037      	b.n	8010254 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	68fa      	ldr	r2, [r7, #12]
 80101e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80101ea:	e005      	b.n	80101f8 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	791b      	ldrb	r3, [r3, #4]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80101f4:	f7ff fc72 	bl	800fadc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80101f8:	2234      	movs	r2, #52	@ 0x34
 80101fa:	2100      	movs	r1, #0
 80101fc:	68f8      	ldr	r0, [r7, #12]
 80101fe:	f004 f82e 	bl	801425e <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8010202:	f7ff fc19 	bl	800fa38 <dhcp_inc_pcb_refcount>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d002      	beq.n	8010212 <dhcp_start+0xa2>
    return ERR_MEM;
 801020c:	f04f 33ff 	mov.w	r3, #4294967295
 8010210:	e020      	b.n	8010254 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2201      	movs	r2, #1
 8010216:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801021e:	f003 0304 	and.w	r3, r3, #4
 8010222:	2b00      	cmp	r3, #0
 8010224:	d105      	bne.n	8010232 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8010226:	2102      	movs	r1, #2
 8010228:	68f8      	ldr	r0, [r7, #12]
 801022a:	f000 fcfb 	bl	8010c24 <dhcp_set_state>
    return ERR_OK;
 801022e:	2300      	movs	r3, #0
 8010230:	e010      	b.n	8010254 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 f8f8 	bl	8010428 <dhcp_discover>
 8010238:	4603      	mov	r3, r0
 801023a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801023c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d005      	beq.n	8010250 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fc53 	bl	8010af0 <dhcp_release_and_stop>
    return ERR_MEM;
 801024a:	f04f 33ff 	mov.w	r3, #4294967295
 801024e:	e001      	b.n	8010254 <dhcp_start+0xe4>
  }
  return result;
 8010250:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3710      	adds	r7, #16
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	08017770 	.word	0x08017770
 8010260:	08017854 	.word	0x08017854
 8010264:	080177d0 	.word	0x080177d0
 8010268:	08017898 	.word	0x08017898

0801026c <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010278:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d025      	beq.n	80102cc <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	795b      	ldrb	r3, [r3, #5]
 8010284:	2b0a      	cmp	r3, #10
 8010286:	d008      	beq.n	801029a <dhcp_network_changed+0x2e>
 8010288:	2b0a      	cmp	r3, #10
 801028a:	dc0d      	bgt.n	80102a8 <dhcp_network_changed+0x3c>
 801028c:	2b00      	cmp	r3, #0
 801028e:	d01f      	beq.n	80102d0 <dhcp_network_changed+0x64>
 8010290:	2b00      	cmp	r3, #0
 8010292:	db09      	blt.n	80102a8 <dhcp_network_changed+0x3c>
 8010294:	3b03      	subs	r3, #3
 8010296:	2b02      	cmp	r3, #2
 8010298:	d806      	bhi.n	80102a8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	2200      	movs	r2, #0
 801029e:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f000 fb71 	bl	8010988 <dhcp_reboot>
      break;
 80102a6:	e014      	b.n	80102d2 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	795b      	ldrb	r3, [r3, #5]
 80102ac:	2b0c      	cmp	r3, #12
 80102ae:	d906      	bls.n	80102be <dhcp_network_changed+0x52>
 80102b0:	4b09      	ldr	r3, [pc, #36]	@ (80102d8 <dhcp_network_changed+0x6c>)
 80102b2:	f240 326d 	movw	r2, #877	@ 0x36d
 80102b6:	4909      	ldr	r1, [pc, #36]	@ (80102dc <dhcp_network_changed+0x70>)
 80102b8:	4809      	ldr	r0, [pc, #36]	@ (80102e0 <dhcp_network_changed+0x74>)
 80102ba:	f003 ff31 	bl	8014120 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	2200      	movs	r2, #0
 80102c2:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 f8af 	bl	8010428 <dhcp_discover>
      break;
 80102ca:	e002      	b.n	80102d2 <dhcp_network_changed+0x66>
    return;
 80102cc:	bf00      	nop
 80102ce:	e000      	b.n	80102d2 <dhcp_network_changed+0x66>
      break;
 80102d0:	bf00      	nop
  }
}
 80102d2:	3710      	adds	r7, #16
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}
 80102d8:	08017770 	.word	0x08017770
 80102dc:	080178bc 	.word	0x080178bc
 80102e0:	080177d0 	.word	0x080177d0

080102e4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d107      	bne.n	8010304 <dhcp_arp_reply+0x20>
 80102f4:	4b0e      	ldr	r3, [pc, #56]	@ (8010330 <dhcp_arp_reply+0x4c>)
 80102f6:	f240 328b 	movw	r2, #907	@ 0x38b
 80102fa:	490e      	ldr	r1, [pc, #56]	@ (8010334 <dhcp_arp_reply+0x50>)
 80102fc:	480e      	ldr	r0, [pc, #56]	@ (8010338 <dhcp_arp_reply+0x54>)
 80102fe:	f003 ff0f 	bl	8014120 <iprintf>
 8010302:	e012      	b.n	801032a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010308:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00c      	beq.n	801032a <dhcp_arp_reply+0x46>
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	795b      	ldrb	r3, [r3, #5]
 8010314:	2b08      	cmp	r3, #8
 8010316:	d108      	bne.n	801032a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	69db      	ldr	r3, [r3, #28]
 8010320:	429a      	cmp	r2, r3
 8010322:	d102      	bne.n	801032a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f000 f809 	bl	801033c <dhcp_decline>
    }
  }
}
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}
 8010330:	08017770 	.word	0x08017770
 8010334:	08017854 	.word	0x08017854
 8010338:	080177d0 	.word	0x080177d0

0801033c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801033c:	b5b0      	push	{r4, r5, r7, lr}
 801033e:	b08a      	sub	sp, #40	@ 0x28
 8010340:	af02      	add	r7, sp, #8
 8010342:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010348:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801034a:	210c      	movs	r1, #12
 801034c:	69b8      	ldr	r0, [r7, #24]
 801034e:	f000 fc69 	bl	8010c24 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8010352:	f107 030c 	add.w	r3, r7, #12
 8010356:	2204      	movs	r2, #4
 8010358:	69b9      	ldr	r1, [r7, #24]
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f001 f91e 	bl	801159c <dhcp_create_msg>
 8010360:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d035      	beq.n	80103d4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801036e:	89b8      	ldrh	r0, [r7, #12]
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010376:	2304      	movs	r3, #4
 8010378:	2232      	movs	r2, #50	@ 0x32
 801037a:	f000 fc6d 	bl	8010c58 <dhcp_option>
 801037e:	4603      	mov	r3, r0
 8010380:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010382:	89bc      	ldrh	r4, [r7, #12]
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801038a:	69bb      	ldr	r3, [r7, #24]
 801038c:	69db      	ldr	r3, [r3, #28]
 801038e:	4618      	mov	r0, r3
 8010390:	f7f6 f8c9 	bl	8006526 <lwip_htonl>
 8010394:	4603      	mov	r3, r0
 8010396:	461a      	mov	r2, r3
 8010398:	4629      	mov	r1, r5
 801039a:	4620      	mov	r0, r4
 801039c:	f000 fce8 	bl	8010d70 <dhcp_option_long>
 80103a0:	4603      	mov	r3, r0
 80103a2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80103a4:	89b8      	ldrh	r0, [r7, #12]
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	33f0      	adds	r3, #240	@ 0xf0
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	4619      	mov	r1, r3
 80103ae:	f001 f9cb 	bl	8011748 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80103b2:	4b19      	ldr	r3, [pc, #100]	@ (8010418 <dhcp_decline+0xdc>)
 80103b4:	6818      	ldr	r0, [r3, #0]
 80103b6:	4b19      	ldr	r3, [pc, #100]	@ (801041c <dhcp_decline+0xe0>)
 80103b8:	9301      	str	r3, [sp, #4]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	9300      	str	r3, [sp, #0]
 80103be:	2343      	movs	r3, #67	@ 0x43
 80103c0:	4a17      	ldr	r2, [pc, #92]	@ (8010420 <dhcp_decline+0xe4>)
 80103c2:	6979      	ldr	r1, [r7, #20]
 80103c4:	f7ff f898 	bl	800f4f8 <udp_sendto_if_src>
 80103c8:	4603      	mov	r3, r0
 80103ca:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80103cc:	6978      	ldr	r0, [r7, #20]
 80103ce:	f7f8 f821 	bl	8008414 <pbuf_free>
 80103d2:	e001      	b.n	80103d8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80103d4:	23ff      	movs	r3, #255	@ 0xff
 80103d6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	799b      	ldrb	r3, [r3, #6]
 80103dc:	2bff      	cmp	r3, #255	@ 0xff
 80103de:	d005      	beq.n	80103ec <dhcp_decline+0xb0>
    dhcp->tries++;
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	799b      	ldrb	r3, [r3, #6]
 80103e4:	3301      	adds	r3, #1
 80103e6:	b2da      	uxtb	r2, r3
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80103ec:	f242 7310 	movw	r3, #10000	@ 0x2710
 80103f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80103f2:	89fb      	ldrh	r3, [r7, #14]
 80103f4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80103f8:	4a0a      	ldr	r2, [pc, #40]	@ (8010424 <dhcp_decline+0xe8>)
 80103fa:	fb82 1203 	smull	r1, r2, r2, r3
 80103fe:	1152      	asrs	r2, r2, #5
 8010400:	17db      	asrs	r3, r3, #31
 8010402:	1ad3      	subs	r3, r2, r3
 8010404:	b29a      	uxth	r2, r3
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801040a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801040e:	4618      	mov	r0, r3
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bdb0      	pop	{r4, r5, r7, pc}
 8010416:	bf00      	nop
 8010418:	200043c4 	.word	0x200043c4
 801041c:	08018314 	.word	0x08018314
 8010420:	08018318 	.word	0x08018318
 8010424:	10624dd3 	.word	0x10624dd3

08010428 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b08a      	sub	sp, #40	@ 0x28
 801042c:	af02      	add	r7, sp, #8
 801042e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010434:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8010436:	2300      	movs	r3, #0
 8010438:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	2200      	movs	r2, #0
 801043e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8010440:	2106      	movs	r1, #6
 8010442:	69b8      	ldr	r0, [r7, #24]
 8010444:	f000 fbee 	bl	8010c24 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8010448:	f107 0308 	add.w	r3, r7, #8
 801044c:	2201      	movs	r2, #1
 801044e:	69b9      	ldr	r1, [r7, #24]
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f001 f8a3 	bl	801159c <dhcp_create_msg>
 8010456:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d04b      	beq.n	80104f6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010464:	8938      	ldrh	r0, [r7, #8]
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801046c:	2302      	movs	r3, #2
 801046e:	2239      	movs	r2, #57	@ 0x39
 8010470:	f000 fbf2 	bl	8010c58 <dhcp_option>
 8010474:	4603      	mov	r3, r0
 8010476:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010478:	8938      	ldrh	r0, [r7, #8]
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010484:	461a      	mov	r2, r3
 8010486:	f000 fc41 	bl	8010d0c <dhcp_option_short>
 801048a:	4603      	mov	r3, r0
 801048c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801048e:	8938      	ldrh	r0, [r7, #8]
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010496:	2304      	movs	r3, #4
 8010498:	2237      	movs	r2, #55	@ 0x37
 801049a:	f000 fbdd 	bl	8010c58 <dhcp_option>
 801049e:	4603      	mov	r3, r0
 80104a0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104a2:	2300      	movs	r3, #0
 80104a4:	77fb      	strb	r3, [r7, #31]
 80104a6:	e00e      	b.n	80104c6 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80104a8:	8938      	ldrh	r0, [r7, #8]
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80104b0:	7ffb      	ldrb	r3, [r7, #31]
 80104b2:	4a29      	ldr	r2, [pc, #164]	@ (8010558 <dhcp_discover+0x130>)
 80104b4:	5cd3      	ldrb	r3, [r2, r3]
 80104b6:	461a      	mov	r2, r3
 80104b8:	f000 fc02 	bl	8010cc0 <dhcp_option_byte>
 80104bc:	4603      	mov	r3, r0
 80104be:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80104c0:	7ffb      	ldrb	r3, [r7, #31]
 80104c2:	3301      	adds	r3, #1
 80104c4:	77fb      	strb	r3, [r7, #31]
 80104c6:	7ffb      	ldrb	r3, [r7, #31]
 80104c8:	2b03      	cmp	r3, #3
 80104ca:	d9ed      	bls.n	80104a8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80104cc:	8938      	ldrh	r0, [r7, #8]
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	33f0      	adds	r3, #240	@ 0xf0
 80104d2:	693a      	ldr	r2, [r7, #16]
 80104d4:	4619      	mov	r1, r3
 80104d6:	f001 f937 	bl	8011748 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80104da:	4b20      	ldr	r3, [pc, #128]	@ (801055c <dhcp_discover+0x134>)
 80104dc:	6818      	ldr	r0, [r3, #0]
 80104de:	4b20      	ldr	r3, [pc, #128]	@ (8010560 <dhcp_discover+0x138>)
 80104e0:	9301      	str	r3, [sp, #4]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	9300      	str	r3, [sp, #0]
 80104e6:	2343      	movs	r3, #67	@ 0x43
 80104e8:	4a1e      	ldr	r2, [pc, #120]	@ (8010564 <dhcp_discover+0x13c>)
 80104ea:	6939      	ldr	r1, [r7, #16]
 80104ec:	f7ff f804 	bl	800f4f8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80104f0:	6938      	ldr	r0, [r7, #16]
 80104f2:	f7f7 ff8f 	bl	8008414 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	799b      	ldrb	r3, [r3, #6]
 80104fa:	2bff      	cmp	r3, #255	@ 0xff
 80104fc:	d005      	beq.n	801050a <dhcp_discover+0xe2>
    dhcp->tries++;
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	799b      	ldrb	r3, [r3, #6]
 8010502:	3301      	adds	r3, #1
 8010504:	b2da      	uxtb	r2, r3
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801050a:	69bb      	ldr	r3, [r7, #24]
 801050c:	799b      	ldrb	r3, [r3, #6]
 801050e:	2b05      	cmp	r3, #5
 8010510:	d80d      	bhi.n	801052e <dhcp_discover+0x106>
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	799b      	ldrb	r3, [r3, #6]
 8010516:	461a      	mov	r2, r3
 8010518:	2301      	movs	r3, #1
 801051a:	4093      	lsls	r3, r2
 801051c:	b29b      	uxth	r3, r3
 801051e:	461a      	mov	r2, r3
 8010520:	0152      	lsls	r2, r2, #5
 8010522:	1ad2      	subs	r2, r2, r3
 8010524:	0092      	lsls	r2, r2, #2
 8010526:	4413      	add	r3, r2
 8010528:	00db      	lsls	r3, r3, #3
 801052a:	b29b      	uxth	r3, r3
 801052c:	e001      	b.n	8010532 <dhcp_discover+0x10a>
 801052e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8010532:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010534:	897b      	ldrh	r3, [r7, #10]
 8010536:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801053a:	4a0b      	ldr	r2, [pc, #44]	@ (8010568 <dhcp_discover+0x140>)
 801053c:	fb82 1203 	smull	r1, r2, r2, r3
 8010540:	1152      	asrs	r2, r2, #5
 8010542:	17db      	asrs	r3, r3, #31
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	b29a      	uxth	r2, r3
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801054c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010550:	4618      	mov	r0, r3
 8010552:	3720      	adds	r7, #32
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	20000014 	.word	0x20000014
 801055c:	200043c4 	.word	0x200043c4
 8010560:	08018314 	.word	0x08018314
 8010564:	08018318 	.word	0x08018318
 8010568:	10624dd3 	.word	0x10624dd3

0801056c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801056c:	b580      	push	{r7, lr}
 801056e:	b088      	sub	sp, #32
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d107      	bne.n	801058a <dhcp_bind+0x1e>
 801057a:	4b64      	ldr	r3, [pc, #400]	@ (801070c <dhcp_bind+0x1a0>)
 801057c:	f240 4215 	movw	r2, #1045	@ 0x415
 8010580:	4963      	ldr	r1, [pc, #396]	@ (8010710 <dhcp_bind+0x1a4>)
 8010582:	4864      	ldr	r0, [pc, #400]	@ (8010714 <dhcp_bind+0x1a8>)
 8010584:	f003 fdcc 	bl	8014120 <iprintf>
 8010588:	e0bc      	b.n	8010704 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801058e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010590:	69bb      	ldr	r3, [r7, #24]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d107      	bne.n	80105a6 <dhcp_bind+0x3a>
 8010596:	4b5d      	ldr	r3, [pc, #372]	@ (801070c <dhcp_bind+0x1a0>)
 8010598:	f240 4217 	movw	r2, #1047	@ 0x417
 801059c:	495e      	ldr	r1, [pc, #376]	@ (8010718 <dhcp_bind+0x1ac>)
 801059e:	485d      	ldr	r0, [pc, #372]	@ (8010714 <dhcp_bind+0x1a8>)
 80105a0:	f003 fdbe 	bl	8014120 <iprintf>
 80105a4:	e0ae      	b.n	8010704 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80105a6:	69bb      	ldr	r3, [r7, #24]
 80105a8:	2200      	movs	r2, #0
 80105aa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b4:	d019      	beq.n	80105ea <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80105b6:	69bb      	ldr	r3, [r7, #24]
 80105b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105ba:	331e      	adds	r3, #30
 80105bc:	4a57      	ldr	r2, [pc, #348]	@ (801071c <dhcp_bind+0x1b0>)
 80105be:	fba2 2303 	umull	r2, r3, r2, r3
 80105c2:	095b      	lsrs	r3, r3, #5
 80105c4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80105c6:	69fb      	ldr	r3, [r7, #28]
 80105c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80105cc:	d302      	bcc.n	80105d4 <dhcp_bind+0x68>
      timeout = 0xffff;
 80105ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80105d2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	b29a      	uxth	r2, r3
 80105d8:	69bb      	ldr	r3, [r7, #24]
 80105da:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80105dc:	69bb      	ldr	r3, [r7, #24]
 80105de:	8a9b      	ldrh	r3, [r3, #20]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d102      	bne.n	80105ea <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80105e4:	69bb      	ldr	r3, [r7, #24]
 80105e6:	2201      	movs	r2, #1
 80105e8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105f2:	d01d      	beq.n	8010630 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80105f4:	69bb      	ldr	r3, [r7, #24]
 80105f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105f8:	331e      	adds	r3, #30
 80105fa:	4a48      	ldr	r2, [pc, #288]	@ (801071c <dhcp_bind+0x1b0>)
 80105fc:	fba2 2303 	umull	r2, r3, r2, r3
 8010600:	095b      	lsrs	r3, r3, #5
 8010602:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010604:	69fb      	ldr	r3, [r7, #28]
 8010606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801060a:	d302      	bcc.n	8010612 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801060c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010610:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010612:	69fb      	ldr	r3, [r7, #28]
 8010614:	b29a      	uxth	r2, r3
 8010616:	69bb      	ldr	r3, [r7, #24]
 8010618:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801061a:	69bb      	ldr	r3, [r7, #24]
 801061c:	895b      	ldrh	r3, [r3, #10]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d102      	bne.n	8010628 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	2201      	movs	r2, #1
 8010626:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8010628:	69bb      	ldr	r3, [r7, #24]
 801062a:	895a      	ldrh	r2, [r3, #10]
 801062c:	69bb      	ldr	r3, [r7, #24]
 801062e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8010630:	69bb      	ldr	r3, [r7, #24]
 8010632:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010638:	d01d      	beq.n	8010676 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801063e:	331e      	adds	r3, #30
 8010640:	4a36      	ldr	r2, [pc, #216]	@ (801071c <dhcp_bind+0x1b0>)
 8010642:	fba2 2303 	umull	r2, r3, r2, r3
 8010646:	095b      	lsrs	r3, r3, #5
 8010648:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010650:	d302      	bcc.n	8010658 <dhcp_bind+0xec>
      timeout = 0xffff;
 8010652:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010656:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8010658:	69fb      	ldr	r3, [r7, #28]
 801065a:	b29a      	uxth	r2, r3
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8010660:	69bb      	ldr	r3, [r7, #24]
 8010662:	899b      	ldrh	r3, [r3, #12]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d102      	bne.n	801066e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8010668:	69bb      	ldr	r3, [r7, #24]
 801066a:	2201      	movs	r2, #1
 801066c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	899a      	ldrh	r2, [r3, #12]
 8010672:	69bb      	ldr	r3, [r7, #24]
 8010674:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	895a      	ldrh	r2, [r3, #10]
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	899b      	ldrh	r3, [r3, #12]
 801067e:	429a      	cmp	r2, r3
 8010680:	d306      	bcc.n	8010690 <dhcp_bind+0x124>
 8010682:	69bb      	ldr	r3, [r7, #24]
 8010684:	899b      	ldrh	r3, [r3, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d002      	beq.n	8010690 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	2200      	movs	r2, #0
 801068e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8010690:	69bb      	ldr	r3, [r7, #24]
 8010692:	79db      	ldrb	r3, [r3, #7]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d003      	beq.n	80106a0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	6a1b      	ldr	r3, [r3, #32]
 801069c:	613b      	str	r3, [r7, #16]
 801069e:	e014      	b.n	80106ca <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80106a0:	69bb      	ldr	r3, [r7, #24]
 80106a2:	331c      	adds	r3, #28
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80106a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	db02      	blt.n	80106b6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80106b0:	23ff      	movs	r3, #255	@ 0xff
 80106b2:	613b      	str	r3, [r7, #16]
 80106b4:	e009      	b.n	80106ca <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80106b6:	7dfb      	ldrb	r3, [r7, #23]
 80106b8:	2bbf      	cmp	r3, #191	@ 0xbf
 80106ba:	d903      	bls.n	80106c4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80106bc:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80106c0:	613b      	str	r3, [r7, #16]
 80106c2:	e002      	b.n	80106ca <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80106c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106c8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106ce:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d108      	bne.n	80106e8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80106d6:	69bb      	ldr	r3, [r7, #24]
 80106d8:	69da      	ldr	r2, [r3, #28]
 80106da:	693b      	ldr	r3, [r7, #16]
 80106dc:	4013      	ands	r3, r2
 80106de:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80106e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80106e8:	210a      	movs	r1, #10
 80106ea:	69b8      	ldr	r0, [r7, #24]
 80106ec:	f000 fa9a 	bl	8010c24 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	f103 011c 	add.w	r1, r3, #28
 80106f6:	f107 030c 	add.w	r3, r7, #12
 80106fa:	f107 0210 	add.w	r2, r7, #16
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f7f7 f9a8 	bl	8007a54 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010704:	3720      	adds	r7, #32
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}
 801070a:	bf00      	nop
 801070c:	08017770 	.word	0x08017770
 8010710:	080178d0 	.word	0x080178d0
 8010714:	080177d0 	.word	0x080177d0
 8010718:	080178ec 	.word	0x080178ec
 801071c:	88888889 	.word	0x88888889

08010720 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b08a      	sub	sp, #40	@ 0x28
 8010724:	af02      	add	r7, sp, #8
 8010726:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801072c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801072e:	2105      	movs	r1, #5
 8010730:	69b8      	ldr	r0, [r7, #24]
 8010732:	f000 fa77 	bl	8010c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010736:	f107 030c 	add.w	r3, r7, #12
 801073a:	2203      	movs	r2, #3
 801073c:	69b9      	ldr	r1, [r7, #24]
 801073e:	6878      	ldr	r0, [r7, #4]
 8010740:	f000 ff2c 	bl	801159c <dhcp_create_msg>
 8010744:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d04e      	beq.n	80107ea <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	685b      	ldr	r3, [r3, #4]
 8010750:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010752:	89b8      	ldrh	r0, [r7, #12]
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801075a:	2302      	movs	r3, #2
 801075c:	2239      	movs	r2, #57	@ 0x39
 801075e:	f000 fa7b 	bl	8010c58 <dhcp_option>
 8010762:	4603      	mov	r3, r0
 8010764:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010766:	89b8      	ldrh	r0, [r7, #12]
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010772:	461a      	mov	r2, r3
 8010774:	f000 faca 	bl	8010d0c <dhcp_option_short>
 8010778:	4603      	mov	r3, r0
 801077a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801077c:	89b8      	ldrh	r0, [r7, #12]
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010784:	2304      	movs	r3, #4
 8010786:	2237      	movs	r2, #55	@ 0x37
 8010788:	f000 fa66 	bl	8010c58 <dhcp_option>
 801078c:	4603      	mov	r3, r0
 801078e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010790:	2300      	movs	r3, #0
 8010792:	77bb      	strb	r3, [r7, #30]
 8010794:	e00e      	b.n	80107b4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010796:	89b8      	ldrh	r0, [r7, #12]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801079e:	7fbb      	ldrb	r3, [r7, #30]
 80107a0:	4a29      	ldr	r2, [pc, #164]	@ (8010848 <dhcp_renew+0x128>)
 80107a2:	5cd3      	ldrb	r3, [r2, r3]
 80107a4:	461a      	mov	r2, r3
 80107a6:	f000 fa8b 	bl	8010cc0 <dhcp_option_byte>
 80107aa:	4603      	mov	r3, r0
 80107ac:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80107ae:	7fbb      	ldrb	r3, [r7, #30]
 80107b0:	3301      	adds	r3, #1
 80107b2:	77bb      	strb	r3, [r7, #30]
 80107b4:	7fbb      	ldrb	r3, [r7, #30]
 80107b6:	2b03      	cmp	r3, #3
 80107b8:	d9ed      	bls.n	8010796 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80107ba:	89b8      	ldrh	r0, [r7, #12]
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	33f0      	adds	r3, #240	@ 0xf0
 80107c0:	697a      	ldr	r2, [r7, #20]
 80107c2:	4619      	mov	r1, r3
 80107c4:	f000 ffc0 	bl	8011748 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80107c8:	4b20      	ldr	r3, [pc, #128]	@ (801084c <dhcp_renew+0x12c>)
 80107ca:	6818      	ldr	r0, [r3, #0]
 80107cc:	69bb      	ldr	r3, [r7, #24]
 80107ce:	f103 0218 	add.w	r2, r3, #24
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	9300      	str	r3, [sp, #0]
 80107d6:	2343      	movs	r3, #67	@ 0x43
 80107d8:	6979      	ldr	r1, [r7, #20]
 80107da:	f7fe fe19 	bl	800f410 <udp_sendto_if>
 80107de:	4603      	mov	r3, r0
 80107e0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80107e2:	6978      	ldr	r0, [r7, #20]
 80107e4:	f7f7 fe16 	bl	8008414 <pbuf_free>
 80107e8:	e001      	b.n	80107ee <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80107ea:	23ff      	movs	r3, #255	@ 0xff
 80107ec:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	799b      	ldrb	r3, [r3, #6]
 80107f2:	2bff      	cmp	r3, #255	@ 0xff
 80107f4:	d005      	beq.n	8010802 <dhcp_renew+0xe2>
    dhcp->tries++;
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	799b      	ldrb	r3, [r3, #6]
 80107fa:	3301      	adds	r3, #1
 80107fc:	b2da      	uxtb	r2, r3
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	799b      	ldrb	r3, [r3, #6]
 8010806:	2b09      	cmp	r3, #9
 8010808:	d809      	bhi.n	801081e <dhcp_renew+0xfe>
 801080a:	69bb      	ldr	r3, [r7, #24]
 801080c:	799b      	ldrb	r3, [r3, #6]
 801080e:	461a      	mov	r2, r3
 8010810:	0152      	lsls	r2, r2, #5
 8010812:	1ad2      	subs	r2, r2, r3
 8010814:	0092      	lsls	r2, r2, #2
 8010816:	4413      	add	r3, r2
 8010818:	011b      	lsls	r3, r3, #4
 801081a:	b29b      	uxth	r3, r3
 801081c:	e001      	b.n	8010822 <dhcp_renew+0x102>
 801081e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010822:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010824:	89fb      	ldrh	r3, [r7, #14]
 8010826:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801082a:	4a09      	ldr	r2, [pc, #36]	@ (8010850 <dhcp_renew+0x130>)
 801082c:	fb82 1203 	smull	r1, r2, r2, r3
 8010830:	1152      	asrs	r2, r2, #5
 8010832:	17db      	asrs	r3, r3, #31
 8010834:	1ad3      	subs	r3, r2, r3
 8010836:	b29a      	uxth	r2, r3
 8010838:	69bb      	ldr	r3, [r7, #24]
 801083a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801083c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010840:	4618      	mov	r0, r3
 8010842:	3720      	adds	r7, #32
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	20000014 	.word	0x20000014
 801084c:	200043c4 	.word	0x200043c4
 8010850:	10624dd3 	.word	0x10624dd3

08010854 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b08a      	sub	sp, #40	@ 0x28
 8010858:	af02      	add	r7, sp, #8
 801085a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010860:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8010862:	2104      	movs	r1, #4
 8010864:	69b8      	ldr	r0, [r7, #24]
 8010866:	f000 f9dd 	bl	8010c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801086a:	f107 030c 	add.w	r3, r7, #12
 801086e:	2203      	movs	r2, #3
 8010870:	69b9      	ldr	r1, [r7, #24]
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f000 fe92 	bl	801159c <dhcp_create_msg>
 8010878:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d04c      	beq.n	801091a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	685b      	ldr	r3, [r3, #4]
 8010884:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010886:	89b8      	ldrh	r0, [r7, #12]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801088e:	2302      	movs	r3, #2
 8010890:	2239      	movs	r2, #57	@ 0x39
 8010892:	f000 f9e1 	bl	8010c58 <dhcp_option>
 8010896:	4603      	mov	r3, r0
 8010898:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801089a:	89b8      	ldrh	r0, [r7, #12]
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80108a6:	461a      	mov	r2, r3
 80108a8:	f000 fa30 	bl	8010d0c <dhcp_option_short>
 80108ac:	4603      	mov	r3, r0
 80108ae:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80108b0:	89b8      	ldrh	r0, [r7, #12]
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108b8:	2304      	movs	r3, #4
 80108ba:	2237      	movs	r2, #55	@ 0x37
 80108bc:	f000 f9cc 	bl	8010c58 <dhcp_option>
 80108c0:	4603      	mov	r3, r0
 80108c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108c4:	2300      	movs	r3, #0
 80108c6:	77bb      	strb	r3, [r7, #30]
 80108c8:	e00e      	b.n	80108e8 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80108ca:	89b8      	ldrh	r0, [r7, #12]
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80108d2:	7fbb      	ldrb	r3, [r7, #30]
 80108d4:	4a28      	ldr	r2, [pc, #160]	@ (8010978 <dhcp_rebind+0x124>)
 80108d6:	5cd3      	ldrb	r3, [r2, r3]
 80108d8:	461a      	mov	r2, r3
 80108da:	f000 f9f1 	bl	8010cc0 <dhcp_option_byte>
 80108de:	4603      	mov	r3, r0
 80108e0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108e2:	7fbb      	ldrb	r3, [r7, #30]
 80108e4:	3301      	adds	r3, #1
 80108e6:	77bb      	strb	r3, [r7, #30]
 80108e8:	7fbb      	ldrb	r3, [r7, #30]
 80108ea:	2b03      	cmp	r3, #3
 80108ec:	d9ed      	bls.n	80108ca <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80108ee:	89b8      	ldrh	r0, [r7, #12]
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	33f0      	adds	r3, #240	@ 0xf0
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	4619      	mov	r1, r3
 80108f8:	f000 ff26 	bl	8011748 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80108fc:	4b1f      	ldr	r3, [pc, #124]	@ (801097c <dhcp_rebind+0x128>)
 80108fe:	6818      	ldr	r0, [r3, #0]
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	2343      	movs	r3, #67	@ 0x43
 8010906:	4a1e      	ldr	r2, [pc, #120]	@ (8010980 <dhcp_rebind+0x12c>)
 8010908:	6979      	ldr	r1, [r7, #20]
 801090a:	f7fe fd81 	bl	800f410 <udp_sendto_if>
 801090e:	4603      	mov	r3, r0
 8010910:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010912:	6978      	ldr	r0, [r7, #20]
 8010914:	f7f7 fd7e 	bl	8008414 <pbuf_free>
 8010918:	e001      	b.n	801091e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801091a:	23ff      	movs	r3, #255	@ 0xff
 801091c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801091e:	69bb      	ldr	r3, [r7, #24]
 8010920:	799b      	ldrb	r3, [r3, #6]
 8010922:	2bff      	cmp	r3, #255	@ 0xff
 8010924:	d005      	beq.n	8010932 <dhcp_rebind+0xde>
    dhcp->tries++;
 8010926:	69bb      	ldr	r3, [r7, #24]
 8010928:	799b      	ldrb	r3, [r3, #6]
 801092a:	3301      	adds	r3, #1
 801092c:	b2da      	uxtb	r2, r3
 801092e:	69bb      	ldr	r3, [r7, #24]
 8010930:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	799b      	ldrb	r3, [r3, #6]
 8010936:	2b09      	cmp	r3, #9
 8010938:	d809      	bhi.n	801094e <dhcp_rebind+0xfa>
 801093a:	69bb      	ldr	r3, [r7, #24]
 801093c:	799b      	ldrb	r3, [r3, #6]
 801093e:	461a      	mov	r2, r3
 8010940:	0152      	lsls	r2, r2, #5
 8010942:	1ad2      	subs	r2, r2, r3
 8010944:	0092      	lsls	r2, r2, #2
 8010946:	4413      	add	r3, r2
 8010948:	00db      	lsls	r3, r3, #3
 801094a:	b29b      	uxth	r3, r3
 801094c:	e001      	b.n	8010952 <dhcp_rebind+0xfe>
 801094e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010952:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010954:	89fb      	ldrh	r3, [r7, #14]
 8010956:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801095a:	4a0a      	ldr	r2, [pc, #40]	@ (8010984 <dhcp_rebind+0x130>)
 801095c:	fb82 1203 	smull	r1, r2, r2, r3
 8010960:	1152      	asrs	r2, r2, #5
 8010962:	17db      	asrs	r3, r3, #31
 8010964:	1ad3      	subs	r3, r2, r3
 8010966:	b29a      	uxth	r2, r3
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801096c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010970:	4618      	mov	r0, r3
 8010972:	3720      	adds	r7, #32
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}
 8010978:	20000014 	.word	0x20000014
 801097c:	200043c4 	.word	0x200043c4
 8010980:	08018318 	.word	0x08018318
 8010984:	10624dd3 	.word	0x10624dd3

08010988 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010988:	b5b0      	push	{r4, r5, r7, lr}
 801098a:	b08a      	sub	sp, #40	@ 0x28
 801098c:	af02      	add	r7, sp, #8
 801098e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010994:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010996:	2103      	movs	r1, #3
 8010998:	69b8      	ldr	r0, [r7, #24]
 801099a:	f000 f943 	bl	8010c24 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801099e:	f107 030c 	add.w	r3, r7, #12
 80109a2:	2203      	movs	r2, #3
 80109a4:	69b9      	ldr	r1, [r7, #24]
 80109a6:	6878      	ldr	r0, [r7, #4]
 80109a8:	f000 fdf8 	bl	801159c <dhcp_create_msg>
 80109ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d066      	beq.n	8010a82 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80109ba:	89b8      	ldrh	r0, [r7, #12]
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80109c2:	2302      	movs	r3, #2
 80109c4:	2239      	movs	r2, #57	@ 0x39
 80109c6:	f000 f947 	bl	8010c58 <dhcp_option>
 80109ca:	4603      	mov	r3, r0
 80109cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80109ce:	89b8      	ldrh	r0, [r7, #12]
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	33f0      	adds	r3, #240	@ 0xf0
 80109d4:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80109d8:	4619      	mov	r1, r3
 80109da:	f000 f997 	bl	8010d0c <dhcp_option_short>
 80109de:	4603      	mov	r3, r0
 80109e0:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80109e2:	89b8      	ldrh	r0, [r7, #12]
 80109e4:	693b      	ldr	r3, [r7, #16]
 80109e6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80109ea:	2304      	movs	r3, #4
 80109ec:	2232      	movs	r2, #50	@ 0x32
 80109ee:	f000 f933 	bl	8010c58 <dhcp_option>
 80109f2:	4603      	mov	r3, r0
 80109f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80109f6:	89bc      	ldrh	r4, [r7, #12]
 80109f8:	693b      	ldr	r3, [r7, #16]
 80109fa:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80109fe:	69bb      	ldr	r3, [r7, #24]
 8010a00:	69db      	ldr	r3, [r3, #28]
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7f5 fd8f 	bl	8006526 <lwip_htonl>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	461a      	mov	r2, r3
 8010a0c:	4629      	mov	r1, r5
 8010a0e:	4620      	mov	r0, r4
 8010a10:	f000 f9ae 	bl	8010d70 <dhcp_option_long>
 8010a14:	4603      	mov	r3, r0
 8010a16:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010a18:	89b8      	ldrh	r0, [r7, #12]
 8010a1a:	693b      	ldr	r3, [r7, #16]
 8010a1c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010a20:	2304      	movs	r3, #4
 8010a22:	2237      	movs	r2, #55	@ 0x37
 8010a24:	f000 f918 	bl	8010c58 <dhcp_option>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	77bb      	strb	r3, [r7, #30]
 8010a30:	e00e      	b.n	8010a50 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010a32:	89b8      	ldrh	r0, [r7, #12]
 8010a34:	693b      	ldr	r3, [r7, #16]
 8010a36:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010a3a:	7fbb      	ldrb	r3, [r7, #30]
 8010a3c:	4a28      	ldr	r2, [pc, #160]	@ (8010ae0 <dhcp_reboot+0x158>)
 8010a3e:	5cd3      	ldrb	r3, [r2, r3]
 8010a40:	461a      	mov	r2, r3
 8010a42:	f000 f93d 	bl	8010cc0 <dhcp_option_byte>
 8010a46:	4603      	mov	r3, r0
 8010a48:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a4a:	7fbb      	ldrb	r3, [r7, #30]
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	77bb      	strb	r3, [r7, #30]
 8010a50:	7fbb      	ldrb	r3, [r7, #30]
 8010a52:	2b03      	cmp	r3, #3
 8010a54:	d9ed      	bls.n	8010a32 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010a56:	89b8      	ldrh	r0, [r7, #12]
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	33f0      	adds	r3, #240	@ 0xf0
 8010a5c:	697a      	ldr	r2, [r7, #20]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	f000 fe72 	bl	8011748 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010a64:	4b1f      	ldr	r3, [pc, #124]	@ (8010ae4 <dhcp_reboot+0x15c>)
 8010a66:	6818      	ldr	r0, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	9300      	str	r3, [sp, #0]
 8010a6c:	2343      	movs	r3, #67	@ 0x43
 8010a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8010ae8 <dhcp_reboot+0x160>)
 8010a70:	6979      	ldr	r1, [r7, #20]
 8010a72:	f7fe fccd 	bl	800f410 <udp_sendto_if>
 8010a76:	4603      	mov	r3, r0
 8010a78:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010a7a:	6978      	ldr	r0, [r7, #20]
 8010a7c:	f7f7 fcca 	bl	8008414 <pbuf_free>
 8010a80:	e001      	b.n	8010a86 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010a82:	23ff      	movs	r3, #255	@ 0xff
 8010a84:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010a86:	69bb      	ldr	r3, [r7, #24]
 8010a88:	799b      	ldrb	r3, [r3, #6]
 8010a8a:	2bff      	cmp	r3, #255	@ 0xff
 8010a8c:	d005      	beq.n	8010a9a <dhcp_reboot+0x112>
    dhcp->tries++;
 8010a8e:	69bb      	ldr	r3, [r7, #24]
 8010a90:	799b      	ldrb	r3, [r3, #6]
 8010a92:	3301      	adds	r3, #1
 8010a94:	b2da      	uxtb	r2, r3
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8010a9a:	69bb      	ldr	r3, [r7, #24]
 8010a9c:	799b      	ldrb	r3, [r3, #6]
 8010a9e:	2b09      	cmp	r3, #9
 8010aa0:	d809      	bhi.n	8010ab6 <dhcp_reboot+0x12e>
 8010aa2:	69bb      	ldr	r3, [r7, #24]
 8010aa4:	799b      	ldrb	r3, [r3, #6]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	0152      	lsls	r2, r2, #5
 8010aaa:	1ad2      	subs	r2, r2, r3
 8010aac:	0092      	lsls	r2, r2, #2
 8010aae:	4413      	add	r3, r2
 8010ab0:	00db      	lsls	r3, r3, #3
 8010ab2:	b29b      	uxth	r3, r3
 8010ab4:	e001      	b.n	8010aba <dhcp_reboot+0x132>
 8010ab6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8010aba:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010abc:	89fb      	ldrh	r3, [r7, #14]
 8010abe:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8010ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8010aec <dhcp_reboot+0x164>)
 8010ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8010ac8:	1152      	asrs	r2, r2, #5
 8010aca:	17db      	asrs	r3, r3, #31
 8010acc:	1ad3      	subs	r3, r2, r3
 8010ace:	b29a      	uxth	r2, r3
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010ad4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3720      	adds	r7, #32
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bdb0      	pop	{r4, r5, r7, pc}
 8010ae0:	20000014 	.word	0x20000014
 8010ae4:	200043c4 	.word	0x200043c4
 8010ae8:	08018318 	.word	0x08018318
 8010aec:	10624dd3 	.word	0x10624dd3

08010af0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8010af0:	b5b0      	push	{r4, r5, r7, lr}
 8010af2:	b08a      	sub	sp, #40	@ 0x28
 8010af4:	af02      	add	r7, sp, #8
 8010af6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010afc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8010afe:	69fb      	ldr	r3, [r7, #28]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	f000 8084 	beq.w	8010c0e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	795b      	ldrb	r3, [r3, #5]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 8081 	beq.w	8010c12 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010b10:	69fb      	ldr	r3, [r7, #28]
 8010b12:	699b      	ldr	r3, [r3, #24]
 8010b14:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010b16:	69fb      	ldr	r3, [r7, #28]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010b22:	69fb      	ldr	r3, [r7, #28]
 8010b24:	2200      	movs	r2, #0
 8010b26:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010b28:	69fb      	ldr	r3, [r7, #28]
 8010b2a:	2200      	movs	r2, #0
 8010b2c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010b2e:	69fb      	ldr	r3, [r7, #28]
 8010b30:	2200      	movs	r2, #0
 8010b32:	631a      	str	r2, [r3, #48]	@ 0x30
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010b3c:	69fb      	ldr	r3, [r7, #28]
 8010b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b40:	69fb      	ldr	r3, [r7, #28]
 8010b42:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010b44:	69fb      	ldr	r3, [r7, #28]
 8010b46:	2200      	movs	r2, #0
 8010b48:	829a      	strh	r2, [r3, #20]
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	8a9a      	ldrh	r2, [r3, #20]
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	825a      	strh	r2, [r3, #18]
 8010b52:	69fb      	ldr	r3, [r7, #28]
 8010b54:	8a5a      	ldrh	r2, [r3, #18]
 8010b56:	69fb      	ldr	r3, [r7, #28]
 8010b58:	821a      	strh	r2, [r3, #16]
 8010b5a:	69fb      	ldr	r3, [r7, #28]
 8010b5c:	8a1a      	ldrh	r2, [r3, #16]
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f000 fe1e 	bl	80117a4 <dhcp_supplied_address>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d03b      	beq.n	8010be6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8010b6e:	f107 030e 	add.w	r3, r7, #14
 8010b72:	2207      	movs	r2, #7
 8010b74:	69f9      	ldr	r1, [r7, #28]
 8010b76:	6878      	ldr	r0, [r7, #4]
 8010b78:	f000 fd10 	bl	801159c <dhcp_create_msg>
 8010b7c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8010b7e:	69bb      	ldr	r3, [r7, #24]
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	d030      	beq.n	8010be6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010b84:	69bb      	ldr	r3, [r7, #24]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010b8a:	89f8      	ldrh	r0, [r7, #14]
 8010b8c:	697b      	ldr	r3, [r7, #20]
 8010b8e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8010b92:	2304      	movs	r3, #4
 8010b94:	2236      	movs	r2, #54	@ 0x36
 8010b96:	f000 f85f 	bl	8010c58 <dhcp_option>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010b9e:	89fc      	ldrh	r4, [r7, #14]
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8010ba6:	693b      	ldr	r3, [r7, #16]
 8010ba8:	4618      	mov	r0, r3
 8010baa:	f7f5 fcbc 	bl	8006526 <lwip_htonl>
 8010bae:	4603      	mov	r3, r0
 8010bb0:	461a      	mov	r2, r3
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	4620      	mov	r0, r4
 8010bb6:	f000 f8db 	bl	8010d70 <dhcp_option_long>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010bbe:	89f8      	ldrh	r0, [r7, #14]
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	33f0      	adds	r3, #240	@ 0xf0
 8010bc4:	69ba      	ldr	r2, [r7, #24]
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f000 fdbe 	bl	8011748 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8010bcc:	4b13      	ldr	r3, [pc, #76]	@ (8010c1c <dhcp_release_and_stop+0x12c>)
 8010bce:	6818      	ldr	r0, [r3, #0]
 8010bd0:	f107 0210 	add.w	r2, r7, #16
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	9300      	str	r3, [sp, #0]
 8010bd8:	2343      	movs	r3, #67	@ 0x43
 8010bda:	69b9      	ldr	r1, [r7, #24]
 8010bdc:	f7fe fc18 	bl	800f410 <udp_sendto_if>
      pbuf_free(p_out);
 8010be0:	69b8      	ldr	r0, [r7, #24]
 8010be2:	f7f7 fc17 	bl	8008414 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010be6:	4b0e      	ldr	r3, [pc, #56]	@ (8010c20 <dhcp_release_and_stop+0x130>)
 8010be8:	4a0d      	ldr	r2, [pc, #52]	@ (8010c20 <dhcp_release_and_stop+0x130>)
 8010bea:	490d      	ldr	r1, [pc, #52]	@ (8010c20 <dhcp_release_and_stop+0x130>)
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f7f6 ff31 	bl	8007a54 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010bf2:	2100      	movs	r1, #0
 8010bf4:	69f8      	ldr	r0, [r7, #28]
 8010bf6:	f000 f815 	bl	8010c24 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8010bfa:	69fb      	ldr	r3, [r7, #28]
 8010bfc:	791b      	ldrb	r3, [r3, #4]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d008      	beq.n	8010c14 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010c02:	f7fe ff6b 	bl	800fadc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8010c06:	69fb      	ldr	r3, [r7, #28]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	711a      	strb	r2, [r3, #4]
 8010c0c:	e002      	b.n	8010c14 <dhcp_release_and_stop+0x124>
    return;
 8010c0e:	bf00      	nop
 8010c10:	e000      	b.n	8010c14 <dhcp_release_and_stop+0x124>
    return;
 8010c12:	bf00      	nop
  }
}
 8010c14:	3720      	adds	r7, #32
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bdb0      	pop	{r4, r5, r7, pc}
 8010c1a:	bf00      	nop
 8010c1c:	200043c4 	.word	0x200043c4
 8010c20:	08018314 	.word	0x08018314

08010c24 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
 8010c2c:	460b      	mov	r3, r1
 8010c2e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	795b      	ldrb	r3, [r3, #5]
 8010c34:	78fa      	ldrb	r2, [r7, #3]
 8010c36:	429a      	cmp	r2, r3
 8010c38:	d008      	beq.n	8010c4c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	78fa      	ldrb	r2, [r7, #3]
 8010c3e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2200      	movs	r2, #0
 8010c44:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	811a      	strh	r2, [r3, #8]
  }
}
 8010c4c:	bf00      	nop
 8010c4e:	370c      	adds	r7, #12
 8010c50:	46bd      	mov	sp, r7
 8010c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c56:	4770      	bx	lr

08010c58 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6039      	str	r1, [r7, #0]
 8010c60:	4611      	mov	r1, r2
 8010c62:	461a      	mov	r2, r3
 8010c64:	4603      	mov	r3, r0
 8010c66:	80fb      	strh	r3, [r7, #6]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	717b      	strb	r3, [r7, #5]
 8010c6c:	4613      	mov	r3, r2
 8010c6e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010c70:	88fa      	ldrh	r2, [r7, #6]
 8010c72:	793b      	ldrb	r3, [r7, #4]
 8010c74:	4413      	add	r3, r2
 8010c76:	3302      	adds	r3, #2
 8010c78:	2b44      	cmp	r3, #68	@ 0x44
 8010c7a:	d906      	bls.n	8010c8a <dhcp_option+0x32>
 8010c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb4 <dhcp_option+0x5c>)
 8010c7e:	f240 529a 	movw	r2, #1434	@ 0x59a
 8010c82:	490d      	ldr	r1, [pc, #52]	@ (8010cb8 <dhcp_option+0x60>)
 8010c84:	480d      	ldr	r0, [pc, #52]	@ (8010cbc <dhcp_option+0x64>)
 8010c86:	f003 fa4b 	bl	8014120 <iprintf>
  options[options_out_len++] = option_type;
 8010c8a:	88fb      	ldrh	r3, [r7, #6]
 8010c8c:	1c5a      	adds	r2, r3, #1
 8010c8e:	80fa      	strh	r2, [r7, #6]
 8010c90:	461a      	mov	r2, r3
 8010c92:	683b      	ldr	r3, [r7, #0]
 8010c94:	4413      	add	r3, r2
 8010c96:	797a      	ldrb	r2, [r7, #5]
 8010c98:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8010c9a:	88fb      	ldrh	r3, [r7, #6]
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	80fa      	strh	r2, [r7, #6]
 8010ca0:	461a      	mov	r2, r3
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	4413      	add	r3, r2
 8010ca6:	793a      	ldrb	r2, [r7, #4]
 8010ca8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010caa:	88fb      	ldrh	r3, [r7, #6]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	08017770 	.word	0x08017770
 8010cb8:	08017904 	.word	0x08017904
 8010cbc:	080177d0 	.word	0x080177d0

08010cc0 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	6039      	str	r1, [r7, #0]
 8010cca:	80fb      	strh	r3, [r7, #6]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8010cd0:	88fb      	ldrh	r3, [r7, #6]
 8010cd2:	2b43      	cmp	r3, #67	@ 0x43
 8010cd4:	d906      	bls.n	8010ce4 <dhcp_option_byte+0x24>
 8010cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8010d00 <dhcp_option_byte+0x40>)
 8010cd8:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8010cdc:	4909      	ldr	r1, [pc, #36]	@ (8010d04 <dhcp_option_byte+0x44>)
 8010cde:	480a      	ldr	r0, [pc, #40]	@ (8010d08 <dhcp_option_byte+0x48>)
 8010ce0:	f003 fa1e 	bl	8014120 <iprintf>
  options[options_out_len++] = value;
 8010ce4:	88fb      	ldrh	r3, [r7, #6]
 8010ce6:	1c5a      	adds	r2, r3, #1
 8010ce8:	80fa      	strh	r2, [r7, #6]
 8010cea:	461a      	mov	r2, r3
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	4413      	add	r3, r2
 8010cf0:	797a      	ldrb	r2, [r7, #5]
 8010cf2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010cf4:	88fb      	ldrh	r3, [r7, #6]
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	08017770 	.word	0x08017770
 8010d04:	08017948 	.word	0x08017948
 8010d08:	080177d0 	.word	0x080177d0

08010d0c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	6039      	str	r1, [r7, #0]
 8010d16:	80fb      	strh	r3, [r7, #6]
 8010d18:	4613      	mov	r3, r2
 8010d1a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010d1c:	88fb      	ldrh	r3, [r7, #6]
 8010d1e:	3302      	adds	r3, #2
 8010d20:	2b44      	cmp	r3, #68	@ 0x44
 8010d22:	d906      	bls.n	8010d32 <dhcp_option_short+0x26>
 8010d24:	4b0f      	ldr	r3, [pc, #60]	@ (8010d64 <dhcp_option_short+0x58>)
 8010d26:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8010d2a:	490f      	ldr	r1, [pc, #60]	@ (8010d68 <dhcp_option_short+0x5c>)
 8010d2c:	480f      	ldr	r0, [pc, #60]	@ (8010d6c <dhcp_option_short+0x60>)
 8010d2e:	f003 f9f7 	bl	8014120 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010d32:	88bb      	ldrh	r3, [r7, #4]
 8010d34:	0a1b      	lsrs	r3, r3, #8
 8010d36:	b29a      	uxth	r2, r3
 8010d38:	88fb      	ldrh	r3, [r7, #6]
 8010d3a:	1c59      	adds	r1, r3, #1
 8010d3c:	80f9      	strh	r1, [r7, #6]
 8010d3e:	4619      	mov	r1, r3
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	440b      	add	r3, r1
 8010d44:	b2d2      	uxtb	r2, r2
 8010d46:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8010d48:	88fb      	ldrh	r3, [r7, #6]
 8010d4a:	1c5a      	adds	r2, r3, #1
 8010d4c:	80fa      	strh	r2, [r7, #6]
 8010d4e:	461a      	mov	r2, r3
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	4413      	add	r3, r2
 8010d54:	88ba      	ldrh	r2, [r7, #4]
 8010d56:	b2d2      	uxtb	r2, r2
 8010d58:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010d5a:	88fb      	ldrh	r3, [r7, #6]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}
 8010d64:	08017770 	.word	0x08017770
 8010d68:	08017980 	.word	0x08017980
 8010d6c:	080177d0 	.word	0x080177d0

08010d70 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b084      	sub	sp, #16
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	60b9      	str	r1, [r7, #8]
 8010d7a:	607a      	str	r2, [r7, #4]
 8010d7c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010d7e:	89fb      	ldrh	r3, [r7, #14]
 8010d80:	3304      	adds	r3, #4
 8010d82:	2b44      	cmp	r3, #68	@ 0x44
 8010d84:	d906      	bls.n	8010d94 <dhcp_option_long+0x24>
 8010d86:	4b19      	ldr	r3, [pc, #100]	@ (8010dec <dhcp_option_long+0x7c>)
 8010d88:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8010d8c:	4918      	ldr	r1, [pc, #96]	@ (8010df0 <dhcp_option_long+0x80>)
 8010d8e:	4819      	ldr	r0, [pc, #100]	@ (8010df4 <dhcp_option_long+0x84>)
 8010d90:	f003 f9c6 	bl	8014120 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	0e1a      	lsrs	r2, r3, #24
 8010d98:	89fb      	ldrh	r3, [r7, #14]
 8010d9a:	1c59      	adds	r1, r3, #1
 8010d9c:	81f9      	strh	r1, [r7, #14]
 8010d9e:	4619      	mov	r1, r3
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	440b      	add	r3, r1
 8010da4:	b2d2      	uxtb	r2, r2
 8010da6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	0c1a      	lsrs	r2, r3, #16
 8010dac:	89fb      	ldrh	r3, [r7, #14]
 8010dae:	1c59      	adds	r1, r3, #1
 8010db0:	81f9      	strh	r1, [r7, #14]
 8010db2:	4619      	mov	r1, r3
 8010db4:	68bb      	ldr	r3, [r7, #8]
 8010db6:	440b      	add	r3, r1
 8010db8:	b2d2      	uxtb	r2, r2
 8010dba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	0a1a      	lsrs	r2, r3, #8
 8010dc0:	89fb      	ldrh	r3, [r7, #14]
 8010dc2:	1c59      	adds	r1, r3, #1
 8010dc4:	81f9      	strh	r1, [r7, #14]
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	440b      	add	r3, r1
 8010dcc:	b2d2      	uxtb	r2, r2
 8010dce:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010dd0:	89fb      	ldrh	r3, [r7, #14]
 8010dd2:	1c5a      	adds	r2, r3, #1
 8010dd4:	81fa      	strh	r2, [r7, #14]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	68bb      	ldr	r3, [r7, #8]
 8010dda:	4413      	add	r3, r2
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	b2d2      	uxtb	r2, r2
 8010de0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8010de2:	89fb      	ldrh	r3, [r7, #14]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	08017770 	.word	0x08017770
 8010df0:	080179bc 	.word	0x080179bc
 8010df4:	080177d0 	.word	0x080177d0

08010df8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b090      	sub	sp, #64	@ 0x40
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010e02:	2300      	movs	r3, #0
 8010e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8010e06:	2300      	movs	r3, #0
 8010e08:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010e0a:	220a      	movs	r2, #10
 8010e0c:	2100      	movs	r1, #0
 8010e0e:	48ba      	ldr	r0, [pc, #744]	@ (80110f8 <dhcp_parse_reply+0x300>)
 8010e10:	f003 fa25 	bl	801425e <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	895b      	ldrh	r3, [r3, #10]
 8010e18:	2b2b      	cmp	r3, #43	@ 0x2b
 8010e1a:	d802      	bhi.n	8010e22 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010e1c:	f06f 0301 	mvn.w	r3, #1
 8010e20:	e2ea      	b.n	80113f8 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	685b      	ldr	r3, [r3, #4]
 8010e26:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010e28:	23f0      	movs	r3, #240	@ 0xf0
 8010e2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	891b      	ldrh	r3, [r3, #8]
 8010e30:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e36:	e00c      	b.n	8010e52 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8010e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3a:	895b      	ldrh	r3, [r3, #10]
 8010e3c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8010e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e44:	895b      	ldrh	r3, [r3, #10]
 8010e46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010e48:	1ad3      	subs	r3, r2, r3
 8010e4a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8010e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8010e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d004      	beq.n	8010e62 <dhcp_parse_reply+0x6a>
 8010e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e5a:	895b      	ldrh	r3, [r3, #10]
 8010e5c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d2ea      	bcs.n	8010e38 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8010e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d102      	bne.n	8010e6e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8010e68:	f06f 0301 	mvn.w	r3, #1
 8010e6c:	e2c4      	b.n	80113f8 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8010e6e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e70:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8010e72:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010e74:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8010e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e78:	685b      	ldr	r3, [r3, #4]
 8010e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010e7c:	e267      	b.n	801134e <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8010e7e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e82:	4413      	add	r3, r2
 8010e84:	781b      	ldrb	r3, [r3, #0]
 8010e86:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8010e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e92:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8010e94:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e96:	3302      	adds	r3, #2
 8010e98:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8010e9a:	8bfa      	ldrh	r2, [r7, #30]
 8010e9c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010e9e:	429a      	cmp	r2, r3
 8010ea0:	d202      	bcs.n	8010ea8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8010ea2:	f06f 0301 	mvn.w	r3, #1
 8010ea6:	e2a7      	b.n	80113f8 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8010ea8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010eaa:	3301      	adds	r3, #1
 8010eac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010eae:	8952      	ldrh	r2, [r2, #10]
 8010eb0:	4293      	cmp	r3, r2
 8010eb2:	da07      	bge.n	8010ec4 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8010eb4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8010eb6:	3301      	adds	r3, #1
 8010eb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010eba:	4413      	add	r3, r2
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010ec2:	e00b      	b.n	8010edc <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8010ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d004      	beq.n	8010ed6 <dhcp_parse_reply+0xde>
 8010ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	e000      	b.n	8010ed8 <dhcp_parse_reply+0xe0>
 8010ed6:	2300      	movs	r3, #0
 8010ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8010edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ee0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8010ee4:	7dfb      	ldrb	r3, [r7, #23]
 8010ee6:	2b3b      	cmp	r3, #59	@ 0x3b
 8010ee8:	f200 815a 	bhi.w	80111a0 <dhcp_parse_reply+0x3a8>
 8010eec:	a201      	add	r2, pc, #4	@ (adr r2, 8010ef4 <dhcp_parse_reply+0xfc>)
 8010eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ef2:	bf00      	nop
 8010ef4:	08010fe5 	.word	0x08010fe5
 8010ef8:	08010ff5 	.word	0x08010ff5
 8010efc:	080111a1 	.word	0x080111a1
 8010f00:	08011017 	.word	0x08011017
 8010f04:	080111a1 	.word	0x080111a1
 8010f08:	080111a1 	.word	0x080111a1
 8010f0c:	08011043 	.word	0x08011043
 8010f10:	080111a1 	.word	0x080111a1
 8010f14:	080111a1 	.word	0x080111a1
 8010f18:	080111a1 	.word	0x080111a1
 8010f1c:	080111a1 	.word	0x080111a1
 8010f20:	080111a1 	.word	0x080111a1
 8010f24:	080111a1 	.word	0x080111a1
 8010f28:	080111a1 	.word	0x080111a1
 8010f2c:	080111a1 	.word	0x080111a1
 8010f30:	080111a1 	.word	0x080111a1
 8010f34:	080111a1 	.word	0x080111a1
 8010f38:	080111a1 	.word	0x080111a1
 8010f3c:	080111a1 	.word	0x080111a1
 8010f40:	080111a1 	.word	0x080111a1
 8010f44:	080111a1 	.word	0x080111a1
 8010f48:	080111a1 	.word	0x080111a1
 8010f4c:	080111a1 	.word	0x080111a1
 8010f50:	080111a1 	.word	0x080111a1
 8010f54:	080111a1 	.word	0x080111a1
 8010f58:	080111a1 	.word	0x080111a1
 8010f5c:	080111a1 	.word	0x080111a1
 8010f60:	080111a1 	.word	0x080111a1
 8010f64:	080111a1 	.word	0x080111a1
 8010f68:	080111a1 	.word	0x080111a1
 8010f6c:	080111a1 	.word	0x080111a1
 8010f70:	080111a1 	.word	0x080111a1
 8010f74:	080111a1 	.word	0x080111a1
 8010f78:	080111a1 	.word	0x080111a1
 8010f7c:	080111a1 	.word	0x080111a1
 8010f80:	080111a1 	.word	0x080111a1
 8010f84:	080111a1 	.word	0x080111a1
 8010f88:	080111a1 	.word	0x080111a1
 8010f8c:	080111a1 	.word	0x080111a1
 8010f90:	080111a1 	.word	0x080111a1
 8010f94:	080111a1 	.word	0x080111a1
 8010f98:	080111a1 	.word	0x080111a1
 8010f9c:	080111a1 	.word	0x080111a1
 8010fa0:	080111a1 	.word	0x080111a1
 8010fa4:	080111a1 	.word	0x080111a1
 8010fa8:	080111a1 	.word	0x080111a1
 8010fac:	080111a1 	.word	0x080111a1
 8010fb0:	080111a1 	.word	0x080111a1
 8010fb4:	080111a1 	.word	0x080111a1
 8010fb8:	080111a1 	.word	0x080111a1
 8010fbc:	080111a1 	.word	0x080111a1
 8010fc0:	08011099 	.word	0x08011099
 8010fc4:	080110bb 	.word	0x080110bb
 8010fc8:	08011119 	.word	0x08011119
 8010fcc:	0801113b 	.word	0x0801113b
 8010fd0:	080111a1 	.word	0x080111a1
 8010fd4:	080111a1 	.word	0x080111a1
 8010fd8:	080111a1 	.word	0x080111a1
 8010fdc:	0801115d 	.word	0x0801115d
 8010fe0:	0801117f 	.word	0x0801117f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010fea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010fee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8010ff2:	e0d9      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8010ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ff8:	2b04      	cmp	r3, #4
 8010ffa:	d009      	beq.n	8011010 <dhcp_parse_reply+0x218>
 8010ffc:	4b3f      	ldr	r3, [pc, #252]	@ (80110fc <dhcp_parse_reply+0x304>)
 8010ffe:	f240 622e 	movw	r2, #1582	@ 0x62e
 8011002:	493f      	ldr	r1, [pc, #252]	@ (8011100 <dhcp_parse_reply+0x308>)
 8011004:	483f      	ldr	r0, [pc, #252]	@ (8011104 <dhcp_parse_reply+0x30c>)
 8011006:	f003 f88b 	bl	8014120 <iprintf>
 801100a:	f06f 0305 	mvn.w	r3, #5
 801100e:	e1f3      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011010:	2306      	movs	r3, #6
 8011012:	623b      	str	r3, [r7, #32]
        break;
 8011014:	e0c8      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011016:	2304      	movs	r3, #4
 8011018:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801101c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011020:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011024:	429a      	cmp	r2, r3
 8011026:	d209      	bcs.n	801103c <dhcp_parse_reply+0x244>
 8011028:	4b34      	ldr	r3, [pc, #208]	@ (80110fc <dhcp_parse_reply+0x304>)
 801102a:	f240 6233 	movw	r2, #1587	@ 0x633
 801102e:	4936      	ldr	r1, [pc, #216]	@ (8011108 <dhcp_parse_reply+0x310>)
 8011030:	4834      	ldr	r0, [pc, #208]	@ (8011104 <dhcp_parse_reply+0x30c>)
 8011032:	f003 f875 	bl	8014120 <iprintf>
 8011036:	f06f 0305 	mvn.w	r3, #5
 801103a:	e1dd      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801103c:	2307      	movs	r3, #7
 801103e:	623b      	str	r3, [r7, #32]
        break;
 8011040:	e0b2      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8011042:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011046:	f003 0303 	and.w	r3, r3, #3
 801104a:	b2db      	uxtb	r3, r3
 801104c:	2b00      	cmp	r3, #0
 801104e:	d009      	beq.n	8011064 <dhcp_parse_reply+0x26c>
 8011050:	4b2a      	ldr	r3, [pc, #168]	@ (80110fc <dhcp_parse_reply+0x304>)
 8011052:	f240 6239 	movw	r2, #1593	@ 0x639
 8011056:	492d      	ldr	r1, [pc, #180]	@ (801110c <dhcp_parse_reply+0x314>)
 8011058:	482a      	ldr	r0, [pc, #168]	@ (8011104 <dhcp_parse_reply+0x30c>)
 801105a:	f003 f861 	bl	8014120 <iprintf>
 801105e:	f06f 0305 	mvn.w	r3, #5
 8011062:	e1c9      	b.n	80113f8 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8011064:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011068:	2b08      	cmp	r3, #8
 801106a:	bf28      	it	cs
 801106c:	2308      	movcs	r3, #8
 801106e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011072:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8011076:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801107a:	429a      	cmp	r2, r3
 801107c:	d209      	bcs.n	8011092 <dhcp_parse_reply+0x29a>
 801107e:	4b1f      	ldr	r3, [pc, #124]	@ (80110fc <dhcp_parse_reply+0x304>)
 8011080:	f240 623c 	movw	r2, #1596	@ 0x63c
 8011084:	4920      	ldr	r1, [pc, #128]	@ (8011108 <dhcp_parse_reply+0x310>)
 8011086:	481f      	ldr	r0, [pc, #124]	@ (8011104 <dhcp_parse_reply+0x30c>)
 8011088:	f003 f84a 	bl	8014120 <iprintf>
 801108c:	f06f 0305 	mvn.w	r3, #5
 8011090:	e1b2      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8011092:	2308      	movs	r3, #8
 8011094:	623b      	str	r3, [r7, #32]
        break;
 8011096:	e087      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801109c:	2b04      	cmp	r3, #4
 801109e:	d009      	beq.n	80110b4 <dhcp_parse_reply+0x2bc>
 80110a0:	4b16      	ldr	r3, [pc, #88]	@ (80110fc <dhcp_parse_reply+0x304>)
 80110a2:	f240 6241 	movw	r2, #1601	@ 0x641
 80110a6:	4916      	ldr	r1, [pc, #88]	@ (8011100 <dhcp_parse_reply+0x308>)
 80110a8:	4816      	ldr	r0, [pc, #88]	@ (8011104 <dhcp_parse_reply+0x30c>)
 80110aa:	f003 f839 	bl	8014120 <iprintf>
 80110ae:	f06f 0305 	mvn.w	r3, #5
 80110b2:	e1a1      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80110b4:	2303      	movs	r3, #3
 80110b6:	623b      	str	r3, [r7, #32]
        break;
 80110b8:	e076      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80110ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d009      	beq.n	80110d6 <dhcp_parse_reply+0x2de>
 80110c2:	4b0e      	ldr	r3, [pc, #56]	@ (80110fc <dhcp_parse_reply+0x304>)
 80110c4:	f240 624f 	movw	r2, #1615	@ 0x64f
 80110c8:	4911      	ldr	r1, [pc, #68]	@ (8011110 <dhcp_parse_reply+0x318>)
 80110ca:	480e      	ldr	r0, [pc, #56]	@ (8011104 <dhcp_parse_reply+0x30c>)
 80110cc:	f003 f828 	bl	8014120 <iprintf>
 80110d0:	f06f 0305 	mvn.w	r3, #5
 80110d4:	e190      	b.n	80113f8 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80110d6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80110d8:	2bf0      	cmp	r3, #240	@ 0xf0
 80110da:	d009      	beq.n	80110f0 <dhcp_parse_reply+0x2f8>
 80110dc:	4b07      	ldr	r3, [pc, #28]	@ (80110fc <dhcp_parse_reply+0x304>)
 80110de:	f240 6251 	movw	r2, #1617	@ 0x651
 80110e2:	490c      	ldr	r1, [pc, #48]	@ (8011114 <dhcp_parse_reply+0x31c>)
 80110e4:	4807      	ldr	r0, [pc, #28]	@ (8011104 <dhcp_parse_reply+0x30c>)
 80110e6:	f003 f81b 	bl	8014120 <iprintf>
 80110ea:	f06f 0305 	mvn.w	r3, #5
 80110ee:	e183      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80110f0:	2300      	movs	r3, #0
 80110f2:	623b      	str	r3, [r7, #32]
        break;
 80110f4:	e058      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
 80110f6:	bf00      	nop
 80110f8:	200043b8 	.word	0x200043b8
 80110fc:	08017770 	.word	0x08017770
 8011100:	080179f8 	.word	0x080179f8
 8011104:	080177d0 	.word	0x080177d0
 8011108:	08017a04 	.word	0x08017a04
 801110c:	08017a18 	.word	0x08017a18
 8011110:	08017a28 	.word	0x08017a28
 8011114:	08017a34 	.word	0x08017a34
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011118:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801111c:	2b01      	cmp	r3, #1
 801111e:	d009      	beq.n	8011134 <dhcp_parse_reply+0x33c>
 8011120:	4b9d      	ldr	r3, [pc, #628]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 8011122:	f240 6255 	movw	r2, #1621	@ 0x655
 8011126:	499d      	ldr	r1, [pc, #628]	@ (801139c <dhcp_parse_reply+0x5a4>)
 8011128:	489d      	ldr	r0, [pc, #628]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 801112a:	f002 fff9 	bl	8014120 <iprintf>
 801112e:	f06f 0305 	mvn.w	r3, #5
 8011132:	e161      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011134:	2301      	movs	r3, #1
 8011136:	623b      	str	r3, [r7, #32]
        break;
 8011138:	e036      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801113a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801113e:	2b04      	cmp	r3, #4
 8011140:	d009      	beq.n	8011156 <dhcp_parse_reply+0x35e>
 8011142:	4b95      	ldr	r3, [pc, #596]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 8011144:	f240 6259 	movw	r2, #1625	@ 0x659
 8011148:	4996      	ldr	r1, [pc, #600]	@ (80113a4 <dhcp_parse_reply+0x5ac>)
 801114a:	4895      	ldr	r0, [pc, #596]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 801114c:	f002 ffe8 	bl	8014120 <iprintf>
 8011150:	f06f 0305 	mvn.w	r3, #5
 8011154:	e150      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011156:	2302      	movs	r3, #2
 8011158:	623b      	str	r3, [r7, #32]
        break;
 801115a:	e025      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801115c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011160:	2b04      	cmp	r3, #4
 8011162:	d009      	beq.n	8011178 <dhcp_parse_reply+0x380>
 8011164:	4b8c      	ldr	r3, [pc, #560]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 8011166:	f240 625d 	movw	r2, #1629	@ 0x65d
 801116a:	498e      	ldr	r1, [pc, #568]	@ (80113a4 <dhcp_parse_reply+0x5ac>)
 801116c:	488c      	ldr	r0, [pc, #560]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 801116e:	f002 ffd7 	bl	8014120 <iprintf>
 8011172:	f06f 0305 	mvn.w	r3, #5
 8011176:	e13f      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8011178:	2304      	movs	r3, #4
 801117a:	623b      	str	r3, [r7, #32]
        break;
 801117c:	e014      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801117e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011182:	2b04      	cmp	r3, #4
 8011184:	d009      	beq.n	801119a <dhcp_parse_reply+0x3a2>
 8011186:	4b84      	ldr	r3, [pc, #528]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 8011188:	f240 6261 	movw	r2, #1633	@ 0x661
 801118c:	4985      	ldr	r1, [pc, #532]	@ (80113a4 <dhcp_parse_reply+0x5ac>)
 801118e:	4884      	ldr	r0, [pc, #528]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 8011190:	f002 ffc6 	bl	8014120 <iprintf>
 8011194:	f06f 0305 	mvn.w	r3, #5
 8011198:	e12e      	b.n	80113f8 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 801119a:	2305      	movs	r3, #5
 801119c:	623b      	str	r3, [r7, #32]
        break;
 801119e:	e003      	b.n	80111a8 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 80111a0:	2300      	movs	r3, #0
 80111a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 80111a6:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 80111a8:	7dfb      	ldrb	r3, [r7, #23]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d103      	bne.n	80111b6 <dhcp_parse_reply+0x3be>
      offset++;
 80111ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80111b0:	3301      	adds	r3, #1
 80111b2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80111b4:	e0a1      	b.n	80112fa <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80111b6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80111b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111bc:	4413      	add	r3, r2
 80111be:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80111c2:	4293      	cmp	r3, r2
 80111c4:	dd02      	ble.n	80111cc <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 80111c6:	f06f 0301 	mvn.w	r3, #1
 80111ca:	e115      	b.n	80113f8 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 80111cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80111d4:	4413      	add	r3, r2
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	3302      	adds	r3, #2
 80111da:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 80111dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f000 808a 	beq.w	80112fa <dhcp_parse_reply+0x502>
        u32_t value = 0;
 80111e6:	2300      	movs	r3, #0
 80111e8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80111ea:	6a3b      	ldr	r3, [r7, #32]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	db02      	blt.n	80111f6 <dhcp_parse_reply+0x3fe>
 80111f0:	6a3b      	ldr	r3, [r7, #32]
 80111f2:	2b09      	cmp	r3, #9
 80111f4:	dd06      	ble.n	8011204 <dhcp_parse_reply+0x40c>
 80111f6:	4b68      	ldr	r3, [pc, #416]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 80111f8:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80111fc:	496a      	ldr	r1, [pc, #424]	@ (80113a8 <dhcp_parse_reply+0x5b0>)
 80111fe:	4868      	ldr	r0, [pc, #416]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 8011200:	f002 ff8e 	bl	8014120 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8011204:	4a69      	ldr	r2, [pc, #420]	@ (80113ac <dhcp_parse_reply+0x5b4>)
 8011206:	6a3b      	ldr	r3, [r7, #32]
 8011208:	4413      	add	r3, r2
 801120a:	781b      	ldrb	r3, [r3, #0]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d174      	bne.n	80112fa <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8011210:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011214:	2b04      	cmp	r3, #4
 8011216:	bf28      	it	cs
 8011218:	2304      	movcs	r3, #4
 801121a:	b2db      	uxtb	r3, r3
 801121c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801121e:	8bfb      	ldrh	r3, [r7, #30]
 8011220:	8aba      	ldrh	r2, [r7, #20]
 8011222:	f107 0108 	add.w	r1, r7, #8
 8011226:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011228:	f7f7 faee 	bl	8008808 <pbuf_copy_partial>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	8abb      	ldrh	r3, [r7, #20]
 8011232:	4293      	cmp	r3, r2
 8011234:	d002      	beq.n	801123c <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8011236:	f06f 0301 	mvn.w	r3, #1
 801123a:	e0dd      	b.n	80113f8 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 801123c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011240:	2b04      	cmp	r3, #4
 8011242:	d933      	bls.n	80112ac <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011248:	f003 0303 	and.w	r3, r3, #3
 801124c:	b2db      	uxtb	r3, r3
 801124e:	2b00      	cmp	r3, #0
 8011250:	d009      	beq.n	8011266 <dhcp_parse_reply+0x46e>
 8011252:	4b51      	ldr	r3, [pc, #324]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 8011254:	f240 6281 	movw	r2, #1665	@ 0x681
 8011258:	4955      	ldr	r1, [pc, #340]	@ (80113b0 <dhcp_parse_reply+0x5b8>)
 801125a:	4851      	ldr	r0, [pc, #324]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 801125c:	f002 ff60 	bl	8014120 <iprintf>
 8011260:	f06f 0305 	mvn.w	r3, #5
 8011264:	e0c8      	b.n	80113f8 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 8011266:	4a51      	ldr	r2, [pc, #324]	@ (80113ac <dhcp_parse_reply+0x5b4>)
 8011268:	6a3b      	ldr	r3, [r7, #32]
 801126a:	4413      	add	r3, r2
 801126c:	2201      	movs	r2, #1
 801126e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	4618      	mov	r0, r3
 8011274:	f7f5 f957 	bl	8006526 <lwip_htonl>
 8011278:	4602      	mov	r2, r0
 801127a:	494e      	ldr	r1, [pc, #312]	@ (80113b4 <dhcp_parse_reply+0x5bc>)
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8011282:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011286:	3b04      	subs	r3, #4
 8011288:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801128c:	8bfb      	ldrh	r3, [r7, #30]
 801128e:	3304      	adds	r3, #4
 8011290:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8011292:	8a7a      	ldrh	r2, [r7, #18]
 8011294:	8bfb      	ldrh	r3, [r7, #30]
 8011296:	429a      	cmp	r2, r3
 8011298:	d202      	bcs.n	80112a0 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801129a:	f06f 0301 	mvn.w	r3, #1
 801129e:	e0ab      	b.n	80113f8 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 80112a0:	8a7b      	ldrh	r3, [r7, #18]
 80112a2:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 80112a4:	6a3b      	ldr	r3, [r7, #32]
 80112a6:	3301      	adds	r3, #1
 80112a8:	623b      	str	r3, [r7, #32]
            goto decode_next;
 80112aa:	e79e      	b.n	80111ea <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 80112ac:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112b0:	2b04      	cmp	r3, #4
 80112b2:	d106      	bne.n	80112c2 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 80112b4:	68bb      	ldr	r3, [r7, #8]
 80112b6:	4618      	mov	r0, r3
 80112b8:	f7f5 f935 	bl	8006526 <lwip_htonl>
 80112bc:	4603      	mov	r3, r0
 80112be:	60bb      	str	r3, [r7, #8]
 80112c0:	e011      	b.n	80112e6 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80112c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d009      	beq.n	80112de <dhcp_parse_reply+0x4e6>
 80112ca:	4b33      	ldr	r3, [pc, #204]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 80112cc:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 80112d0:	4939      	ldr	r1, [pc, #228]	@ (80113b8 <dhcp_parse_reply+0x5c0>)
 80112d2:	4833      	ldr	r0, [pc, #204]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 80112d4:	f002 ff24 	bl	8014120 <iprintf>
 80112d8:	f06f 0305 	mvn.w	r3, #5
 80112dc:	e08c      	b.n	80113f8 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 80112de:	f107 0308 	add.w	r3, r7, #8
 80112e2:	781b      	ldrb	r3, [r3, #0]
 80112e4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80112e6:	4a31      	ldr	r2, [pc, #196]	@ (80113ac <dhcp_parse_reply+0x5b4>)
 80112e8:	6a3b      	ldr	r3, [r7, #32]
 80112ea:	4413      	add	r3, r2
 80112ec:	2201      	movs	r2, #1
 80112ee:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	4930      	ldr	r1, [pc, #192]	@ (80113b4 <dhcp_parse_reply+0x5bc>)
 80112f4:	6a3b      	ldr	r3, [r7, #32]
 80112f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80112fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112fc:	895b      	ldrh	r3, [r3, #10]
 80112fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011300:	429a      	cmp	r2, r3
 8011302:	d324      	bcc.n	801134e <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8011304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011306:	895b      	ldrh	r3, [r3, #10]
 8011308:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801130e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011310:	895b      	ldrh	r3, [r3, #10]
 8011312:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8011314:	1ad3      	subs	r3, r2, r3
 8011316:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8011318:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801131a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801131c:	429a      	cmp	r2, r3
 801131e:	d213      	bcs.n	8011348 <dhcp_parse_reply+0x550>
        q = q->next;
 8011320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8011326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011328:	2b00      	cmp	r3, #0
 801132a:	d109      	bne.n	8011340 <dhcp_parse_reply+0x548>
 801132c:	4b1a      	ldr	r3, [pc, #104]	@ (8011398 <dhcp_parse_reply+0x5a0>)
 801132e:	f240 629d 	movw	r2, #1693	@ 0x69d
 8011332:	4922      	ldr	r1, [pc, #136]	@ (80113bc <dhcp_parse_reply+0x5c4>)
 8011334:	481a      	ldr	r0, [pc, #104]	@ (80113a0 <dhcp_parse_reply+0x5a8>)
 8011336:	f002 fef3 	bl	8014120 <iprintf>
 801133a:	f06f 0305 	mvn.w	r3, #5
 801133e:	e05b      	b.n	80113f8 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 8011340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011342:	685b      	ldr	r3, [r3, #4]
 8011344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011346:	e002      	b.n	801134e <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8011348:	f06f 0301 	mvn.w	r3, #1
 801134c:	e054      	b.n	80113f8 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801134e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011350:	2b00      	cmp	r3, #0
 8011352:	d00a      	beq.n	801136a <dhcp_parse_reply+0x572>
 8011354:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011356:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8011358:	429a      	cmp	r2, r3
 801135a:	d206      	bcs.n	801136a <dhcp_parse_reply+0x572>
 801135c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801135e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8011360:	4413      	add	r3, r2
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	2bff      	cmp	r3, #255	@ 0xff
 8011366:	f47f ad8a 	bne.w	8010e7e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801136a:	4b10      	ldr	r3, [pc, #64]	@ (80113ac <dhcp_parse_reply+0x5b4>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d02d      	beq.n	80113ce <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011372:	4b10      	ldr	r3, [pc, #64]	@ (80113b4 <dhcp_parse_reply+0x5bc>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011378:	4b0c      	ldr	r3, [pc, #48]	@ (80113ac <dhcp_parse_reply+0x5b4>)
 801137a:	2200      	movs	r2, #0
 801137c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d102      	bne.n	801138a <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8011384:	2301      	movs	r3, #1
 8011386:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011388:	e021      	b.n	80113ce <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	2b02      	cmp	r3, #2
 801138e:	d117      	bne.n	80113c0 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8011390:	2301      	movs	r3, #1
 8011392:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011394:	e01b      	b.n	80113ce <dhcp_parse_reply+0x5d6>
 8011396:	bf00      	nop
 8011398:	08017770 	.word	0x08017770
 801139c:	08017a28 	.word	0x08017a28
 80113a0:	080177d0 	.word	0x080177d0
 80113a4:	080179f8 	.word	0x080179f8
 80113a8:	08017a4c 	.word	0x08017a4c
 80113ac:	200043b8 	.word	0x200043b8
 80113b0:	08017a60 	.word	0x08017a60
 80113b4:	20004390 	.word	0x20004390
 80113b8:	08017a78 	.word	0x08017a78
 80113bc:	08017a8c 	.word	0x08017a8c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d103      	bne.n	80113ce <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 80113c6:	2301      	movs	r3, #1
 80113c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 80113ca:	2301      	movs	r3, #1
 80113cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 80113ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d006      	beq.n	80113e2 <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80113d4:	2300      	movs	r3, #0
 80113d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80113d8:	236c      	movs	r3, #108	@ 0x6c
 80113da:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80113dc:	23ec      	movs	r3, #236	@ 0xec
 80113de:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80113e0:	e527      	b.n	8010e32 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80113e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d006      	beq.n	80113f6 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 80113e8:	2300      	movs	r3, #0
 80113ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80113ec:	232c      	movs	r3, #44	@ 0x2c
 80113ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80113f0:	236c      	movs	r3, #108	@ 0x6c
 80113f2:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 80113f4:	e51d      	b.n	8010e32 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80113f6:	2300      	movs	r3, #0
}
 80113f8:	4618      	mov	r0, r3
 80113fa:	3740      	adds	r7, #64	@ 0x40
 80113fc:	46bd      	mov	sp, r7
 80113fe:	bd80      	pop	{r7, pc}

08011400 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b08a      	sub	sp, #40	@ 0x28
 8011404:	af00      	add	r7, sp, #0
 8011406:	60f8      	str	r0, [r7, #12]
 8011408:	60b9      	str	r1, [r7, #8]
 801140a:	607a      	str	r2, [r7, #4]
 801140c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801140e:	4b60      	ldr	r3, [pc, #384]	@ (8011590 <dhcp_recv+0x190>)
 8011410:	685b      	ldr	r3, [r3, #4]
 8011412:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011414:	6a3b      	ldr	r3, [r7, #32]
 8011416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011418:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011420:	69fb      	ldr	r3, [r7, #28]
 8011422:	2b00      	cmp	r3, #0
 8011424:	f000 809d 	beq.w	8011562 <dhcp_recv+0x162>
 8011428:	69fb      	ldr	r3, [r7, #28]
 801142a:	791b      	ldrb	r3, [r3, #4]
 801142c:	2b00      	cmp	r3, #0
 801142e:	f000 8098 	beq.w	8011562 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	895b      	ldrh	r3, [r3, #10]
 8011436:	2b2b      	cmp	r3, #43	@ 0x2b
 8011438:	f240 8095 	bls.w	8011566 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801143c:	69bb      	ldr	r3, [r7, #24]
 801143e:	781b      	ldrb	r3, [r3, #0]
 8011440:	2b02      	cmp	r3, #2
 8011442:	f040 8092 	bne.w	801156a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8011446:	2300      	movs	r3, #0
 8011448:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801144c:	e012      	b.n	8011474 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801144e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011452:	6a3a      	ldr	r2, [r7, #32]
 8011454:	4413      	add	r3, r2
 8011456:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801145a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801145e:	69b9      	ldr	r1, [r7, #24]
 8011460:	440b      	add	r3, r1
 8011462:	7f1b      	ldrb	r3, [r3, #28]
 8011464:	429a      	cmp	r2, r3
 8011466:	f040 8082 	bne.w	801156e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801146a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801146e:	3301      	adds	r3, #1
 8011470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011474:	6a3b      	ldr	r3, [r7, #32]
 8011476:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801147a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801147e:	429a      	cmp	r2, r3
 8011480:	d203      	bcs.n	801148a <dhcp_recv+0x8a>
 8011482:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011486:	2b05      	cmp	r3, #5
 8011488:	d9e1      	bls.n	801144e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801148a:	69bb      	ldr	r3, [r7, #24]
 801148c:	685b      	ldr	r3, [r3, #4]
 801148e:	4618      	mov	r0, r3
 8011490:	f7f5 f849 	bl	8006526 <lwip_htonl>
 8011494:	4602      	mov	r2, r0
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	429a      	cmp	r2, r3
 801149c:	d169      	bne.n	8011572 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801149e:	69f9      	ldr	r1, [r7, #28]
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f7ff fca9 	bl	8010df8 <dhcp_parse_reply>
 80114a6:	4603      	mov	r3, r0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d164      	bne.n	8011576 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80114ac:	4b39      	ldr	r3, [pc, #228]	@ (8011594 <dhcp_recv+0x194>)
 80114ae:	785b      	ldrb	r3, [r3, #1]
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d062      	beq.n	801157a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80114ba:	4b37      	ldr	r3, [pc, #220]	@ (8011598 <dhcp_recv+0x198>)
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80114c0:	7cfb      	ldrb	r3, [r7, #19]
 80114c2:	2b05      	cmp	r3, #5
 80114c4:	d12a      	bne.n	801151c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80114c6:	69fb      	ldr	r3, [r7, #28]
 80114c8:	795b      	ldrb	r3, [r3, #5]
 80114ca:	2b01      	cmp	r3, #1
 80114cc:	d112      	bne.n	80114f4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80114ce:	6979      	ldr	r1, [r7, #20]
 80114d0:	6a38      	ldr	r0, [r7, #32]
 80114d2:	f7fe fdcd 	bl	8010070 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80114d6:	6a3b      	ldr	r3, [r7, #32]
 80114d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80114dc:	f003 0308 	and.w	r3, r3, #8
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d003      	beq.n	80114ec <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80114e4:	6a38      	ldr	r0, [r7, #32]
 80114e6:	f7fe fb3d 	bl	800fb64 <dhcp_check>
 80114ea:	e049      	b.n	8011580 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80114ec:	6a38      	ldr	r0, [r7, #32]
 80114ee:	f7ff f83d 	bl	801056c <dhcp_bind>
 80114f2:	e045      	b.n	8011580 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80114f4:	69fb      	ldr	r3, [r7, #28]
 80114f6:	795b      	ldrb	r3, [r3, #5]
 80114f8:	2b03      	cmp	r3, #3
 80114fa:	d007      	beq.n	801150c <dhcp_recv+0x10c>
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	795b      	ldrb	r3, [r3, #5]
 8011500:	2b04      	cmp	r3, #4
 8011502:	d003      	beq.n	801150c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011508:	2b05      	cmp	r3, #5
 801150a:	d139      	bne.n	8011580 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801150c:	6979      	ldr	r1, [r7, #20]
 801150e:	6a38      	ldr	r0, [r7, #32]
 8011510:	f7fe fdae 	bl	8010070 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011514:	6a38      	ldr	r0, [r7, #32]
 8011516:	f7ff f829 	bl	801056c <dhcp_bind>
 801151a:	e031      	b.n	8011580 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801151c:	7cfb      	ldrb	r3, [r7, #19]
 801151e:	2b06      	cmp	r3, #6
 8011520:	d113      	bne.n	801154a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011522:	69fb      	ldr	r3, [r7, #28]
 8011524:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8011526:	2b03      	cmp	r3, #3
 8011528:	d00b      	beq.n	8011542 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801152a:	69fb      	ldr	r3, [r7, #28]
 801152c:	795b      	ldrb	r3, [r3, #5]
 801152e:	2b01      	cmp	r3, #1
 8011530:	d007      	beq.n	8011542 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011532:	69fb      	ldr	r3, [r7, #28]
 8011534:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011536:	2b04      	cmp	r3, #4
 8011538:	d003      	beq.n	8011542 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	795b      	ldrb	r3, [r3, #5]
 801153e:	2b05      	cmp	r3, #5
 8011540:	d103      	bne.n	801154a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8011542:	6a38      	ldr	r0, [r7, #32]
 8011544:	f7fe faf4 	bl	800fb30 <dhcp_handle_nak>
 8011548:	e01a      	b.n	8011580 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801154a:	7cfb      	ldrb	r3, [r7, #19]
 801154c:	2b02      	cmp	r3, #2
 801154e:	d116      	bne.n	801157e <dhcp_recv+0x17e>
 8011550:	69fb      	ldr	r3, [r7, #28]
 8011552:	795b      	ldrb	r3, [r3, #5]
 8011554:	2b06      	cmp	r3, #6
 8011556:	d112      	bne.n	801157e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8011558:	6979      	ldr	r1, [r7, #20]
 801155a:	6a38      	ldr	r0, [r7, #32]
 801155c:	f7fe fb36 	bl	800fbcc <dhcp_handle_offer>
 8011560:	e00e      	b.n	8011580 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011562:	bf00      	nop
 8011564:	e00c      	b.n	8011580 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011566:	bf00      	nop
 8011568:	e00a      	b.n	8011580 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801156a:	bf00      	nop
 801156c:	e008      	b.n	8011580 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801156e:	bf00      	nop
 8011570:	e006      	b.n	8011580 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011572:	bf00      	nop
 8011574:	e004      	b.n	8011580 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8011576:	bf00      	nop
 8011578:	e002      	b.n	8011580 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801157a:	bf00      	nop
 801157c:	e000      	b.n	8011580 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801157e:	bf00      	nop
  pbuf_free(p);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7f6 ff47 	bl	8008414 <pbuf_free>
}
 8011586:	bf00      	nop
 8011588:	3728      	adds	r7, #40	@ 0x28
 801158a:	46bd      	mov	sp, r7
 801158c:	bd80      	pop	{r7, pc}
 801158e:	bf00      	nop
 8011590:	20000d90 	.word	0x20000d90
 8011594:	200043b8 	.word	0x200043b8
 8011598:	20004390 	.word	0x20004390

0801159c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b088      	sub	sp, #32
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	603b      	str	r3, [r7, #0]
 80115a8:	4613      	mov	r3, r2
 80115aa:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d108      	bne.n	80115c4 <dhcp_create_msg+0x28>
 80115b2:	4b5f      	ldr	r3, [pc, #380]	@ (8011730 <dhcp_create_msg+0x194>)
 80115b4:	f240 7269 	movw	r2, #1897	@ 0x769
 80115b8:	495e      	ldr	r1, [pc, #376]	@ (8011734 <dhcp_create_msg+0x198>)
 80115ba:	485f      	ldr	r0, [pc, #380]	@ (8011738 <dhcp_create_msg+0x19c>)
 80115bc:	f002 fdb0 	bl	8014120 <iprintf>
 80115c0:	2300      	movs	r3, #0
 80115c2:	e0b1      	b.n	8011728 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d108      	bne.n	80115dc <dhcp_create_msg+0x40>
 80115ca:	4b59      	ldr	r3, [pc, #356]	@ (8011730 <dhcp_create_msg+0x194>)
 80115cc:	f240 726a 	movw	r2, #1898	@ 0x76a
 80115d0:	495a      	ldr	r1, [pc, #360]	@ (801173c <dhcp_create_msg+0x1a0>)
 80115d2:	4859      	ldr	r0, [pc, #356]	@ (8011738 <dhcp_create_msg+0x19c>)
 80115d4:	f002 fda4 	bl	8014120 <iprintf>
 80115d8:	2300      	movs	r3, #0
 80115da:	e0a5      	b.n	8011728 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80115dc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80115e0:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80115e4:	2036      	movs	r0, #54	@ 0x36
 80115e6:	f7f6 fc31 	bl	8007e4c <pbuf_alloc>
 80115ea:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d101      	bne.n	80115f6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80115f2:	2300      	movs	r3, #0
 80115f4:	e098      	b.n	8011728 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80115f6:	69bb      	ldr	r3, [r7, #24]
 80115f8:	895b      	ldrh	r3, [r3, #10]
 80115fa:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80115fe:	d206      	bcs.n	801160e <dhcp_create_msg+0x72>
 8011600:	4b4b      	ldr	r3, [pc, #300]	@ (8011730 <dhcp_create_msg+0x194>)
 8011602:	f240 7271 	movw	r2, #1905	@ 0x771
 8011606:	494e      	ldr	r1, [pc, #312]	@ (8011740 <dhcp_create_msg+0x1a4>)
 8011608:	484b      	ldr	r0, [pc, #300]	@ (8011738 <dhcp_create_msg+0x19c>)
 801160a:	f002 fd89 	bl	8014120 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801160e:	79fb      	ldrb	r3, [r7, #7]
 8011610:	2b03      	cmp	r3, #3
 8011612:	d103      	bne.n	801161c <dhcp_create_msg+0x80>
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	795b      	ldrb	r3, [r3, #5]
 8011618:	2b03      	cmp	r3, #3
 801161a:	d10d      	bne.n	8011638 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	799b      	ldrb	r3, [r3, #6]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d105      	bne.n	8011630 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8011624:	f002 fc7c 	bl	8013f20 <rand>
 8011628:	4603      	mov	r3, r0
 801162a:	461a      	mov	r2, r3
 801162c:	4b45      	ldr	r3, [pc, #276]	@ (8011744 <dhcp_create_msg+0x1a8>)
 801162e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8011630:	4b44      	ldr	r3, [pc, #272]	@ (8011744 <dhcp_create_msg+0x1a8>)
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	685b      	ldr	r3, [r3, #4]
 801163c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801163e:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8011642:	2100      	movs	r1, #0
 8011644:	6978      	ldr	r0, [r7, #20]
 8011646:	f002 fe0a 	bl	801425e <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	2201      	movs	r2, #1
 801164e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	2201      	movs	r2, #1
 8011654:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	4618      	mov	r0, r3
 8011666:	f7f4 ff5e 	bl	8006526 <lwip_htonl>
 801166a:	4602      	mov	r2, r0
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8011670:	79fb      	ldrb	r3, [r7, #7]
 8011672:	2b08      	cmp	r3, #8
 8011674:	d010      	beq.n	8011698 <dhcp_create_msg+0xfc>
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	2b04      	cmp	r3, #4
 801167a:	d00d      	beq.n	8011698 <dhcp_create_msg+0xfc>
 801167c:	79fb      	ldrb	r3, [r7, #7]
 801167e:	2b07      	cmp	r3, #7
 8011680:	d00a      	beq.n	8011698 <dhcp_create_msg+0xfc>
 8011682:	79fb      	ldrb	r3, [r7, #7]
 8011684:	2b03      	cmp	r3, #3
 8011686:	d10c      	bne.n	80116a2 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801168c:	2b05      	cmp	r3, #5
 801168e:	d003      	beq.n	8011698 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	795b      	ldrb	r3, [r3, #5]
 8011694:	2b04      	cmp	r3, #4
 8011696:	d104      	bne.n	80116a2 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	3304      	adds	r3, #4
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80116a2:	2300      	movs	r3, #0
 80116a4:	83fb      	strh	r3, [r7, #30]
 80116a6:	e00c      	b.n	80116c2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80116a8:	8bfa      	ldrh	r2, [r7, #30]
 80116aa:	8bfb      	ldrh	r3, [r7, #30]
 80116ac:	68f9      	ldr	r1, [r7, #12]
 80116ae:	440a      	add	r2, r1
 80116b0:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 80116b4:	697a      	ldr	r2, [r7, #20]
 80116b6:	4413      	add	r3, r2
 80116b8:	460a      	mov	r2, r1
 80116ba:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80116bc:	8bfb      	ldrh	r3, [r7, #30]
 80116be:	3301      	adds	r3, #1
 80116c0:	83fb      	strh	r3, [r7, #30]
 80116c2:	8bfb      	ldrh	r3, [r7, #30]
 80116c4:	2b05      	cmp	r3, #5
 80116c6:	d9ef      	bls.n	80116a8 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	2200      	movs	r2, #0
 80116cc:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80116d0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80116d4:	2200      	movs	r2, #0
 80116d6:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80116da:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80116de:	2200      	movs	r2, #0
 80116e0:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80116e4:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80116e8:	2200      	movs	r2, #0
 80116ea:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80116ee:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80116f8:	2301      	movs	r3, #1
 80116fa:	2235      	movs	r2, #53	@ 0x35
 80116fc:	2000      	movs	r0, #0
 80116fe:	f7ff faab 	bl	8010c58 <dhcp_option>
 8011702:	4603      	mov	r3, r0
 8011704:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801170c:	79fa      	ldrb	r2, [r7, #7]
 801170e:	8a7b      	ldrh	r3, [r7, #18]
 8011710:	4618      	mov	r0, r3
 8011712:	f7ff fad5 	bl	8010cc0 <dhcp_option_byte>
 8011716:	4603      	mov	r3, r0
 8011718:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d002      	beq.n	8011726 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8011720:	683b      	ldr	r3, [r7, #0]
 8011722:	8a7a      	ldrh	r2, [r7, #18]
 8011724:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8011726:	69bb      	ldr	r3, [r7, #24]
}
 8011728:	4618      	mov	r0, r3
 801172a:	3720      	adds	r7, #32
 801172c:	46bd      	mov	sp, r7
 801172e:	bd80      	pop	{r7, pc}
 8011730:	08017770 	.word	0x08017770
 8011734:	08017aa0 	.word	0x08017aa0
 8011738:	080177d0 	.word	0x080177d0
 801173c:	08017ac0 	.word	0x08017ac0
 8011740:	08017ae0 	.word	0x08017ae0
 8011744:	200043cc 	.word	0x200043cc

08011748 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	4603      	mov	r3, r0
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8011756:	89fb      	ldrh	r3, [r7, #14]
 8011758:	1c5a      	adds	r2, r3, #1
 801175a:	81fa      	strh	r2, [r7, #14]
 801175c:	461a      	mov	r2, r3
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	4413      	add	r3, r2
 8011762:	22ff      	movs	r2, #255	@ 0xff
 8011764:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011766:	e007      	b.n	8011778 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8011768:	89fb      	ldrh	r3, [r7, #14]
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	81fa      	strh	r2, [r7, #14]
 801176e:	461a      	mov	r2, r3
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	4413      	add	r3, r2
 8011774:	2200      	movs	r2, #0
 8011776:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8011778:	89fb      	ldrh	r3, [r7, #14]
 801177a:	2b43      	cmp	r3, #67	@ 0x43
 801177c:	d904      	bls.n	8011788 <dhcp_option_trailer+0x40>
 801177e:	89fb      	ldrh	r3, [r7, #14]
 8011780:	f003 0303 	and.w	r3, r3, #3
 8011784:	2b00      	cmp	r3, #0
 8011786:	d002      	beq.n	801178e <dhcp_option_trailer+0x46>
 8011788:	89fb      	ldrh	r3, [r7, #14]
 801178a:	2b43      	cmp	r3, #67	@ 0x43
 801178c:	d9ec      	bls.n	8011768 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801178e:	89fb      	ldrh	r3, [r7, #14]
 8011790:	33f0      	adds	r3, #240	@ 0xf0
 8011792:	b29b      	uxth	r3, r3
 8011794:	4619      	mov	r1, r3
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f7f6 fcb6 	bl	8008108 <pbuf_realloc>
}
 801179c:	bf00      	nop
 801179e:	3710      	adds	r7, #16
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b085      	sub	sp, #20
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d017      	beq.n	80117e2 <dhcp_supplied_address+0x3e>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d013      	beq.n	80117e2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117be:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	795b      	ldrb	r3, [r3, #5]
 80117c4:	2b0a      	cmp	r3, #10
 80117c6:	d007      	beq.n	80117d8 <dhcp_supplied_address+0x34>
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	795b      	ldrb	r3, [r3, #5]
 80117cc:	2b05      	cmp	r3, #5
 80117ce:	d003      	beq.n	80117d8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80117d4:	2b04      	cmp	r3, #4
 80117d6:	d101      	bne.n	80117dc <dhcp_supplied_address+0x38>
 80117d8:	2301      	movs	r3, #1
 80117da:	e000      	b.n	80117de <dhcp_supplied_address+0x3a>
 80117dc:	2300      	movs	r3, #0
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	e000      	b.n	80117e4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80117e2:	2300      	movs	r3, #0
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3714      	adds	r7, #20
 80117e8:	46bd      	mov	sp, r7
 80117ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ee:	4770      	bx	lr

080117f0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80117f8:	4915      	ldr	r1, [pc, #84]	@ (8011850 <etharp_free_entry+0x60>)
 80117fa:	687a      	ldr	r2, [r7, #4]
 80117fc:	4613      	mov	r3, r2
 80117fe:	005b      	lsls	r3, r3, #1
 8011800:	4413      	add	r3, r2
 8011802:	00db      	lsls	r3, r3, #3
 8011804:	440b      	add	r3, r1
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d013      	beq.n	8011834 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801180c:	4910      	ldr	r1, [pc, #64]	@ (8011850 <etharp_free_entry+0x60>)
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	4613      	mov	r3, r2
 8011812:	005b      	lsls	r3, r3, #1
 8011814:	4413      	add	r3, r2
 8011816:	00db      	lsls	r3, r3, #3
 8011818:	440b      	add	r3, r1
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4618      	mov	r0, r3
 801181e:	f7f6 fdf9 	bl	8008414 <pbuf_free>
    arp_table[i].q = NULL;
 8011822:	490b      	ldr	r1, [pc, #44]	@ (8011850 <etharp_free_entry+0x60>)
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	4613      	mov	r3, r2
 8011828:	005b      	lsls	r3, r3, #1
 801182a:	4413      	add	r3, r2
 801182c:	00db      	lsls	r3, r3, #3
 801182e:	440b      	add	r3, r1
 8011830:	2200      	movs	r2, #0
 8011832:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011834:	4906      	ldr	r1, [pc, #24]	@ (8011850 <etharp_free_entry+0x60>)
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	4613      	mov	r3, r2
 801183a:	005b      	lsls	r3, r3, #1
 801183c:	4413      	add	r3, r2
 801183e:	00db      	lsls	r3, r3, #3
 8011840:	440b      	add	r3, r1
 8011842:	3314      	adds	r3, #20
 8011844:	2200      	movs	r2, #0
 8011846:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011848:	bf00      	nop
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	200043d0 	.word	0x200043d0

08011854 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b082      	sub	sp, #8
 8011858:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801185a:	2300      	movs	r3, #0
 801185c:	607b      	str	r3, [r7, #4]
 801185e:	e096      	b.n	801198e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011860:	494f      	ldr	r1, [pc, #316]	@ (80119a0 <etharp_tmr+0x14c>)
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	4613      	mov	r3, r2
 8011866:	005b      	lsls	r3, r3, #1
 8011868:	4413      	add	r3, r2
 801186a:	00db      	lsls	r3, r3, #3
 801186c:	440b      	add	r3, r1
 801186e:	3314      	adds	r3, #20
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011874:	78fb      	ldrb	r3, [r7, #3]
 8011876:	2b00      	cmp	r3, #0
 8011878:	f000 8086 	beq.w	8011988 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801187c:	4948      	ldr	r1, [pc, #288]	@ (80119a0 <etharp_tmr+0x14c>)
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	4613      	mov	r3, r2
 8011882:	005b      	lsls	r3, r3, #1
 8011884:	4413      	add	r3, r2
 8011886:	00db      	lsls	r3, r3, #3
 8011888:	440b      	add	r3, r1
 801188a:	3312      	adds	r3, #18
 801188c:	881b      	ldrh	r3, [r3, #0]
 801188e:	3301      	adds	r3, #1
 8011890:	b298      	uxth	r0, r3
 8011892:	4943      	ldr	r1, [pc, #268]	@ (80119a0 <etharp_tmr+0x14c>)
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	4613      	mov	r3, r2
 8011898:	005b      	lsls	r3, r3, #1
 801189a:	4413      	add	r3, r2
 801189c:	00db      	lsls	r3, r3, #3
 801189e:	440b      	add	r3, r1
 80118a0:	3312      	adds	r3, #18
 80118a2:	4602      	mov	r2, r0
 80118a4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118a6:	493e      	ldr	r1, [pc, #248]	@ (80119a0 <etharp_tmr+0x14c>)
 80118a8:	687a      	ldr	r2, [r7, #4]
 80118aa:	4613      	mov	r3, r2
 80118ac:	005b      	lsls	r3, r3, #1
 80118ae:	4413      	add	r3, r2
 80118b0:	00db      	lsls	r3, r3, #3
 80118b2:	440b      	add	r3, r1
 80118b4:	3312      	adds	r3, #18
 80118b6:	881b      	ldrh	r3, [r3, #0]
 80118b8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80118bc:	d215      	bcs.n	80118ea <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118be:	4938      	ldr	r1, [pc, #224]	@ (80119a0 <etharp_tmr+0x14c>)
 80118c0:	687a      	ldr	r2, [r7, #4]
 80118c2:	4613      	mov	r3, r2
 80118c4:	005b      	lsls	r3, r3, #1
 80118c6:	4413      	add	r3, r2
 80118c8:	00db      	lsls	r3, r3, #3
 80118ca:	440b      	add	r3, r1
 80118cc:	3314      	adds	r3, #20
 80118ce:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118d0:	2b01      	cmp	r3, #1
 80118d2:	d10e      	bne.n	80118f2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80118d4:	4932      	ldr	r1, [pc, #200]	@ (80119a0 <etharp_tmr+0x14c>)
 80118d6:	687a      	ldr	r2, [r7, #4]
 80118d8:	4613      	mov	r3, r2
 80118da:	005b      	lsls	r3, r3, #1
 80118dc:	4413      	add	r3, r2
 80118de:	00db      	lsls	r3, r3, #3
 80118e0:	440b      	add	r3, r1
 80118e2:	3312      	adds	r3, #18
 80118e4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118e6:	2b04      	cmp	r3, #4
 80118e8:	d903      	bls.n	80118f2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7ff ff80 	bl	80117f0 <etharp_free_entry>
 80118f0:	e04a      	b.n	8011988 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80118f2:	492b      	ldr	r1, [pc, #172]	@ (80119a0 <etharp_tmr+0x14c>)
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	4613      	mov	r3, r2
 80118f8:	005b      	lsls	r3, r3, #1
 80118fa:	4413      	add	r3, r2
 80118fc:	00db      	lsls	r3, r3, #3
 80118fe:	440b      	add	r3, r1
 8011900:	3314      	adds	r3, #20
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	2b03      	cmp	r3, #3
 8011906:	d10a      	bne.n	801191e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011908:	4925      	ldr	r1, [pc, #148]	@ (80119a0 <etharp_tmr+0x14c>)
 801190a:	687a      	ldr	r2, [r7, #4]
 801190c:	4613      	mov	r3, r2
 801190e:	005b      	lsls	r3, r3, #1
 8011910:	4413      	add	r3, r2
 8011912:	00db      	lsls	r3, r3, #3
 8011914:	440b      	add	r3, r1
 8011916:	3314      	adds	r3, #20
 8011918:	2204      	movs	r2, #4
 801191a:	701a      	strb	r2, [r3, #0]
 801191c:	e034      	b.n	8011988 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801191e:	4920      	ldr	r1, [pc, #128]	@ (80119a0 <etharp_tmr+0x14c>)
 8011920:	687a      	ldr	r2, [r7, #4]
 8011922:	4613      	mov	r3, r2
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	4413      	add	r3, r2
 8011928:	00db      	lsls	r3, r3, #3
 801192a:	440b      	add	r3, r1
 801192c:	3314      	adds	r3, #20
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	2b04      	cmp	r3, #4
 8011932:	d10a      	bne.n	801194a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011934:	491a      	ldr	r1, [pc, #104]	@ (80119a0 <etharp_tmr+0x14c>)
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	4613      	mov	r3, r2
 801193a:	005b      	lsls	r3, r3, #1
 801193c:	4413      	add	r3, r2
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	440b      	add	r3, r1
 8011942:	3314      	adds	r3, #20
 8011944:	2202      	movs	r2, #2
 8011946:	701a      	strb	r2, [r3, #0]
 8011948:	e01e      	b.n	8011988 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801194a:	4915      	ldr	r1, [pc, #84]	@ (80119a0 <etharp_tmr+0x14c>)
 801194c:	687a      	ldr	r2, [r7, #4]
 801194e:	4613      	mov	r3, r2
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	4413      	add	r3, r2
 8011954:	00db      	lsls	r3, r3, #3
 8011956:	440b      	add	r3, r1
 8011958:	3314      	adds	r3, #20
 801195a:	781b      	ldrb	r3, [r3, #0]
 801195c:	2b01      	cmp	r3, #1
 801195e:	d113      	bne.n	8011988 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011960:	490f      	ldr	r1, [pc, #60]	@ (80119a0 <etharp_tmr+0x14c>)
 8011962:	687a      	ldr	r2, [r7, #4]
 8011964:	4613      	mov	r3, r2
 8011966:	005b      	lsls	r3, r3, #1
 8011968:	4413      	add	r3, r2
 801196a:	00db      	lsls	r3, r3, #3
 801196c:	440b      	add	r3, r1
 801196e:	3308      	adds	r3, #8
 8011970:	6818      	ldr	r0, [r3, #0]
 8011972:	687a      	ldr	r2, [r7, #4]
 8011974:	4613      	mov	r3, r2
 8011976:	005b      	lsls	r3, r3, #1
 8011978:	4413      	add	r3, r2
 801197a:	00db      	lsls	r3, r3, #3
 801197c:	4a08      	ldr	r2, [pc, #32]	@ (80119a0 <etharp_tmr+0x14c>)
 801197e:	4413      	add	r3, r2
 8011980:	3304      	adds	r3, #4
 8011982:	4619      	mov	r1, r3
 8011984:	f000 fe72 	bl	801266c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	3301      	adds	r3, #1
 801198c:	607b      	str	r3, [r7, #4]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	2b09      	cmp	r3, #9
 8011992:	f77f af65 	ble.w	8011860 <etharp_tmr+0xc>
      }
    }
  }
}
 8011996:	bf00      	nop
 8011998:	bf00      	nop
 801199a:	3708      	adds	r7, #8
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}
 80119a0:	200043d0 	.word	0x200043d0

080119a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b08a      	sub	sp, #40	@ 0x28
 80119a8:	af00      	add	r7, sp, #0
 80119aa:	60f8      	str	r0, [r7, #12]
 80119ac:	460b      	mov	r3, r1
 80119ae:	607a      	str	r2, [r7, #4]
 80119b0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80119b2:	230a      	movs	r3, #10
 80119b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80119b6:	230a      	movs	r3, #10
 80119b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80119ba:	230a      	movs	r3, #10
 80119bc:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80119be:	2300      	movs	r3, #0
 80119c0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80119c2:	230a      	movs	r3, #10
 80119c4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	83bb      	strh	r3, [r7, #28]
 80119ca:	2300      	movs	r3, #0
 80119cc:	837b      	strh	r3, [r7, #26]
 80119ce:	2300      	movs	r3, #0
 80119d0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119d2:	2300      	movs	r3, #0
 80119d4:	843b      	strh	r3, [r7, #32]
 80119d6:	e0ae      	b.n	8011b36 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80119d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119dc:	49a6      	ldr	r1, [pc, #664]	@ (8011c78 <etharp_find_entry+0x2d4>)
 80119de:	4613      	mov	r3, r2
 80119e0:	005b      	lsls	r3, r3, #1
 80119e2:	4413      	add	r3, r2
 80119e4:	00db      	lsls	r3, r3, #3
 80119e6:	440b      	add	r3, r1
 80119e8:	3314      	adds	r3, #20
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80119ee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80119f2:	2b0a      	cmp	r3, #10
 80119f4:	d105      	bne.n	8011a02 <etharp_find_entry+0x5e>
 80119f6:	7dfb      	ldrb	r3, [r7, #23]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d102      	bne.n	8011a02 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80119fc:	8c3b      	ldrh	r3, [r7, #32]
 80119fe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8011a00:	e095      	b.n	8011b2e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011a02:	7dfb      	ldrb	r3, [r7, #23]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	f000 8092 	beq.w	8011b2e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011a0a:	7dfb      	ldrb	r3, [r7, #23]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d009      	beq.n	8011a24 <etharp_find_entry+0x80>
 8011a10:	7dfb      	ldrb	r3, [r7, #23]
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d806      	bhi.n	8011a24 <etharp_find_entry+0x80>
 8011a16:	4b99      	ldr	r3, [pc, #612]	@ (8011c7c <etharp_find_entry+0x2d8>)
 8011a18:	f240 1223 	movw	r2, #291	@ 0x123
 8011a1c:	4998      	ldr	r1, [pc, #608]	@ (8011c80 <etharp_find_entry+0x2dc>)
 8011a1e:	4899      	ldr	r0, [pc, #612]	@ (8011c84 <etharp_find_entry+0x2e0>)
 8011a20:	f002 fb7e 	bl	8014120 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d020      	beq.n	8011a6c <etharp_find_entry+0xc8>
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	6819      	ldr	r1, [r3, #0]
 8011a2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a32:	4891      	ldr	r0, [pc, #580]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011a34:	4613      	mov	r3, r2
 8011a36:	005b      	lsls	r3, r3, #1
 8011a38:	4413      	add	r3, r2
 8011a3a:	00db      	lsls	r3, r3, #3
 8011a3c:	4403      	add	r3, r0
 8011a3e:	3304      	adds	r3, #4
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	4299      	cmp	r1, r3
 8011a44:	d112      	bne.n	8011a6c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d00c      	beq.n	8011a66 <etharp_find_entry+0xc2>
 8011a4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a50:	4989      	ldr	r1, [pc, #548]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011a52:	4613      	mov	r3, r2
 8011a54:	005b      	lsls	r3, r3, #1
 8011a56:	4413      	add	r3, r2
 8011a58:	00db      	lsls	r3, r3, #3
 8011a5a:	440b      	add	r3, r1
 8011a5c:	3308      	adds	r3, #8
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d102      	bne.n	8011a6c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011a66:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a6a:	e100      	b.n	8011c6e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011a6c:	7dfb      	ldrb	r3, [r7, #23]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d140      	bne.n	8011af4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a76:	4980      	ldr	r1, [pc, #512]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011a78:	4613      	mov	r3, r2
 8011a7a:	005b      	lsls	r3, r3, #1
 8011a7c:	4413      	add	r3, r2
 8011a7e:	00db      	lsls	r3, r3, #3
 8011a80:	440b      	add	r3, r1
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d01a      	beq.n	8011abe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011a88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a8c:	497a      	ldr	r1, [pc, #488]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011a8e:	4613      	mov	r3, r2
 8011a90:	005b      	lsls	r3, r3, #1
 8011a92:	4413      	add	r3, r2
 8011a94:	00db      	lsls	r3, r3, #3
 8011a96:	440b      	add	r3, r1
 8011a98:	3312      	adds	r3, #18
 8011a9a:	881b      	ldrh	r3, [r3, #0]
 8011a9c:	8bba      	ldrh	r2, [r7, #28]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	d845      	bhi.n	8011b2e <etharp_find_entry+0x18a>
            old_queue = i;
 8011aa2:	8c3b      	ldrh	r3, [r7, #32]
 8011aa4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011aa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aaa:	4973      	ldr	r1, [pc, #460]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011aac:	4613      	mov	r3, r2
 8011aae:	005b      	lsls	r3, r3, #1
 8011ab0:	4413      	add	r3, r2
 8011ab2:	00db      	lsls	r3, r3, #3
 8011ab4:	440b      	add	r3, r1
 8011ab6:	3312      	adds	r3, #18
 8011ab8:	881b      	ldrh	r3, [r3, #0]
 8011aba:	83bb      	strh	r3, [r7, #28]
 8011abc:	e037      	b.n	8011b2e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011abe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ac2:	496d      	ldr	r1, [pc, #436]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	005b      	lsls	r3, r3, #1
 8011ac8:	4413      	add	r3, r2
 8011aca:	00db      	lsls	r3, r3, #3
 8011acc:	440b      	add	r3, r1
 8011ace:	3312      	adds	r3, #18
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	8b7a      	ldrh	r2, [r7, #26]
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d82a      	bhi.n	8011b2e <etharp_find_entry+0x18a>
            old_pending = i;
 8011ad8:	8c3b      	ldrh	r3, [r7, #32]
 8011ada:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8011adc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ae0:	4965      	ldr	r1, [pc, #404]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011ae2:	4613      	mov	r3, r2
 8011ae4:	005b      	lsls	r3, r3, #1
 8011ae6:	4413      	add	r3, r2
 8011ae8:	00db      	lsls	r3, r3, #3
 8011aea:	440b      	add	r3, r1
 8011aec:	3312      	adds	r3, #18
 8011aee:	881b      	ldrh	r3, [r3, #0]
 8011af0:	837b      	strh	r3, [r7, #26]
 8011af2:	e01c      	b.n	8011b2e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011af4:	7dfb      	ldrb	r3, [r7, #23]
 8011af6:	2b01      	cmp	r3, #1
 8011af8:	d919      	bls.n	8011b2e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011afa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011afe:	495e      	ldr	r1, [pc, #376]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011b00:	4613      	mov	r3, r2
 8011b02:	005b      	lsls	r3, r3, #1
 8011b04:	4413      	add	r3, r2
 8011b06:	00db      	lsls	r3, r3, #3
 8011b08:	440b      	add	r3, r1
 8011b0a:	3312      	adds	r3, #18
 8011b0c:	881b      	ldrh	r3, [r3, #0]
 8011b0e:	8b3a      	ldrh	r2, [r7, #24]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d80c      	bhi.n	8011b2e <etharp_find_entry+0x18a>
            old_stable = i;
 8011b14:	8c3b      	ldrh	r3, [r7, #32]
 8011b16:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8011b18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b1c:	4956      	ldr	r1, [pc, #344]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011b1e:	4613      	mov	r3, r2
 8011b20:	005b      	lsls	r3, r3, #1
 8011b22:	4413      	add	r3, r2
 8011b24:	00db      	lsls	r3, r3, #3
 8011b26:	440b      	add	r3, r1
 8011b28:	3312      	adds	r3, #18
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b2e:	8c3b      	ldrh	r3, [r7, #32]
 8011b30:	3301      	adds	r3, #1
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	843b      	strh	r3, [r7, #32]
 8011b36:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b3a:	2b09      	cmp	r3, #9
 8011b3c:	f77f af4c 	ble.w	80119d8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011b40:	7afb      	ldrb	r3, [r7, #11]
 8011b42:	f003 0302 	and.w	r3, r3, #2
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d108      	bne.n	8011b5c <etharp_find_entry+0x1b8>
 8011b4a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011b4e:	2b0a      	cmp	r3, #10
 8011b50:	d107      	bne.n	8011b62 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011b52:	7afb      	ldrb	r3, [r7, #11]
 8011b54:	f003 0301 	and.w	r3, r3, #1
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d102      	bne.n	8011b62 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b60:	e085      	b.n	8011c6e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011b62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011b66:	2b09      	cmp	r3, #9
 8011b68:	dc02      	bgt.n	8011b70 <etharp_find_entry+0x1cc>
    i = empty;
 8011b6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b6c:	843b      	strh	r3, [r7, #32]
 8011b6e:	e039      	b.n	8011be4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011b70:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011b74:	2b09      	cmp	r3, #9
 8011b76:	dc14      	bgt.n	8011ba2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011b78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011b7a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011b7c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b80:	493d      	ldr	r1, [pc, #244]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011b82:	4613      	mov	r3, r2
 8011b84:	005b      	lsls	r3, r3, #1
 8011b86:	4413      	add	r3, r2
 8011b88:	00db      	lsls	r3, r3, #3
 8011b8a:	440b      	add	r3, r1
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d018      	beq.n	8011bc4 <etharp_find_entry+0x220>
 8011b92:	4b3a      	ldr	r3, [pc, #232]	@ (8011c7c <etharp_find_entry+0x2d8>)
 8011b94:	f240 126d 	movw	r2, #365	@ 0x16d
 8011b98:	493b      	ldr	r1, [pc, #236]	@ (8011c88 <etharp_find_entry+0x2e4>)
 8011b9a:	483a      	ldr	r0, [pc, #232]	@ (8011c84 <etharp_find_entry+0x2e0>)
 8011b9c:	f002 fac0 	bl	8014120 <iprintf>
 8011ba0:	e010      	b.n	8011bc4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011ba2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011ba6:	2b09      	cmp	r3, #9
 8011ba8:	dc02      	bgt.n	8011bb0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011baa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8011bac:	843b      	strh	r3, [r7, #32]
 8011bae:	e009      	b.n	8011bc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011bb0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bb4:	2b09      	cmp	r3, #9
 8011bb6:	dc02      	bgt.n	8011bbe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011bb8:	8bfb      	ldrh	r3, [r7, #30]
 8011bba:	843b      	strh	r3, [r7, #32]
 8011bbc:	e002      	b.n	8011bc4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc2:	e054      	b.n	8011c6e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011bc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bc8:	2b09      	cmp	r3, #9
 8011bca:	dd06      	ble.n	8011bda <etharp_find_entry+0x236>
 8011bcc:	4b2b      	ldr	r3, [pc, #172]	@ (8011c7c <etharp_find_entry+0x2d8>)
 8011bce:	f240 127f 	movw	r2, #383	@ 0x17f
 8011bd2:	492e      	ldr	r1, [pc, #184]	@ (8011c8c <etharp_find_entry+0x2e8>)
 8011bd4:	482b      	ldr	r0, [pc, #172]	@ (8011c84 <etharp_find_entry+0x2e0>)
 8011bd6:	f002 faa3 	bl	8014120 <iprintf>
    etharp_free_entry(i);
 8011bda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff fe06 	bl	80117f0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011be4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011be8:	2b09      	cmp	r3, #9
 8011bea:	dd06      	ble.n	8011bfa <etharp_find_entry+0x256>
 8011bec:	4b23      	ldr	r3, [pc, #140]	@ (8011c7c <etharp_find_entry+0x2d8>)
 8011bee:	f240 1283 	movw	r2, #387	@ 0x183
 8011bf2:	4926      	ldr	r1, [pc, #152]	@ (8011c8c <etharp_find_entry+0x2e8>)
 8011bf4:	4823      	ldr	r0, [pc, #140]	@ (8011c84 <etharp_find_entry+0x2e0>)
 8011bf6:	f002 fa93 	bl	8014120 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011bfa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011bfe:	491e      	ldr	r1, [pc, #120]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011c00:	4613      	mov	r3, r2
 8011c02:	005b      	lsls	r3, r3, #1
 8011c04:	4413      	add	r3, r2
 8011c06:	00db      	lsls	r3, r3, #3
 8011c08:	440b      	add	r3, r1
 8011c0a:	3314      	adds	r3, #20
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d006      	beq.n	8011c20 <etharp_find_entry+0x27c>
 8011c12:	4b1a      	ldr	r3, [pc, #104]	@ (8011c7c <etharp_find_entry+0x2d8>)
 8011c14:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8011c18:	491d      	ldr	r1, [pc, #116]	@ (8011c90 <etharp_find_entry+0x2ec>)
 8011c1a:	481a      	ldr	r0, [pc, #104]	@ (8011c84 <etharp_find_entry+0x2e0>)
 8011c1c:	f002 fa80 	bl	8014120 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00b      	beq.n	8011c3e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	6819      	ldr	r1, [r3, #0]
 8011c2e:	4812      	ldr	r0, [pc, #72]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011c30:	4613      	mov	r3, r2
 8011c32:	005b      	lsls	r3, r3, #1
 8011c34:	4413      	add	r3, r2
 8011c36:	00db      	lsls	r3, r3, #3
 8011c38:	4403      	add	r3, r0
 8011c3a:	3304      	adds	r3, #4
 8011c3c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011c3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c42:	490d      	ldr	r1, [pc, #52]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011c44:	4613      	mov	r3, r2
 8011c46:	005b      	lsls	r3, r3, #1
 8011c48:	4413      	add	r3, r2
 8011c4a:	00db      	lsls	r3, r3, #3
 8011c4c:	440b      	add	r3, r1
 8011c4e:	3312      	adds	r3, #18
 8011c50:	2200      	movs	r2, #0
 8011c52:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011c54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c58:	4907      	ldr	r1, [pc, #28]	@ (8011c78 <etharp_find_entry+0x2d4>)
 8011c5a:	4613      	mov	r3, r2
 8011c5c:	005b      	lsls	r3, r3, #1
 8011c5e:	4413      	add	r3, r2
 8011c60:	00db      	lsls	r3, r3, #3
 8011c62:	440b      	add	r3, r1
 8011c64:	3308      	adds	r3, #8
 8011c66:	687a      	ldr	r2, [r7, #4]
 8011c68:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011c6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011c6e:	4618      	mov	r0, r3
 8011c70:	3728      	adds	r7, #40	@ 0x28
 8011c72:	46bd      	mov	sp, r7
 8011c74:	bd80      	pop	{r7, pc}
 8011c76:	bf00      	nop
 8011c78:	200043d0 	.word	0x200043d0
 8011c7c:	08017b20 	.word	0x08017b20
 8011c80:	08017b58 	.word	0x08017b58
 8011c84:	08017b98 	.word	0x08017b98
 8011c88:	08017bc0 	.word	0x08017bc0
 8011c8c:	08017bd8 	.word	0x08017bd8
 8011c90:	08017bec 	.word	0x08017bec

08011c94 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b088      	sub	sp, #32
 8011c98:	af02      	add	r7, sp, #8
 8011c9a:	60f8      	str	r0, [r7, #12]
 8011c9c:	60b9      	str	r1, [r7, #8]
 8011c9e:	607a      	str	r2, [r7, #4]
 8011ca0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011ca8:	2b06      	cmp	r3, #6
 8011caa:	d006      	beq.n	8011cba <etharp_update_arp_entry+0x26>
 8011cac:	4b48      	ldr	r3, [pc, #288]	@ (8011dd0 <etharp_update_arp_entry+0x13c>)
 8011cae:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011cb2:	4948      	ldr	r1, [pc, #288]	@ (8011dd4 <etharp_update_arp_entry+0x140>)
 8011cb4:	4848      	ldr	r0, [pc, #288]	@ (8011dd8 <etharp_update_arp_entry+0x144>)
 8011cb6:	f002 fa33 	bl	8014120 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d012      	beq.n	8011ce6 <etharp_update_arp_entry+0x52>
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	681b      	ldr	r3, [r3, #0]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d00e      	beq.n	8011ce6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	68f9      	ldr	r1, [r7, #12]
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f001 f9c0 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8011cd4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d105      	bne.n	8011ce6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ce2:	2be0      	cmp	r3, #224	@ 0xe0
 8011ce4:	d102      	bne.n	8011cec <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011ce6:	f06f 030f 	mvn.w	r3, #15
 8011cea:	e06c      	b.n	8011dc6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011cec:	78fb      	ldrb	r3, [r7, #3]
 8011cee:	68fa      	ldr	r2, [r7, #12]
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	68b8      	ldr	r0, [r7, #8]
 8011cf4:	f7ff fe56 	bl	80119a4 <etharp_find_entry>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011cfc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	da02      	bge.n	8011d0a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011d04:	8afb      	ldrh	r3, [r7, #22]
 8011d06:	b25b      	sxtb	r3, r3
 8011d08:	e05d      	b.n	8011dc6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011d0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d0e:	4933      	ldr	r1, [pc, #204]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d10:	4613      	mov	r3, r2
 8011d12:	005b      	lsls	r3, r3, #1
 8011d14:	4413      	add	r3, r2
 8011d16:	00db      	lsls	r3, r3, #3
 8011d18:	440b      	add	r3, r1
 8011d1a:	3314      	adds	r3, #20
 8011d1c:	2202      	movs	r2, #2
 8011d1e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011d20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d24:	492d      	ldr	r1, [pc, #180]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d26:	4613      	mov	r3, r2
 8011d28:	005b      	lsls	r3, r3, #1
 8011d2a:	4413      	add	r3, r2
 8011d2c:	00db      	lsls	r3, r3, #3
 8011d2e:	440b      	add	r3, r1
 8011d30:	3308      	adds	r3, #8
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011d36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d3a:	4613      	mov	r3, r2
 8011d3c:	005b      	lsls	r3, r3, #1
 8011d3e:	4413      	add	r3, r2
 8011d40:	00db      	lsls	r3, r3, #3
 8011d42:	3308      	adds	r3, #8
 8011d44:	4a25      	ldr	r2, [pc, #148]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d46:	4413      	add	r3, r2
 8011d48:	3304      	adds	r3, #4
 8011d4a:	2206      	movs	r2, #6
 8011d4c:	6879      	ldr	r1, [r7, #4]
 8011d4e:	4618      	mov	r0, r3
 8011d50:	f002 fafb 	bl	801434a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011d54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d58:	4920      	ldr	r1, [pc, #128]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d5a:	4613      	mov	r3, r2
 8011d5c:	005b      	lsls	r3, r3, #1
 8011d5e:	4413      	add	r3, r2
 8011d60:	00db      	lsls	r3, r3, #3
 8011d62:	440b      	add	r3, r1
 8011d64:	3312      	adds	r3, #18
 8011d66:	2200      	movs	r2, #0
 8011d68:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011d6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d6e:	491b      	ldr	r1, [pc, #108]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d70:	4613      	mov	r3, r2
 8011d72:	005b      	lsls	r3, r3, #1
 8011d74:	4413      	add	r3, r2
 8011d76:	00db      	lsls	r3, r3, #3
 8011d78:	440b      	add	r3, r1
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d021      	beq.n	8011dc4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d84:	4915      	ldr	r1, [pc, #84]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d86:	4613      	mov	r3, r2
 8011d88:	005b      	lsls	r3, r3, #1
 8011d8a:	4413      	add	r3, r2
 8011d8c:	00db      	lsls	r3, r3, #3
 8011d8e:	440b      	add	r3, r1
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d98:	4910      	ldr	r1, [pc, #64]	@ (8011ddc <etharp_update_arp_entry+0x148>)
 8011d9a:	4613      	mov	r3, r2
 8011d9c:	005b      	lsls	r3, r3, #1
 8011d9e:	4413      	add	r3, r2
 8011da0:	00db      	lsls	r3, r3, #3
 8011da2:	440b      	add	r3, r1
 8011da4:	2200      	movs	r2, #0
 8011da6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8011dae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011db2:	9300      	str	r3, [sp, #0]
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6939      	ldr	r1, [r7, #16]
 8011db8:	68f8      	ldr	r0, [r7, #12]
 8011dba:	f002 f869 	bl	8013e90 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011dbe:	6938      	ldr	r0, [r7, #16]
 8011dc0:	f7f6 fb28 	bl	8008414 <pbuf_free>
  }
  return ERR_OK;
 8011dc4:	2300      	movs	r3, #0
}
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	3718      	adds	r7, #24
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	08017b20 	.word	0x08017b20
 8011dd4:	08017c18 	.word	0x08017c18
 8011dd8:	08017b98 	.word	0x08017b98
 8011ddc:	200043d0 	.word	0x200043d0

08011de0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b084      	sub	sp, #16
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011de8:	2300      	movs	r3, #0
 8011dea:	60fb      	str	r3, [r7, #12]
 8011dec:	e01e      	b.n	8011e2c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011dee:	4913      	ldr	r1, [pc, #76]	@ (8011e3c <etharp_cleanup_netif+0x5c>)
 8011df0:	68fa      	ldr	r2, [r7, #12]
 8011df2:	4613      	mov	r3, r2
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	4413      	add	r3, r2
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	440b      	add	r3, r1
 8011dfc:	3314      	adds	r3, #20
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011e02:	7afb      	ldrb	r3, [r7, #11]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00e      	beq.n	8011e26 <etharp_cleanup_netif+0x46>
 8011e08:	490c      	ldr	r1, [pc, #48]	@ (8011e3c <etharp_cleanup_netif+0x5c>)
 8011e0a:	68fa      	ldr	r2, [r7, #12]
 8011e0c:	4613      	mov	r3, r2
 8011e0e:	005b      	lsls	r3, r3, #1
 8011e10:	4413      	add	r3, r2
 8011e12:	00db      	lsls	r3, r3, #3
 8011e14:	440b      	add	r3, r1
 8011e16:	3308      	adds	r3, #8
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	687a      	ldr	r2, [r7, #4]
 8011e1c:	429a      	cmp	r2, r3
 8011e1e:	d102      	bne.n	8011e26 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011e20:	68f8      	ldr	r0, [r7, #12]
 8011e22:	f7ff fce5 	bl	80117f0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	60fb      	str	r3, [r7, #12]
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	2b09      	cmp	r3, #9
 8011e30:	dddd      	ble.n	8011dee <etharp_cleanup_netif+0xe>
    }
  }
}
 8011e32:	bf00      	nop
 8011e34:	bf00      	nop
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	200043d0 	.word	0x200043d0

08011e40 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011e40:	b5b0      	push	{r4, r5, r7, lr}
 8011e42:	b08a      	sub	sp, #40	@ 0x28
 8011e44:	af04      	add	r7, sp, #16
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d107      	bne.n	8011e60 <etharp_input+0x20>
 8011e50:	4b3f      	ldr	r3, [pc, #252]	@ (8011f50 <etharp_input+0x110>)
 8011e52:	f240 228a 	movw	r2, #650	@ 0x28a
 8011e56:	493f      	ldr	r1, [pc, #252]	@ (8011f54 <etharp_input+0x114>)
 8011e58:	483f      	ldr	r0, [pc, #252]	@ (8011f58 <etharp_input+0x118>)
 8011e5a:	f002 f961 	bl	8014120 <iprintf>
 8011e5e:	e074      	b.n	8011f4a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	685b      	ldr	r3, [r3, #4]
 8011e64:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e66:	693b      	ldr	r3, [r7, #16]
 8011e68:	881b      	ldrh	r3, [r3, #0]
 8011e6a:	b29b      	uxth	r3, r3
 8011e6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011e70:	d10c      	bne.n	8011e8c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e76:	2b06      	cmp	r3, #6
 8011e78:	d108      	bne.n	8011e8c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e7a:	693b      	ldr	r3, [r7, #16]
 8011e7c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e7e:	2b04      	cmp	r3, #4
 8011e80:	d104      	bne.n	8011e8c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e82:	693b      	ldr	r3, [r7, #16]
 8011e84:	885b      	ldrh	r3, [r3, #2]
 8011e86:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e88:	2b08      	cmp	r3, #8
 8011e8a:	d003      	beq.n	8011e94 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e8c:	6878      	ldr	r0, [r7, #4]
 8011e8e:	f7f6 fac1 	bl	8008414 <pbuf_free>
    return;
 8011e92:	e05a      	b.n	8011f4a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	330e      	adds	r3, #14
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	3318      	adds	r3, #24
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	3304      	adds	r3, #4
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d102      	bne.n	8011eb4 <etharp_input+0x74>
    for_us = 0;
 8011eae:	2300      	movs	r3, #0
 8011eb0:	75fb      	strb	r3, [r7, #23]
 8011eb2:	e009      	b.n	8011ec8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011eb4:	68ba      	ldr	r2, [r7, #8]
 8011eb6:	683b      	ldr	r3, [r7, #0]
 8011eb8:	3304      	adds	r3, #4
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	429a      	cmp	r2, r3
 8011ebe:	bf0c      	ite	eq
 8011ec0:	2301      	moveq	r3, #1
 8011ec2:	2300      	movne	r3, #0
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011ec8:	693b      	ldr	r3, [r7, #16]
 8011eca:	f103 0208 	add.w	r2, r3, #8
 8011ece:	7dfb      	ldrb	r3, [r7, #23]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <etharp_input+0x98>
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e000      	b.n	8011eda <etharp_input+0x9a>
 8011ed8:	2302      	movs	r3, #2
 8011eda:	f107 010c 	add.w	r1, r7, #12
 8011ede:	6838      	ldr	r0, [r7, #0]
 8011ee0:	f7ff fed8 	bl	8011c94 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011ee4:	693b      	ldr	r3, [r7, #16]
 8011ee6:	88db      	ldrh	r3, [r3, #6]
 8011ee8:	b29b      	uxth	r3, r3
 8011eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011eee:	d003      	beq.n	8011ef8 <etharp_input+0xb8>
 8011ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011ef4:	d01e      	beq.n	8011f34 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011ef6:	e025      	b.n	8011f44 <etharp_input+0x104>
      if (for_us) {
 8011ef8:	7dfb      	ldrb	r3, [r7, #23]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d021      	beq.n	8011f42 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8011f04:	693b      	ldr	r3, [r7, #16]
 8011f06:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011f14:	693a      	ldr	r2, [r7, #16]
 8011f16:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011f18:	2102      	movs	r1, #2
 8011f1a:	9103      	str	r1, [sp, #12]
 8011f1c:	f107 010c 	add.w	r1, r7, #12
 8011f20:	9102      	str	r1, [sp, #8]
 8011f22:	9201      	str	r2, [sp, #4]
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	462b      	mov	r3, r5
 8011f28:	4622      	mov	r2, r4
 8011f2a:	4601      	mov	r1, r0
 8011f2c:	6838      	ldr	r0, [r7, #0]
 8011f2e:	f000 faef 	bl	8012510 <etharp_raw>
      break;
 8011f32:	e006      	b.n	8011f42 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8011f34:	f107 030c 	add.w	r3, r7, #12
 8011f38:	4619      	mov	r1, r3
 8011f3a:	6838      	ldr	r0, [r7, #0]
 8011f3c:	f7fe f9d2 	bl	80102e4 <dhcp_arp_reply>
      break;
 8011f40:	e000      	b.n	8011f44 <etharp_input+0x104>
      break;
 8011f42:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7f6 fa65 	bl	8008414 <pbuf_free>
}
 8011f4a:	3718      	adds	r7, #24
 8011f4c:	46bd      	mov	sp, r7
 8011f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8011f50:	08017b20 	.word	0x08017b20
 8011f54:	08017c70 	.word	0x08017c70
 8011f58:	08017b98 	.word	0x08017b98

08011f5c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b086      	sub	sp, #24
 8011f60:	af02      	add	r7, sp, #8
 8011f62:	60f8      	str	r0, [r7, #12]
 8011f64:	60b9      	str	r1, [r7, #8]
 8011f66:	4613      	mov	r3, r2
 8011f68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011f6a:	79fa      	ldrb	r2, [r7, #7]
 8011f6c:	4944      	ldr	r1, [pc, #272]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8011f6e:	4613      	mov	r3, r2
 8011f70:	005b      	lsls	r3, r3, #1
 8011f72:	4413      	add	r3, r2
 8011f74:	00db      	lsls	r3, r3, #3
 8011f76:	440b      	add	r3, r1
 8011f78:	3314      	adds	r3, #20
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	2b01      	cmp	r3, #1
 8011f7e:	d806      	bhi.n	8011f8e <etharp_output_to_arp_index+0x32>
 8011f80:	4b40      	ldr	r3, [pc, #256]	@ (8012084 <etharp_output_to_arp_index+0x128>)
 8011f82:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011f86:	4940      	ldr	r1, [pc, #256]	@ (8012088 <etharp_output_to_arp_index+0x12c>)
 8011f88:	4840      	ldr	r0, [pc, #256]	@ (801208c <etharp_output_to_arp_index+0x130>)
 8011f8a:	f002 f8c9 	bl	8014120 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f8e:	79fa      	ldrb	r2, [r7, #7]
 8011f90:	493b      	ldr	r1, [pc, #236]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8011f92:	4613      	mov	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4413      	add	r3, r2
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	440b      	add	r3, r1
 8011f9c:	3314      	adds	r3, #20
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	2b02      	cmp	r3, #2
 8011fa2:	d153      	bne.n	801204c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011fa4:	79fa      	ldrb	r2, [r7, #7]
 8011fa6:	4936      	ldr	r1, [pc, #216]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8011fa8:	4613      	mov	r3, r2
 8011faa:	005b      	lsls	r3, r3, #1
 8011fac:	4413      	add	r3, r2
 8011fae:	00db      	lsls	r3, r3, #3
 8011fb0:	440b      	add	r3, r1
 8011fb2:	3312      	adds	r3, #18
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011fba:	d919      	bls.n	8011ff0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011fbc:	79fa      	ldrb	r2, [r7, #7]
 8011fbe:	4613      	mov	r3, r2
 8011fc0:	005b      	lsls	r3, r3, #1
 8011fc2:	4413      	add	r3, r2
 8011fc4:	00db      	lsls	r3, r3, #3
 8011fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8011fc8:	4413      	add	r3, r2
 8011fca:	3304      	adds	r3, #4
 8011fcc:	4619      	mov	r1, r3
 8011fce:	68f8      	ldr	r0, [r7, #12]
 8011fd0:	f000 fb4c 	bl	801266c <etharp_request>
 8011fd4:	4603      	mov	r3, r0
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d138      	bne.n	801204c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011fda:	79fa      	ldrb	r2, [r7, #7]
 8011fdc:	4928      	ldr	r1, [pc, #160]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	440b      	add	r3, r1
 8011fe8:	3314      	adds	r3, #20
 8011fea:	2203      	movs	r2, #3
 8011fec:	701a      	strb	r2, [r3, #0]
 8011fee:	e02d      	b.n	801204c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011ff0:	79fa      	ldrb	r2, [r7, #7]
 8011ff2:	4923      	ldr	r1, [pc, #140]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8011ff4:	4613      	mov	r3, r2
 8011ff6:	005b      	lsls	r3, r3, #1
 8011ff8:	4413      	add	r3, r2
 8011ffa:	00db      	lsls	r3, r3, #3
 8011ffc:	440b      	add	r3, r1
 8011ffe:	3312      	adds	r3, #18
 8012000:	881b      	ldrh	r3, [r3, #0]
 8012002:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8012006:	d321      	bcc.n	801204c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012008:	79fa      	ldrb	r2, [r7, #7]
 801200a:	4613      	mov	r3, r2
 801200c:	005b      	lsls	r3, r3, #1
 801200e:	4413      	add	r3, r2
 8012010:	00db      	lsls	r3, r3, #3
 8012012:	4a1b      	ldr	r2, [pc, #108]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8012014:	4413      	add	r3, r2
 8012016:	1d19      	adds	r1, r3, #4
 8012018:	79fa      	ldrb	r2, [r7, #7]
 801201a:	4613      	mov	r3, r2
 801201c:	005b      	lsls	r3, r3, #1
 801201e:	4413      	add	r3, r2
 8012020:	00db      	lsls	r3, r3, #3
 8012022:	3308      	adds	r3, #8
 8012024:	4a16      	ldr	r2, [pc, #88]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8012026:	4413      	add	r3, r2
 8012028:	3304      	adds	r3, #4
 801202a:	461a      	mov	r2, r3
 801202c:	68f8      	ldr	r0, [r7, #12]
 801202e:	f000 fafb 	bl	8012628 <etharp_request_dst>
 8012032:	4603      	mov	r3, r0
 8012034:	2b00      	cmp	r3, #0
 8012036:	d109      	bne.n	801204c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012038:	79fa      	ldrb	r2, [r7, #7]
 801203a:	4911      	ldr	r1, [pc, #68]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 801203c:	4613      	mov	r3, r2
 801203e:	005b      	lsls	r3, r3, #1
 8012040:	4413      	add	r3, r2
 8012042:	00db      	lsls	r3, r3, #3
 8012044:	440b      	add	r3, r1
 8012046:	3314      	adds	r3, #20
 8012048:	2203      	movs	r2, #3
 801204a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8012052:	79fa      	ldrb	r2, [r7, #7]
 8012054:	4613      	mov	r3, r2
 8012056:	005b      	lsls	r3, r3, #1
 8012058:	4413      	add	r3, r2
 801205a:	00db      	lsls	r3, r3, #3
 801205c:	3308      	adds	r3, #8
 801205e:	4a08      	ldr	r2, [pc, #32]	@ (8012080 <etharp_output_to_arp_index+0x124>)
 8012060:	4413      	add	r3, r2
 8012062:	3304      	adds	r3, #4
 8012064:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012068:	9200      	str	r2, [sp, #0]
 801206a:	460a      	mov	r2, r1
 801206c:	68b9      	ldr	r1, [r7, #8]
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f001 ff0e 	bl	8013e90 <ethernet_output>
 8012074:	4603      	mov	r3, r0
}
 8012076:	4618      	mov	r0, r3
 8012078:	3710      	adds	r7, #16
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}
 801207e:	bf00      	nop
 8012080:	200043d0 	.word	0x200043d0
 8012084:	08017b20 	.word	0x08017b20
 8012088:	08017c90 	.word	0x08017c90
 801208c:	08017b98 	.word	0x08017b98

08012090 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b08a      	sub	sp, #40	@ 0x28
 8012094:	af02      	add	r7, sp, #8
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	60b9      	str	r1, [r7, #8]
 801209a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d106      	bne.n	80120b4 <etharp_output+0x24>
 80120a6:	4b73      	ldr	r3, [pc, #460]	@ (8012274 <etharp_output+0x1e4>)
 80120a8:	f240 321e 	movw	r2, #798	@ 0x31e
 80120ac:	4972      	ldr	r1, [pc, #456]	@ (8012278 <etharp_output+0x1e8>)
 80120ae:	4873      	ldr	r0, [pc, #460]	@ (801227c <etharp_output+0x1ec>)
 80120b0:	f002 f836 	bl	8014120 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80120b4:	68bb      	ldr	r3, [r7, #8]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d106      	bne.n	80120c8 <etharp_output+0x38>
 80120ba:	4b6e      	ldr	r3, [pc, #440]	@ (8012274 <etharp_output+0x1e4>)
 80120bc:	f240 321f 	movw	r2, #799	@ 0x31f
 80120c0:	496f      	ldr	r1, [pc, #444]	@ (8012280 <etharp_output+0x1f0>)
 80120c2:	486e      	ldr	r0, [pc, #440]	@ (801227c <etharp_output+0x1ec>)
 80120c4:	f002 f82c 	bl	8014120 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <etharp_output+0x4c>
 80120ce:	4b69      	ldr	r3, [pc, #420]	@ (8012274 <etharp_output+0x1e4>)
 80120d0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80120d4:	496b      	ldr	r1, [pc, #428]	@ (8012284 <etharp_output+0x1f4>)
 80120d6:	4869      	ldr	r0, [pc, #420]	@ (801227c <etharp_output+0x1ec>)
 80120d8:	f002 f822 	bl	8014120 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	68f9      	ldr	r1, [r7, #12]
 80120e2:	4618      	mov	r0, r3
 80120e4:	f000 ffb6 	bl	8013054 <ip4_addr_isbroadcast_u32>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d002      	beq.n	80120f4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80120ee:	4b66      	ldr	r3, [pc, #408]	@ (8012288 <etharp_output+0x1f8>)
 80120f0:	61fb      	str	r3, [r7, #28]
 80120f2:	e0af      	b.n	8012254 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120fc:	2be0      	cmp	r3, #224	@ 0xe0
 80120fe:	d118      	bne.n	8012132 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012100:	2301      	movs	r3, #1
 8012102:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012104:	2300      	movs	r3, #0
 8012106:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012108:	235e      	movs	r3, #94	@ 0x5e
 801210a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	3301      	adds	r3, #1
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012116:	b2db      	uxtb	r3, r3
 8012118:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	3302      	adds	r3, #2
 801211e:	781b      	ldrb	r3, [r3, #0]
 8012120:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	3303      	adds	r3, #3
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801212a:	f107 0310 	add.w	r3, r7, #16
 801212e:	61fb      	str	r3, [r7, #28]
 8012130:	e090      	b.n	8012254 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	3304      	adds	r3, #4
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	405a      	eors	r2, r3
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	3308      	adds	r3, #8
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	4013      	ands	r3, r2
 8012146:	2b00      	cmp	r3, #0
 8012148:	d012      	beq.n	8012170 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012150:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8012154:	4293      	cmp	r3, r2
 8012156:	d00b      	beq.n	8012170 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	330c      	adds	r3, #12
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d003      	beq.n	801216a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	330c      	adds	r3, #12
 8012166:	61bb      	str	r3, [r7, #24]
 8012168:	e002      	b.n	8012170 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801216a:	f06f 0303 	mvn.w	r3, #3
 801216e:	e07d      	b.n	801226c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012170:	4b46      	ldr	r3, [pc, #280]	@ (801228c <etharp_output+0x1fc>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	4619      	mov	r1, r3
 8012176:	4a46      	ldr	r2, [pc, #280]	@ (8012290 <etharp_output+0x200>)
 8012178:	460b      	mov	r3, r1
 801217a:	005b      	lsls	r3, r3, #1
 801217c:	440b      	add	r3, r1
 801217e:	00db      	lsls	r3, r3, #3
 8012180:	4413      	add	r3, r2
 8012182:	3314      	adds	r3, #20
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	2b01      	cmp	r3, #1
 8012188:	d925      	bls.n	80121d6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801218a:	4b40      	ldr	r3, [pc, #256]	@ (801228c <etharp_output+0x1fc>)
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	4619      	mov	r1, r3
 8012190:	4a3f      	ldr	r2, [pc, #252]	@ (8012290 <etharp_output+0x200>)
 8012192:	460b      	mov	r3, r1
 8012194:	005b      	lsls	r3, r3, #1
 8012196:	440b      	add	r3, r1
 8012198:	00db      	lsls	r3, r3, #3
 801219a:	4413      	add	r3, r2
 801219c:	3308      	adds	r3, #8
 801219e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80121a0:	68fa      	ldr	r2, [r7, #12]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	d117      	bne.n	80121d6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80121a6:	69bb      	ldr	r3, [r7, #24]
 80121a8:	681a      	ldr	r2, [r3, #0]
 80121aa:	4b38      	ldr	r3, [pc, #224]	@ (801228c <etharp_output+0x1fc>)
 80121ac:	781b      	ldrb	r3, [r3, #0]
 80121ae:	4618      	mov	r0, r3
 80121b0:	4937      	ldr	r1, [pc, #220]	@ (8012290 <etharp_output+0x200>)
 80121b2:	4603      	mov	r3, r0
 80121b4:	005b      	lsls	r3, r3, #1
 80121b6:	4403      	add	r3, r0
 80121b8:	00db      	lsls	r3, r3, #3
 80121ba:	440b      	add	r3, r1
 80121bc:	3304      	adds	r3, #4
 80121be:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d108      	bne.n	80121d6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80121c4:	4b31      	ldr	r3, [pc, #196]	@ (801228c <etharp_output+0x1fc>)
 80121c6:	781b      	ldrb	r3, [r3, #0]
 80121c8:	461a      	mov	r2, r3
 80121ca:	68b9      	ldr	r1, [r7, #8]
 80121cc:	68f8      	ldr	r0, [r7, #12]
 80121ce:	f7ff fec5 	bl	8011f5c <etharp_output_to_arp_index>
 80121d2:	4603      	mov	r3, r0
 80121d4:	e04a      	b.n	801226c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121d6:	2300      	movs	r3, #0
 80121d8:	75fb      	strb	r3, [r7, #23]
 80121da:	e031      	b.n	8012240 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121dc:	7dfa      	ldrb	r2, [r7, #23]
 80121de:	492c      	ldr	r1, [pc, #176]	@ (8012290 <etharp_output+0x200>)
 80121e0:	4613      	mov	r3, r2
 80121e2:	005b      	lsls	r3, r3, #1
 80121e4:	4413      	add	r3, r2
 80121e6:	00db      	lsls	r3, r3, #3
 80121e8:	440b      	add	r3, r1
 80121ea:	3314      	adds	r3, #20
 80121ec:	781b      	ldrb	r3, [r3, #0]
 80121ee:	2b01      	cmp	r3, #1
 80121f0:	d923      	bls.n	801223a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80121f2:	7dfa      	ldrb	r2, [r7, #23]
 80121f4:	4926      	ldr	r1, [pc, #152]	@ (8012290 <etharp_output+0x200>)
 80121f6:	4613      	mov	r3, r2
 80121f8:	005b      	lsls	r3, r3, #1
 80121fa:	4413      	add	r3, r2
 80121fc:	00db      	lsls	r3, r3, #3
 80121fe:	440b      	add	r3, r1
 8012200:	3308      	adds	r3, #8
 8012202:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012204:	68fa      	ldr	r2, [r7, #12]
 8012206:	429a      	cmp	r2, r3
 8012208:	d117      	bne.n	801223a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	6819      	ldr	r1, [r3, #0]
 801220e:	7dfa      	ldrb	r2, [r7, #23]
 8012210:	481f      	ldr	r0, [pc, #124]	@ (8012290 <etharp_output+0x200>)
 8012212:	4613      	mov	r3, r2
 8012214:	005b      	lsls	r3, r3, #1
 8012216:	4413      	add	r3, r2
 8012218:	00db      	lsls	r3, r3, #3
 801221a:	4403      	add	r3, r0
 801221c:	3304      	adds	r3, #4
 801221e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012220:	4299      	cmp	r1, r3
 8012222:	d10a      	bne.n	801223a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012224:	4a19      	ldr	r2, [pc, #100]	@ (801228c <etharp_output+0x1fc>)
 8012226:	7dfb      	ldrb	r3, [r7, #23]
 8012228:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801222a:	7dfb      	ldrb	r3, [r7, #23]
 801222c:	461a      	mov	r2, r3
 801222e:	68b9      	ldr	r1, [r7, #8]
 8012230:	68f8      	ldr	r0, [r7, #12]
 8012232:	f7ff fe93 	bl	8011f5c <etharp_output_to_arp_index>
 8012236:	4603      	mov	r3, r0
 8012238:	e018      	b.n	801226c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801223a:	7dfb      	ldrb	r3, [r7, #23]
 801223c:	3301      	adds	r3, #1
 801223e:	75fb      	strb	r3, [r7, #23]
 8012240:	7dfb      	ldrb	r3, [r7, #23]
 8012242:	2b09      	cmp	r3, #9
 8012244:	d9ca      	bls.n	80121dc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012246:	68ba      	ldr	r2, [r7, #8]
 8012248:	69b9      	ldr	r1, [r7, #24]
 801224a:	68f8      	ldr	r0, [r7, #12]
 801224c:	f000 f822 	bl	8012294 <etharp_query>
 8012250:	4603      	mov	r3, r0
 8012252:	e00b      	b.n	801226c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801225a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	69fb      	ldr	r3, [r7, #28]
 8012262:	68b9      	ldr	r1, [r7, #8]
 8012264:	68f8      	ldr	r0, [r7, #12]
 8012266:	f001 fe13 	bl	8013e90 <ethernet_output>
 801226a:	4603      	mov	r3, r0
}
 801226c:	4618      	mov	r0, r3
 801226e:	3720      	adds	r7, #32
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}
 8012274:	08017b20 	.word	0x08017b20
 8012278:	08017c70 	.word	0x08017c70
 801227c:	08017b98 	.word	0x08017b98
 8012280:	08017cc0 	.word	0x08017cc0
 8012284:	08017c60 	.word	0x08017c60
 8012288:	0801831c 	.word	0x0801831c
 801228c:	200044c0 	.word	0x200044c0
 8012290:	200043d0 	.word	0x200043d0

08012294 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012294:	b580      	push	{r7, lr}
 8012296:	b08c      	sub	sp, #48	@ 0x30
 8012298:	af02      	add	r7, sp, #8
 801229a:	60f8      	str	r0, [r7, #12]
 801229c:	60b9      	str	r1, [r7, #8]
 801229e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	332a      	adds	r3, #42	@ 0x2a
 80122a4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80122a6:	23ff      	movs	r3, #255	@ 0xff
 80122a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 80122ac:	2300      	movs	r3, #0
 80122ae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	68f9      	ldr	r1, [r7, #12]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f000 fecc 	bl	8013054 <ip4_addr_isbroadcast_u32>
 80122bc:	4603      	mov	r3, r0
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d10c      	bne.n	80122dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80122c2:	68bb      	ldr	r3, [r7, #8]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80122ca:	2be0      	cmp	r3, #224	@ 0xe0
 80122cc:	d006      	beq.n	80122dc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d003      	beq.n	80122dc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d102      	bne.n	80122e2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80122dc:	f06f 030f 	mvn.w	r3, #15
 80122e0:	e101      	b.n	80124e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	2101      	movs	r1, #1
 80122e6:	68b8      	ldr	r0, [r7, #8]
 80122e8:	f7ff fb5c 	bl	80119a4 <etharp_find_entry>
 80122ec:	4603      	mov	r3, r0
 80122ee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80122f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	da02      	bge.n	80122fe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80122f8:	8a7b      	ldrh	r3, [r7, #18]
 80122fa:	b25b      	sxtb	r3, r3
 80122fc:	e0f3      	b.n	80124e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80122fe:	8a7b      	ldrh	r3, [r7, #18]
 8012300:	2b7e      	cmp	r3, #126	@ 0x7e
 8012302:	d906      	bls.n	8012312 <etharp_query+0x7e>
 8012304:	4b7a      	ldr	r3, [pc, #488]	@ (80124f0 <etharp_query+0x25c>)
 8012306:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801230a:	497a      	ldr	r1, [pc, #488]	@ (80124f4 <etharp_query+0x260>)
 801230c:	487a      	ldr	r0, [pc, #488]	@ (80124f8 <etharp_query+0x264>)
 801230e:	f001 ff07 	bl	8014120 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012312:	8a7b      	ldrh	r3, [r7, #18]
 8012314:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012316:	7c7a      	ldrb	r2, [r7, #17]
 8012318:	4978      	ldr	r1, [pc, #480]	@ (80124fc <etharp_query+0x268>)
 801231a:	4613      	mov	r3, r2
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	4413      	add	r3, r2
 8012320:	00db      	lsls	r3, r3, #3
 8012322:	440b      	add	r3, r1
 8012324:	3314      	adds	r3, #20
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d115      	bne.n	8012358 <etharp_query+0xc4>
    is_new_entry = 1;
 801232c:	2301      	movs	r3, #1
 801232e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012330:	7c7a      	ldrb	r2, [r7, #17]
 8012332:	4972      	ldr	r1, [pc, #456]	@ (80124fc <etharp_query+0x268>)
 8012334:	4613      	mov	r3, r2
 8012336:	005b      	lsls	r3, r3, #1
 8012338:	4413      	add	r3, r2
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	440b      	add	r3, r1
 801233e:	3314      	adds	r3, #20
 8012340:	2201      	movs	r2, #1
 8012342:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012344:	7c7a      	ldrb	r2, [r7, #17]
 8012346:	496d      	ldr	r1, [pc, #436]	@ (80124fc <etharp_query+0x268>)
 8012348:	4613      	mov	r3, r2
 801234a:	005b      	lsls	r3, r3, #1
 801234c:	4413      	add	r3, r2
 801234e:	00db      	lsls	r3, r3, #3
 8012350:	440b      	add	r3, r1
 8012352:	3308      	adds	r3, #8
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012358:	7c7a      	ldrb	r2, [r7, #17]
 801235a:	4968      	ldr	r1, [pc, #416]	@ (80124fc <etharp_query+0x268>)
 801235c:	4613      	mov	r3, r2
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	4413      	add	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	440b      	add	r3, r1
 8012366:	3314      	adds	r3, #20
 8012368:	781b      	ldrb	r3, [r3, #0]
 801236a:	2b01      	cmp	r3, #1
 801236c:	d011      	beq.n	8012392 <etharp_query+0xfe>
 801236e:	7c7a      	ldrb	r2, [r7, #17]
 8012370:	4962      	ldr	r1, [pc, #392]	@ (80124fc <etharp_query+0x268>)
 8012372:	4613      	mov	r3, r2
 8012374:	005b      	lsls	r3, r3, #1
 8012376:	4413      	add	r3, r2
 8012378:	00db      	lsls	r3, r3, #3
 801237a:	440b      	add	r3, r1
 801237c:	3314      	adds	r3, #20
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	2b01      	cmp	r3, #1
 8012382:	d806      	bhi.n	8012392 <etharp_query+0xfe>
 8012384:	4b5a      	ldr	r3, [pc, #360]	@ (80124f0 <etharp_query+0x25c>)
 8012386:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801238a:	495d      	ldr	r1, [pc, #372]	@ (8012500 <etharp_query+0x26c>)
 801238c:	485a      	ldr	r0, [pc, #360]	@ (80124f8 <etharp_query+0x264>)
 801238e:	f001 fec7 	bl	8014120 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012392:	6a3b      	ldr	r3, [r7, #32]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d102      	bne.n	801239e <etharp_query+0x10a>
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d10c      	bne.n	80123b8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801239e:	68b9      	ldr	r1, [r7, #8]
 80123a0:	68f8      	ldr	r0, [r7, #12]
 80123a2:	f000 f963 	bl	801266c <etharp_request>
 80123a6:	4603      	mov	r3, r0
 80123a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d102      	bne.n	80123b8 <etharp_query+0x124>
      return result;
 80123b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80123b6:	e096      	b.n	80124e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d106      	bne.n	80123cc <etharp_query+0x138>
 80123be:	4b4c      	ldr	r3, [pc, #304]	@ (80124f0 <etharp_query+0x25c>)
 80123c0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80123c4:	494f      	ldr	r1, [pc, #316]	@ (8012504 <etharp_query+0x270>)
 80123c6:	484c      	ldr	r0, [pc, #304]	@ (80124f8 <etharp_query+0x264>)
 80123c8:	f001 feaa 	bl	8014120 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80123cc:	7c7a      	ldrb	r2, [r7, #17]
 80123ce:	494b      	ldr	r1, [pc, #300]	@ (80124fc <etharp_query+0x268>)
 80123d0:	4613      	mov	r3, r2
 80123d2:	005b      	lsls	r3, r3, #1
 80123d4:	4413      	add	r3, r2
 80123d6:	00db      	lsls	r3, r3, #3
 80123d8:	440b      	add	r3, r1
 80123da:	3314      	adds	r3, #20
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d917      	bls.n	8012412 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80123e2:	4a49      	ldr	r2, [pc, #292]	@ (8012508 <etharp_query+0x274>)
 80123e4:	7c7b      	ldrb	r3, [r7, #17]
 80123e6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80123e8:	7c7a      	ldrb	r2, [r7, #17]
 80123ea:	4613      	mov	r3, r2
 80123ec:	005b      	lsls	r3, r3, #1
 80123ee:	4413      	add	r3, r2
 80123f0:	00db      	lsls	r3, r3, #3
 80123f2:	3308      	adds	r3, #8
 80123f4:	4a41      	ldr	r2, [pc, #260]	@ (80124fc <etharp_query+0x268>)
 80123f6:	4413      	add	r3, r2
 80123f8:	3304      	adds	r3, #4
 80123fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80123fe:	9200      	str	r2, [sp, #0]
 8012400:	697a      	ldr	r2, [r7, #20]
 8012402:	6879      	ldr	r1, [r7, #4]
 8012404:	68f8      	ldr	r0, [r7, #12]
 8012406:	f001 fd43 	bl	8013e90 <ethernet_output>
 801240a:	4603      	mov	r3, r0
 801240c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012410:	e067      	b.n	80124e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012412:	7c7a      	ldrb	r2, [r7, #17]
 8012414:	4939      	ldr	r1, [pc, #228]	@ (80124fc <etharp_query+0x268>)
 8012416:	4613      	mov	r3, r2
 8012418:	005b      	lsls	r3, r3, #1
 801241a:	4413      	add	r3, r2
 801241c:	00db      	lsls	r3, r3, #3
 801241e:	440b      	add	r3, r1
 8012420:	3314      	adds	r3, #20
 8012422:	781b      	ldrb	r3, [r3, #0]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d15c      	bne.n	80124e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012428:	2300      	movs	r3, #0
 801242a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012430:	e01c      	b.n	801246c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	895a      	ldrh	r2, [r3, #10]
 8012436:	69fb      	ldr	r3, [r7, #28]
 8012438:	891b      	ldrh	r3, [r3, #8]
 801243a:	429a      	cmp	r2, r3
 801243c:	d10a      	bne.n	8012454 <etharp_query+0x1c0>
 801243e:	69fb      	ldr	r3, [r7, #28]
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d006      	beq.n	8012454 <etharp_query+0x1c0>
 8012446:	4b2a      	ldr	r3, [pc, #168]	@ (80124f0 <etharp_query+0x25c>)
 8012448:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801244c:	492f      	ldr	r1, [pc, #188]	@ (801250c <etharp_query+0x278>)
 801244e:	482a      	ldr	r0, [pc, #168]	@ (80124f8 <etharp_query+0x264>)
 8012450:	f001 fe66 	bl	8014120 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012454:	69fb      	ldr	r3, [r7, #28]
 8012456:	7b1b      	ldrb	r3, [r3, #12]
 8012458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801245c:	2b00      	cmp	r3, #0
 801245e:	d002      	beq.n	8012466 <etharp_query+0x1d2>
        copy_needed = 1;
 8012460:	2301      	movs	r3, #1
 8012462:	61bb      	str	r3, [r7, #24]
        break;
 8012464:	e005      	b.n	8012472 <etharp_query+0x1de>
      }
      p = p->next;
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1df      	bne.n	8012432 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d007      	beq.n	8012488 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012478:	687a      	ldr	r2, [r7, #4]
 801247a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801247e:	200e      	movs	r0, #14
 8012480:	f7f6 fb6c 	bl	8008b5c <pbuf_clone>
 8012484:	61f8      	str	r0, [r7, #28]
 8012486:	e004      	b.n	8012492 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801248c:	69f8      	ldr	r0, [r7, #28]
 801248e:	f7f6 f861 	bl	8008554 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8012492:	69fb      	ldr	r3, [r7, #28]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d021      	beq.n	80124dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012498:	7c7a      	ldrb	r2, [r7, #17]
 801249a:	4918      	ldr	r1, [pc, #96]	@ (80124fc <etharp_query+0x268>)
 801249c:	4613      	mov	r3, r2
 801249e:	005b      	lsls	r3, r3, #1
 80124a0:	4413      	add	r3, r2
 80124a2:	00db      	lsls	r3, r3, #3
 80124a4:	440b      	add	r3, r1
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00a      	beq.n	80124c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80124ac:	7c7a      	ldrb	r2, [r7, #17]
 80124ae:	4913      	ldr	r1, [pc, #76]	@ (80124fc <etharp_query+0x268>)
 80124b0:	4613      	mov	r3, r2
 80124b2:	005b      	lsls	r3, r3, #1
 80124b4:	4413      	add	r3, r2
 80124b6:	00db      	lsls	r3, r3, #3
 80124b8:	440b      	add	r3, r1
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	4618      	mov	r0, r3
 80124be:	f7f5 ffa9 	bl	8008414 <pbuf_free>
      }
      arp_table[i].q = p;
 80124c2:	7c7a      	ldrb	r2, [r7, #17]
 80124c4:	490d      	ldr	r1, [pc, #52]	@ (80124fc <etharp_query+0x268>)
 80124c6:	4613      	mov	r3, r2
 80124c8:	005b      	lsls	r3, r3, #1
 80124ca:	4413      	add	r3, r2
 80124cc:	00db      	lsls	r3, r3, #3
 80124ce:	440b      	add	r3, r1
 80124d0:	69fa      	ldr	r2, [r7, #28]
 80124d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80124d4:	2300      	movs	r3, #0
 80124d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80124da:	e002      	b.n	80124e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80124dc:	23ff      	movs	r3, #255	@ 0xff
 80124de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80124e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3728      	adds	r7, #40	@ 0x28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}
 80124ee:	bf00      	nop
 80124f0:	08017b20 	.word	0x08017b20
 80124f4:	08017ccc 	.word	0x08017ccc
 80124f8:	08017b98 	.word	0x08017b98
 80124fc:	200043d0 	.word	0x200043d0
 8012500:	08017cdc 	.word	0x08017cdc
 8012504:	08017cc0 	.word	0x08017cc0
 8012508:	200044c0 	.word	0x200044c0
 801250c:	08017d04 	.word	0x08017d04

08012510 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012510:	b580      	push	{r7, lr}
 8012512:	b08a      	sub	sp, #40	@ 0x28
 8012514:	af02      	add	r7, sp, #8
 8012516:	60f8      	str	r0, [r7, #12]
 8012518:	60b9      	str	r1, [r7, #8]
 801251a:	607a      	str	r2, [r7, #4]
 801251c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801251e:	2300      	movs	r3, #0
 8012520:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d106      	bne.n	8012536 <etharp_raw+0x26>
 8012528:	4b3a      	ldr	r3, [pc, #232]	@ (8012614 <etharp_raw+0x104>)
 801252a:	f240 4257 	movw	r2, #1111	@ 0x457
 801252e:	493a      	ldr	r1, [pc, #232]	@ (8012618 <etharp_raw+0x108>)
 8012530:	483a      	ldr	r0, [pc, #232]	@ (801261c <etharp_raw+0x10c>)
 8012532:	f001 fdf5 	bl	8014120 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012536:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801253a:	211c      	movs	r1, #28
 801253c:	200e      	movs	r0, #14
 801253e:	f7f5 fc85 	bl	8007e4c <pbuf_alloc>
 8012542:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d102      	bne.n	8012550 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801254a:	f04f 33ff 	mov.w	r3, #4294967295
 801254e:	e05d      	b.n	801260c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8012550:	69bb      	ldr	r3, [r7, #24]
 8012552:	895b      	ldrh	r3, [r3, #10]
 8012554:	2b1b      	cmp	r3, #27
 8012556:	d806      	bhi.n	8012566 <etharp_raw+0x56>
 8012558:	4b2e      	ldr	r3, [pc, #184]	@ (8012614 <etharp_raw+0x104>)
 801255a:	f240 4262 	movw	r2, #1122	@ 0x462
 801255e:	4930      	ldr	r1, [pc, #192]	@ (8012620 <etharp_raw+0x110>)
 8012560:	482e      	ldr	r0, [pc, #184]	@ (801261c <etharp_raw+0x10c>)
 8012562:	f001 fddd 	bl	8014120 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012566:	69bb      	ldr	r3, [r7, #24]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801256c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801256e:	4618      	mov	r0, r3
 8012570:	f7f3 ffc4 	bl	80064fc <lwip_htons>
 8012574:	4603      	mov	r3, r0
 8012576:	461a      	mov	r2, r3
 8012578:	697b      	ldr	r3, [r7, #20]
 801257a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012582:	2b06      	cmp	r3, #6
 8012584:	d006      	beq.n	8012594 <etharp_raw+0x84>
 8012586:	4b23      	ldr	r3, [pc, #140]	@ (8012614 <etharp_raw+0x104>)
 8012588:	f240 4269 	movw	r2, #1129	@ 0x469
 801258c:	4925      	ldr	r1, [pc, #148]	@ (8012624 <etharp_raw+0x114>)
 801258e:	4823      	ldr	r0, [pc, #140]	@ (801261c <etharp_raw+0x10c>)
 8012590:	f001 fdc6 	bl	8014120 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	3308      	adds	r3, #8
 8012598:	2206      	movs	r2, #6
 801259a:	6839      	ldr	r1, [r7, #0]
 801259c:	4618      	mov	r0, r3
 801259e:	f001 fed4 	bl	801434a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	3312      	adds	r3, #18
 80125a6:	2206      	movs	r2, #6
 80125a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80125aa:	4618      	mov	r0, r3
 80125ac:	f001 fecd 	bl	801434a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	330e      	adds	r3, #14
 80125b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125b6:	6812      	ldr	r2, [r2, #0]
 80125b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80125ba:	697b      	ldr	r3, [r7, #20]
 80125bc:	3318      	adds	r3, #24
 80125be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125c0:	6812      	ldr	r2, [r2, #0]
 80125c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	2200      	movs	r2, #0
 80125c8:	701a      	strb	r2, [r3, #0]
 80125ca:	2200      	movs	r2, #0
 80125cc:	f042 0201 	orr.w	r2, r2, #1
 80125d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	2200      	movs	r2, #0
 80125d6:	f042 0208 	orr.w	r2, r2, #8
 80125da:	709a      	strb	r2, [r3, #2]
 80125dc:	2200      	movs	r2, #0
 80125de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	2206      	movs	r2, #6
 80125e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	2204      	movs	r2, #4
 80125ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80125ec:	f640 0306 	movw	r3, #2054	@ 0x806
 80125f0:	9300      	str	r3, [sp, #0]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	69b9      	ldr	r1, [r7, #24]
 80125f8:	68f8      	ldr	r0, [r7, #12]
 80125fa:	f001 fc49 	bl	8013e90 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80125fe:	69b8      	ldr	r0, [r7, #24]
 8012600:	f7f5 ff08 	bl	8008414 <pbuf_free>
  p = NULL;
 8012604:	2300      	movs	r3, #0
 8012606:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012608:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3720      	adds	r7, #32
 8012610:	46bd      	mov	sp, r7
 8012612:	bd80      	pop	{r7, pc}
 8012614:	08017b20 	.word	0x08017b20
 8012618:	08017c70 	.word	0x08017c70
 801261c:	08017b98 	.word	0x08017b98
 8012620:	08017d20 	.word	0x08017d20
 8012624:	08017d54 	.word	0x08017d54

08012628 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b088      	sub	sp, #32
 801262c:	af04      	add	r7, sp, #16
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012644:	2201      	movs	r2, #1
 8012646:	9203      	str	r2, [sp, #12]
 8012648:	68ba      	ldr	r2, [r7, #8]
 801264a:	9202      	str	r2, [sp, #8]
 801264c:	4a06      	ldr	r2, [pc, #24]	@ (8012668 <etharp_request_dst+0x40>)
 801264e:	9201      	str	r2, [sp, #4]
 8012650:	9300      	str	r3, [sp, #0]
 8012652:	4603      	mov	r3, r0
 8012654:	687a      	ldr	r2, [r7, #4]
 8012656:	68f8      	ldr	r0, [r7, #12]
 8012658:	f7ff ff5a 	bl	8012510 <etharp_raw>
 801265c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801265e:	4618      	mov	r0, r3
 8012660:	3710      	adds	r7, #16
 8012662:	46bd      	mov	sp, r7
 8012664:	bd80      	pop	{r7, pc}
 8012666:	bf00      	nop
 8012668:	08018324 	.word	0x08018324

0801266c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
 8012674:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012676:	4a05      	ldr	r2, [pc, #20]	@ (801268c <etharp_request+0x20>)
 8012678:	6839      	ldr	r1, [r7, #0]
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f7ff ffd4 	bl	8012628 <etharp_request_dst>
 8012680:	4603      	mov	r3, r0
}
 8012682:	4618      	mov	r0, r3
 8012684:	3708      	adds	r7, #8
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
 801268a:	bf00      	nop
 801268c:	0801831c 	.word	0x0801831c

08012690 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b08e      	sub	sp, #56	@ 0x38
 8012694:	af04      	add	r7, sp, #16
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801269a:	4b8b      	ldr	r3, [pc, #556]	@ (80128c8 <icmp_input+0x238>)
 801269c:	689b      	ldr	r3, [r3, #8]
 801269e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80126a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	f003 030f 	and.w	r3, r3, #15
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	b2db      	uxtb	r3, r3
 80126ae:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80126b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80126b2:	2b13      	cmp	r3, #19
 80126b4:	f240 80f1 	bls.w	801289a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	895b      	ldrh	r3, [r3, #10]
 80126bc:	2b03      	cmp	r3, #3
 80126be:	f240 80ee 	bls.w	801289e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	685b      	ldr	r3, [r3, #4]
 80126c6:	781b      	ldrb	r3, [r3, #0]
 80126c8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80126cc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	f000 80db 	beq.w	801288c <icmp_input+0x1fc>
 80126d6:	2b08      	cmp	r3, #8
 80126d8:	f040 80db 	bne.w	8012892 <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80126dc:	4b7b      	ldr	r3, [pc, #492]	@ (80128cc <icmp_input+0x23c>)
 80126de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80126e0:	4b79      	ldr	r3, [pc, #484]	@ (80128c8 <icmp_input+0x238>)
 80126e2:	695b      	ldr	r3, [r3, #20]
 80126e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80126e8:	2be0      	cmp	r3, #224	@ 0xe0
 80126ea:	f000 80df 	beq.w	80128ac <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80126ee:	4b76      	ldr	r3, [pc, #472]	@ (80128c8 <icmp_input+0x238>)
 80126f0:	695b      	ldr	r3, [r3, #20]
 80126f2:	4a75      	ldr	r2, [pc, #468]	@ (80128c8 <icmp_input+0x238>)
 80126f4:	6812      	ldr	r2, [r2, #0]
 80126f6:	4611      	mov	r1, r2
 80126f8:	4618      	mov	r0, r3
 80126fa:	f000 fcab 	bl	8013054 <ip4_addr_isbroadcast_u32>
 80126fe:	4603      	mov	r3, r0
 8012700:	2b00      	cmp	r3, #0
 8012702:	f040 80d5 	bne.w	80128b0 <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	891b      	ldrh	r3, [r3, #8]
 801270a:	2b07      	cmp	r3, #7
 801270c:	f240 80c9 	bls.w	80128a2 <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f7f4 fb3a 	bl	8006d8a <inet_chksum_pbuf>
 8012716:	4603      	mov	r3, r0
 8012718:	2b00      	cmp	r3, #0
 801271a:	d003      	beq.n	8012724 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7f5 fe79 	bl	8008414 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8012722:	e0ce      	b.n	80128c2 <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012724:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012726:	330e      	adds	r3, #14
 8012728:	4619      	mov	r1, r3
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f7f5 fddc 	bl	80082e8 <pbuf_add_header>
 8012730:	4603      	mov	r3, r0
 8012732:	2b00      	cmp	r3, #0
 8012734:	d04b      	beq.n	80127ce <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	891a      	ldrh	r2, [r3, #8]
 801273a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801273c:	4413      	add	r3, r2
 801273e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	891b      	ldrh	r3, [r3, #8]
 8012744:	8b7a      	ldrh	r2, [r7, #26]
 8012746:	429a      	cmp	r2, r3
 8012748:	f0c0 80b4 	bcc.w	80128b4 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801274c:	8b7b      	ldrh	r3, [r7, #26]
 801274e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012752:	4619      	mov	r1, r3
 8012754:	200e      	movs	r0, #14
 8012756:	f7f5 fb79 	bl	8007e4c <pbuf_alloc>
 801275a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801275c:	697b      	ldr	r3, [r7, #20]
 801275e:	2b00      	cmp	r3, #0
 8012760:	f000 80aa 	beq.w	80128b8 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012764:	697b      	ldr	r3, [r7, #20]
 8012766:	895b      	ldrh	r3, [r3, #10]
 8012768:	461a      	mov	r2, r3
 801276a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801276c:	3308      	adds	r3, #8
 801276e:	429a      	cmp	r2, r3
 8012770:	d203      	bcs.n	801277a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012772:	6978      	ldr	r0, [r7, #20]
 8012774:	f7f5 fe4e 	bl	8008414 <pbuf_free>
          goto icmperr;
 8012778:	e09f      	b.n	80128ba <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801277a:	697b      	ldr	r3, [r7, #20]
 801277c:	685b      	ldr	r3, [r3, #4]
 801277e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012780:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012782:	4618      	mov	r0, r3
 8012784:	f001 fde1 	bl	801434a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012788:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801278a:	4619      	mov	r1, r3
 801278c:	6978      	ldr	r0, [r7, #20]
 801278e:	f7f5 fdbb 	bl	8008308 <pbuf_remove_header>
 8012792:	4603      	mov	r3, r0
 8012794:	2b00      	cmp	r3, #0
 8012796:	d009      	beq.n	80127ac <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012798:	4b4d      	ldr	r3, [pc, #308]	@ (80128d0 <icmp_input+0x240>)
 801279a:	22b6      	movs	r2, #182	@ 0xb6
 801279c:	494d      	ldr	r1, [pc, #308]	@ (80128d4 <icmp_input+0x244>)
 801279e:	484e      	ldr	r0, [pc, #312]	@ (80128d8 <icmp_input+0x248>)
 80127a0:	f001 fcbe 	bl	8014120 <iprintf>
          pbuf_free(r);
 80127a4:	6978      	ldr	r0, [r7, #20]
 80127a6:	f7f5 fe35 	bl	8008414 <pbuf_free>
          goto icmperr;
 80127aa:	e086      	b.n	80128ba <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80127ac:	6879      	ldr	r1, [r7, #4]
 80127ae:	6978      	ldr	r0, [r7, #20]
 80127b0:	f7f5 ff58 	bl	8008664 <pbuf_copy>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d003      	beq.n	80127c2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80127ba:	6978      	ldr	r0, [r7, #20]
 80127bc:	f7f5 fe2a 	bl	8008414 <pbuf_free>
          goto icmperr;
 80127c0:	e07b      	b.n	80128ba <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7f5 fe26 	bl	8008414 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	607b      	str	r3, [r7, #4]
 80127cc:	e00f      	b.n	80127ee <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80127ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127d0:	330e      	adds	r3, #14
 80127d2:	4619      	mov	r1, r3
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f7f5 fd97 	bl	8008308 <pbuf_remove_header>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d006      	beq.n	80127ee <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80127e0:	4b3b      	ldr	r3, [pc, #236]	@ (80128d0 <icmp_input+0x240>)
 80127e2:	22c7      	movs	r2, #199	@ 0xc7
 80127e4:	493d      	ldr	r1, [pc, #244]	@ (80128dc <icmp_input+0x24c>)
 80127e6:	483c      	ldr	r0, [pc, #240]	@ (80128d8 <icmp_input+0x248>)
 80127e8:	f001 fc9a 	bl	8014120 <iprintf>
          goto icmperr;
 80127ec:	e065      	b.n	80128ba <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80127f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80127f6:	4619      	mov	r1, r3
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f7f5 fd75 	bl	80082e8 <pbuf_add_header>
 80127fe:	4603      	mov	r3, r0
 8012800:	2b00      	cmp	r3, #0
 8012802:	d145      	bne.n	8012890 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801280a:	69fb      	ldr	r3, [r7, #28]
 801280c:	681a      	ldr	r2, [r3, #0]
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012812:	4b2d      	ldr	r3, [pc, #180]	@ (80128c8 <icmp_input+0x238>)
 8012814:	691a      	ldr	r2, [r3, #16]
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801281a:	693b      	ldr	r3, [r7, #16]
 801281c:	2200      	movs	r2, #0
 801281e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	885b      	ldrh	r3, [r3, #2]
 8012824:	b29b      	uxth	r3, r3
 8012826:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801282a:	4293      	cmp	r3, r2
 801282c:	d907      	bls.n	801283e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	885b      	ldrh	r3, [r3, #2]
 8012832:	b29b      	uxth	r3, r3
 8012834:	3309      	adds	r3, #9
 8012836:	b29a      	uxth	r2, r3
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	805a      	strh	r2, [r3, #2]
 801283c:	e006      	b.n	801284c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	885b      	ldrh	r3, [r3, #2]
 8012842:	b29b      	uxth	r3, r3
 8012844:	3308      	adds	r3, #8
 8012846:	b29a      	uxth	r2, r3
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	22ff      	movs	r2, #255	@ 0xff
 8012850:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	2200      	movs	r2, #0
 8012856:	729a      	strb	r2, [r3, #10]
 8012858:	2200      	movs	r2, #0
 801285a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801285c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801285e:	4619      	mov	r1, r3
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f7f4 fa80 	bl	8006d66 <inet_chksum>
 8012866:	4603      	mov	r3, r0
 8012868:	461a      	mov	r2, r3
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	9302      	str	r3, [sp, #8]
 8012872:	2301      	movs	r3, #1
 8012874:	9301      	str	r3, [sp, #4]
 8012876:	2300      	movs	r3, #0
 8012878:	9300      	str	r3, [sp, #0]
 801287a:	23ff      	movs	r3, #255	@ 0xff
 801287c:	2200      	movs	r2, #0
 801287e:	69f9      	ldr	r1, [r7, #28]
 8012880:	6878      	ldr	r0, [r7, #4]
 8012882:	f000 faa9 	bl	8012dd8 <ip4_output_if>
 8012886:	4603      	mov	r3, r0
 8012888:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801288a:	e001      	b.n	8012890 <icmp_input+0x200>
      break;
 801288c:	bf00      	nop
 801288e:	e000      	b.n	8012892 <icmp_input+0x202>
      break;
 8012890:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7f5 fdbe 	bl	8008414 <pbuf_free>
  return;
 8012898:	e013      	b.n	80128c2 <icmp_input+0x232>
    goto lenerr;
 801289a:	bf00      	nop
 801289c:	e002      	b.n	80128a4 <icmp_input+0x214>
    goto lenerr;
 801289e:	bf00      	nop
 80128a0:	e000      	b.n	80128a4 <icmp_input+0x214>
        goto lenerr;
 80128a2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f7f5 fdb5 	bl	8008414 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80128aa:	e00a      	b.n	80128c2 <icmp_input+0x232>
        goto icmperr;
 80128ac:	bf00      	nop
 80128ae:	e004      	b.n	80128ba <icmp_input+0x22a>
        goto icmperr;
 80128b0:	bf00      	nop
 80128b2:	e002      	b.n	80128ba <icmp_input+0x22a>
          goto icmperr;
 80128b4:	bf00      	nop
 80128b6:	e000      	b.n	80128ba <icmp_input+0x22a>
          goto icmperr;
 80128b8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80128ba:	6878      	ldr	r0, [r7, #4]
 80128bc:	f7f5 fdaa 	bl	8008414 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80128c0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80128c2:	3728      	adds	r7, #40	@ 0x28
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}
 80128c8:	20000d90 	.word	0x20000d90
 80128cc:	20000da4 	.word	0x20000da4
 80128d0:	08017d98 	.word	0x08017d98
 80128d4:	08017dd0 	.word	0x08017dd0
 80128d8:	08017e08 	.word	0x08017e08
 80128dc:	08017e30 	.word	0x08017e30

080128e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	460b      	mov	r3, r1
 80128ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80128ec:	78fb      	ldrb	r3, [r7, #3]
 80128ee:	461a      	mov	r2, r3
 80128f0:	2103      	movs	r1, #3
 80128f2:	6878      	ldr	r0, [r7, #4]
 80128f4:	f000 f814 	bl	8012920 <icmp_send_response>
}
 80128f8:	bf00      	nop
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	b082      	sub	sp, #8
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	460b      	mov	r3, r1
 801290a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801290c:	78fb      	ldrb	r3, [r7, #3]
 801290e:	461a      	mov	r2, r3
 8012910:	210b      	movs	r1, #11
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f000 f804 	bl	8012920 <icmp_send_response>
}
 8012918:	bf00      	nop
 801291a:	3708      	adds	r7, #8
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}

08012920 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b08c      	sub	sp, #48	@ 0x30
 8012924:	af04      	add	r7, sp, #16
 8012926:	6078      	str	r0, [r7, #4]
 8012928:	460b      	mov	r3, r1
 801292a:	70fb      	strb	r3, [r7, #3]
 801292c:	4613      	mov	r3, r2
 801292e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012930:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012934:	2124      	movs	r1, #36	@ 0x24
 8012936:	2022      	movs	r0, #34	@ 0x22
 8012938:	f7f5 fa88 	bl	8007e4c <pbuf_alloc>
 801293c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801293e:	69fb      	ldr	r3, [r7, #28]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d056      	beq.n	80129f2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012944:	69fb      	ldr	r3, [r7, #28]
 8012946:	895b      	ldrh	r3, [r3, #10]
 8012948:	2b23      	cmp	r3, #35	@ 0x23
 801294a:	d806      	bhi.n	801295a <icmp_send_response+0x3a>
 801294c:	4b2b      	ldr	r3, [pc, #172]	@ (80129fc <icmp_send_response+0xdc>)
 801294e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8012952:	492b      	ldr	r1, [pc, #172]	@ (8012a00 <icmp_send_response+0xe0>)
 8012954:	482b      	ldr	r0, [pc, #172]	@ (8012a04 <icmp_send_response+0xe4>)
 8012956:	f001 fbe3 	bl	8014120 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	685b      	ldr	r3, [r3, #4]
 801295e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012960:	69fb      	ldr	r3, [r7, #28]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	78fa      	ldrb	r2, [r7, #3]
 801296a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	78ba      	ldrb	r2, [r7, #2]
 8012970:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	2200      	movs	r2, #0
 8012976:	711a      	strb	r2, [r3, #4]
 8012978:	2200      	movs	r2, #0
 801297a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	2200      	movs	r2, #0
 8012980:	719a      	strb	r2, [r3, #6]
 8012982:	2200      	movs	r2, #0
 8012984:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012986:	69fb      	ldr	r3, [r7, #28]
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	f103 0008 	add.w	r0, r3, #8
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	685b      	ldr	r3, [r3, #4]
 8012992:	221c      	movs	r2, #28
 8012994:	4619      	mov	r1, r3
 8012996:	f001 fcd8 	bl	801434a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80129a0:	f107 030c 	add.w	r3, r7, #12
 80129a4:	4618      	mov	r0, r3
 80129a6:	f000 f82f 	bl	8012a08 <ip4_route>
 80129aa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d01b      	beq.n	80129ea <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	2200      	movs	r2, #0
 80129b6:	709a      	strb	r2, [r3, #2]
 80129b8:	2200      	movs	r2, #0
 80129ba:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80129bc:	69fb      	ldr	r3, [r7, #28]
 80129be:	895b      	ldrh	r3, [r3, #10]
 80129c0:	4619      	mov	r1, r3
 80129c2:	6978      	ldr	r0, [r7, #20]
 80129c4:	f7f4 f9cf 	bl	8006d66 <inet_chksum>
 80129c8:	4603      	mov	r3, r0
 80129ca:	461a      	mov	r2, r3
 80129cc:	697b      	ldr	r3, [r7, #20]
 80129ce:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80129d0:	f107 020c 	add.w	r2, r7, #12
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	9302      	str	r3, [sp, #8]
 80129d8:	2301      	movs	r3, #1
 80129da:	9301      	str	r3, [sp, #4]
 80129dc:	2300      	movs	r3, #0
 80129de:	9300      	str	r3, [sp, #0]
 80129e0:	23ff      	movs	r3, #255	@ 0xff
 80129e2:	2100      	movs	r1, #0
 80129e4:	69f8      	ldr	r0, [r7, #28]
 80129e6:	f000 f9f7 	bl	8012dd8 <ip4_output_if>
  }
  pbuf_free(q);
 80129ea:	69f8      	ldr	r0, [r7, #28]
 80129ec:	f7f5 fd12 	bl	8008414 <pbuf_free>
 80129f0:	e000      	b.n	80129f4 <icmp_send_response+0xd4>
    return;
 80129f2:	bf00      	nop
}
 80129f4:	3720      	adds	r7, #32
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}
 80129fa:	bf00      	nop
 80129fc:	08017d98 	.word	0x08017d98
 8012a00:	08017e64 	.word	0x08017e64
 8012a04:	08017e08 	.word	0x08017e08

08012a08 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012a08:	b480      	push	{r7}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012a10:	4b33      	ldr	r3, [pc, #204]	@ (8012ae0 <ip4_route+0xd8>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	60fb      	str	r3, [r7, #12]
 8012a16:	e036      	b.n	8012a86 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a1e:	f003 0301 	and.w	r3, r3, #1
 8012a22:	b2db      	uxtb	r3, r3
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d02b      	beq.n	8012a80 <ip4_route+0x78>
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a2e:	089b      	lsrs	r3, r3, #2
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	b2db      	uxtb	r3, r3
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d022      	beq.n	8012a80 <ip4_route+0x78>
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	3304      	adds	r3, #4
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d01d      	beq.n	8012a80 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	3304      	adds	r3, #4
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	405a      	eors	r2, r3
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	3308      	adds	r3, #8
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	4013      	ands	r3, r2
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d101      	bne.n	8012a60 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	e038      	b.n	8012ad2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a66:	f003 0302 	and.w	r3, r3, #2
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d108      	bne.n	8012a80 <ip4_route+0x78>
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681a      	ldr	r2, [r3, #0]
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	330c      	adds	r3, #12
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	429a      	cmp	r2, r3
 8012a7a:	d101      	bne.n	8012a80 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	e028      	b.n	8012ad2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	60fb      	str	r3, [r7, #12]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d1c5      	bne.n	8012a18 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a8c:	4b15      	ldr	r3, [pc, #84]	@ (8012ae4 <ip4_route+0xdc>)
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d01a      	beq.n	8012aca <ip4_route+0xc2>
 8012a94:	4b13      	ldr	r3, [pc, #76]	@ (8012ae4 <ip4_route+0xdc>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012a9c:	f003 0301 	and.w	r3, r3, #1
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d012      	beq.n	8012aca <ip4_route+0xc2>
 8012aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8012ae4 <ip4_route+0xdc>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012aac:	f003 0304 	and.w	r3, r3, #4
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00a      	beq.n	8012aca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8012ae4 <ip4_route+0xdc>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	3304      	adds	r3, #4
 8012aba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d004      	beq.n	8012aca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8012ac8:	d101      	bne.n	8012ace <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	e001      	b.n	8012ad2 <ip4_route+0xca>
  }

  return netif_default;
 8012ace:	4b05      	ldr	r3, [pc, #20]	@ (8012ae4 <ip4_route+0xdc>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3714      	adds	r7, #20
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012adc:	4770      	bx	lr
 8012ade:	bf00      	nop
 8012ae0:	20004324 	.word	0x20004324
 8012ae4:	20004328 	.word	0x20004328

08012ae8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012af6:	f003 0301 	and.w	r3, r3, #1
 8012afa:	b2db      	uxtb	r3, r3
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d016      	beq.n	8012b2e <ip4_input_accept+0x46>
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	3304      	adds	r3, #4
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d011      	beq.n	8012b2e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8012b38 <ip4_input_accept+0x50>)
 8012b0c:	695a      	ldr	r2, [r3, #20]
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	3304      	adds	r3, #4
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	429a      	cmp	r2, r3
 8012b16:	d008      	beq.n	8012b2a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012b18:	4b07      	ldr	r3, [pc, #28]	@ (8012b38 <ip4_input_accept+0x50>)
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	6879      	ldr	r1, [r7, #4]
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 fa98 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012b24:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d001      	beq.n	8012b2e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012b2a:	2301      	movs	r3, #1
 8012b2c:	e000      	b.n	8012b30 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012b2e:	2300      	movs	r3, #0
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	20000d90 	.word	0x20000d90

08012b3c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b088      	sub	sp, #32
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012b46:	2301      	movs	r3, #1
 8012b48:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	091b      	lsrs	r3, r3, #4
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	2b04      	cmp	r3, #4
 8012b5a:	d004      	beq.n	8012b66 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f7f5 fc59 	bl	8008414 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012b62:	2300      	movs	r3, #0
 8012b64:	e130      	b.n	8012dc8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	f003 030f 	and.w	r3, r3, #15
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	009b      	lsls	r3, r3, #2
 8012b72:	b2db      	uxtb	r3, r3
 8012b74:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	885b      	ldrh	r3, [r3, #2]
 8012b7a:	b29b      	uxth	r3, r3
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	f7f3 fcbd 	bl	80064fc <lwip_htons>
 8012b82:	4603      	mov	r3, r0
 8012b84:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	891b      	ldrh	r3, [r3, #8]
 8012b8a:	8a3a      	ldrh	r2, [r7, #16]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d204      	bcs.n	8012b9a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8012b90:	8a3b      	ldrh	r3, [r7, #16]
 8012b92:	4619      	mov	r1, r3
 8012b94:	6878      	ldr	r0, [r7, #4]
 8012b96:	f7f5 fab7 	bl	8008108 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	895b      	ldrh	r3, [r3, #10]
 8012b9e:	8a7a      	ldrh	r2, [r7, #18]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d807      	bhi.n	8012bb4 <ip4_input+0x78>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	891b      	ldrh	r3, [r3, #8]
 8012ba8:	8a3a      	ldrh	r2, [r7, #16]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d802      	bhi.n	8012bb4 <ip4_input+0x78>
 8012bae:	8a7b      	ldrh	r3, [r7, #18]
 8012bb0:	2b13      	cmp	r3, #19
 8012bb2:	d804      	bhi.n	8012bbe <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012bb4:	6878      	ldr	r0, [r7, #4]
 8012bb6:	f7f5 fc2d 	bl	8008414 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	e104      	b.n	8012dc8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 8012bbe:	8a7b      	ldrh	r3, [r7, #18]
 8012bc0:	4619      	mov	r1, r3
 8012bc2:	69f8      	ldr	r0, [r7, #28]
 8012bc4:	f7f4 f8cf 	bl	8006d66 <inet_chksum>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d004      	beq.n	8012bd8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f7f5 fc20 	bl	8008414 <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e0f7      	b.n	8012dc8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	691b      	ldr	r3, [r3, #16]
 8012bdc:	4a7c      	ldr	r2, [pc, #496]	@ (8012dd0 <ip4_input+0x294>)
 8012bde:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012be0:	69fb      	ldr	r3, [r7, #28]
 8012be2:	68db      	ldr	r3, [r3, #12]
 8012be4:	4a7a      	ldr	r2, [pc, #488]	@ (8012dd0 <ip4_input+0x294>)
 8012be6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012be8:	4b79      	ldr	r3, [pc, #484]	@ (8012dd0 <ip4_input+0x294>)
 8012bea:	695b      	ldr	r3, [r3, #20]
 8012bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012bf0:	2be0      	cmp	r3, #224	@ 0xe0
 8012bf2:	d112      	bne.n	8012c1a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8012bfa:	f003 0301 	and.w	r3, r3, #1
 8012bfe:	b2db      	uxtb	r3, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d007      	beq.n	8012c14 <ip4_input+0xd8>
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	3304      	adds	r3, #4
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d002      	beq.n	8012c14 <ip4_input+0xd8>
      netif = inp;
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	61bb      	str	r3, [r7, #24]
 8012c12:	e02a      	b.n	8012c6a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8012c14:	2300      	movs	r3, #0
 8012c16:	61bb      	str	r3, [r7, #24]
 8012c18:	e027      	b.n	8012c6a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012c1a:	6838      	ldr	r0, [r7, #0]
 8012c1c:	f7ff ff64 	bl	8012ae8 <ip4_input_accept>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d002      	beq.n	8012c2c <ip4_input+0xf0>
      netif = inp;
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	61bb      	str	r3, [r7, #24]
 8012c2a:	e01e      	b.n	8012c6a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012c30:	4b67      	ldr	r3, [pc, #412]	@ (8012dd0 <ip4_input+0x294>)
 8012c32:	695b      	ldr	r3, [r3, #20]
 8012c34:	b2db      	uxtb	r3, r3
 8012c36:	2b7f      	cmp	r3, #127	@ 0x7f
 8012c38:	d017      	beq.n	8012c6a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012c3a:	4b66      	ldr	r3, [pc, #408]	@ (8012dd4 <ip4_input+0x298>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	61bb      	str	r3, [r7, #24]
 8012c40:	e00e      	b.n	8012c60 <ip4_input+0x124>
          if (netif == inp) {
 8012c42:	69ba      	ldr	r2, [r7, #24]
 8012c44:	683b      	ldr	r3, [r7, #0]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d006      	beq.n	8012c58 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012c4a:	69b8      	ldr	r0, [r7, #24]
 8012c4c:	f7ff ff4c 	bl	8012ae8 <ip4_input_accept>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d108      	bne.n	8012c68 <ip4_input+0x12c>
 8012c56:	e000      	b.n	8012c5a <ip4_input+0x11e>
            continue;
 8012c58:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	61bb      	str	r3, [r7, #24]
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d1ed      	bne.n	8012c42 <ip4_input+0x106>
 8012c66:	e000      	b.n	8012c6a <ip4_input+0x12e>
            break;
 8012c68:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012c6a:	69bb      	ldr	r3, [r7, #24]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d111      	bne.n	8012c94 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	7a5b      	ldrb	r3, [r3, #9]
 8012c74:	2b11      	cmp	r3, #17
 8012c76:	d10d      	bne.n	8012c94 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8012c78:	8a7b      	ldrh	r3, [r7, #18]
 8012c7a:	69fa      	ldr	r2, [r7, #28]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	885b      	ldrh	r3, [r3, #2]
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8012c8a:	d103      	bne.n	8012c94 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012c8c:	683b      	ldr	r3, [r7, #0]
 8012c8e:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012c90:	2300      	movs	r3, #0
 8012c92:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d017      	beq.n	8012cca <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012c9a:	4b4d      	ldr	r3, [pc, #308]	@ (8012dd0 <ip4_input+0x294>)
 8012c9c:	691b      	ldr	r3, [r3, #16]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d013      	beq.n	8012cca <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012ca2:	4b4b      	ldr	r3, [pc, #300]	@ (8012dd0 <ip4_input+0x294>)
 8012ca4:	691b      	ldr	r3, [r3, #16]
 8012ca6:	6839      	ldr	r1, [r7, #0]
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f000 f9d3 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d105      	bne.n	8012cc0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012cb4:	4b46      	ldr	r3, [pc, #280]	@ (8012dd0 <ip4_input+0x294>)
 8012cb6:	691b      	ldr	r3, [r3, #16]
 8012cb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012cbc:	2be0      	cmp	r3, #224	@ 0xe0
 8012cbe:	d104      	bne.n	8012cca <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f7f5 fba7 	bl	8008414 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	e07e      	b.n	8012dc8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012cca:	69bb      	ldr	r3, [r7, #24]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d104      	bne.n	8012cda <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7f5 fb9f 	bl	8008414 <pbuf_free>
    return ERR_OK;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	e076      	b.n	8012dc8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	88db      	ldrh	r3, [r3, #6]
 8012cde:	b29b      	uxth	r3, r3
 8012ce0:	461a      	mov	r2, r3
 8012ce2:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8012ce6:	4013      	ands	r3, r2
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00b      	beq.n	8012d04 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 fcf7 	bl	80136e0 <ip4_reass>
 8012cf2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d101      	bne.n	8012cfe <ip4_input+0x1c2>
      return ERR_OK;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	e064      	b.n	8012dc8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	685b      	ldr	r3, [r3, #4]
 8012d02:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012d04:	4a32      	ldr	r2, [pc, #200]	@ (8012dd0 <ip4_input+0x294>)
 8012d06:	69bb      	ldr	r3, [r7, #24]
 8012d08:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012d0a:	4a31      	ldr	r2, [pc, #196]	@ (8012dd0 <ip4_input+0x294>)
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012d10:	4a2f      	ldr	r2, [pc, #188]	@ (8012dd0 <ip4_input+0x294>)
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	f003 030f 	and.w	r3, r3, #15
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	009b      	lsls	r3, r3, #2
 8012d22:	b2db      	uxtb	r3, r3
 8012d24:	461a      	mov	r2, r3
 8012d26:	4b2a      	ldr	r3, [pc, #168]	@ (8012dd0 <ip4_input+0x294>)
 8012d28:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012d2a:	8a7b      	ldrh	r3, [r7, #18]
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f7f5 faea 	bl	8008308 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	7a5b      	ldrb	r3, [r3, #9]
 8012d38:	2b11      	cmp	r3, #17
 8012d3a:	d006      	beq.n	8012d4a <ip4_input+0x20e>
 8012d3c:	2b11      	cmp	r3, #17
 8012d3e:	dc13      	bgt.n	8012d68 <ip4_input+0x22c>
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d00c      	beq.n	8012d5e <ip4_input+0x222>
 8012d44:	2b06      	cmp	r3, #6
 8012d46:	d005      	beq.n	8012d54 <ip4_input+0x218>
 8012d48:	e00e      	b.n	8012d68 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012d4a:	6839      	ldr	r1, [r7, #0]
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f7fc f9d7 	bl	800f100 <udp_input>
        break;
 8012d52:	e026      	b.n	8012da2 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012d54:	6839      	ldr	r1, [r7, #0]
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	f7f7 fd90 	bl	800a87c <tcp_input>
        break;
 8012d5c:	e021      	b.n	8012da2 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012d5e:	6839      	ldr	r1, [r7, #0]
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f7ff fc95 	bl	8012690 <icmp_input>
        break;
 8012d66:	e01c      	b.n	8012da2 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d68:	4b19      	ldr	r3, [pc, #100]	@ (8012dd0 <ip4_input+0x294>)
 8012d6a:	695b      	ldr	r3, [r3, #20]
 8012d6c:	69b9      	ldr	r1, [r7, #24]
 8012d6e:	4618      	mov	r0, r3
 8012d70:	f000 f970 	bl	8013054 <ip4_addr_isbroadcast_u32>
 8012d74:	4603      	mov	r3, r0
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d10f      	bne.n	8012d9a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012d7a:	4b15      	ldr	r3, [pc, #84]	@ (8012dd0 <ip4_input+0x294>)
 8012d7c:	695b      	ldr	r3, [r3, #20]
 8012d7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012d82:	2be0      	cmp	r3, #224	@ 0xe0
 8012d84:	d009      	beq.n	8012d9a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012d86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f7f5 fb2e 	bl	80083ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012d92:	2102      	movs	r1, #2
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f7ff fda3 	bl	80128e0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012d9a:	6878      	ldr	r0, [r7, #4]
 8012d9c:	f7f5 fb3a 	bl	8008414 <pbuf_free>
        break;
 8012da0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012da2:	4b0b      	ldr	r3, [pc, #44]	@ (8012dd0 <ip4_input+0x294>)
 8012da4:	2200      	movs	r2, #0
 8012da6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012da8:	4b09      	ldr	r3, [pc, #36]	@ (8012dd0 <ip4_input+0x294>)
 8012daa:	2200      	movs	r2, #0
 8012dac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012dae:	4b08      	ldr	r3, [pc, #32]	@ (8012dd0 <ip4_input+0x294>)
 8012db0:	2200      	movs	r2, #0
 8012db2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012db4:	4b06      	ldr	r3, [pc, #24]	@ (8012dd0 <ip4_input+0x294>)
 8012db6:	2200      	movs	r2, #0
 8012db8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012dba:	4b05      	ldr	r3, [pc, #20]	@ (8012dd0 <ip4_input+0x294>)
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012dc0:	4b03      	ldr	r3, [pc, #12]	@ (8012dd0 <ip4_input+0x294>)
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012dc6:	2300      	movs	r3, #0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3720      	adds	r7, #32
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	20000d90 	.word	0x20000d90
 8012dd4:	20004324 	.word	0x20004324

08012dd8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b08a      	sub	sp, #40	@ 0x28
 8012ddc:	af04      	add	r7, sp, #16
 8012dde:	60f8      	str	r0, [r7, #12]
 8012de0:	60b9      	str	r1, [r7, #8]
 8012de2:	607a      	str	r2, [r7, #4]
 8012de4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012de6:	68bb      	ldr	r3, [r7, #8]
 8012de8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d009      	beq.n	8012e04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012df0:	68bb      	ldr	r3, [r7, #8]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d003      	beq.n	8012dfe <ip4_output_if+0x26>
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d102      	bne.n	8012e04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e00:	3304      	adds	r3, #4
 8012e02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012e04:	78fa      	ldrb	r2, [r7, #3]
 8012e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e08:	9302      	str	r3, [sp, #8]
 8012e0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012e0e:	9301      	str	r3, [sp, #4]
 8012e10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e14:	9300      	str	r3, [sp, #0]
 8012e16:	4613      	mov	r3, r2
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	6979      	ldr	r1, [r7, #20]
 8012e1c:	68f8      	ldr	r0, [r7, #12]
 8012e1e:	f000 f805 	bl	8012e2c <ip4_output_if_src>
 8012e22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3718      	adds	r7, #24
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}

08012e2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b088      	sub	sp, #32
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	60f8      	str	r0, [r7, #12]
 8012e34:	60b9      	str	r1, [r7, #8]
 8012e36:	607a      	str	r2, [r7, #4]
 8012e38:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	7b9b      	ldrb	r3, [r3, #14]
 8012e42:	2b01      	cmp	r3, #1
 8012e44:	d006      	beq.n	8012e54 <ip4_output_if_src+0x28>
 8012e46:	4b7d      	ldr	r3, [pc, #500]	@ (801303c <ip4_output_if_src+0x210>)
 8012e48:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012e4c:	497c      	ldr	r1, [pc, #496]	@ (8013040 <ip4_output_if_src+0x214>)
 8012e4e:	487d      	ldr	r0, [pc, #500]	@ (8013044 <ip4_output_if_src+0x218>)
 8012e50:	f001 f966 	bl	8014120 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	f000 80c4 	beq.w	8012fe4 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8012e5c:	2314      	movs	r3, #20
 8012e5e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012e60:	2114      	movs	r1, #20
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f7f5 fa40 	bl	80082e8 <pbuf_add_header>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d002      	beq.n	8012e74 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e6e:	f06f 0301 	mvn.w	r3, #1
 8012e72:	e0df      	b.n	8013034 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	895b      	ldrh	r3, [r3, #10]
 8012e7e:	2b13      	cmp	r3, #19
 8012e80:	d806      	bhi.n	8012e90 <ip4_output_if_src+0x64>
 8012e82:	4b6e      	ldr	r3, [pc, #440]	@ (801303c <ip4_output_if_src+0x210>)
 8012e84:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012e88:	496f      	ldr	r1, [pc, #444]	@ (8013048 <ip4_output_if_src+0x21c>)
 8012e8a:	486e      	ldr	r0, [pc, #440]	@ (8013044 <ip4_output_if_src+0x218>)
 8012e8c:	f001 f948 	bl	8014120 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012e90:	69bb      	ldr	r3, [r7, #24]
 8012e92:	78fa      	ldrb	r2, [r7, #3]
 8012e94:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012e96:	69bb      	ldr	r3, [r7, #24]
 8012e98:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012e9c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8012e9e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012ea2:	78fb      	ldrb	r3, [r7, #3]
 8012ea4:	021b      	lsls	r3, r3, #8
 8012ea6:	4313      	orrs	r3, r2
 8012ea8:	021b      	lsls	r3, r3, #8
 8012eaa:	b21a      	sxth	r2, r3
 8012eac:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8012eb0:	78fb      	ldrb	r3, [r7, #3]
 8012eb2:	021b      	lsls	r3, r3, #8
 8012eb4:	430b      	orrs	r3, r1
 8012eb6:	121b      	asrs	r3, r3, #8
 8012eb8:	b21b      	sxth	r3, r3
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	b21b      	sxth	r3, r3
 8012ebe:	4313      	orrs	r3, r2
 8012ec0:	b21b      	sxth	r3, r3
 8012ec2:	b29b      	uxth	r3, r3
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	69fb      	ldr	r3, [r7, #28]
 8012ec8:	4413      	add	r3, r2
 8012eca:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	69bb      	ldr	r3, [r7, #24]
 8012ed2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8012ed4:	69bb      	ldr	r3, [r7, #24]
 8012ed6:	691b      	ldr	r3, [r3, #16]
 8012ed8:	b29b      	uxth	r3, r3
 8012eda:	69fa      	ldr	r2, [r7, #28]
 8012edc:	4413      	add	r3, r2
 8012ede:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	691b      	ldr	r3, [r3, #16]
 8012ee4:	0c1b      	lsrs	r3, r3, #16
 8012ee6:	69fa      	ldr	r2, [r7, #28]
 8012ee8:	4413      	add	r3, r2
 8012eea:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012eec:	8afb      	ldrh	r3, [r7, #22]
 8012eee:	089b      	lsrs	r3, r3, #2
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012ef8:	b2da      	uxtb	r2, r3
 8012efa:	69bb      	ldr	r3, [r7, #24]
 8012efc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012efe:	69bb      	ldr	r3, [r7, #24]
 8012f00:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012f04:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8012f06:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	021b      	lsls	r3, r3, #8
 8012f10:	4313      	orrs	r3, r2
 8012f12:	021b      	lsls	r3, r3, #8
 8012f14:	b21a      	sxth	r2, r3
 8012f16:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8012f1a:	69bb      	ldr	r3, [r7, #24]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	021b      	lsls	r3, r3, #8
 8012f20:	430b      	orrs	r3, r1
 8012f22:	121b      	asrs	r3, r3, #8
 8012f24:	b21b      	sxth	r3, r3
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	b21b      	sxth	r3, r3
 8012f2a:	4313      	orrs	r3, r2
 8012f2c:	b21b      	sxth	r3, r3
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	461a      	mov	r2, r3
 8012f32:	69fb      	ldr	r3, [r7, #28]
 8012f34:	4413      	add	r3, r2
 8012f36:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	891b      	ldrh	r3, [r3, #8]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f7f3 fadd 	bl	80064fc <lwip_htons>
 8012f42:	4603      	mov	r3, r0
 8012f44:	461a      	mov	r2, r3
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8012f4a:	69bb      	ldr	r3, [r7, #24]
 8012f4c:	885b      	ldrh	r3, [r3, #2]
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	461a      	mov	r2, r3
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	4413      	add	r3, r2
 8012f56:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	719a      	strb	r2, [r3, #6]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012f62:	4b3a      	ldr	r3, [pc, #232]	@ (801304c <ip4_output_if_src+0x220>)
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7f3 fac8 	bl	80064fc <lwip_htons>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	461a      	mov	r2, r3
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	889b      	ldrh	r3, [r3, #4]
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	4413      	add	r3, r2
 8012f80:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012f82:	4b32      	ldr	r3, [pc, #200]	@ (801304c <ip4_output_if_src+0x220>)
 8012f84:	881b      	ldrh	r3, [r3, #0]
 8012f86:	3301      	adds	r3, #1
 8012f88:	b29a      	uxth	r2, r3
 8012f8a:	4b30      	ldr	r3, [pc, #192]	@ (801304c <ip4_output_if_src+0x220>)
 8012f8c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d104      	bne.n	8012f9e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012f94:	4b2e      	ldr	r3, [pc, #184]	@ (8013050 <ip4_output_if_src+0x224>)
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	69bb      	ldr	r3, [r7, #24]
 8012f9a:	60da      	str	r2, [r3, #12]
 8012f9c:	e003      	b.n	8012fa6 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8012fa6:	69bb      	ldr	r3, [r7, #24]
 8012fa8:	68db      	ldr	r3, [r3, #12]
 8012faa:	b29b      	uxth	r3, r3
 8012fac:	69fa      	ldr	r2, [r7, #28]
 8012fae:	4413      	add	r3, r2
 8012fb0:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	0c1b      	lsrs	r3, r3, #16
 8012fb8:	69fa      	ldr	r2, [r7, #28]
 8012fba:	4413      	add	r3, r2
 8012fbc:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8012fbe:	69fb      	ldr	r3, [r7, #28]
 8012fc0:	0c1a      	lsrs	r2, r3, #16
 8012fc2:	69fb      	ldr	r3, [r7, #28]
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	4413      	add	r3, r2
 8012fc8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8012fca:	69fb      	ldr	r3, [r7, #28]
 8012fcc:	0c1b      	lsrs	r3, r3, #16
 8012fce:	69fa      	ldr	r2, [r7, #28]
 8012fd0:	4413      	add	r3, r2
 8012fd2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	43db      	mvns	r3, r3
 8012fd8:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8012fda:	69fb      	ldr	r3, [r7, #28]
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	815a      	strh	r2, [r3, #10]
 8012fe2:	e00f      	b.n	8013004 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	895b      	ldrh	r3, [r3, #10]
 8012fe8:	2b13      	cmp	r3, #19
 8012fea:	d802      	bhi.n	8012ff2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012fec:	f06f 0301 	mvn.w	r3, #1
 8012ff0:	e020      	b.n	8013034 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	685b      	ldr	r3, [r3, #4]
 8012ff6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012ff8:	69bb      	ldr	r3, [r7, #24]
 8012ffa:	691b      	ldr	r3, [r3, #16]
 8012ffc:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8012ffe:	f107 0310 	add.w	r3, r7, #16
 8013002:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00c      	beq.n	8013026 <ip4_output_if_src+0x1fa>
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	891a      	ldrh	r2, [r3, #8]
 8013010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013014:	429a      	cmp	r2, r3
 8013016:	d906      	bls.n	8013026 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801301c:	68f8      	ldr	r0, [r7, #12]
 801301e:	f000 fd5b 	bl	8013ad8 <ip4_frag>
 8013022:	4603      	mov	r3, r0
 8013024:	e006      	b.n	8013034 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013028:	695b      	ldr	r3, [r3, #20]
 801302a:	687a      	ldr	r2, [r7, #4]
 801302c:	68f9      	ldr	r1, [r7, #12]
 801302e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013030:	4798      	blx	r3
 8013032:	4603      	mov	r3, r0
}
 8013034:	4618      	mov	r0, r3
 8013036:	3720      	adds	r7, #32
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	08017e90 	.word	0x08017e90
 8013040:	08017ec4 	.word	0x08017ec4
 8013044:	08017ed0 	.word	0x08017ed0
 8013048:	08017ef8 	.word	0x08017ef8
 801304c:	200044c2 	.word	0x200044c2
 8013050:	08018314 	.word	0x08018314

08013054 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013054:	b480      	push	{r7}
 8013056:	b085      	sub	sp, #20
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013068:	d002      	beq.n	8013070 <ip4_addr_isbroadcast_u32+0x1c>
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013070:	2301      	movs	r3, #1
 8013072:	e02a      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801307a:	f003 0302 	and.w	r3, r3, #2
 801307e:	2b00      	cmp	r3, #0
 8013080:	d101      	bne.n	8013086 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013082:	2300      	movs	r3, #0
 8013084:	e021      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	3304      	adds	r3, #4
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	687a      	ldr	r2, [r7, #4]
 801308e:	429a      	cmp	r2, r3
 8013090:	d101      	bne.n	8013096 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013092:	2300      	movs	r3, #0
 8013094:	e019      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013096:	68fa      	ldr	r2, [r7, #12]
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	3304      	adds	r3, #4
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	405a      	eors	r2, r3
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	3308      	adds	r3, #8
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4013      	ands	r3, r2
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d10d      	bne.n	80130c8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	3308      	adds	r3, #8
 80130b0:	681b      	ldr	r3, [r3, #0]
 80130b2:	43da      	mvns	r2, r3
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	3308      	adds	r3, #8
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80130c0:	429a      	cmp	r2, r3
 80130c2:	d101      	bne.n	80130c8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80130c4:	2301      	movs	r3, #1
 80130c6:	e000      	b.n	80130ca <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80130c8:	2300      	movs	r3, #0
  }
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3714      	adds	r7, #20
 80130ce:	46bd      	mov	sp, r7
 80130d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d4:	4770      	bx	lr
	...

080130d8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80130de:	2300      	movs	r3, #0
 80130e0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80130e2:	4b12      	ldr	r3, [pc, #72]	@ (801312c <ip_reass_tmr+0x54>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80130e8:	e018      	b.n	801311c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	7fdb      	ldrb	r3, [r3, #31]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d00b      	beq.n	801310a <ip_reass_tmr+0x32>
      r->timer--;
 80130f2:	68fb      	ldr	r3, [r7, #12]
 80130f4:	7fdb      	ldrb	r3, [r3, #31]
 80130f6:	3b01      	subs	r3, #1
 80130f8:	b2da      	uxtb	r2, r3
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	60fb      	str	r3, [r7, #12]
 8013108:	e008      	b.n	801311c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801310e:	68fb      	ldr	r3, [r7, #12]
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8013114:	68b9      	ldr	r1, [r7, #8]
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 f80a 	bl	8013130 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d1e3      	bne.n	80130ea <ip_reass_tmr+0x12>
    }
  }
}
 8013122:	bf00      	nop
 8013124:	bf00      	nop
 8013126:	3710      	adds	r7, #16
 8013128:	46bd      	mov	sp, r7
 801312a:	bd80      	pop	{r7, pc}
 801312c:	200044c4 	.word	0x200044c4

08013130 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b088      	sub	sp, #32
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801313a:	2300      	movs	r3, #0
 801313c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801313e:	683a      	ldr	r2, [r7, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	429a      	cmp	r2, r3
 8013144:	d105      	bne.n	8013152 <ip_reass_free_complete_datagram+0x22>
 8013146:	4b45      	ldr	r3, [pc, #276]	@ (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013148:	22ab      	movs	r2, #171	@ 0xab
 801314a:	4945      	ldr	r1, [pc, #276]	@ (8013260 <ip_reass_free_complete_datagram+0x130>)
 801314c:	4845      	ldr	r0, [pc, #276]	@ (8013264 <ip_reass_free_complete_datagram+0x134>)
 801314e:	f000 ffe7 	bl	8014120 <iprintf>
  if (prev != NULL) {
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d00a      	beq.n	801316e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	687a      	ldr	r2, [r7, #4]
 801315e:	429a      	cmp	r2, r3
 8013160:	d005      	beq.n	801316e <ip_reass_free_complete_datagram+0x3e>
 8013162:	4b3e      	ldr	r3, [pc, #248]	@ (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013164:	22ad      	movs	r2, #173	@ 0xad
 8013166:	4940      	ldr	r1, [pc, #256]	@ (8013268 <ip_reass_free_complete_datagram+0x138>)
 8013168:	483e      	ldr	r0, [pc, #248]	@ (8013264 <ip_reass_free_complete_datagram+0x134>)
 801316a:	f000 ffd9 	bl	8014120 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	889b      	ldrh	r3, [r3, #4]
 801317a:	b29b      	uxth	r3, r3
 801317c:	2b00      	cmp	r3, #0
 801317e:	d12a      	bne.n	80131d6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	685b      	ldr	r3, [r3, #4]
 8013184:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	681a      	ldr	r2, [r3, #0]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	6858      	ldr	r0, [r3, #4]
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	3308      	adds	r3, #8
 8013196:	2214      	movs	r2, #20
 8013198:	4619      	mov	r1, r3
 801319a:	f001 f8d6 	bl	801434a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801319e:	2101      	movs	r1, #1
 80131a0:	69b8      	ldr	r0, [r7, #24]
 80131a2:	f7ff fbad 	bl	8012900 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80131a6:	69b8      	ldr	r0, [r7, #24]
 80131a8:	f7f5 f9bc 	bl	8008524 <pbuf_clen>
 80131ac:	4603      	mov	r3, r0
 80131ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80131b0:	8bfa      	ldrh	r2, [r7, #30]
 80131b2:	8a7b      	ldrh	r3, [r7, #18]
 80131b4:	4413      	add	r3, r2
 80131b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131ba:	db05      	blt.n	80131c8 <ip_reass_free_complete_datagram+0x98>
 80131bc:	4b27      	ldr	r3, [pc, #156]	@ (801325c <ip_reass_free_complete_datagram+0x12c>)
 80131be:	22bc      	movs	r2, #188	@ 0xbc
 80131c0:	492a      	ldr	r1, [pc, #168]	@ (801326c <ip_reass_free_complete_datagram+0x13c>)
 80131c2:	4828      	ldr	r0, [pc, #160]	@ (8013264 <ip_reass_free_complete_datagram+0x134>)
 80131c4:	f000 ffac 	bl	8014120 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80131c8:	8bfa      	ldrh	r2, [r7, #30]
 80131ca:	8a7b      	ldrh	r3, [r7, #18]
 80131cc:	4413      	add	r3, r2
 80131ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80131d0:	69b8      	ldr	r0, [r7, #24]
 80131d2:	f7f5 f91f 	bl	8008414 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80131dc:	e01f      	b.n	801321e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80131e4:	69bb      	ldr	r3, [r7, #24]
 80131e6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80131ee:	68f8      	ldr	r0, [r7, #12]
 80131f0:	f7f5 f998 	bl	8008524 <pbuf_clen>
 80131f4:	4603      	mov	r3, r0
 80131f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80131f8:	8bfa      	ldrh	r2, [r7, #30]
 80131fa:	8a7b      	ldrh	r3, [r7, #18]
 80131fc:	4413      	add	r3, r2
 80131fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013202:	db05      	blt.n	8013210 <ip_reass_free_complete_datagram+0xe0>
 8013204:	4b15      	ldr	r3, [pc, #84]	@ (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013206:	22cc      	movs	r2, #204	@ 0xcc
 8013208:	4918      	ldr	r1, [pc, #96]	@ (801326c <ip_reass_free_complete_datagram+0x13c>)
 801320a:	4816      	ldr	r0, [pc, #88]	@ (8013264 <ip_reass_free_complete_datagram+0x134>)
 801320c:	f000 ff88 	bl	8014120 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013210:	8bfa      	ldrh	r2, [r7, #30]
 8013212:	8a7b      	ldrh	r3, [r7, #18]
 8013214:	4413      	add	r3, r2
 8013216:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013218:	68f8      	ldr	r0, [r7, #12]
 801321a:	f7f5 f8fb 	bl	8008414 <pbuf_free>
  while (p != NULL) {
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d1dc      	bne.n	80131de <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013224:	6839      	ldr	r1, [r7, #0]
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 f8c2 	bl	80133b0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801322c:	4b10      	ldr	r3, [pc, #64]	@ (8013270 <ip_reass_free_complete_datagram+0x140>)
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	8bfa      	ldrh	r2, [r7, #30]
 8013232:	429a      	cmp	r2, r3
 8013234:	d905      	bls.n	8013242 <ip_reass_free_complete_datagram+0x112>
 8013236:	4b09      	ldr	r3, [pc, #36]	@ (801325c <ip_reass_free_complete_datagram+0x12c>)
 8013238:	22d2      	movs	r2, #210	@ 0xd2
 801323a:	490e      	ldr	r1, [pc, #56]	@ (8013274 <ip_reass_free_complete_datagram+0x144>)
 801323c:	4809      	ldr	r0, [pc, #36]	@ (8013264 <ip_reass_free_complete_datagram+0x134>)
 801323e:	f000 ff6f 	bl	8014120 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013242:	4b0b      	ldr	r3, [pc, #44]	@ (8013270 <ip_reass_free_complete_datagram+0x140>)
 8013244:	881a      	ldrh	r2, [r3, #0]
 8013246:	8bfb      	ldrh	r3, [r7, #30]
 8013248:	1ad3      	subs	r3, r2, r3
 801324a:	b29a      	uxth	r2, r3
 801324c:	4b08      	ldr	r3, [pc, #32]	@ (8013270 <ip_reass_free_complete_datagram+0x140>)
 801324e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013250:	8bfb      	ldrh	r3, [r7, #30]
}
 8013252:	4618      	mov	r0, r3
 8013254:	3720      	adds	r7, #32
 8013256:	46bd      	mov	sp, r7
 8013258:	bd80      	pop	{r7, pc}
 801325a:	bf00      	nop
 801325c:	08017f28 	.word	0x08017f28
 8013260:	08017f64 	.word	0x08017f64
 8013264:	08017f70 	.word	0x08017f70
 8013268:	08017f98 	.word	0x08017f98
 801326c:	08017fac 	.word	0x08017fac
 8013270:	200044c8 	.word	0x200044c8
 8013274:	08017fcc 	.word	0x08017fcc

08013278 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b08a      	sub	sp, #40	@ 0x28
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013282:	2300      	movs	r3, #0
 8013284:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013286:	2300      	movs	r3, #0
 8013288:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801328a:	2300      	movs	r3, #0
 801328c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801328e:	2300      	movs	r3, #0
 8013290:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013292:	2300      	movs	r3, #0
 8013294:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013296:	4b28      	ldr	r3, [pc, #160]	@ (8013338 <ip_reass_remove_oldest_datagram+0xc0>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801329c:	e030      	b.n	8013300 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132a0:	695a      	ldr	r2, [r3, #20]
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	429a      	cmp	r2, r3
 80132a8:	d10c      	bne.n	80132c4 <ip_reass_remove_oldest_datagram+0x4c>
 80132aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132ac:	699a      	ldr	r2, [r3, #24]
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	691b      	ldr	r3, [r3, #16]
 80132b2:	429a      	cmp	r2, r3
 80132b4:	d106      	bne.n	80132c4 <ip_reass_remove_oldest_datagram+0x4c>
 80132b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132b8:	899a      	ldrh	r2, [r3, #12]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	889b      	ldrh	r3, [r3, #4]
 80132be:	b29b      	uxth	r3, r3
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d014      	beq.n	80132ee <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	3301      	adds	r3, #1
 80132c8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80132ca:	6a3b      	ldr	r3, [r7, #32]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d104      	bne.n	80132da <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80132d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132d2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80132d4:	69fb      	ldr	r3, [r7, #28]
 80132d6:	61bb      	str	r3, [r7, #24]
 80132d8:	e009      	b.n	80132ee <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80132da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132dc:	7fda      	ldrb	r2, [r3, #31]
 80132de:	6a3b      	ldr	r3, [r7, #32]
 80132e0:	7fdb      	ldrb	r3, [r3, #31]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d803      	bhi.n	80132ee <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80132e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132e8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80132ea:	69fb      	ldr	r3, [r7, #28]
 80132ec:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80132ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	d001      	beq.n	80132fa <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80132f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132f8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80132fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8013300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013302:	2b00      	cmp	r3, #0
 8013304:	d1cb      	bne.n	801329e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013306:	6a3b      	ldr	r3, [r7, #32]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d008      	beq.n	801331e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801330c:	69b9      	ldr	r1, [r7, #24]
 801330e:	6a38      	ldr	r0, [r7, #32]
 8013310:	f7ff ff0e 	bl	8013130 <ip_reass_free_complete_datagram>
 8013314:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013316:	697a      	ldr	r2, [r7, #20]
 8013318:	68fb      	ldr	r3, [r7, #12]
 801331a:	4413      	add	r3, r2
 801331c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801331e:	697a      	ldr	r2, [r7, #20]
 8013320:	683b      	ldr	r3, [r7, #0]
 8013322:	429a      	cmp	r2, r3
 8013324:	da02      	bge.n	801332c <ip_reass_remove_oldest_datagram+0xb4>
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	2b01      	cmp	r3, #1
 801332a:	dcac      	bgt.n	8013286 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801332c:	697b      	ldr	r3, [r7, #20]
}
 801332e:	4618      	mov	r0, r3
 8013330:	3728      	adds	r7, #40	@ 0x28
 8013332:	46bd      	mov	sp, r7
 8013334:	bd80      	pop	{r7, pc}
 8013336:	bf00      	nop
 8013338:	200044c4 	.word	0x200044c4

0801333c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	6078      	str	r0, [r7, #4]
 8013344:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013346:	2004      	movs	r0, #4
 8013348:	f7f4 f996 	bl	8007678 <memp_malloc>
 801334c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d110      	bne.n	8013376 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013354:	6839      	ldr	r1, [r7, #0]
 8013356:	6878      	ldr	r0, [r7, #4]
 8013358:	f7ff ff8e 	bl	8013278 <ip_reass_remove_oldest_datagram>
 801335c:	4602      	mov	r2, r0
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	4293      	cmp	r3, r2
 8013362:	dc03      	bgt.n	801336c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013364:	2004      	movs	r0, #4
 8013366:	f7f4 f987 	bl	8007678 <memp_malloc>
 801336a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d101      	bne.n	8013376 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013372:	2300      	movs	r3, #0
 8013374:	e016      	b.n	80133a4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013376:	2220      	movs	r2, #32
 8013378:	2100      	movs	r1, #0
 801337a:	68f8      	ldr	r0, [r7, #12]
 801337c:	f000 ff6f 	bl	801425e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013380:	68fb      	ldr	r3, [r7, #12]
 8013382:	220f      	movs	r2, #15
 8013384:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013386:	4b09      	ldr	r3, [pc, #36]	@ (80133ac <ip_reass_enqueue_new_datagram+0x70>)
 8013388:	681a      	ldr	r2, [r3, #0]
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801338e:	4a07      	ldr	r2, [pc, #28]	@ (80133ac <ip_reass_enqueue_new_datagram+0x70>)
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	3308      	adds	r3, #8
 8013398:	2214      	movs	r2, #20
 801339a:	6879      	ldr	r1, [r7, #4]
 801339c:	4618      	mov	r0, r3
 801339e:	f000 ffd4 	bl	801434a <memcpy>
  return ipr;
 80133a2:	68fb      	ldr	r3, [r7, #12]
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3710      	adds	r7, #16
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	200044c4 	.word	0x200044c4

080133b0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80133ba:	4b10      	ldr	r3, [pc, #64]	@ (80133fc <ip_reass_dequeue_datagram+0x4c>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	687a      	ldr	r2, [r7, #4]
 80133c0:	429a      	cmp	r2, r3
 80133c2:	d104      	bne.n	80133ce <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a0c      	ldr	r2, [pc, #48]	@ (80133fc <ip_reass_dequeue_datagram+0x4c>)
 80133ca:	6013      	str	r3, [r2, #0]
 80133cc:	e00d      	b.n	80133ea <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d106      	bne.n	80133e2 <ip_reass_dequeue_datagram+0x32>
 80133d4:	4b0a      	ldr	r3, [pc, #40]	@ (8013400 <ip_reass_dequeue_datagram+0x50>)
 80133d6:	f240 1245 	movw	r2, #325	@ 0x145
 80133da:	490a      	ldr	r1, [pc, #40]	@ (8013404 <ip_reass_dequeue_datagram+0x54>)
 80133dc:	480a      	ldr	r0, [pc, #40]	@ (8013408 <ip_reass_dequeue_datagram+0x58>)
 80133de:	f000 fe9f 	bl	8014120 <iprintf>
    prev->next = ipr->next;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80133ea:	6879      	ldr	r1, [r7, #4]
 80133ec:	2004      	movs	r0, #4
 80133ee:	f7f4 f98f 	bl	8007710 <memp_free>
}
 80133f2:	bf00      	nop
 80133f4:	3708      	adds	r7, #8
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	200044c4 	.word	0x200044c4
 8013400:	08017f28 	.word	0x08017f28
 8013404:	08017ff0 	.word	0x08017ff0
 8013408:	08017f70 	.word	0x08017f70

0801340c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b08c      	sub	sp, #48	@ 0x30
 8013410:	af00      	add	r7, sp, #0
 8013412:	60f8      	str	r0, [r7, #12]
 8013414:	60b9      	str	r1, [r7, #8]
 8013416:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013418:	2300      	movs	r3, #0
 801341a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801341c:	2301      	movs	r3, #1
 801341e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013420:	68bb      	ldr	r3, [r7, #8]
 8013422:	685b      	ldr	r3, [r3, #4]
 8013424:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	885b      	ldrh	r3, [r3, #2]
 801342a:	b29b      	uxth	r3, r3
 801342c:	4618      	mov	r0, r3
 801342e:	f7f3 f865 	bl	80064fc <lwip_htons>
 8013432:	4603      	mov	r3, r0
 8013434:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013436:	69fb      	ldr	r3, [r7, #28]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	f003 030f 	and.w	r3, r3, #15
 801343e:	b2db      	uxtb	r3, r3
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013444:	7e7b      	ldrb	r3, [r7, #25]
 8013446:	b29b      	uxth	r3, r3
 8013448:	8b7a      	ldrh	r2, [r7, #26]
 801344a:	429a      	cmp	r2, r3
 801344c:	d202      	bcs.n	8013454 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801344e:	f04f 33ff 	mov.w	r3, #4294967295
 8013452:	e135      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013454:	7e7b      	ldrb	r3, [r7, #25]
 8013456:	b29b      	uxth	r3, r3
 8013458:	8b7a      	ldrh	r2, [r7, #26]
 801345a:	1ad3      	subs	r3, r2, r3
 801345c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801345e:	69fb      	ldr	r3, [r7, #28]
 8013460:	88db      	ldrh	r3, [r3, #6]
 8013462:	b29b      	uxth	r3, r3
 8013464:	4618      	mov	r0, r3
 8013466:	f7f3 f849 	bl	80064fc <lwip_htons>
 801346a:	4603      	mov	r3, r0
 801346c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013470:	b29b      	uxth	r3, r3
 8013472:	00db      	lsls	r3, r3, #3
 8013474:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801347c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801347e:	2200      	movs	r2, #0
 8013480:	701a      	strb	r2, [r3, #0]
 8013482:	2200      	movs	r2, #0
 8013484:	705a      	strb	r2, [r3, #1]
 8013486:	2200      	movs	r2, #0
 8013488:	709a      	strb	r2, [r3, #2]
 801348a:	2200      	movs	r2, #0
 801348c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801348e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013490:	8afa      	ldrh	r2, [r7, #22]
 8013492:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013494:	8afa      	ldrh	r2, [r7, #22]
 8013496:	8b7b      	ldrh	r3, [r7, #26]
 8013498:	4413      	add	r3, r2
 801349a:	b29a      	uxth	r2, r3
 801349c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801349e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80134a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134a2:	88db      	ldrh	r3, [r3, #6]
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	8afa      	ldrh	r2, [r7, #22]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d902      	bls.n	80134b2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134ac:	f04f 33ff 	mov.w	r3, #4294967295
 80134b0:	e106      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	685b      	ldr	r3, [r3, #4]
 80134b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80134b8:	e068      	b.n	801358c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80134ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80134bc:	685b      	ldr	r3, [r3, #4]
 80134be:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80134c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134c2:	889b      	ldrh	r3, [r3, #4]
 80134c4:	b29a      	uxth	r2, r3
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	889b      	ldrh	r3, [r3, #4]
 80134ca:	b29b      	uxth	r3, r3
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d235      	bcs.n	801353c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80134d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80134d4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80134d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d020      	beq.n	801351e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80134dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134de:	889b      	ldrh	r3, [r3, #4]
 80134e0:	b29a      	uxth	r2, r3
 80134e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134e4:	88db      	ldrh	r3, [r3, #6]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	429a      	cmp	r2, r3
 80134ea:	d307      	bcc.n	80134fc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80134ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134ee:	88db      	ldrh	r3, [r3, #6]
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	693b      	ldr	r3, [r7, #16]
 80134f4:	889b      	ldrh	r3, [r3, #4]
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	429a      	cmp	r2, r3
 80134fa:	d902      	bls.n	8013502 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80134fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013500:	e0de      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013504:	68ba      	ldr	r2, [r7, #8]
 8013506:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801350a:	88db      	ldrh	r3, [r3, #6]
 801350c:	b29a      	uxth	r2, r3
 801350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013510:	889b      	ldrh	r3, [r3, #4]
 8013512:	b29b      	uxth	r3, r3
 8013514:	429a      	cmp	r2, r3
 8013516:	d03d      	beq.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013518:	2300      	movs	r3, #0
 801351a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801351c:	e03a      	b.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801351e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013520:	88db      	ldrh	r3, [r3, #6]
 8013522:	b29a      	uxth	r2, r3
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	889b      	ldrh	r3, [r3, #4]
 8013528:	b29b      	uxth	r3, r3
 801352a:	429a      	cmp	r2, r3
 801352c:	d902      	bls.n	8013534 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801352e:	f04f 33ff 	mov.w	r3, #4294967295
 8013532:	e0c5      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	68ba      	ldr	r2, [r7, #8]
 8013538:	605a      	str	r2, [r3, #4]
      break;
 801353a:	e02b      	b.n	8013594 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353e:	889b      	ldrh	r3, [r3, #4]
 8013540:	b29a      	uxth	r2, r3
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	889b      	ldrh	r3, [r3, #4]
 8013546:	b29b      	uxth	r3, r3
 8013548:	429a      	cmp	r2, r3
 801354a:	d102      	bne.n	8013552 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801354c:	f04f 33ff 	mov.w	r3, #4294967295
 8013550:	e0b6      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013554:	889b      	ldrh	r3, [r3, #4]
 8013556:	b29a      	uxth	r2, r3
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	88db      	ldrh	r3, [r3, #6]
 801355c:	b29b      	uxth	r3, r3
 801355e:	429a      	cmp	r2, r3
 8013560:	d202      	bcs.n	8013568 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013562:	f04f 33ff 	mov.w	r3, #4294967295
 8013566:	e0ab      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801356a:	2b00      	cmp	r3, #0
 801356c:	d009      	beq.n	8013582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801356e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013570:	88db      	ldrh	r3, [r3, #6]
 8013572:	b29a      	uxth	r2, r3
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	889b      	ldrh	r3, [r3, #4]
 8013578:	b29b      	uxth	r3, r3
 801357a:	429a      	cmp	r2, r3
 801357c:	d001      	beq.n	8013582 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013582:	693b      	ldr	r3, [r7, #16]
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8013588:	693b      	ldr	r3, [r7, #16]
 801358a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801358c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801358e:	2b00      	cmp	r3, #0
 8013590:	d193      	bne.n	80134ba <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013592:	e000      	b.n	8013596 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013594:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013598:	2b00      	cmp	r3, #0
 801359a:	d12d      	bne.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801359c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d01c      	beq.n	80135dc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80135a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135a4:	88db      	ldrh	r3, [r3, #6]
 80135a6:	b29a      	uxth	r2, r3
 80135a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135aa:	889b      	ldrh	r3, [r3, #4]
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	429a      	cmp	r2, r3
 80135b0:	d906      	bls.n	80135c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80135b2:	4b45      	ldr	r3, [pc, #276]	@ (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135b4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80135b8:	4944      	ldr	r1, [pc, #272]	@ (80136cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80135ba:	4845      	ldr	r0, [pc, #276]	@ (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80135bc:	f000 fdb0 	bl	8014120 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80135c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80135c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135c8:	88db      	ldrh	r3, [r3, #6]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135ce:	889b      	ldrh	r3, [r3, #4]
 80135d0:	b29b      	uxth	r3, r3
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d010      	beq.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80135d6:	2300      	movs	r3, #0
 80135d8:	623b      	str	r3, [r7, #32]
 80135da:	e00d      	b.n	80135f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d006      	beq.n	80135f2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80135e4:	4b38      	ldr	r3, [pc, #224]	@ (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80135e6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80135ea:	493a      	ldr	r1, [pc, #232]	@ (80136d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80135ec:	4838      	ldr	r0, [pc, #224]	@ (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80135ee:	f000 fd97 	bl	8014120 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	68ba      	ldr	r2, [r7, #8]
 80135f6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d105      	bne.n	801360a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	7f9b      	ldrb	r3, [r3, #30]
 8013602:	f003 0301 	and.w	r3, r3, #1
 8013606:	2b00      	cmp	r3, #0
 8013608:	d059      	beq.n	80136be <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801360a:	6a3b      	ldr	r3, [r7, #32]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d04f      	beq.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	685b      	ldr	r3, [r3, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d006      	beq.n	8013626 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	889b      	ldrh	r3, [r3, #4]
 8013620:	b29b      	uxth	r3, r3
 8013622:	2b00      	cmp	r3, #0
 8013624:	d002      	beq.n	801362c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013626:	2300      	movs	r3, #0
 8013628:	623b      	str	r3, [r7, #32]
 801362a:	e041      	b.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801362c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801362e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8013630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013636:	e012      	b.n	801365e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801363a:	685b      	ldr	r3, [r3, #4]
 801363c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801363e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013640:	88db      	ldrh	r3, [r3, #6]
 8013642:	b29a      	uxth	r2, r3
 8013644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013646:	889b      	ldrh	r3, [r3, #4]
 8013648:	b29b      	uxth	r3, r3
 801364a:	429a      	cmp	r2, r3
 801364c:	d002      	beq.n	8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801364e:	2300      	movs	r3, #0
 8013650:	623b      	str	r3, [r7, #32]
            break;
 8013652:	e007      	b.n	8013664 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013656:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1e9      	bne.n	8013638 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013664:	6a3b      	ldr	r3, [r7, #32]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d022      	beq.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801366a:	68fb      	ldr	r3, [r7, #12]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013672:	4b15      	ldr	r3, [pc, #84]	@ (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013674:	f240 12df 	movw	r2, #479	@ 0x1df
 8013678:	4917      	ldr	r1, [pc, #92]	@ (80136d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801367a:	4815      	ldr	r0, [pc, #84]	@ (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801367c:	f000 fd50 	bl	8014120 <iprintf>
          LWIP_ASSERT("sanity check",
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013688:	429a      	cmp	r2, r3
 801368a:	d106      	bne.n	801369a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801368c:	4b0e      	ldr	r3, [pc, #56]	@ (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801368e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013692:	4911      	ldr	r1, [pc, #68]	@ (80136d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013694:	480e      	ldr	r0, [pc, #56]	@ (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013696:	f000 fd43 	bl	8014120 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d006      	beq.n	80136b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80136a2:	4b09      	ldr	r3, [pc, #36]	@ (80136c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80136a4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80136a8:	490c      	ldr	r1, [pc, #48]	@ (80136dc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80136aa:	4809      	ldr	r0, [pc, #36]	@ (80136d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80136ac:	f000 fd38 	bl	8014120 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80136b0:	6a3b      	ldr	r3, [r7, #32]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	bf14      	ite	ne
 80136b6:	2301      	movne	r3, #1
 80136b8:	2300      	moveq	r3, #0
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	e000      	b.n	80136c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80136be:	2300      	movs	r3, #0
}
 80136c0:	4618      	mov	r0, r3
 80136c2:	3730      	adds	r7, #48	@ 0x30
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}
 80136c8:	08017f28 	.word	0x08017f28
 80136cc:	0801800c 	.word	0x0801800c
 80136d0:	08017f70 	.word	0x08017f70
 80136d4:	0801802c 	.word	0x0801802c
 80136d8:	08018064 	.word	0x08018064
 80136dc:	08018074 	.word	0x08018074

080136e0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80136e0:	b580      	push	{r7, lr}
 80136e2:	b08e      	sub	sp, #56	@ 0x38
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	685b      	ldr	r3, [r3, #4]
 80136ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80136ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136f0:	781b      	ldrb	r3, [r3, #0]
 80136f2:	f003 030f 	and.w	r3, r3, #15
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	009b      	lsls	r3, r3, #2
 80136fa:	b2db      	uxtb	r3, r3
 80136fc:	2b14      	cmp	r3, #20
 80136fe:	f040 8179 	bne.w	80139f4 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013704:	88db      	ldrh	r3, [r3, #6]
 8013706:	b29b      	uxth	r3, r3
 8013708:	4618      	mov	r0, r3
 801370a:	f7f2 fef7 	bl	80064fc <lwip_htons>
 801370e:	4603      	mov	r3, r0
 8013710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013714:	b29b      	uxth	r3, r3
 8013716:	00db      	lsls	r3, r3, #3
 8013718:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801371a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801371c:	885b      	ldrh	r3, [r3, #2]
 801371e:	b29b      	uxth	r3, r3
 8013720:	4618      	mov	r0, r3
 8013722:	f7f2 feeb 	bl	80064fc <lwip_htons>
 8013726:	4603      	mov	r3, r0
 8013728:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	f003 030f 	and.w	r3, r3, #15
 8013732:	b2db      	uxtb	r3, r3
 8013734:	009b      	lsls	r3, r3, #2
 8013736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801373a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801373e:	b29b      	uxth	r3, r3
 8013740:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013742:	429a      	cmp	r2, r3
 8013744:	f0c0 8158 	bcc.w	80139f8 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013748:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801374c:	b29b      	uxth	r3, r3
 801374e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8013750:	1ad3      	subs	r3, r2, r3
 8013752:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013754:	6878      	ldr	r0, [r7, #4]
 8013756:	f7f4 fee5 	bl	8008524 <pbuf_clen>
 801375a:	4603      	mov	r3, r0
 801375c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801375e:	4b90      	ldr	r3, [pc, #576]	@ (80139a0 <ip4_reass+0x2c0>)
 8013760:	881b      	ldrh	r3, [r3, #0]
 8013762:	461a      	mov	r2, r3
 8013764:	8c3b      	ldrh	r3, [r7, #32]
 8013766:	4413      	add	r3, r2
 8013768:	2b0a      	cmp	r3, #10
 801376a:	dd10      	ble.n	801378e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801376c:	8c3b      	ldrh	r3, [r7, #32]
 801376e:	4619      	mov	r1, r3
 8013770:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013772:	f7ff fd81 	bl	8013278 <ip_reass_remove_oldest_datagram>
 8013776:	4603      	mov	r3, r0
 8013778:	2b00      	cmp	r3, #0
 801377a:	f000 813f 	beq.w	80139fc <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801377e:	4b88      	ldr	r3, [pc, #544]	@ (80139a0 <ip4_reass+0x2c0>)
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	461a      	mov	r2, r3
 8013784:	8c3b      	ldrh	r3, [r7, #32]
 8013786:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013788:	2b0a      	cmp	r3, #10
 801378a:	f300 8137 	bgt.w	80139fc <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801378e:	4b85      	ldr	r3, [pc, #532]	@ (80139a4 <ip4_reass+0x2c4>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	633b      	str	r3, [r7, #48]	@ 0x30
 8013794:	e015      	b.n	80137c2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013798:	695a      	ldr	r2, [r3, #20]
 801379a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801379c:	68db      	ldr	r3, [r3, #12]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d10c      	bne.n	80137bc <ip4_reass+0xdc>
 80137a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137a4:	699a      	ldr	r2, [r3, #24]
 80137a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137a8:	691b      	ldr	r3, [r3, #16]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d106      	bne.n	80137bc <ip4_reass+0xdc>
 80137ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137b0:	899a      	ldrh	r2, [r3, #12]
 80137b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137b4:	889b      	ldrh	r3, [r3, #4]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d006      	beq.n	80137ca <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80137bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80137c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1e6      	bne.n	8013796 <ip4_reass+0xb6>
 80137c8:	e000      	b.n	80137cc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80137ca:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80137cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d109      	bne.n	80137e6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80137d2:	8c3b      	ldrh	r3, [r7, #32]
 80137d4:	4619      	mov	r1, r3
 80137d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137d8:	f7ff fdb0 	bl	801333c <ip_reass_enqueue_new_datagram>
 80137dc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80137de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d11c      	bne.n	801381e <ip4_reass+0x13e>
      goto nullreturn;
 80137e4:	e10d      	b.n	8013a02 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80137e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137e8:	88db      	ldrh	r3, [r3, #6]
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f2 fe85 	bl	80064fc <lwip_htons>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d110      	bne.n	801381e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80137fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80137fe:	89db      	ldrh	r3, [r3, #14]
 8013800:	4618      	mov	r0, r3
 8013802:	f7f2 fe7b 	bl	80064fc <lwip_htons>
 8013806:	4603      	mov	r3, r0
 8013808:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801380c:	2b00      	cmp	r3, #0
 801380e:	d006      	beq.n	801381e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013812:	3308      	adds	r3, #8
 8013814:	2214      	movs	r2, #20
 8013816:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013818:	4618      	mov	r0, r3
 801381a:	f000 fd96 	bl	801434a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013820:	88db      	ldrh	r3, [r3, #6]
 8013822:	b29b      	uxth	r3, r3
 8013824:	f003 0320 	and.w	r3, r3, #32
 8013828:	2b00      	cmp	r3, #0
 801382a:	bf0c      	ite	eq
 801382c:	2301      	moveq	r3, #1
 801382e:	2300      	movne	r3, #0
 8013830:	b2db      	uxtb	r3, r3
 8013832:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013834:	69fb      	ldr	r3, [r7, #28]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d00e      	beq.n	8013858 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801383a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801383c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801383e:	4413      	add	r3, r2
 8013840:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013842:	8b7a      	ldrh	r2, [r7, #26]
 8013844:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013846:	429a      	cmp	r2, r3
 8013848:	f0c0 80a8 	bcc.w	801399c <ip4_reass+0x2bc>
 801384c:	8b7b      	ldrh	r3, [r7, #26]
 801384e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8013852:	4293      	cmp	r3, r2
 8013854:	f200 80a2 	bhi.w	801399c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013858:	69fa      	ldr	r2, [r7, #28]
 801385a:	6879      	ldr	r1, [r7, #4]
 801385c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801385e:	f7ff fdd5 	bl	801340c <ip_reass_chain_frag_into_datagram_and_validate>
 8013862:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801386a:	f000 80a3 	beq.w	80139b4 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801386e:	4b4c      	ldr	r3, [pc, #304]	@ (80139a0 <ip4_reass+0x2c0>)
 8013870:	881a      	ldrh	r2, [r3, #0]
 8013872:	8c3b      	ldrh	r3, [r7, #32]
 8013874:	4413      	add	r3, r2
 8013876:	b29a      	uxth	r2, r3
 8013878:	4b49      	ldr	r3, [pc, #292]	@ (80139a0 <ip4_reass+0x2c0>)
 801387a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801387c:	69fb      	ldr	r3, [r7, #28]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d00d      	beq.n	801389e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013882:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013884:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8013886:	4413      	add	r3, r2
 8013888:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801388c:	8a7a      	ldrh	r2, [r7, #18]
 801388e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013892:	7f9b      	ldrb	r3, [r3, #30]
 8013894:	f043 0301 	orr.w	r3, r3, #1
 8013898:	b2da      	uxtb	r2, r3
 801389a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801389c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	2b01      	cmp	r3, #1
 80138a2:	d179      	bne.n	8013998 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80138a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138a6:	8b9b      	ldrh	r3, [r3, #28]
 80138a8:	3314      	adds	r3, #20
 80138aa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80138ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138ae:	685b      	ldr	r3, [r3, #4]
 80138b0:	685b      	ldr	r3, [r3, #4]
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80138b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	685b      	ldr	r3, [r3, #4]
 80138bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80138be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138c0:	3308      	adds	r3, #8
 80138c2:	2214      	movs	r2, #20
 80138c4:	4619      	mov	r1, r3
 80138c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138c8:	f000 fd3f 	bl	801434a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80138cc:	8a3b      	ldrh	r3, [r7, #16]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f2 fe14 	bl	80064fc <lwip_htons>
 80138d4:	4603      	mov	r3, r0
 80138d6:	461a      	mov	r2, r3
 80138d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138da:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80138dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138de:	2200      	movs	r2, #0
 80138e0:	719a      	strb	r2, [r3, #6]
 80138e2:	2200      	movs	r2, #0
 80138e4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80138e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138e8:	2200      	movs	r2, #0
 80138ea:	729a      	strb	r2, [r3, #10]
 80138ec:	2200      	movs	r2, #0
 80138ee:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80138f0:	2114      	movs	r1, #20
 80138f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80138f4:	f7f3 fa37 	bl	8006d66 <inet_chksum>
 80138f8:	4603      	mov	r3, r0
 80138fa:	461a      	mov	r2, r3
 80138fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138fe:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013902:	685b      	ldr	r3, [r3, #4]
 8013904:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013906:	e00d      	b.n	8013924 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 8013908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801390a:	685b      	ldr	r3, [r3, #4]
 801390c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801390e:	2114      	movs	r1, #20
 8013910:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8013912:	f7f4 fcf9 	bl	8008308 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013916:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013918:	6878      	ldr	r0, [r7, #4]
 801391a:	f7f4 fe3d 	bl	8008598 <pbuf_cat>
      r = iprh->next_pbuf;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013926:	2b00      	cmp	r3, #0
 8013928:	d1ee      	bne.n	8013908 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801392a:	4b1e      	ldr	r3, [pc, #120]	@ (80139a4 <ip4_reass+0x2c4>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013930:	429a      	cmp	r2, r3
 8013932:	d102      	bne.n	801393a <ip4_reass+0x25a>
      ipr_prev = NULL;
 8013934:	2300      	movs	r3, #0
 8013936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013938:	e010      	b.n	801395c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801393a:	4b1a      	ldr	r3, [pc, #104]	@ (80139a4 <ip4_reass+0x2c4>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013940:	e007      	b.n	8013952 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8013942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013948:	429a      	cmp	r2, r3
 801394a:	d006      	beq.n	801395a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013954:	2b00      	cmp	r3, #0
 8013956:	d1f4      	bne.n	8013942 <ip4_reass+0x262>
 8013958:	e000      	b.n	801395c <ip4_reass+0x27c>
          break;
 801395a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801395c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801395e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013960:	f7ff fd26 	bl	80133b0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f7f4 fddd 	bl	8008524 <pbuf_clen>
 801396a:	4603      	mov	r3, r0
 801396c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801396e:	4b0c      	ldr	r3, [pc, #48]	@ (80139a0 <ip4_reass+0x2c0>)
 8013970:	881b      	ldrh	r3, [r3, #0]
 8013972:	8c3a      	ldrh	r2, [r7, #32]
 8013974:	429a      	cmp	r2, r3
 8013976:	d906      	bls.n	8013986 <ip4_reass+0x2a6>
 8013978:	4b0b      	ldr	r3, [pc, #44]	@ (80139a8 <ip4_reass+0x2c8>)
 801397a:	f240 229b 	movw	r2, #667	@ 0x29b
 801397e:	490b      	ldr	r1, [pc, #44]	@ (80139ac <ip4_reass+0x2cc>)
 8013980:	480b      	ldr	r0, [pc, #44]	@ (80139b0 <ip4_reass+0x2d0>)
 8013982:	f000 fbcd 	bl	8014120 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013986:	4b06      	ldr	r3, [pc, #24]	@ (80139a0 <ip4_reass+0x2c0>)
 8013988:	881a      	ldrh	r2, [r3, #0]
 801398a:	8c3b      	ldrh	r3, [r7, #32]
 801398c:	1ad3      	subs	r3, r2, r3
 801398e:	b29a      	uxth	r2, r3
 8013990:	4b03      	ldr	r3, [pc, #12]	@ (80139a0 <ip4_reass+0x2c0>)
 8013992:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	e038      	b.n	8013a0a <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013998:	2300      	movs	r3, #0
 801399a:	e036      	b.n	8013a0a <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801399c:	bf00      	nop
 801399e:	e00a      	b.n	80139b6 <ip4_reass+0x2d6>
 80139a0:	200044c8 	.word	0x200044c8
 80139a4:	200044c4 	.word	0x200044c4
 80139a8:	08017f28 	.word	0x08017f28
 80139ac:	08018098 	.word	0x08018098
 80139b0:	08017f70 	.word	0x08017f70
    goto nullreturn_ipr;
 80139b4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80139b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d106      	bne.n	80139ca <ip4_reass+0x2ea>
 80139bc:	4b15      	ldr	r3, [pc, #84]	@ (8013a14 <ip4_reass+0x334>)
 80139be:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80139c2:	4915      	ldr	r1, [pc, #84]	@ (8013a18 <ip4_reass+0x338>)
 80139c4:	4815      	ldr	r0, [pc, #84]	@ (8013a1c <ip4_reass+0x33c>)
 80139c6:	f000 fbab 	bl	8014120 <iprintf>
  if (ipr->p == NULL) {
 80139ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139cc:	685b      	ldr	r3, [r3, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d116      	bne.n	8013a00 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80139d2:	4b13      	ldr	r3, [pc, #76]	@ (8013a20 <ip4_reass+0x340>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80139d8:	429a      	cmp	r2, r3
 80139da:	d006      	beq.n	80139ea <ip4_reass+0x30a>
 80139dc:	4b0d      	ldr	r3, [pc, #52]	@ (8013a14 <ip4_reass+0x334>)
 80139de:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80139e2:	4910      	ldr	r1, [pc, #64]	@ (8013a24 <ip4_reass+0x344>)
 80139e4:	480d      	ldr	r0, [pc, #52]	@ (8013a1c <ip4_reass+0x33c>)
 80139e6:	f000 fb9b 	bl	8014120 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80139ea:	2100      	movs	r1, #0
 80139ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80139ee:	f7ff fcdf 	bl	80133b0 <ip_reass_dequeue_datagram>
 80139f2:	e006      	b.n	8013a02 <ip4_reass+0x322>
    goto nullreturn;
 80139f4:	bf00      	nop
 80139f6:	e004      	b.n	8013a02 <ip4_reass+0x322>
    goto nullreturn;
 80139f8:	bf00      	nop
 80139fa:	e002      	b.n	8013a02 <ip4_reass+0x322>
      goto nullreturn;
 80139fc:	bf00      	nop
 80139fe:	e000      	b.n	8013a02 <ip4_reass+0x322>
  }

nullreturn:
 8013a00:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013a02:	6878      	ldr	r0, [r7, #4]
 8013a04:	f7f4 fd06 	bl	8008414 <pbuf_free>
  return NULL;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3738      	adds	r7, #56	@ 0x38
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	08017f28 	.word	0x08017f28
 8013a18:	080180b4 	.word	0x080180b4
 8013a1c:	08017f70 	.word	0x08017f70
 8013a20:	200044c4 	.word	0x200044c4
 8013a24:	080180c0 	.word	0x080180c0

08013a28 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013a2c:	2005      	movs	r0, #5
 8013a2e:	f7f3 fe23 	bl	8007678 <memp_malloc>
 8013a32:	4603      	mov	r3, r0
}
 8013a34:	4618      	mov	r0, r3
 8013a36:	bd80      	pop	{r7, pc}

08013a38 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013a38:	b580      	push	{r7, lr}
 8013a3a:	b082      	sub	sp, #8
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d106      	bne.n	8013a54 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013a46:	4b07      	ldr	r3, [pc, #28]	@ (8013a64 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013a48:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013a4c:	4906      	ldr	r1, [pc, #24]	@ (8013a68 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013a4e:	4807      	ldr	r0, [pc, #28]	@ (8013a6c <ip_frag_free_pbuf_custom_ref+0x34>)
 8013a50:	f000 fb66 	bl	8014120 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013a54:	6879      	ldr	r1, [r7, #4]
 8013a56:	2005      	movs	r0, #5
 8013a58:	f7f3 fe5a 	bl	8007710 <memp_free>
}
 8013a5c:	bf00      	nop
 8013a5e:	3708      	adds	r7, #8
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	08017f28 	.word	0x08017f28
 8013a68:	080180e0 	.word	0x080180e0
 8013a6c:	08017f70 	.word	0x08017f70

08013a70 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d106      	bne.n	8013a90 <ipfrag_free_pbuf_custom+0x20>
 8013a82:	4b11      	ldr	r3, [pc, #68]	@ (8013ac8 <ipfrag_free_pbuf_custom+0x58>)
 8013a84:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013a88:	4910      	ldr	r1, [pc, #64]	@ (8013acc <ipfrag_free_pbuf_custom+0x5c>)
 8013a8a:	4811      	ldr	r0, [pc, #68]	@ (8013ad0 <ipfrag_free_pbuf_custom+0x60>)
 8013a8c:	f000 fb48 	bl	8014120 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013a90:	68fa      	ldr	r2, [r7, #12]
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d006      	beq.n	8013aa6 <ipfrag_free_pbuf_custom+0x36>
 8013a98:	4b0b      	ldr	r3, [pc, #44]	@ (8013ac8 <ipfrag_free_pbuf_custom+0x58>)
 8013a9a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8013a9e:	490d      	ldr	r1, [pc, #52]	@ (8013ad4 <ipfrag_free_pbuf_custom+0x64>)
 8013aa0:	480b      	ldr	r0, [pc, #44]	@ (8013ad0 <ipfrag_free_pbuf_custom+0x60>)
 8013aa2:	f000 fb3d 	bl	8014120 <iprintf>
  if (pcr->original != NULL) {
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	695b      	ldr	r3, [r3, #20]
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d004      	beq.n	8013ab8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	695b      	ldr	r3, [r3, #20]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7f4 fcae 	bl	8008414 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f7ff ffbd 	bl	8013a38 <ip_frag_free_pbuf_custom_ref>
}
 8013abe:	bf00      	nop
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	08017f28 	.word	0x08017f28
 8013acc:	080180ec 	.word	0x080180ec
 8013ad0:	08017f70 	.word	0x08017f70
 8013ad4:	080180f8 	.word	0x080180f8

08013ad8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b094      	sub	sp, #80	@ 0x50
 8013adc:	af02      	add	r7, sp, #8
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013ae4:	2300      	movs	r3, #0
 8013ae6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013aea:	68bb      	ldr	r3, [r7, #8]
 8013aec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013aee:	3b14      	subs	r3, #20
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	da00      	bge.n	8013af6 <ip4_frag+0x1e>
 8013af4:	3307      	adds	r3, #7
 8013af6:	10db      	asrs	r3, r3, #3
 8013af8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013afa:	2314      	movs	r3, #20
 8013afc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	685b      	ldr	r3, [r3, #4]
 8013b02:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013b06:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b0a:	781b      	ldrb	r3, [r3, #0]
 8013b0c:	f003 030f 	and.w	r3, r3, #15
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	b2db      	uxtb	r3, r3
 8013b16:	2b14      	cmp	r3, #20
 8013b18:	d002      	beq.n	8013b20 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013b1a:	f06f 0305 	mvn.w	r3, #5
 8013b1e:	e118      	b.n	8013d52 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	895b      	ldrh	r3, [r3, #10]
 8013b24:	2b13      	cmp	r3, #19
 8013b26:	d809      	bhi.n	8013b3c <ip4_frag+0x64>
 8013b28:	4b8c      	ldr	r3, [pc, #560]	@ (8013d5c <ip4_frag+0x284>)
 8013b2a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8013b2e:	498c      	ldr	r1, [pc, #560]	@ (8013d60 <ip4_frag+0x288>)
 8013b30:	488c      	ldr	r0, [pc, #560]	@ (8013d64 <ip4_frag+0x28c>)
 8013b32:	f000 faf5 	bl	8014120 <iprintf>
 8013b36:	f06f 0305 	mvn.w	r3, #5
 8013b3a:	e10a      	b.n	8013d52 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013b3e:	88db      	ldrh	r3, [r3, #6]
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	4618      	mov	r0, r3
 8013b44:	f7f2 fcda 	bl	80064fc <lwip_htons>
 8013b48:	4603      	mov	r3, r0
 8013b4a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013b4c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013b4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b52:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013b56:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	891b      	ldrh	r3, [r3, #8]
 8013b62:	3b14      	subs	r3, #20
 8013b64:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013b68:	e0e9      	b.n	8013d3e <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013b6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013b6c:	00db      	lsls	r3, r3, #3
 8013b6e:	b29b      	uxth	r3, r3
 8013b70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013b74:	4293      	cmp	r3, r2
 8013b76:	bf28      	it	cs
 8013b78:	4613      	movcs	r3, r2
 8013b7a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013b7c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013b80:	2114      	movs	r1, #20
 8013b82:	200e      	movs	r0, #14
 8013b84:	f7f4 f962 	bl	8007e4c <pbuf_alloc>
 8013b88:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	f000 80dd 	beq.w	8013d4c <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b94:	895b      	ldrh	r3, [r3, #10]
 8013b96:	2b13      	cmp	r3, #19
 8013b98:	d806      	bhi.n	8013ba8 <ip4_frag+0xd0>
 8013b9a:	4b70      	ldr	r3, [pc, #448]	@ (8013d5c <ip4_frag+0x284>)
 8013b9c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8013ba0:	4971      	ldr	r1, [pc, #452]	@ (8013d68 <ip4_frag+0x290>)
 8013ba2:	4870      	ldr	r0, [pc, #448]	@ (8013d64 <ip4_frag+0x28c>)
 8013ba4:	f000 fabc 	bl	8014120 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	2214      	movs	r2, #20
 8013bae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f000 fbca 	bl	801434a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8013bbc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013bbe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 8013bc2:	e064      	b.n	8013c8e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	895a      	ldrh	r2, [r3, #10]
 8013bc8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013bca:	1ad3      	subs	r3, r2, r3
 8013bcc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	895b      	ldrh	r3, [r3, #10]
 8013bd2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013bd4:	429a      	cmp	r2, r3
 8013bd6:	d906      	bls.n	8013be6 <ip4_frag+0x10e>
 8013bd8:	4b60      	ldr	r3, [pc, #384]	@ (8013d5c <ip4_frag+0x284>)
 8013bda:	f240 322d 	movw	r2, #813	@ 0x32d
 8013bde:	4963      	ldr	r1, [pc, #396]	@ (8013d6c <ip4_frag+0x294>)
 8013be0:	4860      	ldr	r0, [pc, #384]	@ (8013d64 <ip4_frag+0x28c>)
 8013be2:	f000 fa9d 	bl	8014120 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013be6:	8bfa      	ldrh	r2, [r7, #30]
 8013be8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013bec:	4293      	cmp	r3, r2
 8013bee:	bf28      	it	cs
 8013bf0:	4613      	movcs	r3, r2
 8013bf2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013bf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d105      	bne.n	8013c0a <ip4_frag+0x132>
        poff = 0;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	60fb      	str	r3, [r7, #12]
        continue;
 8013c08:	e041      	b.n	8013c8e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013c0a:	f7ff ff0d 	bl	8013a28 <ip_frag_alloc_pbuf_custom_ref>
 8013c0e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013c10:	69bb      	ldr	r3, [r7, #24]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d103      	bne.n	8013c1e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013c16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c18:	f7f4 fbfc 	bl	8008414 <pbuf_free>
        goto memerr;
 8013c1c:	e097      	b.n	8013d4e <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013c1e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013c24:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013c26:	4413      	add	r3, r2
 8013c28:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013c2c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8013c30:	9201      	str	r2, [sp, #4]
 8013c32:	9300      	str	r3, [sp, #0]
 8013c34:	4603      	mov	r3, r0
 8013c36:	2241      	movs	r2, #65	@ 0x41
 8013c38:	2000      	movs	r0, #0
 8013c3a:	f7f4 fa31 	bl	80080a0 <pbuf_alloced_custom>
 8013c3e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d106      	bne.n	8013c54 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013c46:	69b8      	ldr	r0, [r7, #24]
 8013c48:	f7ff fef6 	bl	8013a38 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013c4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c4e:	f7f4 fbe1 	bl	8008414 <pbuf_free>
        goto memerr;
 8013c52:	e07c      	b.n	8013d4e <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8013c54:	68f8      	ldr	r0, [r7, #12]
 8013c56:	f7f4 fc7d 	bl	8008554 <pbuf_ref>
      pcr->original = p;
 8013c5a:	69bb      	ldr	r3, [r7, #24]
 8013c5c:	68fa      	ldr	r2, [r7, #12]
 8013c5e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013c60:	69bb      	ldr	r3, [r7, #24]
 8013c62:	4a43      	ldr	r2, [pc, #268]	@ (8013d70 <ip4_frag+0x298>)
 8013c64:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013c66:	6979      	ldr	r1, [r7, #20]
 8013c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013c6a:	f7f4 fc95 	bl	8008598 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013c6e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8013c72:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c76:	1ad3      	subs	r3, r2, r3
 8013c78:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013c7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d004      	beq.n	8013c8e <ip4_frag+0x1b6>
        poff = 0;
 8013c84:	2300      	movs	r3, #0
 8013c86:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013c8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d196      	bne.n	8013bc4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013c96:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8013c98:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013c9c:	4413      	add	r3, r2
 8013c9e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ca4:	f1a3 0213 	sub.w	r2, r3, #19
 8013ca8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013cac:	429a      	cmp	r2, r3
 8013cae:	bfcc      	ite	gt
 8013cb0:	2301      	movgt	r3, #1
 8013cb2:	2300      	movle	r3, #0
 8013cb4:	b2db      	uxtb	r3, r3
 8013cb6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013cb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013cc0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8013cc2:	6a3b      	ldr	r3, [r7, #32]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d002      	beq.n	8013cce <ip4_frag+0x1f6>
 8013cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d003      	beq.n	8013cd6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013cce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013cd0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8013cd4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013cd6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7f2 fc0f 	bl	80064fc <lwip_htons>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013ce4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013ce6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013ce8:	3314      	adds	r3, #20
 8013cea:	b29b      	uxth	r3, r3
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7f2 fc05 	bl	80064fc <lwip_htons>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	461a      	mov	r2, r3
 8013cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cf8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	729a      	strb	r2, [r3, #10]
 8013d00:	2200      	movs	r2, #0
 8013d02:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8013d04:	2114      	movs	r1, #20
 8013d06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013d08:	f7f3 f82d 	bl	8006d66 <inet_chksum>
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	461a      	mov	r2, r3
 8013d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013d12:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013d1c:	68b8      	ldr	r0, [r7, #8]
 8013d1e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013d20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013d22:	f7f4 fb77 	bl	8008414 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013d26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013d2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013d2c:	1ad3      	subs	r3, r2, r3
 8013d2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8013d32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013d36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013d38:	4413      	add	r3, r2
 8013d3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8013d3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	f47f af11 	bne.w	8013b6a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013d48:	2300      	movs	r3, #0
 8013d4a:	e002      	b.n	8013d52 <ip4_frag+0x27a>
      goto memerr;
 8013d4c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3748      	adds	r7, #72	@ 0x48
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	08017f28 	.word	0x08017f28
 8013d60:	08018104 	.word	0x08018104
 8013d64:	08017f70 	.word	0x08017f70
 8013d68:	08018120 	.word	0x08018120
 8013d6c:	08018140 	.word	0x08018140
 8013d70:	08013a71 	.word	0x08013a71

08013d74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b086      	sub	sp, #24
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
 8013d7c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013d7e:	230e      	movs	r3, #14
 8013d80:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	895b      	ldrh	r3, [r3, #10]
 8013d86:	2b0e      	cmp	r3, #14
 8013d88:	d96e      	bls.n	8013e68 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	7bdb      	ldrb	r3, [r3, #15]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d106      	bne.n	8013da0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013d98:	3301      	adds	r3, #1
 8013d9a:	b2da      	uxtb	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	685b      	ldr	r3, [r3, #4]
 8013da4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013da6:	693b      	ldr	r3, [r7, #16]
 8013da8:	7b1a      	ldrb	r2, [r3, #12]
 8013daa:	7b5b      	ldrb	r3, [r3, #13]
 8013dac:	021b      	lsls	r3, r3, #8
 8013dae:	4313      	orrs	r3, r2
 8013db0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013db2:	693b      	ldr	r3, [r7, #16]
 8013db4:	781b      	ldrb	r3, [r3, #0]
 8013db6:	f003 0301 	and.w	r3, r3, #1
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d023      	beq.n	8013e06 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013dbe:	693b      	ldr	r3, [r7, #16]
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	2b01      	cmp	r3, #1
 8013dc4:	d10f      	bne.n	8013de6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013dc6:	693b      	ldr	r3, [r7, #16]
 8013dc8:	785b      	ldrb	r3, [r3, #1]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d11b      	bne.n	8013e06 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013dce:	693b      	ldr	r3, [r7, #16]
 8013dd0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013dd2:	2b5e      	cmp	r3, #94	@ 0x5e
 8013dd4:	d117      	bne.n	8013e06 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	7b5b      	ldrb	r3, [r3, #13]
 8013dda:	f043 0310 	orr.w	r3, r3, #16
 8013dde:	b2da      	uxtb	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	735a      	strb	r2, [r3, #13]
 8013de4:	e00f      	b.n	8013e06 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	2206      	movs	r2, #6
 8013dea:	4928      	ldr	r1, [pc, #160]	@ (8013e8c <ethernet_input+0x118>)
 8013dec:	4618      	mov	r0, r3
 8013dee:	f000 fa0c 	bl	801420a <memcmp>
 8013df2:	4603      	mov	r3, r0
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d106      	bne.n	8013e06 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	7b5b      	ldrb	r3, [r3, #13]
 8013dfc:	f043 0308 	orr.w	r3, r3, #8
 8013e00:	b2da      	uxtb	r2, r3
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013e06:	89fb      	ldrh	r3, [r7, #14]
 8013e08:	2b08      	cmp	r3, #8
 8013e0a:	d003      	beq.n	8013e14 <ethernet_input+0xa0>
 8013e0c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013e10:	d014      	beq.n	8013e3c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013e12:	e032      	b.n	8013e7a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013e1a:	f003 0308 	and.w	r3, r3, #8
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d024      	beq.n	8013e6c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e22:	8afb      	ldrh	r3, [r7, #22]
 8013e24:	4619      	mov	r1, r3
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f7f4 fa6e 	bl	8008308 <pbuf_remove_header>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d11e      	bne.n	8013e70 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013e32:	6839      	ldr	r1, [r7, #0]
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7fe fe81 	bl	8012b3c <ip4_input>
      break;
 8013e3a:	e013      	b.n	8013e64 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013e3c:	683b      	ldr	r3, [r7, #0]
 8013e3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013e42:	f003 0308 	and.w	r3, r3, #8
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d014      	beq.n	8013e74 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013e4a:	8afb      	ldrh	r3, [r7, #22]
 8013e4c:	4619      	mov	r1, r3
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f7f4 fa5a 	bl	8008308 <pbuf_remove_header>
 8013e54:	4603      	mov	r3, r0
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d10e      	bne.n	8013e78 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013e5a:	6839      	ldr	r1, [r7, #0]
 8013e5c:	6878      	ldr	r0, [r7, #4]
 8013e5e:	f7fd ffef 	bl	8011e40 <etharp_input>
      break;
 8013e62:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013e64:	2300      	movs	r3, #0
 8013e66:	e00c      	b.n	8013e82 <ethernet_input+0x10e>
    goto free_and_return;
 8013e68:	bf00      	nop
 8013e6a:	e006      	b.n	8013e7a <ethernet_input+0x106>
        goto free_and_return;
 8013e6c:	bf00      	nop
 8013e6e:	e004      	b.n	8013e7a <ethernet_input+0x106>
        goto free_and_return;
 8013e70:	bf00      	nop
 8013e72:	e002      	b.n	8013e7a <ethernet_input+0x106>
        goto free_and_return;
 8013e74:	bf00      	nop
 8013e76:	e000      	b.n	8013e7a <ethernet_input+0x106>
        goto free_and_return;
 8013e78:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013e7a:	6878      	ldr	r0, [r7, #4]
 8013e7c:	f7f4 faca 	bl	8008414 <pbuf_free>
  return ERR_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3718      	adds	r7, #24
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	0801831c 	.word	0x0801831c

08013e90 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b086      	sub	sp, #24
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	60b9      	str	r1, [r7, #8]
 8013e9a:	607a      	str	r2, [r7, #4]
 8013e9c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013e9e:	8c3b      	ldrh	r3, [r7, #32]
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	f7f2 fb2b 	bl	80064fc <lwip_htons>
 8013ea6:	4603      	mov	r3, r0
 8013ea8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013eaa:	210e      	movs	r1, #14
 8013eac:	68b8      	ldr	r0, [r7, #8]
 8013eae:	f7f4 fa1b 	bl	80082e8 <pbuf_add_header>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	2b00      	cmp	r3, #0
 8013eb6:	d125      	bne.n	8013f04 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	8afa      	ldrh	r2, [r7, #22]
 8013ec2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	2206      	movs	r2, #6
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f000 fa3d 	bl	801434a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013ed0:	693b      	ldr	r3, [r7, #16]
 8013ed2:	3306      	adds	r3, #6
 8013ed4:	2206      	movs	r2, #6
 8013ed6:	6879      	ldr	r1, [r7, #4]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 fa36 	bl	801434a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013ee4:	2b06      	cmp	r3, #6
 8013ee6:	d006      	beq.n	8013ef6 <ethernet_output+0x66>
 8013ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8013f14 <ethernet_output+0x84>)
 8013eea:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013eee:	490a      	ldr	r1, [pc, #40]	@ (8013f18 <ethernet_output+0x88>)
 8013ef0:	480a      	ldr	r0, [pc, #40]	@ (8013f1c <ethernet_output+0x8c>)
 8013ef2:	f000 f915 	bl	8014120 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	699b      	ldr	r3, [r3, #24]
 8013efa:	68b9      	ldr	r1, [r7, #8]
 8013efc:	68f8      	ldr	r0, [r7, #12]
 8013efe:	4798      	blx	r3
 8013f00:	4603      	mov	r3, r0
 8013f02:	e002      	b.n	8013f0a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013f04:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013f06:	f06f 0301 	mvn.w	r3, #1
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3718      	adds	r7, #24
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}
 8013f12:	bf00      	nop
 8013f14:	08018150 	.word	0x08018150
 8013f18:	08018188 	.word	0x08018188
 8013f1c:	080181bc 	.word	0x080181bc

08013f20 <rand>:
 8013f20:	4b16      	ldr	r3, [pc, #88]	@ (8013f7c <rand+0x5c>)
 8013f22:	b510      	push	{r4, lr}
 8013f24:	681c      	ldr	r4, [r3, #0]
 8013f26:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013f28:	b9b3      	cbnz	r3, 8013f58 <rand+0x38>
 8013f2a:	2018      	movs	r0, #24
 8013f2c:	f000 fa84 	bl	8014438 <malloc>
 8013f30:	4602      	mov	r2, r0
 8013f32:	6320      	str	r0, [r4, #48]	@ 0x30
 8013f34:	b920      	cbnz	r0, 8013f40 <rand+0x20>
 8013f36:	4b12      	ldr	r3, [pc, #72]	@ (8013f80 <rand+0x60>)
 8013f38:	4812      	ldr	r0, [pc, #72]	@ (8013f84 <rand+0x64>)
 8013f3a:	2152      	movs	r1, #82	@ 0x52
 8013f3c:	f000 fa14 	bl	8014368 <__assert_func>
 8013f40:	4911      	ldr	r1, [pc, #68]	@ (8013f88 <rand+0x68>)
 8013f42:	4b12      	ldr	r3, [pc, #72]	@ (8013f8c <rand+0x6c>)
 8013f44:	e9c0 1300 	strd	r1, r3, [r0]
 8013f48:	4b11      	ldr	r3, [pc, #68]	@ (8013f90 <rand+0x70>)
 8013f4a:	6083      	str	r3, [r0, #8]
 8013f4c:	230b      	movs	r3, #11
 8013f4e:	8183      	strh	r3, [r0, #12]
 8013f50:	2100      	movs	r1, #0
 8013f52:	2001      	movs	r0, #1
 8013f54:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013f58:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013f5a:	480e      	ldr	r0, [pc, #56]	@ (8013f94 <rand+0x74>)
 8013f5c:	690b      	ldr	r3, [r1, #16]
 8013f5e:	694c      	ldr	r4, [r1, #20]
 8013f60:	4a0d      	ldr	r2, [pc, #52]	@ (8013f98 <rand+0x78>)
 8013f62:	4358      	muls	r0, r3
 8013f64:	fb02 0004 	mla	r0, r2, r4, r0
 8013f68:	fba3 3202 	umull	r3, r2, r3, r2
 8013f6c:	3301      	adds	r3, #1
 8013f6e:	eb40 0002 	adc.w	r0, r0, r2
 8013f72:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013f76:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013f7a:	bd10      	pop	{r4, pc}
 8013f7c:	20000024 	.word	0x20000024
 8013f80:	0801832a 	.word	0x0801832a
 8013f84:	08018341 	.word	0x08018341
 8013f88:	abcd330e 	.word	0xabcd330e
 8013f8c:	e66d1234 	.word	0xe66d1234
 8013f90:	0005deec 	.word	0x0005deec
 8013f94:	5851f42d 	.word	0x5851f42d
 8013f98:	4c957f2d 	.word	0x4c957f2d

08013f9c <std>:
 8013f9c:	2300      	movs	r3, #0
 8013f9e:	b510      	push	{r4, lr}
 8013fa0:	4604      	mov	r4, r0
 8013fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8013fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013faa:	6083      	str	r3, [r0, #8]
 8013fac:	8181      	strh	r1, [r0, #12]
 8013fae:	6643      	str	r3, [r0, #100]	@ 0x64
 8013fb0:	81c2      	strh	r2, [r0, #14]
 8013fb2:	6183      	str	r3, [r0, #24]
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	2208      	movs	r2, #8
 8013fb8:	305c      	adds	r0, #92	@ 0x5c
 8013fba:	f000 f950 	bl	801425e <memset>
 8013fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8013ff4 <std+0x58>)
 8013fc0:	6263      	str	r3, [r4, #36]	@ 0x24
 8013fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8013ff8 <std+0x5c>)
 8013fc4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8013ffc <std+0x60>)
 8013fc8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013fca:	4b0d      	ldr	r3, [pc, #52]	@ (8014000 <std+0x64>)
 8013fcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8013fce:	4b0d      	ldr	r3, [pc, #52]	@ (8014004 <std+0x68>)
 8013fd0:	6224      	str	r4, [r4, #32]
 8013fd2:	429c      	cmp	r4, r3
 8013fd4:	d006      	beq.n	8013fe4 <std+0x48>
 8013fd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013fda:	4294      	cmp	r4, r2
 8013fdc:	d002      	beq.n	8013fe4 <std+0x48>
 8013fde:	33d0      	adds	r3, #208	@ 0xd0
 8013fe0:	429c      	cmp	r4, r3
 8013fe2:	d105      	bne.n	8013ff0 <std+0x54>
 8013fe4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fec:	f000 b9aa 	b.w	8014344 <__retarget_lock_init_recursive>
 8013ff0:	bd10      	pop	{r4, pc}
 8013ff2:	bf00      	nop
 8013ff4:	08014185 	.word	0x08014185
 8013ff8:	080141a7 	.word	0x080141a7
 8013ffc:	080141df 	.word	0x080141df
 8014000:	08014203 	.word	0x08014203
 8014004:	200044cc 	.word	0x200044cc

08014008 <stdio_exit_handler>:
 8014008:	4a02      	ldr	r2, [pc, #8]	@ (8014014 <stdio_exit_handler+0xc>)
 801400a:	4903      	ldr	r1, [pc, #12]	@ (8014018 <stdio_exit_handler+0x10>)
 801400c:	4803      	ldr	r0, [pc, #12]	@ (801401c <stdio_exit_handler+0x14>)
 801400e:	f000 b869 	b.w	80140e4 <_fwalk_sglue>
 8014012:	bf00      	nop
 8014014:	20000018 	.word	0x20000018
 8014018:	08014efd 	.word	0x08014efd
 801401c:	20000028 	.word	0x20000028

08014020 <cleanup_stdio>:
 8014020:	6841      	ldr	r1, [r0, #4]
 8014022:	4b0c      	ldr	r3, [pc, #48]	@ (8014054 <cleanup_stdio+0x34>)
 8014024:	4299      	cmp	r1, r3
 8014026:	b510      	push	{r4, lr}
 8014028:	4604      	mov	r4, r0
 801402a:	d001      	beq.n	8014030 <cleanup_stdio+0x10>
 801402c:	f000 ff66 	bl	8014efc <_fflush_r>
 8014030:	68a1      	ldr	r1, [r4, #8]
 8014032:	4b09      	ldr	r3, [pc, #36]	@ (8014058 <cleanup_stdio+0x38>)
 8014034:	4299      	cmp	r1, r3
 8014036:	d002      	beq.n	801403e <cleanup_stdio+0x1e>
 8014038:	4620      	mov	r0, r4
 801403a:	f000 ff5f 	bl	8014efc <_fflush_r>
 801403e:	68e1      	ldr	r1, [r4, #12]
 8014040:	4b06      	ldr	r3, [pc, #24]	@ (801405c <cleanup_stdio+0x3c>)
 8014042:	4299      	cmp	r1, r3
 8014044:	d004      	beq.n	8014050 <cleanup_stdio+0x30>
 8014046:	4620      	mov	r0, r4
 8014048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801404c:	f000 bf56 	b.w	8014efc <_fflush_r>
 8014050:	bd10      	pop	{r4, pc}
 8014052:	bf00      	nop
 8014054:	200044cc 	.word	0x200044cc
 8014058:	20004534 	.word	0x20004534
 801405c:	2000459c 	.word	0x2000459c

08014060 <global_stdio_init.part.0>:
 8014060:	b510      	push	{r4, lr}
 8014062:	4b0b      	ldr	r3, [pc, #44]	@ (8014090 <global_stdio_init.part.0+0x30>)
 8014064:	4c0b      	ldr	r4, [pc, #44]	@ (8014094 <global_stdio_init.part.0+0x34>)
 8014066:	4a0c      	ldr	r2, [pc, #48]	@ (8014098 <global_stdio_init.part.0+0x38>)
 8014068:	601a      	str	r2, [r3, #0]
 801406a:	4620      	mov	r0, r4
 801406c:	2200      	movs	r2, #0
 801406e:	2104      	movs	r1, #4
 8014070:	f7ff ff94 	bl	8013f9c <std>
 8014074:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8014078:	2201      	movs	r2, #1
 801407a:	2109      	movs	r1, #9
 801407c:	f7ff ff8e 	bl	8013f9c <std>
 8014080:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014084:	2202      	movs	r2, #2
 8014086:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801408a:	2112      	movs	r1, #18
 801408c:	f7ff bf86 	b.w	8013f9c <std>
 8014090:	20004604 	.word	0x20004604
 8014094:	200044cc 	.word	0x200044cc
 8014098:	08014009 	.word	0x08014009

0801409c <__sfp_lock_acquire>:
 801409c:	4801      	ldr	r0, [pc, #4]	@ (80140a4 <__sfp_lock_acquire+0x8>)
 801409e:	f000 b952 	b.w	8014346 <__retarget_lock_acquire_recursive>
 80140a2:	bf00      	nop
 80140a4:	2000460d 	.word	0x2000460d

080140a8 <__sfp_lock_release>:
 80140a8:	4801      	ldr	r0, [pc, #4]	@ (80140b0 <__sfp_lock_release+0x8>)
 80140aa:	f000 b94d 	b.w	8014348 <__retarget_lock_release_recursive>
 80140ae:	bf00      	nop
 80140b0:	2000460d 	.word	0x2000460d

080140b4 <__sinit>:
 80140b4:	b510      	push	{r4, lr}
 80140b6:	4604      	mov	r4, r0
 80140b8:	f7ff fff0 	bl	801409c <__sfp_lock_acquire>
 80140bc:	6a23      	ldr	r3, [r4, #32]
 80140be:	b11b      	cbz	r3, 80140c8 <__sinit+0x14>
 80140c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80140c4:	f7ff bff0 	b.w	80140a8 <__sfp_lock_release>
 80140c8:	4b04      	ldr	r3, [pc, #16]	@ (80140dc <__sinit+0x28>)
 80140ca:	6223      	str	r3, [r4, #32]
 80140cc:	4b04      	ldr	r3, [pc, #16]	@ (80140e0 <__sinit+0x2c>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d1f5      	bne.n	80140c0 <__sinit+0xc>
 80140d4:	f7ff ffc4 	bl	8014060 <global_stdio_init.part.0>
 80140d8:	e7f2      	b.n	80140c0 <__sinit+0xc>
 80140da:	bf00      	nop
 80140dc:	08014021 	.word	0x08014021
 80140e0:	20004604 	.word	0x20004604

080140e4 <_fwalk_sglue>:
 80140e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140e8:	4607      	mov	r7, r0
 80140ea:	4688      	mov	r8, r1
 80140ec:	4614      	mov	r4, r2
 80140ee:	2600      	movs	r6, #0
 80140f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80140f4:	f1b9 0901 	subs.w	r9, r9, #1
 80140f8:	d505      	bpl.n	8014106 <_fwalk_sglue+0x22>
 80140fa:	6824      	ldr	r4, [r4, #0]
 80140fc:	2c00      	cmp	r4, #0
 80140fe:	d1f7      	bne.n	80140f0 <_fwalk_sglue+0xc>
 8014100:	4630      	mov	r0, r6
 8014102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014106:	89ab      	ldrh	r3, [r5, #12]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d907      	bls.n	801411c <_fwalk_sglue+0x38>
 801410c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014110:	3301      	adds	r3, #1
 8014112:	d003      	beq.n	801411c <_fwalk_sglue+0x38>
 8014114:	4629      	mov	r1, r5
 8014116:	4638      	mov	r0, r7
 8014118:	47c0      	blx	r8
 801411a:	4306      	orrs	r6, r0
 801411c:	3568      	adds	r5, #104	@ 0x68
 801411e:	e7e9      	b.n	80140f4 <_fwalk_sglue+0x10>

08014120 <iprintf>:
 8014120:	b40f      	push	{r0, r1, r2, r3}
 8014122:	b507      	push	{r0, r1, r2, lr}
 8014124:	4906      	ldr	r1, [pc, #24]	@ (8014140 <iprintf+0x20>)
 8014126:	ab04      	add	r3, sp, #16
 8014128:	6808      	ldr	r0, [r1, #0]
 801412a:	f853 2b04 	ldr.w	r2, [r3], #4
 801412e:	6881      	ldr	r1, [r0, #8]
 8014130:	9301      	str	r3, [sp, #4]
 8014132:	f000 fbb9 	bl	80148a8 <_vfiprintf_r>
 8014136:	b003      	add	sp, #12
 8014138:	f85d eb04 	ldr.w	lr, [sp], #4
 801413c:	b004      	add	sp, #16
 801413e:	4770      	bx	lr
 8014140:	20000024 	.word	0x20000024

08014144 <siprintf>:
 8014144:	b40e      	push	{r1, r2, r3}
 8014146:	b500      	push	{lr}
 8014148:	b09c      	sub	sp, #112	@ 0x70
 801414a:	ab1d      	add	r3, sp, #116	@ 0x74
 801414c:	9002      	str	r0, [sp, #8]
 801414e:	9006      	str	r0, [sp, #24]
 8014150:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014154:	4809      	ldr	r0, [pc, #36]	@ (801417c <siprintf+0x38>)
 8014156:	9107      	str	r1, [sp, #28]
 8014158:	9104      	str	r1, [sp, #16]
 801415a:	4909      	ldr	r1, [pc, #36]	@ (8014180 <siprintf+0x3c>)
 801415c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014160:	9105      	str	r1, [sp, #20]
 8014162:	6800      	ldr	r0, [r0, #0]
 8014164:	9301      	str	r3, [sp, #4]
 8014166:	a902      	add	r1, sp, #8
 8014168:	f000 fa78 	bl	801465c <_svfiprintf_r>
 801416c:	9b02      	ldr	r3, [sp, #8]
 801416e:	2200      	movs	r2, #0
 8014170:	701a      	strb	r2, [r3, #0]
 8014172:	b01c      	add	sp, #112	@ 0x70
 8014174:	f85d eb04 	ldr.w	lr, [sp], #4
 8014178:	b003      	add	sp, #12
 801417a:	4770      	bx	lr
 801417c:	20000024 	.word	0x20000024
 8014180:	ffff0208 	.word	0xffff0208

08014184 <__sread>:
 8014184:	b510      	push	{r4, lr}
 8014186:	460c      	mov	r4, r1
 8014188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801418c:	f000 f892 	bl	80142b4 <_read_r>
 8014190:	2800      	cmp	r0, #0
 8014192:	bfab      	itete	ge
 8014194:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014196:	89a3      	ldrhlt	r3, [r4, #12]
 8014198:	181b      	addge	r3, r3, r0
 801419a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801419e:	bfac      	ite	ge
 80141a0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80141a2:	81a3      	strhlt	r3, [r4, #12]
 80141a4:	bd10      	pop	{r4, pc}

080141a6 <__swrite>:
 80141a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141aa:	461f      	mov	r7, r3
 80141ac:	898b      	ldrh	r3, [r1, #12]
 80141ae:	05db      	lsls	r3, r3, #23
 80141b0:	4605      	mov	r5, r0
 80141b2:	460c      	mov	r4, r1
 80141b4:	4616      	mov	r6, r2
 80141b6:	d505      	bpl.n	80141c4 <__swrite+0x1e>
 80141b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141bc:	2302      	movs	r3, #2
 80141be:	2200      	movs	r2, #0
 80141c0:	f000 f866 	bl	8014290 <_lseek_r>
 80141c4:	89a3      	ldrh	r3, [r4, #12]
 80141c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141ca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80141ce:	81a3      	strh	r3, [r4, #12]
 80141d0:	4632      	mov	r2, r6
 80141d2:	463b      	mov	r3, r7
 80141d4:	4628      	mov	r0, r5
 80141d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80141da:	f000 b87d 	b.w	80142d8 <_write_r>

080141de <__sseek>:
 80141de:	b510      	push	{r4, lr}
 80141e0:	460c      	mov	r4, r1
 80141e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80141e6:	f000 f853 	bl	8014290 <_lseek_r>
 80141ea:	1c43      	adds	r3, r0, #1
 80141ec:	89a3      	ldrh	r3, [r4, #12]
 80141ee:	bf15      	itete	ne
 80141f0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80141f2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80141f6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80141fa:	81a3      	strheq	r3, [r4, #12]
 80141fc:	bf18      	it	ne
 80141fe:	81a3      	strhne	r3, [r4, #12]
 8014200:	bd10      	pop	{r4, pc}

08014202 <__sclose>:
 8014202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014206:	f000 b833 	b.w	8014270 <_close_r>

0801420a <memcmp>:
 801420a:	b510      	push	{r4, lr}
 801420c:	3901      	subs	r1, #1
 801420e:	4402      	add	r2, r0
 8014210:	4290      	cmp	r0, r2
 8014212:	d101      	bne.n	8014218 <memcmp+0xe>
 8014214:	2000      	movs	r0, #0
 8014216:	e005      	b.n	8014224 <memcmp+0x1a>
 8014218:	7803      	ldrb	r3, [r0, #0]
 801421a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801421e:	42a3      	cmp	r3, r4
 8014220:	d001      	beq.n	8014226 <memcmp+0x1c>
 8014222:	1b18      	subs	r0, r3, r4
 8014224:	bd10      	pop	{r4, pc}
 8014226:	3001      	adds	r0, #1
 8014228:	e7f2      	b.n	8014210 <memcmp+0x6>

0801422a <memmove>:
 801422a:	4288      	cmp	r0, r1
 801422c:	b510      	push	{r4, lr}
 801422e:	eb01 0402 	add.w	r4, r1, r2
 8014232:	d902      	bls.n	801423a <memmove+0x10>
 8014234:	4284      	cmp	r4, r0
 8014236:	4623      	mov	r3, r4
 8014238:	d807      	bhi.n	801424a <memmove+0x20>
 801423a:	1e43      	subs	r3, r0, #1
 801423c:	42a1      	cmp	r1, r4
 801423e:	d008      	beq.n	8014252 <memmove+0x28>
 8014240:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014244:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014248:	e7f8      	b.n	801423c <memmove+0x12>
 801424a:	4402      	add	r2, r0
 801424c:	4601      	mov	r1, r0
 801424e:	428a      	cmp	r2, r1
 8014250:	d100      	bne.n	8014254 <memmove+0x2a>
 8014252:	bd10      	pop	{r4, pc}
 8014254:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014258:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801425c:	e7f7      	b.n	801424e <memmove+0x24>

0801425e <memset>:
 801425e:	4402      	add	r2, r0
 8014260:	4603      	mov	r3, r0
 8014262:	4293      	cmp	r3, r2
 8014264:	d100      	bne.n	8014268 <memset+0xa>
 8014266:	4770      	bx	lr
 8014268:	f803 1b01 	strb.w	r1, [r3], #1
 801426c:	e7f9      	b.n	8014262 <memset+0x4>
	...

08014270 <_close_r>:
 8014270:	b538      	push	{r3, r4, r5, lr}
 8014272:	4d06      	ldr	r5, [pc, #24]	@ (801428c <_close_r+0x1c>)
 8014274:	2300      	movs	r3, #0
 8014276:	4604      	mov	r4, r0
 8014278:	4608      	mov	r0, r1
 801427a:	602b      	str	r3, [r5, #0]
 801427c:	f7ed fa10 	bl	80016a0 <_close>
 8014280:	1c43      	adds	r3, r0, #1
 8014282:	d102      	bne.n	801428a <_close_r+0x1a>
 8014284:	682b      	ldr	r3, [r5, #0]
 8014286:	b103      	cbz	r3, 801428a <_close_r+0x1a>
 8014288:	6023      	str	r3, [r4, #0]
 801428a:	bd38      	pop	{r3, r4, r5, pc}
 801428c:	20004608 	.word	0x20004608

08014290 <_lseek_r>:
 8014290:	b538      	push	{r3, r4, r5, lr}
 8014292:	4d07      	ldr	r5, [pc, #28]	@ (80142b0 <_lseek_r+0x20>)
 8014294:	4604      	mov	r4, r0
 8014296:	4608      	mov	r0, r1
 8014298:	4611      	mov	r1, r2
 801429a:	2200      	movs	r2, #0
 801429c:	602a      	str	r2, [r5, #0]
 801429e:	461a      	mov	r2, r3
 80142a0:	f7ed fa25 	bl	80016ee <_lseek>
 80142a4:	1c43      	adds	r3, r0, #1
 80142a6:	d102      	bne.n	80142ae <_lseek_r+0x1e>
 80142a8:	682b      	ldr	r3, [r5, #0]
 80142aa:	b103      	cbz	r3, 80142ae <_lseek_r+0x1e>
 80142ac:	6023      	str	r3, [r4, #0]
 80142ae:	bd38      	pop	{r3, r4, r5, pc}
 80142b0:	20004608 	.word	0x20004608

080142b4 <_read_r>:
 80142b4:	b538      	push	{r3, r4, r5, lr}
 80142b6:	4d07      	ldr	r5, [pc, #28]	@ (80142d4 <_read_r+0x20>)
 80142b8:	4604      	mov	r4, r0
 80142ba:	4608      	mov	r0, r1
 80142bc:	4611      	mov	r1, r2
 80142be:	2200      	movs	r2, #0
 80142c0:	602a      	str	r2, [r5, #0]
 80142c2:	461a      	mov	r2, r3
 80142c4:	f7ed f9b3 	bl	800162e <_read>
 80142c8:	1c43      	adds	r3, r0, #1
 80142ca:	d102      	bne.n	80142d2 <_read_r+0x1e>
 80142cc:	682b      	ldr	r3, [r5, #0]
 80142ce:	b103      	cbz	r3, 80142d2 <_read_r+0x1e>
 80142d0:	6023      	str	r3, [r4, #0]
 80142d2:	bd38      	pop	{r3, r4, r5, pc}
 80142d4:	20004608 	.word	0x20004608

080142d8 <_write_r>:
 80142d8:	b538      	push	{r3, r4, r5, lr}
 80142da:	4d07      	ldr	r5, [pc, #28]	@ (80142f8 <_write_r+0x20>)
 80142dc:	4604      	mov	r4, r0
 80142de:	4608      	mov	r0, r1
 80142e0:	4611      	mov	r1, r2
 80142e2:	2200      	movs	r2, #0
 80142e4:	602a      	str	r2, [r5, #0]
 80142e6:	461a      	mov	r2, r3
 80142e8:	f7ed f9be 	bl	8001668 <_write>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	d102      	bne.n	80142f6 <_write_r+0x1e>
 80142f0:	682b      	ldr	r3, [r5, #0]
 80142f2:	b103      	cbz	r3, 80142f6 <_write_r+0x1e>
 80142f4:	6023      	str	r3, [r4, #0]
 80142f6:	bd38      	pop	{r3, r4, r5, pc}
 80142f8:	20004608 	.word	0x20004608

080142fc <__libc_init_array>:
 80142fc:	b570      	push	{r4, r5, r6, lr}
 80142fe:	4d0d      	ldr	r5, [pc, #52]	@ (8014334 <__libc_init_array+0x38>)
 8014300:	4c0d      	ldr	r4, [pc, #52]	@ (8014338 <__libc_init_array+0x3c>)
 8014302:	1b64      	subs	r4, r4, r5
 8014304:	10a4      	asrs	r4, r4, #2
 8014306:	2600      	movs	r6, #0
 8014308:	42a6      	cmp	r6, r4
 801430a:	d109      	bne.n	8014320 <__libc_init_array+0x24>
 801430c:	4d0b      	ldr	r5, [pc, #44]	@ (801433c <__libc_init_array+0x40>)
 801430e:	4c0c      	ldr	r4, [pc, #48]	@ (8014340 <__libc_init_array+0x44>)
 8014310:	f000 ffd8 	bl	80152c4 <_init>
 8014314:	1b64      	subs	r4, r4, r5
 8014316:	10a4      	asrs	r4, r4, #2
 8014318:	2600      	movs	r6, #0
 801431a:	42a6      	cmp	r6, r4
 801431c:	d105      	bne.n	801432a <__libc_init_array+0x2e>
 801431e:	bd70      	pop	{r4, r5, r6, pc}
 8014320:	f855 3b04 	ldr.w	r3, [r5], #4
 8014324:	4798      	blx	r3
 8014326:	3601      	adds	r6, #1
 8014328:	e7ee      	b.n	8014308 <__libc_init_array+0xc>
 801432a:	f855 3b04 	ldr.w	r3, [r5], #4
 801432e:	4798      	blx	r3
 8014330:	3601      	adds	r6, #1
 8014332:	e7f2      	b.n	801431a <__libc_init_array+0x1e>
 8014334:	08018410 	.word	0x08018410
 8014338:	08018410 	.word	0x08018410
 801433c:	08018410 	.word	0x08018410
 8014340:	08018414 	.word	0x08018414

08014344 <__retarget_lock_init_recursive>:
 8014344:	4770      	bx	lr

08014346 <__retarget_lock_acquire_recursive>:
 8014346:	4770      	bx	lr

08014348 <__retarget_lock_release_recursive>:
 8014348:	4770      	bx	lr

0801434a <memcpy>:
 801434a:	440a      	add	r2, r1
 801434c:	4291      	cmp	r1, r2
 801434e:	f100 33ff 	add.w	r3, r0, #4294967295
 8014352:	d100      	bne.n	8014356 <memcpy+0xc>
 8014354:	4770      	bx	lr
 8014356:	b510      	push	{r4, lr}
 8014358:	f811 4b01 	ldrb.w	r4, [r1], #1
 801435c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014360:	4291      	cmp	r1, r2
 8014362:	d1f9      	bne.n	8014358 <memcpy+0xe>
 8014364:	bd10      	pop	{r4, pc}
	...

08014368 <__assert_func>:
 8014368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801436a:	4614      	mov	r4, r2
 801436c:	461a      	mov	r2, r3
 801436e:	4b09      	ldr	r3, [pc, #36]	@ (8014394 <__assert_func+0x2c>)
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	4605      	mov	r5, r0
 8014374:	68d8      	ldr	r0, [r3, #12]
 8014376:	b954      	cbnz	r4, 801438e <__assert_func+0x26>
 8014378:	4b07      	ldr	r3, [pc, #28]	@ (8014398 <__assert_func+0x30>)
 801437a:	461c      	mov	r4, r3
 801437c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014380:	9100      	str	r1, [sp, #0]
 8014382:	462b      	mov	r3, r5
 8014384:	4905      	ldr	r1, [pc, #20]	@ (801439c <__assert_func+0x34>)
 8014386:	f000 fde1 	bl	8014f4c <fiprintf>
 801438a:	f000 fe95 	bl	80150b8 <abort>
 801438e:	4b04      	ldr	r3, [pc, #16]	@ (80143a0 <__assert_func+0x38>)
 8014390:	e7f4      	b.n	801437c <__assert_func+0x14>
 8014392:	bf00      	nop
 8014394:	20000024 	.word	0x20000024
 8014398:	080183d4 	.word	0x080183d4
 801439c:	080183a6 	.word	0x080183a6
 80143a0:	08018399 	.word	0x08018399

080143a4 <_free_r>:
 80143a4:	b538      	push	{r3, r4, r5, lr}
 80143a6:	4605      	mov	r5, r0
 80143a8:	2900      	cmp	r1, #0
 80143aa:	d041      	beq.n	8014430 <_free_r+0x8c>
 80143ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143b0:	1f0c      	subs	r4, r1, #4
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	bfb8      	it	lt
 80143b6:	18e4      	addlt	r4, r4, r3
 80143b8:	f000 f8e8 	bl	801458c <__malloc_lock>
 80143bc:	4a1d      	ldr	r2, [pc, #116]	@ (8014434 <_free_r+0x90>)
 80143be:	6813      	ldr	r3, [r2, #0]
 80143c0:	b933      	cbnz	r3, 80143d0 <_free_r+0x2c>
 80143c2:	6063      	str	r3, [r4, #4]
 80143c4:	6014      	str	r4, [r2, #0]
 80143c6:	4628      	mov	r0, r5
 80143c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80143cc:	f000 b8e4 	b.w	8014598 <__malloc_unlock>
 80143d0:	42a3      	cmp	r3, r4
 80143d2:	d908      	bls.n	80143e6 <_free_r+0x42>
 80143d4:	6820      	ldr	r0, [r4, #0]
 80143d6:	1821      	adds	r1, r4, r0
 80143d8:	428b      	cmp	r3, r1
 80143da:	bf01      	itttt	eq
 80143dc:	6819      	ldreq	r1, [r3, #0]
 80143de:	685b      	ldreq	r3, [r3, #4]
 80143e0:	1809      	addeq	r1, r1, r0
 80143e2:	6021      	streq	r1, [r4, #0]
 80143e4:	e7ed      	b.n	80143c2 <_free_r+0x1e>
 80143e6:	461a      	mov	r2, r3
 80143e8:	685b      	ldr	r3, [r3, #4]
 80143ea:	b10b      	cbz	r3, 80143f0 <_free_r+0x4c>
 80143ec:	42a3      	cmp	r3, r4
 80143ee:	d9fa      	bls.n	80143e6 <_free_r+0x42>
 80143f0:	6811      	ldr	r1, [r2, #0]
 80143f2:	1850      	adds	r0, r2, r1
 80143f4:	42a0      	cmp	r0, r4
 80143f6:	d10b      	bne.n	8014410 <_free_r+0x6c>
 80143f8:	6820      	ldr	r0, [r4, #0]
 80143fa:	4401      	add	r1, r0
 80143fc:	1850      	adds	r0, r2, r1
 80143fe:	4283      	cmp	r3, r0
 8014400:	6011      	str	r1, [r2, #0]
 8014402:	d1e0      	bne.n	80143c6 <_free_r+0x22>
 8014404:	6818      	ldr	r0, [r3, #0]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	6053      	str	r3, [r2, #4]
 801440a:	4408      	add	r0, r1
 801440c:	6010      	str	r0, [r2, #0]
 801440e:	e7da      	b.n	80143c6 <_free_r+0x22>
 8014410:	d902      	bls.n	8014418 <_free_r+0x74>
 8014412:	230c      	movs	r3, #12
 8014414:	602b      	str	r3, [r5, #0]
 8014416:	e7d6      	b.n	80143c6 <_free_r+0x22>
 8014418:	6820      	ldr	r0, [r4, #0]
 801441a:	1821      	adds	r1, r4, r0
 801441c:	428b      	cmp	r3, r1
 801441e:	bf04      	itt	eq
 8014420:	6819      	ldreq	r1, [r3, #0]
 8014422:	685b      	ldreq	r3, [r3, #4]
 8014424:	6063      	str	r3, [r4, #4]
 8014426:	bf04      	itt	eq
 8014428:	1809      	addeq	r1, r1, r0
 801442a:	6021      	streq	r1, [r4, #0]
 801442c:	6054      	str	r4, [r2, #4]
 801442e:	e7ca      	b.n	80143c6 <_free_r+0x22>
 8014430:	bd38      	pop	{r3, r4, r5, pc}
 8014432:	bf00      	nop
 8014434:	20004614 	.word	0x20004614

08014438 <malloc>:
 8014438:	4b02      	ldr	r3, [pc, #8]	@ (8014444 <malloc+0xc>)
 801443a:	4601      	mov	r1, r0
 801443c:	6818      	ldr	r0, [r3, #0]
 801443e:	f000 b825 	b.w	801448c <_malloc_r>
 8014442:	bf00      	nop
 8014444:	20000024 	.word	0x20000024

08014448 <sbrk_aligned>:
 8014448:	b570      	push	{r4, r5, r6, lr}
 801444a:	4e0f      	ldr	r6, [pc, #60]	@ (8014488 <sbrk_aligned+0x40>)
 801444c:	460c      	mov	r4, r1
 801444e:	6831      	ldr	r1, [r6, #0]
 8014450:	4605      	mov	r5, r0
 8014452:	b911      	cbnz	r1, 801445a <sbrk_aligned+0x12>
 8014454:	f000 fe20 	bl	8015098 <_sbrk_r>
 8014458:	6030      	str	r0, [r6, #0]
 801445a:	4621      	mov	r1, r4
 801445c:	4628      	mov	r0, r5
 801445e:	f000 fe1b 	bl	8015098 <_sbrk_r>
 8014462:	1c43      	adds	r3, r0, #1
 8014464:	d103      	bne.n	801446e <sbrk_aligned+0x26>
 8014466:	f04f 34ff 	mov.w	r4, #4294967295
 801446a:	4620      	mov	r0, r4
 801446c:	bd70      	pop	{r4, r5, r6, pc}
 801446e:	1cc4      	adds	r4, r0, #3
 8014470:	f024 0403 	bic.w	r4, r4, #3
 8014474:	42a0      	cmp	r0, r4
 8014476:	d0f8      	beq.n	801446a <sbrk_aligned+0x22>
 8014478:	1a21      	subs	r1, r4, r0
 801447a:	4628      	mov	r0, r5
 801447c:	f000 fe0c 	bl	8015098 <_sbrk_r>
 8014480:	3001      	adds	r0, #1
 8014482:	d1f2      	bne.n	801446a <sbrk_aligned+0x22>
 8014484:	e7ef      	b.n	8014466 <sbrk_aligned+0x1e>
 8014486:	bf00      	nop
 8014488:	20004610 	.word	0x20004610

0801448c <_malloc_r>:
 801448c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014490:	1ccd      	adds	r5, r1, #3
 8014492:	f025 0503 	bic.w	r5, r5, #3
 8014496:	3508      	adds	r5, #8
 8014498:	2d0c      	cmp	r5, #12
 801449a:	bf38      	it	cc
 801449c:	250c      	movcc	r5, #12
 801449e:	2d00      	cmp	r5, #0
 80144a0:	4606      	mov	r6, r0
 80144a2:	db01      	blt.n	80144a8 <_malloc_r+0x1c>
 80144a4:	42a9      	cmp	r1, r5
 80144a6:	d904      	bls.n	80144b2 <_malloc_r+0x26>
 80144a8:	230c      	movs	r3, #12
 80144aa:	6033      	str	r3, [r6, #0]
 80144ac:	2000      	movs	r0, #0
 80144ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80144b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014588 <_malloc_r+0xfc>
 80144b6:	f000 f869 	bl	801458c <__malloc_lock>
 80144ba:	f8d8 3000 	ldr.w	r3, [r8]
 80144be:	461c      	mov	r4, r3
 80144c0:	bb44      	cbnz	r4, 8014514 <_malloc_r+0x88>
 80144c2:	4629      	mov	r1, r5
 80144c4:	4630      	mov	r0, r6
 80144c6:	f7ff ffbf 	bl	8014448 <sbrk_aligned>
 80144ca:	1c43      	adds	r3, r0, #1
 80144cc:	4604      	mov	r4, r0
 80144ce:	d158      	bne.n	8014582 <_malloc_r+0xf6>
 80144d0:	f8d8 4000 	ldr.w	r4, [r8]
 80144d4:	4627      	mov	r7, r4
 80144d6:	2f00      	cmp	r7, #0
 80144d8:	d143      	bne.n	8014562 <_malloc_r+0xd6>
 80144da:	2c00      	cmp	r4, #0
 80144dc:	d04b      	beq.n	8014576 <_malloc_r+0xea>
 80144de:	6823      	ldr	r3, [r4, #0]
 80144e0:	4639      	mov	r1, r7
 80144e2:	4630      	mov	r0, r6
 80144e4:	eb04 0903 	add.w	r9, r4, r3
 80144e8:	f000 fdd6 	bl	8015098 <_sbrk_r>
 80144ec:	4581      	cmp	r9, r0
 80144ee:	d142      	bne.n	8014576 <_malloc_r+0xea>
 80144f0:	6821      	ldr	r1, [r4, #0]
 80144f2:	1a6d      	subs	r5, r5, r1
 80144f4:	4629      	mov	r1, r5
 80144f6:	4630      	mov	r0, r6
 80144f8:	f7ff ffa6 	bl	8014448 <sbrk_aligned>
 80144fc:	3001      	adds	r0, #1
 80144fe:	d03a      	beq.n	8014576 <_malloc_r+0xea>
 8014500:	6823      	ldr	r3, [r4, #0]
 8014502:	442b      	add	r3, r5
 8014504:	6023      	str	r3, [r4, #0]
 8014506:	f8d8 3000 	ldr.w	r3, [r8]
 801450a:	685a      	ldr	r2, [r3, #4]
 801450c:	bb62      	cbnz	r2, 8014568 <_malloc_r+0xdc>
 801450e:	f8c8 7000 	str.w	r7, [r8]
 8014512:	e00f      	b.n	8014534 <_malloc_r+0xa8>
 8014514:	6822      	ldr	r2, [r4, #0]
 8014516:	1b52      	subs	r2, r2, r5
 8014518:	d420      	bmi.n	801455c <_malloc_r+0xd0>
 801451a:	2a0b      	cmp	r2, #11
 801451c:	d917      	bls.n	801454e <_malloc_r+0xc2>
 801451e:	1961      	adds	r1, r4, r5
 8014520:	42a3      	cmp	r3, r4
 8014522:	6025      	str	r5, [r4, #0]
 8014524:	bf18      	it	ne
 8014526:	6059      	strne	r1, [r3, #4]
 8014528:	6863      	ldr	r3, [r4, #4]
 801452a:	bf08      	it	eq
 801452c:	f8c8 1000 	streq.w	r1, [r8]
 8014530:	5162      	str	r2, [r4, r5]
 8014532:	604b      	str	r3, [r1, #4]
 8014534:	4630      	mov	r0, r6
 8014536:	f000 f82f 	bl	8014598 <__malloc_unlock>
 801453a:	f104 000b 	add.w	r0, r4, #11
 801453e:	1d23      	adds	r3, r4, #4
 8014540:	f020 0007 	bic.w	r0, r0, #7
 8014544:	1ac2      	subs	r2, r0, r3
 8014546:	bf1c      	itt	ne
 8014548:	1a1b      	subne	r3, r3, r0
 801454a:	50a3      	strne	r3, [r4, r2]
 801454c:	e7af      	b.n	80144ae <_malloc_r+0x22>
 801454e:	6862      	ldr	r2, [r4, #4]
 8014550:	42a3      	cmp	r3, r4
 8014552:	bf0c      	ite	eq
 8014554:	f8c8 2000 	streq.w	r2, [r8]
 8014558:	605a      	strne	r2, [r3, #4]
 801455a:	e7eb      	b.n	8014534 <_malloc_r+0xa8>
 801455c:	4623      	mov	r3, r4
 801455e:	6864      	ldr	r4, [r4, #4]
 8014560:	e7ae      	b.n	80144c0 <_malloc_r+0x34>
 8014562:	463c      	mov	r4, r7
 8014564:	687f      	ldr	r7, [r7, #4]
 8014566:	e7b6      	b.n	80144d6 <_malloc_r+0x4a>
 8014568:	461a      	mov	r2, r3
 801456a:	685b      	ldr	r3, [r3, #4]
 801456c:	42a3      	cmp	r3, r4
 801456e:	d1fb      	bne.n	8014568 <_malloc_r+0xdc>
 8014570:	2300      	movs	r3, #0
 8014572:	6053      	str	r3, [r2, #4]
 8014574:	e7de      	b.n	8014534 <_malloc_r+0xa8>
 8014576:	230c      	movs	r3, #12
 8014578:	6033      	str	r3, [r6, #0]
 801457a:	4630      	mov	r0, r6
 801457c:	f000 f80c 	bl	8014598 <__malloc_unlock>
 8014580:	e794      	b.n	80144ac <_malloc_r+0x20>
 8014582:	6005      	str	r5, [r0, #0]
 8014584:	e7d6      	b.n	8014534 <_malloc_r+0xa8>
 8014586:	bf00      	nop
 8014588:	20004614 	.word	0x20004614

0801458c <__malloc_lock>:
 801458c:	4801      	ldr	r0, [pc, #4]	@ (8014594 <__malloc_lock+0x8>)
 801458e:	f7ff beda 	b.w	8014346 <__retarget_lock_acquire_recursive>
 8014592:	bf00      	nop
 8014594:	2000460c 	.word	0x2000460c

08014598 <__malloc_unlock>:
 8014598:	4801      	ldr	r0, [pc, #4]	@ (80145a0 <__malloc_unlock+0x8>)
 801459a:	f7ff bed5 	b.w	8014348 <__retarget_lock_release_recursive>
 801459e:	bf00      	nop
 80145a0:	2000460c 	.word	0x2000460c

080145a4 <__ssputs_r>:
 80145a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80145a8:	688e      	ldr	r6, [r1, #8]
 80145aa:	461f      	mov	r7, r3
 80145ac:	42be      	cmp	r6, r7
 80145ae:	680b      	ldr	r3, [r1, #0]
 80145b0:	4682      	mov	sl, r0
 80145b2:	460c      	mov	r4, r1
 80145b4:	4690      	mov	r8, r2
 80145b6:	d82d      	bhi.n	8014614 <__ssputs_r+0x70>
 80145b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80145bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80145c0:	d026      	beq.n	8014610 <__ssputs_r+0x6c>
 80145c2:	6965      	ldr	r5, [r4, #20]
 80145c4:	6909      	ldr	r1, [r1, #16]
 80145c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145ca:	eba3 0901 	sub.w	r9, r3, r1
 80145ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145d2:	1c7b      	adds	r3, r7, #1
 80145d4:	444b      	add	r3, r9
 80145d6:	106d      	asrs	r5, r5, #1
 80145d8:	429d      	cmp	r5, r3
 80145da:	bf38      	it	cc
 80145dc:	461d      	movcc	r5, r3
 80145de:	0553      	lsls	r3, r2, #21
 80145e0:	d527      	bpl.n	8014632 <__ssputs_r+0x8e>
 80145e2:	4629      	mov	r1, r5
 80145e4:	f7ff ff52 	bl	801448c <_malloc_r>
 80145e8:	4606      	mov	r6, r0
 80145ea:	b360      	cbz	r0, 8014646 <__ssputs_r+0xa2>
 80145ec:	6921      	ldr	r1, [r4, #16]
 80145ee:	464a      	mov	r2, r9
 80145f0:	f7ff feab 	bl	801434a <memcpy>
 80145f4:	89a3      	ldrh	r3, [r4, #12]
 80145f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80145fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145fe:	81a3      	strh	r3, [r4, #12]
 8014600:	6126      	str	r6, [r4, #16]
 8014602:	6165      	str	r5, [r4, #20]
 8014604:	444e      	add	r6, r9
 8014606:	eba5 0509 	sub.w	r5, r5, r9
 801460a:	6026      	str	r6, [r4, #0]
 801460c:	60a5      	str	r5, [r4, #8]
 801460e:	463e      	mov	r6, r7
 8014610:	42be      	cmp	r6, r7
 8014612:	d900      	bls.n	8014616 <__ssputs_r+0x72>
 8014614:	463e      	mov	r6, r7
 8014616:	6820      	ldr	r0, [r4, #0]
 8014618:	4632      	mov	r2, r6
 801461a:	4641      	mov	r1, r8
 801461c:	f7ff fe05 	bl	801422a <memmove>
 8014620:	68a3      	ldr	r3, [r4, #8]
 8014622:	1b9b      	subs	r3, r3, r6
 8014624:	60a3      	str	r3, [r4, #8]
 8014626:	6823      	ldr	r3, [r4, #0]
 8014628:	4433      	add	r3, r6
 801462a:	6023      	str	r3, [r4, #0]
 801462c:	2000      	movs	r0, #0
 801462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014632:	462a      	mov	r2, r5
 8014634:	f000 fd47 	bl	80150c6 <_realloc_r>
 8014638:	4606      	mov	r6, r0
 801463a:	2800      	cmp	r0, #0
 801463c:	d1e0      	bne.n	8014600 <__ssputs_r+0x5c>
 801463e:	6921      	ldr	r1, [r4, #16]
 8014640:	4650      	mov	r0, sl
 8014642:	f7ff feaf 	bl	80143a4 <_free_r>
 8014646:	230c      	movs	r3, #12
 8014648:	f8ca 3000 	str.w	r3, [sl]
 801464c:	89a3      	ldrh	r3, [r4, #12]
 801464e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014652:	81a3      	strh	r3, [r4, #12]
 8014654:	f04f 30ff 	mov.w	r0, #4294967295
 8014658:	e7e9      	b.n	801462e <__ssputs_r+0x8a>
	...

0801465c <_svfiprintf_r>:
 801465c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014660:	4698      	mov	r8, r3
 8014662:	898b      	ldrh	r3, [r1, #12]
 8014664:	061b      	lsls	r3, r3, #24
 8014666:	b09d      	sub	sp, #116	@ 0x74
 8014668:	4607      	mov	r7, r0
 801466a:	460d      	mov	r5, r1
 801466c:	4614      	mov	r4, r2
 801466e:	d510      	bpl.n	8014692 <_svfiprintf_r+0x36>
 8014670:	690b      	ldr	r3, [r1, #16]
 8014672:	b973      	cbnz	r3, 8014692 <_svfiprintf_r+0x36>
 8014674:	2140      	movs	r1, #64	@ 0x40
 8014676:	f7ff ff09 	bl	801448c <_malloc_r>
 801467a:	6028      	str	r0, [r5, #0]
 801467c:	6128      	str	r0, [r5, #16]
 801467e:	b930      	cbnz	r0, 801468e <_svfiprintf_r+0x32>
 8014680:	230c      	movs	r3, #12
 8014682:	603b      	str	r3, [r7, #0]
 8014684:	f04f 30ff 	mov.w	r0, #4294967295
 8014688:	b01d      	add	sp, #116	@ 0x74
 801468a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801468e:	2340      	movs	r3, #64	@ 0x40
 8014690:	616b      	str	r3, [r5, #20]
 8014692:	2300      	movs	r3, #0
 8014694:	9309      	str	r3, [sp, #36]	@ 0x24
 8014696:	2320      	movs	r3, #32
 8014698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801469c:	f8cd 800c 	str.w	r8, [sp, #12]
 80146a0:	2330      	movs	r3, #48	@ 0x30
 80146a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014840 <_svfiprintf_r+0x1e4>
 80146a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80146aa:	f04f 0901 	mov.w	r9, #1
 80146ae:	4623      	mov	r3, r4
 80146b0:	469a      	mov	sl, r3
 80146b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80146b6:	b10a      	cbz	r2, 80146bc <_svfiprintf_r+0x60>
 80146b8:	2a25      	cmp	r2, #37	@ 0x25
 80146ba:	d1f9      	bne.n	80146b0 <_svfiprintf_r+0x54>
 80146bc:	ebba 0b04 	subs.w	fp, sl, r4
 80146c0:	d00b      	beq.n	80146da <_svfiprintf_r+0x7e>
 80146c2:	465b      	mov	r3, fp
 80146c4:	4622      	mov	r2, r4
 80146c6:	4629      	mov	r1, r5
 80146c8:	4638      	mov	r0, r7
 80146ca:	f7ff ff6b 	bl	80145a4 <__ssputs_r>
 80146ce:	3001      	adds	r0, #1
 80146d0:	f000 80a7 	beq.w	8014822 <_svfiprintf_r+0x1c6>
 80146d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80146d6:	445a      	add	r2, fp
 80146d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80146da:	f89a 3000 	ldrb.w	r3, [sl]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	f000 809f 	beq.w	8014822 <_svfiprintf_r+0x1c6>
 80146e4:	2300      	movs	r3, #0
 80146e6:	f04f 32ff 	mov.w	r2, #4294967295
 80146ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146ee:	f10a 0a01 	add.w	sl, sl, #1
 80146f2:	9304      	str	r3, [sp, #16]
 80146f4:	9307      	str	r3, [sp, #28]
 80146f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80146fc:	4654      	mov	r4, sl
 80146fe:	2205      	movs	r2, #5
 8014700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014704:	484e      	ldr	r0, [pc, #312]	@ (8014840 <_svfiprintf_r+0x1e4>)
 8014706:	f7eb fd6b 	bl	80001e0 <memchr>
 801470a:	9a04      	ldr	r2, [sp, #16]
 801470c:	b9d8      	cbnz	r0, 8014746 <_svfiprintf_r+0xea>
 801470e:	06d0      	lsls	r0, r2, #27
 8014710:	bf44      	itt	mi
 8014712:	2320      	movmi	r3, #32
 8014714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014718:	0711      	lsls	r1, r2, #28
 801471a:	bf44      	itt	mi
 801471c:	232b      	movmi	r3, #43	@ 0x2b
 801471e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014722:	f89a 3000 	ldrb.w	r3, [sl]
 8014726:	2b2a      	cmp	r3, #42	@ 0x2a
 8014728:	d015      	beq.n	8014756 <_svfiprintf_r+0xfa>
 801472a:	9a07      	ldr	r2, [sp, #28]
 801472c:	4654      	mov	r4, sl
 801472e:	2000      	movs	r0, #0
 8014730:	f04f 0c0a 	mov.w	ip, #10
 8014734:	4621      	mov	r1, r4
 8014736:	f811 3b01 	ldrb.w	r3, [r1], #1
 801473a:	3b30      	subs	r3, #48	@ 0x30
 801473c:	2b09      	cmp	r3, #9
 801473e:	d94b      	bls.n	80147d8 <_svfiprintf_r+0x17c>
 8014740:	b1b0      	cbz	r0, 8014770 <_svfiprintf_r+0x114>
 8014742:	9207      	str	r2, [sp, #28]
 8014744:	e014      	b.n	8014770 <_svfiprintf_r+0x114>
 8014746:	eba0 0308 	sub.w	r3, r0, r8
 801474a:	fa09 f303 	lsl.w	r3, r9, r3
 801474e:	4313      	orrs	r3, r2
 8014750:	9304      	str	r3, [sp, #16]
 8014752:	46a2      	mov	sl, r4
 8014754:	e7d2      	b.n	80146fc <_svfiprintf_r+0xa0>
 8014756:	9b03      	ldr	r3, [sp, #12]
 8014758:	1d19      	adds	r1, r3, #4
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	9103      	str	r1, [sp, #12]
 801475e:	2b00      	cmp	r3, #0
 8014760:	bfbb      	ittet	lt
 8014762:	425b      	neglt	r3, r3
 8014764:	f042 0202 	orrlt.w	r2, r2, #2
 8014768:	9307      	strge	r3, [sp, #28]
 801476a:	9307      	strlt	r3, [sp, #28]
 801476c:	bfb8      	it	lt
 801476e:	9204      	strlt	r2, [sp, #16]
 8014770:	7823      	ldrb	r3, [r4, #0]
 8014772:	2b2e      	cmp	r3, #46	@ 0x2e
 8014774:	d10a      	bne.n	801478c <_svfiprintf_r+0x130>
 8014776:	7863      	ldrb	r3, [r4, #1]
 8014778:	2b2a      	cmp	r3, #42	@ 0x2a
 801477a:	d132      	bne.n	80147e2 <_svfiprintf_r+0x186>
 801477c:	9b03      	ldr	r3, [sp, #12]
 801477e:	1d1a      	adds	r2, r3, #4
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	9203      	str	r2, [sp, #12]
 8014784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014788:	3402      	adds	r4, #2
 801478a:	9305      	str	r3, [sp, #20]
 801478c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014850 <_svfiprintf_r+0x1f4>
 8014790:	7821      	ldrb	r1, [r4, #0]
 8014792:	2203      	movs	r2, #3
 8014794:	4650      	mov	r0, sl
 8014796:	f7eb fd23 	bl	80001e0 <memchr>
 801479a:	b138      	cbz	r0, 80147ac <_svfiprintf_r+0x150>
 801479c:	9b04      	ldr	r3, [sp, #16]
 801479e:	eba0 000a 	sub.w	r0, r0, sl
 80147a2:	2240      	movs	r2, #64	@ 0x40
 80147a4:	4082      	lsls	r2, r0
 80147a6:	4313      	orrs	r3, r2
 80147a8:	3401      	adds	r4, #1
 80147aa:	9304      	str	r3, [sp, #16]
 80147ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147b0:	4824      	ldr	r0, [pc, #144]	@ (8014844 <_svfiprintf_r+0x1e8>)
 80147b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80147b6:	2206      	movs	r2, #6
 80147b8:	f7eb fd12 	bl	80001e0 <memchr>
 80147bc:	2800      	cmp	r0, #0
 80147be:	d036      	beq.n	801482e <_svfiprintf_r+0x1d2>
 80147c0:	4b21      	ldr	r3, [pc, #132]	@ (8014848 <_svfiprintf_r+0x1ec>)
 80147c2:	bb1b      	cbnz	r3, 801480c <_svfiprintf_r+0x1b0>
 80147c4:	9b03      	ldr	r3, [sp, #12]
 80147c6:	3307      	adds	r3, #7
 80147c8:	f023 0307 	bic.w	r3, r3, #7
 80147cc:	3308      	adds	r3, #8
 80147ce:	9303      	str	r3, [sp, #12]
 80147d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147d2:	4433      	add	r3, r6
 80147d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80147d6:	e76a      	b.n	80146ae <_svfiprintf_r+0x52>
 80147d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80147dc:	460c      	mov	r4, r1
 80147de:	2001      	movs	r0, #1
 80147e0:	e7a8      	b.n	8014734 <_svfiprintf_r+0xd8>
 80147e2:	2300      	movs	r3, #0
 80147e4:	3401      	adds	r4, #1
 80147e6:	9305      	str	r3, [sp, #20]
 80147e8:	4619      	mov	r1, r3
 80147ea:	f04f 0c0a 	mov.w	ip, #10
 80147ee:	4620      	mov	r0, r4
 80147f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147f4:	3a30      	subs	r2, #48	@ 0x30
 80147f6:	2a09      	cmp	r2, #9
 80147f8:	d903      	bls.n	8014802 <_svfiprintf_r+0x1a6>
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d0c6      	beq.n	801478c <_svfiprintf_r+0x130>
 80147fe:	9105      	str	r1, [sp, #20]
 8014800:	e7c4      	b.n	801478c <_svfiprintf_r+0x130>
 8014802:	fb0c 2101 	mla	r1, ip, r1, r2
 8014806:	4604      	mov	r4, r0
 8014808:	2301      	movs	r3, #1
 801480a:	e7f0      	b.n	80147ee <_svfiprintf_r+0x192>
 801480c:	ab03      	add	r3, sp, #12
 801480e:	9300      	str	r3, [sp, #0]
 8014810:	462a      	mov	r2, r5
 8014812:	4b0e      	ldr	r3, [pc, #56]	@ (801484c <_svfiprintf_r+0x1f0>)
 8014814:	a904      	add	r1, sp, #16
 8014816:	4638      	mov	r0, r7
 8014818:	f3af 8000 	nop.w
 801481c:	1c42      	adds	r2, r0, #1
 801481e:	4606      	mov	r6, r0
 8014820:	d1d6      	bne.n	80147d0 <_svfiprintf_r+0x174>
 8014822:	89ab      	ldrh	r3, [r5, #12]
 8014824:	065b      	lsls	r3, r3, #25
 8014826:	f53f af2d 	bmi.w	8014684 <_svfiprintf_r+0x28>
 801482a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801482c:	e72c      	b.n	8014688 <_svfiprintf_r+0x2c>
 801482e:	ab03      	add	r3, sp, #12
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	462a      	mov	r2, r5
 8014834:	4b05      	ldr	r3, [pc, #20]	@ (801484c <_svfiprintf_r+0x1f0>)
 8014836:	a904      	add	r1, sp, #16
 8014838:	4638      	mov	r0, r7
 801483a:	f000 f9bb 	bl	8014bb4 <_printf_i>
 801483e:	e7ed      	b.n	801481c <_svfiprintf_r+0x1c0>
 8014840:	080183d5 	.word	0x080183d5
 8014844:	080183df 	.word	0x080183df
 8014848:	00000000 	.word	0x00000000
 801484c:	080145a5 	.word	0x080145a5
 8014850:	080183db 	.word	0x080183db

08014854 <__sfputc_r>:
 8014854:	6893      	ldr	r3, [r2, #8]
 8014856:	3b01      	subs	r3, #1
 8014858:	2b00      	cmp	r3, #0
 801485a:	b410      	push	{r4}
 801485c:	6093      	str	r3, [r2, #8]
 801485e:	da08      	bge.n	8014872 <__sfputc_r+0x1e>
 8014860:	6994      	ldr	r4, [r2, #24]
 8014862:	42a3      	cmp	r3, r4
 8014864:	db01      	blt.n	801486a <__sfputc_r+0x16>
 8014866:	290a      	cmp	r1, #10
 8014868:	d103      	bne.n	8014872 <__sfputc_r+0x1e>
 801486a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801486e:	f000 bb7f 	b.w	8014f70 <__swbuf_r>
 8014872:	6813      	ldr	r3, [r2, #0]
 8014874:	1c58      	adds	r0, r3, #1
 8014876:	6010      	str	r0, [r2, #0]
 8014878:	7019      	strb	r1, [r3, #0]
 801487a:	4608      	mov	r0, r1
 801487c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014880:	4770      	bx	lr

08014882 <__sfputs_r>:
 8014882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014884:	4606      	mov	r6, r0
 8014886:	460f      	mov	r7, r1
 8014888:	4614      	mov	r4, r2
 801488a:	18d5      	adds	r5, r2, r3
 801488c:	42ac      	cmp	r4, r5
 801488e:	d101      	bne.n	8014894 <__sfputs_r+0x12>
 8014890:	2000      	movs	r0, #0
 8014892:	e007      	b.n	80148a4 <__sfputs_r+0x22>
 8014894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014898:	463a      	mov	r2, r7
 801489a:	4630      	mov	r0, r6
 801489c:	f7ff ffda 	bl	8014854 <__sfputc_r>
 80148a0:	1c43      	adds	r3, r0, #1
 80148a2:	d1f3      	bne.n	801488c <__sfputs_r+0xa>
 80148a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080148a8 <_vfiprintf_r>:
 80148a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148ac:	460d      	mov	r5, r1
 80148ae:	b09d      	sub	sp, #116	@ 0x74
 80148b0:	4614      	mov	r4, r2
 80148b2:	4698      	mov	r8, r3
 80148b4:	4606      	mov	r6, r0
 80148b6:	b118      	cbz	r0, 80148c0 <_vfiprintf_r+0x18>
 80148b8:	6a03      	ldr	r3, [r0, #32]
 80148ba:	b90b      	cbnz	r3, 80148c0 <_vfiprintf_r+0x18>
 80148bc:	f7ff fbfa 	bl	80140b4 <__sinit>
 80148c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148c2:	07d9      	lsls	r1, r3, #31
 80148c4:	d405      	bmi.n	80148d2 <_vfiprintf_r+0x2a>
 80148c6:	89ab      	ldrh	r3, [r5, #12]
 80148c8:	059a      	lsls	r2, r3, #22
 80148ca:	d402      	bmi.n	80148d2 <_vfiprintf_r+0x2a>
 80148cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148ce:	f7ff fd3a 	bl	8014346 <__retarget_lock_acquire_recursive>
 80148d2:	89ab      	ldrh	r3, [r5, #12]
 80148d4:	071b      	lsls	r3, r3, #28
 80148d6:	d501      	bpl.n	80148dc <_vfiprintf_r+0x34>
 80148d8:	692b      	ldr	r3, [r5, #16]
 80148da:	b99b      	cbnz	r3, 8014904 <_vfiprintf_r+0x5c>
 80148dc:	4629      	mov	r1, r5
 80148de:	4630      	mov	r0, r6
 80148e0:	f000 fb84 	bl	8014fec <__swsetup_r>
 80148e4:	b170      	cbz	r0, 8014904 <_vfiprintf_r+0x5c>
 80148e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80148e8:	07dc      	lsls	r4, r3, #31
 80148ea:	d504      	bpl.n	80148f6 <_vfiprintf_r+0x4e>
 80148ec:	f04f 30ff 	mov.w	r0, #4294967295
 80148f0:	b01d      	add	sp, #116	@ 0x74
 80148f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f6:	89ab      	ldrh	r3, [r5, #12]
 80148f8:	0598      	lsls	r0, r3, #22
 80148fa:	d4f7      	bmi.n	80148ec <_vfiprintf_r+0x44>
 80148fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80148fe:	f7ff fd23 	bl	8014348 <__retarget_lock_release_recursive>
 8014902:	e7f3      	b.n	80148ec <_vfiprintf_r+0x44>
 8014904:	2300      	movs	r3, #0
 8014906:	9309      	str	r3, [sp, #36]	@ 0x24
 8014908:	2320      	movs	r3, #32
 801490a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801490e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014912:	2330      	movs	r3, #48	@ 0x30
 8014914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014ac4 <_vfiprintf_r+0x21c>
 8014918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801491c:	f04f 0901 	mov.w	r9, #1
 8014920:	4623      	mov	r3, r4
 8014922:	469a      	mov	sl, r3
 8014924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014928:	b10a      	cbz	r2, 801492e <_vfiprintf_r+0x86>
 801492a:	2a25      	cmp	r2, #37	@ 0x25
 801492c:	d1f9      	bne.n	8014922 <_vfiprintf_r+0x7a>
 801492e:	ebba 0b04 	subs.w	fp, sl, r4
 8014932:	d00b      	beq.n	801494c <_vfiprintf_r+0xa4>
 8014934:	465b      	mov	r3, fp
 8014936:	4622      	mov	r2, r4
 8014938:	4629      	mov	r1, r5
 801493a:	4630      	mov	r0, r6
 801493c:	f7ff ffa1 	bl	8014882 <__sfputs_r>
 8014940:	3001      	adds	r0, #1
 8014942:	f000 80a7 	beq.w	8014a94 <_vfiprintf_r+0x1ec>
 8014946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014948:	445a      	add	r2, fp
 801494a:	9209      	str	r2, [sp, #36]	@ 0x24
 801494c:	f89a 3000 	ldrb.w	r3, [sl]
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 809f 	beq.w	8014a94 <_vfiprintf_r+0x1ec>
 8014956:	2300      	movs	r3, #0
 8014958:	f04f 32ff 	mov.w	r2, #4294967295
 801495c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014960:	f10a 0a01 	add.w	sl, sl, #1
 8014964:	9304      	str	r3, [sp, #16]
 8014966:	9307      	str	r3, [sp, #28]
 8014968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801496c:	931a      	str	r3, [sp, #104]	@ 0x68
 801496e:	4654      	mov	r4, sl
 8014970:	2205      	movs	r2, #5
 8014972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014976:	4853      	ldr	r0, [pc, #332]	@ (8014ac4 <_vfiprintf_r+0x21c>)
 8014978:	f7eb fc32 	bl	80001e0 <memchr>
 801497c:	9a04      	ldr	r2, [sp, #16]
 801497e:	b9d8      	cbnz	r0, 80149b8 <_vfiprintf_r+0x110>
 8014980:	06d1      	lsls	r1, r2, #27
 8014982:	bf44      	itt	mi
 8014984:	2320      	movmi	r3, #32
 8014986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801498a:	0713      	lsls	r3, r2, #28
 801498c:	bf44      	itt	mi
 801498e:	232b      	movmi	r3, #43	@ 0x2b
 8014990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014994:	f89a 3000 	ldrb.w	r3, [sl]
 8014998:	2b2a      	cmp	r3, #42	@ 0x2a
 801499a:	d015      	beq.n	80149c8 <_vfiprintf_r+0x120>
 801499c:	9a07      	ldr	r2, [sp, #28]
 801499e:	4654      	mov	r4, sl
 80149a0:	2000      	movs	r0, #0
 80149a2:	f04f 0c0a 	mov.w	ip, #10
 80149a6:	4621      	mov	r1, r4
 80149a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149ac:	3b30      	subs	r3, #48	@ 0x30
 80149ae:	2b09      	cmp	r3, #9
 80149b0:	d94b      	bls.n	8014a4a <_vfiprintf_r+0x1a2>
 80149b2:	b1b0      	cbz	r0, 80149e2 <_vfiprintf_r+0x13a>
 80149b4:	9207      	str	r2, [sp, #28]
 80149b6:	e014      	b.n	80149e2 <_vfiprintf_r+0x13a>
 80149b8:	eba0 0308 	sub.w	r3, r0, r8
 80149bc:	fa09 f303 	lsl.w	r3, r9, r3
 80149c0:	4313      	orrs	r3, r2
 80149c2:	9304      	str	r3, [sp, #16]
 80149c4:	46a2      	mov	sl, r4
 80149c6:	e7d2      	b.n	801496e <_vfiprintf_r+0xc6>
 80149c8:	9b03      	ldr	r3, [sp, #12]
 80149ca:	1d19      	adds	r1, r3, #4
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	9103      	str	r1, [sp, #12]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	bfbb      	ittet	lt
 80149d4:	425b      	neglt	r3, r3
 80149d6:	f042 0202 	orrlt.w	r2, r2, #2
 80149da:	9307      	strge	r3, [sp, #28]
 80149dc:	9307      	strlt	r3, [sp, #28]
 80149de:	bfb8      	it	lt
 80149e0:	9204      	strlt	r2, [sp, #16]
 80149e2:	7823      	ldrb	r3, [r4, #0]
 80149e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80149e6:	d10a      	bne.n	80149fe <_vfiprintf_r+0x156>
 80149e8:	7863      	ldrb	r3, [r4, #1]
 80149ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80149ec:	d132      	bne.n	8014a54 <_vfiprintf_r+0x1ac>
 80149ee:	9b03      	ldr	r3, [sp, #12]
 80149f0:	1d1a      	adds	r2, r3, #4
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	9203      	str	r2, [sp, #12]
 80149f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80149fa:	3402      	adds	r4, #2
 80149fc:	9305      	str	r3, [sp, #20]
 80149fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014ad4 <_vfiprintf_r+0x22c>
 8014a02:	7821      	ldrb	r1, [r4, #0]
 8014a04:	2203      	movs	r2, #3
 8014a06:	4650      	mov	r0, sl
 8014a08:	f7eb fbea 	bl	80001e0 <memchr>
 8014a0c:	b138      	cbz	r0, 8014a1e <_vfiprintf_r+0x176>
 8014a0e:	9b04      	ldr	r3, [sp, #16]
 8014a10:	eba0 000a 	sub.w	r0, r0, sl
 8014a14:	2240      	movs	r2, #64	@ 0x40
 8014a16:	4082      	lsls	r2, r0
 8014a18:	4313      	orrs	r3, r2
 8014a1a:	3401      	adds	r4, #1
 8014a1c:	9304      	str	r3, [sp, #16]
 8014a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a22:	4829      	ldr	r0, [pc, #164]	@ (8014ac8 <_vfiprintf_r+0x220>)
 8014a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014a28:	2206      	movs	r2, #6
 8014a2a:	f7eb fbd9 	bl	80001e0 <memchr>
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d03f      	beq.n	8014ab2 <_vfiprintf_r+0x20a>
 8014a32:	4b26      	ldr	r3, [pc, #152]	@ (8014acc <_vfiprintf_r+0x224>)
 8014a34:	bb1b      	cbnz	r3, 8014a7e <_vfiprintf_r+0x1d6>
 8014a36:	9b03      	ldr	r3, [sp, #12]
 8014a38:	3307      	adds	r3, #7
 8014a3a:	f023 0307 	bic.w	r3, r3, #7
 8014a3e:	3308      	adds	r3, #8
 8014a40:	9303      	str	r3, [sp, #12]
 8014a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014a44:	443b      	add	r3, r7
 8014a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8014a48:	e76a      	b.n	8014920 <_vfiprintf_r+0x78>
 8014a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a4e:	460c      	mov	r4, r1
 8014a50:	2001      	movs	r0, #1
 8014a52:	e7a8      	b.n	80149a6 <_vfiprintf_r+0xfe>
 8014a54:	2300      	movs	r3, #0
 8014a56:	3401      	adds	r4, #1
 8014a58:	9305      	str	r3, [sp, #20]
 8014a5a:	4619      	mov	r1, r3
 8014a5c:	f04f 0c0a 	mov.w	ip, #10
 8014a60:	4620      	mov	r0, r4
 8014a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a66:	3a30      	subs	r2, #48	@ 0x30
 8014a68:	2a09      	cmp	r2, #9
 8014a6a:	d903      	bls.n	8014a74 <_vfiprintf_r+0x1cc>
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d0c6      	beq.n	80149fe <_vfiprintf_r+0x156>
 8014a70:	9105      	str	r1, [sp, #20]
 8014a72:	e7c4      	b.n	80149fe <_vfiprintf_r+0x156>
 8014a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a78:	4604      	mov	r4, r0
 8014a7a:	2301      	movs	r3, #1
 8014a7c:	e7f0      	b.n	8014a60 <_vfiprintf_r+0x1b8>
 8014a7e:	ab03      	add	r3, sp, #12
 8014a80:	9300      	str	r3, [sp, #0]
 8014a82:	462a      	mov	r2, r5
 8014a84:	4b12      	ldr	r3, [pc, #72]	@ (8014ad0 <_vfiprintf_r+0x228>)
 8014a86:	a904      	add	r1, sp, #16
 8014a88:	4630      	mov	r0, r6
 8014a8a:	f3af 8000 	nop.w
 8014a8e:	4607      	mov	r7, r0
 8014a90:	1c78      	adds	r0, r7, #1
 8014a92:	d1d6      	bne.n	8014a42 <_vfiprintf_r+0x19a>
 8014a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014a96:	07d9      	lsls	r1, r3, #31
 8014a98:	d405      	bmi.n	8014aa6 <_vfiprintf_r+0x1fe>
 8014a9a:	89ab      	ldrh	r3, [r5, #12]
 8014a9c:	059a      	lsls	r2, r3, #22
 8014a9e:	d402      	bmi.n	8014aa6 <_vfiprintf_r+0x1fe>
 8014aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014aa2:	f7ff fc51 	bl	8014348 <__retarget_lock_release_recursive>
 8014aa6:	89ab      	ldrh	r3, [r5, #12]
 8014aa8:	065b      	lsls	r3, r3, #25
 8014aaa:	f53f af1f 	bmi.w	80148ec <_vfiprintf_r+0x44>
 8014aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014ab0:	e71e      	b.n	80148f0 <_vfiprintf_r+0x48>
 8014ab2:	ab03      	add	r3, sp, #12
 8014ab4:	9300      	str	r3, [sp, #0]
 8014ab6:	462a      	mov	r2, r5
 8014ab8:	4b05      	ldr	r3, [pc, #20]	@ (8014ad0 <_vfiprintf_r+0x228>)
 8014aba:	a904      	add	r1, sp, #16
 8014abc:	4630      	mov	r0, r6
 8014abe:	f000 f879 	bl	8014bb4 <_printf_i>
 8014ac2:	e7e4      	b.n	8014a8e <_vfiprintf_r+0x1e6>
 8014ac4:	080183d5 	.word	0x080183d5
 8014ac8:	080183df 	.word	0x080183df
 8014acc:	00000000 	.word	0x00000000
 8014ad0:	08014883 	.word	0x08014883
 8014ad4:	080183db 	.word	0x080183db

08014ad8 <_printf_common>:
 8014ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014adc:	4616      	mov	r6, r2
 8014ade:	4698      	mov	r8, r3
 8014ae0:	688a      	ldr	r2, [r1, #8]
 8014ae2:	690b      	ldr	r3, [r1, #16]
 8014ae4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8014ae8:	4293      	cmp	r3, r2
 8014aea:	bfb8      	it	lt
 8014aec:	4613      	movlt	r3, r2
 8014aee:	6033      	str	r3, [r6, #0]
 8014af0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8014af4:	4607      	mov	r7, r0
 8014af6:	460c      	mov	r4, r1
 8014af8:	b10a      	cbz	r2, 8014afe <_printf_common+0x26>
 8014afa:	3301      	adds	r3, #1
 8014afc:	6033      	str	r3, [r6, #0]
 8014afe:	6823      	ldr	r3, [r4, #0]
 8014b00:	0699      	lsls	r1, r3, #26
 8014b02:	bf42      	ittt	mi
 8014b04:	6833      	ldrmi	r3, [r6, #0]
 8014b06:	3302      	addmi	r3, #2
 8014b08:	6033      	strmi	r3, [r6, #0]
 8014b0a:	6825      	ldr	r5, [r4, #0]
 8014b0c:	f015 0506 	ands.w	r5, r5, #6
 8014b10:	d106      	bne.n	8014b20 <_printf_common+0x48>
 8014b12:	f104 0a19 	add.w	sl, r4, #25
 8014b16:	68e3      	ldr	r3, [r4, #12]
 8014b18:	6832      	ldr	r2, [r6, #0]
 8014b1a:	1a9b      	subs	r3, r3, r2
 8014b1c:	42ab      	cmp	r3, r5
 8014b1e:	dc26      	bgt.n	8014b6e <_printf_common+0x96>
 8014b20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8014b24:	6822      	ldr	r2, [r4, #0]
 8014b26:	3b00      	subs	r3, #0
 8014b28:	bf18      	it	ne
 8014b2a:	2301      	movne	r3, #1
 8014b2c:	0692      	lsls	r2, r2, #26
 8014b2e:	d42b      	bmi.n	8014b88 <_printf_common+0xb0>
 8014b30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8014b34:	4641      	mov	r1, r8
 8014b36:	4638      	mov	r0, r7
 8014b38:	47c8      	blx	r9
 8014b3a:	3001      	adds	r0, #1
 8014b3c:	d01e      	beq.n	8014b7c <_printf_common+0xa4>
 8014b3e:	6823      	ldr	r3, [r4, #0]
 8014b40:	6922      	ldr	r2, [r4, #16]
 8014b42:	f003 0306 	and.w	r3, r3, #6
 8014b46:	2b04      	cmp	r3, #4
 8014b48:	bf02      	ittt	eq
 8014b4a:	68e5      	ldreq	r5, [r4, #12]
 8014b4c:	6833      	ldreq	r3, [r6, #0]
 8014b4e:	1aed      	subeq	r5, r5, r3
 8014b50:	68a3      	ldr	r3, [r4, #8]
 8014b52:	bf0c      	ite	eq
 8014b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014b58:	2500      	movne	r5, #0
 8014b5a:	4293      	cmp	r3, r2
 8014b5c:	bfc4      	itt	gt
 8014b5e:	1a9b      	subgt	r3, r3, r2
 8014b60:	18ed      	addgt	r5, r5, r3
 8014b62:	2600      	movs	r6, #0
 8014b64:	341a      	adds	r4, #26
 8014b66:	42b5      	cmp	r5, r6
 8014b68:	d11a      	bne.n	8014ba0 <_printf_common+0xc8>
 8014b6a:	2000      	movs	r0, #0
 8014b6c:	e008      	b.n	8014b80 <_printf_common+0xa8>
 8014b6e:	2301      	movs	r3, #1
 8014b70:	4652      	mov	r2, sl
 8014b72:	4641      	mov	r1, r8
 8014b74:	4638      	mov	r0, r7
 8014b76:	47c8      	blx	r9
 8014b78:	3001      	adds	r0, #1
 8014b7a:	d103      	bne.n	8014b84 <_printf_common+0xac>
 8014b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b84:	3501      	adds	r5, #1
 8014b86:	e7c6      	b.n	8014b16 <_printf_common+0x3e>
 8014b88:	18e1      	adds	r1, r4, r3
 8014b8a:	1c5a      	adds	r2, r3, #1
 8014b8c:	2030      	movs	r0, #48	@ 0x30
 8014b8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8014b92:	4422      	add	r2, r4
 8014b94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014b98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014b9c:	3302      	adds	r3, #2
 8014b9e:	e7c7      	b.n	8014b30 <_printf_common+0x58>
 8014ba0:	2301      	movs	r3, #1
 8014ba2:	4622      	mov	r2, r4
 8014ba4:	4641      	mov	r1, r8
 8014ba6:	4638      	mov	r0, r7
 8014ba8:	47c8      	blx	r9
 8014baa:	3001      	adds	r0, #1
 8014bac:	d0e6      	beq.n	8014b7c <_printf_common+0xa4>
 8014bae:	3601      	adds	r6, #1
 8014bb0:	e7d9      	b.n	8014b66 <_printf_common+0x8e>
	...

08014bb4 <_printf_i>:
 8014bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014bb8:	7e0f      	ldrb	r7, [r1, #24]
 8014bba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014bbc:	2f78      	cmp	r7, #120	@ 0x78
 8014bbe:	4691      	mov	r9, r2
 8014bc0:	4680      	mov	r8, r0
 8014bc2:	460c      	mov	r4, r1
 8014bc4:	469a      	mov	sl, r3
 8014bc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8014bca:	d807      	bhi.n	8014bdc <_printf_i+0x28>
 8014bcc:	2f62      	cmp	r7, #98	@ 0x62
 8014bce:	d80a      	bhi.n	8014be6 <_printf_i+0x32>
 8014bd0:	2f00      	cmp	r7, #0
 8014bd2:	f000 80d2 	beq.w	8014d7a <_printf_i+0x1c6>
 8014bd6:	2f58      	cmp	r7, #88	@ 0x58
 8014bd8:	f000 80b9 	beq.w	8014d4e <_printf_i+0x19a>
 8014bdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014be0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8014be4:	e03a      	b.n	8014c5c <_printf_i+0xa8>
 8014be6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8014bea:	2b15      	cmp	r3, #21
 8014bec:	d8f6      	bhi.n	8014bdc <_printf_i+0x28>
 8014bee:	a101      	add	r1, pc, #4	@ (adr r1, 8014bf4 <_printf_i+0x40>)
 8014bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014bf4:	08014c4d 	.word	0x08014c4d
 8014bf8:	08014c61 	.word	0x08014c61
 8014bfc:	08014bdd 	.word	0x08014bdd
 8014c00:	08014bdd 	.word	0x08014bdd
 8014c04:	08014bdd 	.word	0x08014bdd
 8014c08:	08014bdd 	.word	0x08014bdd
 8014c0c:	08014c61 	.word	0x08014c61
 8014c10:	08014bdd 	.word	0x08014bdd
 8014c14:	08014bdd 	.word	0x08014bdd
 8014c18:	08014bdd 	.word	0x08014bdd
 8014c1c:	08014bdd 	.word	0x08014bdd
 8014c20:	08014d61 	.word	0x08014d61
 8014c24:	08014c8b 	.word	0x08014c8b
 8014c28:	08014d1b 	.word	0x08014d1b
 8014c2c:	08014bdd 	.word	0x08014bdd
 8014c30:	08014bdd 	.word	0x08014bdd
 8014c34:	08014d83 	.word	0x08014d83
 8014c38:	08014bdd 	.word	0x08014bdd
 8014c3c:	08014c8b 	.word	0x08014c8b
 8014c40:	08014bdd 	.word	0x08014bdd
 8014c44:	08014bdd 	.word	0x08014bdd
 8014c48:	08014d23 	.word	0x08014d23
 8014c4c:	6833      	ldr	r3, [r6, #0]
 8014c4e:	1d1a      	adds	r2, r3, #4
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	6032      	str	r2, [r6, #0]
 8014c54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014c58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014c5c:	2301      	movs	r3, #1
 8014c5e:	e09d      	b.n	8014d9c <_printf_i+0x1e8>
 8014c60:	6833      	ldr	r3, [r6, #0]
 8014c62:	6820      	ldr	r0, [r4, #0]
 8014c64:	1d19      	adds	r1, r3, #4
 8014c66:	6031      	str	r1, [r6, #0]
 8014c68:	0606      	lsls	r6, r0, #24
 8014c6a:	d501      	bpl.n	8014c70 <_printf_i+0xbc>
 8014c6c:	681d      	ldr	r5, [r3, #0]
 8014c6e:	e003      	b.n	8014c78 <_printf_i+0xc4>
 8014c70:	0645      	lsls	r5, r0, #25
 8014c72:	d5fb      	bpl.n	8014c6c <_printf_i+0xb8>
 8014c74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014c78:	2d00      	cmp	r5, #0
 8014c7a:	da03      	bge.n	8014c84 <_printf_i+0xd0>
 8014c7c:	232d      	movs	r3, #45	@ 0x2d
 8014c7e:	426d      	negs	r5, r5
 8014c80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014c84:	4859      	ldr	r0, [pc, #356]	@ (8014dec <_printf_i+0x238>)
 8014c86:	230a      	movs	r3, #10
 8014c88:	e011      	b.n	8014cae <_printf_i+0xfa>
 8014c8a:	6821      	ldr	r1, [r4, #0]
 8014c8c:	6833      	ldr	r3, [r6, #0]
 8014c8e:	0608      	lsls	r0, r1, #24
 8014c90:	f853 5b04 	ldr.w	r5, [r3], #4
 8014c94:	d402      	bmi.n	8014c9c <_printf_i+0xe8>
 8014c96:	0649      	lsls	r1, r1, #25
 8014c98:	bf48      	it	mi
 8014c9a:	b2ad      	uxthmi	r5, r5
 8014c9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8014c9e:	4853      	ldr	r0, [pc, #332]	@ (8014dec <_printf_i+0x238>)
 8014ca0:	6033      	str	r3, [r6, #0]
 8014ca2:	bf14      	ite	ne
 8014ca4:	230a      	movne	r3, #10
 8014ca6:	2308      	moveq	r3, #8
 8014ca8:	2100      	movs	r1, #0
 8014caa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014cae:	6866      	ldr	r6, [r4, #4]
 8014cb0:	60a6      	str	r6, [r4, #8]
 8014cb2:	2e00      	cmp	r6, #0
 8014cb4:	bfa2      	ittt	ge
 8014cb6:	6821      	ldrge	r1, [r4, #0]
 8014cb8:	f021 0104 	bicge.w	r1, r1, #4
 8014cbc:	6021      	strge	r1, [r4, #0]
 8014cbe:	b90d      	cbnz	r5, 8014cc4 <_printf_i+0x110>
 8014cc0:	2e00      	cmp	r6, #0
 8014cc2:	d04b      	beq.n	8014d5c <_printf_i+0x1a8>
 8014cc4:	4616      	mov	r6, r2
 8014cc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8014cca:	fb03 5711 	mls	r7, r3, r1, r5
 8014cce:	5dc7      	ldrb	r7, [r0, r7]
 8014cd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014cd4:	462f      	mov	r7, r5
 8014cd6:	42bb      	cmp	r3, r7
 8014cd8:	460d      	mov	r5, r1
 8014cda:	d9f4      	bls.n	8014cc6 <_printf_i+0x112>
 8014cdc:	2b08      	cmp	r3, #8
 8014cde:	d10b      	bne.n	8014cf8 <_printf_i+0x144>
 8014ce0:	6823      	ldr	r3, [r4, #0]
 8014ce2:	07df      	lsls	r7, r3, #31
 8014ce4:	d508      	bpl.n	8014cf8 <_printf_i+0x144>
 8014ce6:	6923      	ldr	r3, [r4, #16]
 8014ce8:	6861      	ldr	r1, [r4, #4]
 8014cea:	4299      	cmp	r1, r3
 8014cec:	bfde      	ittt	le
 8014cee:	2330      	movle	r3, #48	@ 0x30
 8014cf0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014cf4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014cf8:	1b92      	subs	r2, r2, r6
 8014cfa:	6122      	str	r2, [r4, #16]
 8014cfc:	f8cd a000 	str.w	sl, [sp]
 8014d00:	464b      	mov	r3, r9
 8014d02:	aa03      	add	r2, sp, #12
 8014d04:	4621      	mov	r1, r4
 8014d06:	4640      	mov	r0, r8
 8014d08:	f7ff fee6 	bl	8014ad8 <_printf_common>
 8014d0c:	3001      	adds	r0, #1
 8014d0e:	d14a      	bne.n	8014da6 <_printf_i+0x1f2>
 8014d10:	f04f 30ff 	mov.w	r0, #4294967295
 8014d14:	b004      	add	sp, #16
 8014d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d1a:	6823      	ldr	r3, [r4, #0]
 8014d1c:	f043 0320 	orr.w	r3, r3, #32
 8014d20:	6023      	str	r3, [r4, #0]
 8014d22:	4833      	ldr	r0, [pc, #204]	@ (8014df0 <_printf_i+0x23c>)
 8014d24:	2778      	movs	r7, #120	@ 0x78
 8014d26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014d2a:	6823      	ldr	r3, [r4, #0]
 8014d2c:	6831      	ldr	r1, [r6, #0]
 8014d2e:	061f      	lsls	r7, r3, #24
 8014d30:	f851 5b04 	ldr.w	r5, [r1], #4
 8014d34:	d402      	bmi.n	8014d3c <_printf_i+0x188>
 8014d36:	065f      	lsls	r7, r3, #25
 8014d38:	bf48      	it	mi
 8014d3a:	b2ad      	uxthmi	r5, r5
 8014d3c:	6031      	str	r1, [r6, #0]
 8014d3e:	07d9      	lsls	r1, r3, #31
 8014d40:	bf44      	itt	mi
 8014d42:	f043 0320 	orrmi.w	r3, r3, #32
 8014d46:	6023      	strmi	r3, [r4, #0]
 8014d48:	b11d      	cbz	r5, 8014d52 <_printf_i+0x19e>
 8014d4a:	2310      	movs	r3, #16
 8014d4c:	e7ac      	b.n	8014ca8 <_printf_i+0xf4>
 8014d4e:	4827      	ldr	r0, [pc, #156]	@ (8014dec <_printf_i+0x238>)
 8014d50:	e7e9      	b.n	8014d26 <_printf_i+0x172>
 8014d52:	6823      	ldr	r3, [r4, #0]
 8014d54:	f023 0320 	bic.w	r3, r3, #32
 8014d58:	6023      	str	r3, [r4, #0]
 8014d5a:	e7f6      	b.n	8014d4a <_printf_i+0x196>
 8014d5c:	4616      	mov	r6, r2
 8014d5e:	e7bd      	b.n	8014cdc <_printf_i+0x128>
 8014d60:	6833      	ldr	r3, [r6, #0]
 8014d62:	6825      	ldr	r5, [r4, #0]
 8014d64:	6961      	ldr	r1, [r4, #20]
 8014d66:	1d18      	adds	r0, r3, #4
 8014d68:	6030      	str	r0, [r6, #0]
 8014d6a:	062e      	lsls	r6, r5, #24
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	d501      	bpl.n	8014d74 <_printf_i+0x1c0>
 8014d70:	6019      	str	r1, [r3, #0]
 8014d72:	e002      	b.n	8014d7a <_printf_i+0x1c6>
 8014d74:	0668      	lsls	r0, r5, #25
 8014d76:	d5fb      	bpl.n	8014d70 <_printf_i+0x1bc>
 8014d78:	8019      	strh	r1, [r3, #0]
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	6123      	str	r3, [r4, #16]
 8014d7e:	4616      	mov	r6, r2
 8014d80:	e7bc      	b.n	8014cfc <_printf_i+0x148>
 8014d82:	6833      	ldr	r3, [r6, #0]
 8014d84:	1d1a      	adds	r2, r3, #4
 8014d86:	6032      	str	r2, [r6, #0]
 8014d88:	681e      	ldr	r6, [r3, #0]
 8014d8a:	6862      	ldr	r2, [r4, #4]
 8014d8c:	2100      	movs	r1, #0
 8014d8e:	4630      	mov	r0, r6
 8014d90:	f7eb fa26 	bl	80001e0 <memchr>
 8014d94:	b108      	cbz	r0, 8014d9a <_printf_i+0x1e6>
 8014d96:	1b80      	subs	r0, r0, r6
 8014d98:	6060      	str	r0, [r4, #4]
 8014d9a:	6863      	ldr	r3, [r4, #4]
 8014d9c:	6123      	str	r3, [r4, #16]
 8014d9e:	2300      	movs	r3, #0
 8014da0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8014da4:	e7aa      	b.n	8014cfc <_printf_i+0x148>
 8014da6:	6923      	ldr	r3, [r4, #16]
 8014da8:	4632      	mov	r2, r6
 8014daa:	4649      	mov	r1, r9
 8014dac:	4640      	mov	r0, r8
 8014dae:	47d0      	blx	sl
 8014db0:	3001      	adds	r0, #1
 8014db2:	d0ad      	beq.n	8014d10 <_printf_i+0x15c>
 8014db4:	6823      	ldr	r3, [r4, #0]
 8014db6:	079b      	lsls	r3, r3, #30
 8014db8:	d413      	bmi.n	8014de2 <_printf_i+0x22e>
 8014dba:	68e0      	ldr	r0, [r4, #12]
 8014dbc:	9b03      	ldr	r3, [sp, #12]
 8014dbe:	4298      	cmp	r0, r3
 8014dc0:	bfb8      	it	lt
 8014dc2:	4618      	movlt	r0, r3
 8014dc4:	e7a6      	b.n	8014d14 <_printf_i+0x160>
 8014dc6:	2301      	movs	r3, #1
 8014dc8:	4632      	mov	r2, r6
 8014dca:	4649      	mov	r1, r9
 8014dcc:	4640      	mov	r0, r8
 8014dce:	47d0      	blx	sl
 8014dd0:	3001      	adds	r0, #1
 8014dd2:	d09d      	beq.n	8014d10 <_printf_i+0x15c>
 8014dd4:	3501      	adds	r5, #1
 8014dd6:	68e3      	ldr	r3, [r4, #12]
 8014dd8:	9903      	ldr	r1, [sp, #12]
 8014dda:	1a5b      	subs	r3, r3, r1
 8014ddc:	42ab      	cmp	r3, r5
 8014dde:	dcf2      	bgt.n	8014dc6 <_printf_i+0x212>
 8014de0:	e7eb      	b.n	8014dba <_printf_i+0x206>
 8014de2:	2500      	movs	r5, #0
 8014de4:	f104 0619 	add.w	r6, r4, #25
 8014de8:	e7f5      	b.n	8014dd6 <_printf_i+0x222>
 8014dea:	bf00      	nop
 8014dec:	080183e6 	.word	0x080183e6
 8014df0:	080183f7 	.word	0x080183f7

08014df4 <__sflush_r>:
 8014df4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dfc:	0716      	lsls	r6, r2, #28
 8014dfe:	4605      	mov	r5, r0
 8014e00:	460c      	mov	r4, r1
 8014e02:	d454      	bmi.n	8014eae <__sflush_r+0xba>
 8014e04:	684b      	ldr	r3, [r1, #4]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	dc02      	bgt.n	8014e10 <__sflush_r+0x1c>
 8014e0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	dd48      	ble.n	8014ea2 <__sflush_r+0xae>
 8014e10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e12:	2e00      	cmp	r6, #0
 8014e14:	d045      	beq.n	8014ea2 <__sflush_r+0xae>
 8014e16:	2300      	movs	r3, #0
 8014e18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014e1c:	682f      	ldr	r7, [r5, #0]
 8014e1e:	6a21      	ldr	r1, [r4, #32]
 8014e20:	602b      	str	r3, [r5, #0]
 8014e22:	d030      	beq.n	8014e86 <__sflush_r+0x92>
 8014e24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014e26:	89a3      	ldrh	r3, [r4, #12]
 8014e28:	0759      	lsls	r1, r3, #29
 8014e2a:	d505      	bpl.n	8014e38 <__sflush_r+0x44>
 8014e2c:	6863      	ldr	r3, [r4, #4]
 8014e2e:	1ad2      	subs	r2, r2, r3
 8014e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014e32:	b10b      	cbz	r3, 8014e38 <__sflush_r+0x44>
 8014e34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014e36:	1ad2      	subs	r2, r2, r3
 8014e38:	2300      	movs	r3, #0
 8014e3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e3c:	6a21      	ldr	r1, [r4, #32]
 8014e3e:	4628      	mov	r0, r5
 8014e40:	47b0      	blx	r6
 8014e42:	1c43      	adds	r3, r0, #1
 8014e44:	89a3      	ldrh	r3, [r4, #12]
 8014e46:	d106      	bne.n	8014e56 <__sflush_r+0x62>
 8014e48:	6829      	ldr	r1, [r5, #0]
 8014e4a:	291d      	cmp	r1, #29
 8014e4c:	d82b      	bhi.n	8014ea6 <__sflush_r+0xb2>
 8014e4e:	4a2a      	ldr	r2, [pc, #168]	@ (8014ef8 <__sflush_r+0x104>)
 8014e50:	410a      	asrs	r2, r1
 8014e52:	07d6      	lsls	r6, r2, #31
 8014e54:	d427      	bmi.n	8014ea6 <__sflush_r+0xb2>
 8014e56:	2200      	movs	r2, #0
 8014e58:	6062      	str	r2, [r4, #4]
 8014e5a:	04d9      	lsls	r1, r3, #19
 8014e5c:	6922      	ldr	r2, [r4, #16]
 8014e5e:	6022      	str	r2, [r4, #0]
 8014e60:	d504      	bpl.n	8014e6c <__sflush_r+0x78>
 8014e62:	1c42      	adds	r2, r0, #1
 8014e64:	d101      	bne.n	8014e6a <__sflush_r+0x76>
 8014e66:	682b      	ldr	r3, [r5, #0]
 8014e68:	b903      	cbnz	r3, 8014e6c <__sflush_r+0x78>
 8014e6a:	6560      	str	r0, [r4, #84]	@ 0x54
 8014e6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e6e:	602f      	str	r7, [r5, #0]
 8014e70:	b1b9      	cbz	r1, 8014ea2 <__sflush_r+0xae>
 8014e72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e76:	4299      	cmp	r1, r3
 8014e78:	d002      	beq.n	8014e80 <__sflush_r+0x8c>
 8014e7a:	4628      	mov	r0, r5
 8014e7c:	f7ff fa92 	bl	80143a4 <_free_r>
 8014e80:	2300      	movs	r3, #0
 8014e82:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e84:	e00d      	b.n	8014ea2 <__sflush_r+0xae>
 8014e86:	2301      	movs	r3, #1
 8014e88:	4628      	mov	r0, r5
 8014e8a:	47b0      	blx	r6
 8014e8c:	4602      	mov	r2, r0
 8014e8e:	1c50      	adds	r0, r2, #1
 8014e90:	d1c9      	bne.n	8014e26 <__sflush_r+0x32>
 8014e92:	682b      	ldr	r3, [r5, #0]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d0c6      	beq.n	8014e26 <__sflush_r+0x32>
 8014e98:	2b1d      	cmp	r3, #29
 8014e9a:	d001      	beq.n	8014ea0 <__sflush_r+0xac>
 8014e9c:	2b16      	cmp	r3, #22
 8014e9e:	d11e      	bne.n	8014ede <__sflush_r+0xea>
 8014ea0:	602f      	str	r7, [r5, #0]
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	e022      	b.n	8014eec <__sflush_r+0xf8>
 8014ea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014eaa:	b21b      	sxth	r3, r3
 8014eac:	e01b      	b.n	8014ee6 <__sflush_r+0xf2>
 8014eae:	690f      	ldr	r7, [r1, #16]
 8014eb0:	2f00      	cmp	r7, #0
 8014eb2:	d0f6      	beq.n	8014ea2 <__sflush_r+0xae>
 8014eb4:	0793      	lsls	r3, r2, #30
 8014eb6:	680e      	ldr	r6, [r1, #0]
 8014eb8:	bf08      	it	eq
 8014eba:	694b      	ldreq	r3, [r1, #20]
 8014ebc:	600f      	str	r7, [r1, #0]
 8014ebe:	bf18      	it	ne
 8014ec0:	2300      	movne	r3, #0
 8014ec2:	eba6 0807 	sub.w	r8, r6, r7
 8014ec6:	608b      	str	r3, [r1, #8]
 8014ec8:	f1b8 0f00 	cmp.w	r8, #0
 8014ecc:	dde9      	ble.n	8014ea2 <__sflush_r+0xae>
 8014ece:	6a21      	ldr	r1, [r4, #32]
 8014ed0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014ed2:	4643      	mov	r3, r8
 8014ed4:	463a      	mov	r2, r7
 8014ed6:	4628      	mov	r0, r5
 8014ed8:	47b0      	blx	r6
 8014eda:	2800      	cmp	r0, #0
 8014edc:	dc08      	bgt.n	8014ef0 <__sflush_r+0xfc>
 8014ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014ee6:	81a3      	strh	r3, [r4, #12]
 8014ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8014eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ef0:	4407      	add	r7, r0
 8014ef2:	eba8 0800 	sub.w	r8, r8, r0
 8014ef6:	e7e7      	b.n	8014ec8 <__sflush_r+0xd4>
 8014ef8:	dfbffffe 	.word	0xdfbffffe

08014efc <_fflush_r>:
 8014efc:	b538      	push	{r3, r4, r5, lr}
 8014efe:	690b      	ldr	r3, [r1, #16]
 8014f00:	4605      	mov	r5, r0
 8014f02:	460c      	mov	r4, r1
 8014f04:	b913      	cbnz	r3, 8014f0c <_fflush_r+0x10>
 8014f06:	2500      	movs	r5, #0
 8014f08:	4628      	mov	r0, r5
 8014f0a:	bd38      	pop	{r3, r4, r5, pc}
 8014f0c:	b118      	cbz	r0, 8014f16 <_fflush_r+0x1a>
 8014f0e:	6a03      	ldr	r3, [r0, #32]
 8014f10:	b90b      	cbnz	r3, 8014f16 <_fflush_r+0x1a>
 8014f12:	f7ff f8cf 	bl	80140b4 <__sinit>
 8014f16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d0f3      	beq.n	8014f06 <_fflush_r+0xa>
 8014f1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014f20:	07d0      	lsls	r0, r2, #31
 8014f22:	d404      	bmi.n	8014f2e <_fflush_r+0x32>
 8014f24:	0599      	lsls	r1, r3, #22
 8014f26:	d402      	bmi.n	8014f2e <_fflush_r+0x32>
 8014f28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f2a:	f7ff fa0c 	bl	8014346 <__retarget_lock_acquire_recursive>
 8014f2e:	4628      	mov	r0, r5
 8014f30:	4621      	mov	r1, r4
 8014f32:	f7ff ff5f 	bl	8014df4 <__sflush_r>
 8014f36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014f38:	07da      	lsls	r2, r3, #31
 8014f3a:	4605      	mov	r5, r0
 8014f3c:	d4e4      	bmi.n	8014f08 <_fflush_r+0xc>
 8014f3e:	89a3      	ldrh	r3, [r4, #12]
 8014f40:	059b      	lsls	r3, r3, #22
 8014f42:	d4e1      	bmi.n	8014f08 <_fflush_r+0xc>
 8014f44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f46:	f7ff f9ff 	bl	8014348 <__retarget_lock_release_recursive>
 8014f4a:	e7dd      	b.n	8014f08 <_fflush_r+0xc>

08014f4c <fiprintf>:
 8014f4c:	b40e      	push	{r1, r2, r3}
 8014f4e:	b503      	push	{r0, r1, lr}
 8014f50:	4601      	mov	r1, r0
 8014f52:	ab03      	add	r3, sp, #12
 8014f54:	4805      	ldr	r0, [pc, #20]	@ (8014f6c <fiprintf+0x20>)
 8014f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8014f5a:	6800      	ldr	r0, [r0, #0]
 8014f5c:	9301      	str	r3, [sp, #4]
 8014f5e:	f7ff fca3 	bl	80148a8 <_vfiprintf_r>
 8014f62:	b002      	add	sp, #8
 8014f64:	f85d eb04 	ldr.w	lr, [sp], #4
 8014f68:	b003      	add	sp, #12
 8014f6a:	4770      	bx	lr
 8014f6c:	20000024 	.word	0x20000024

08014f70 <__swbuf_r>:
 8014f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f72:	460e      	mov	r6, r1
 8014f74:	4614      	mov	r4, r2
 8014f76:	4605      	mov	r5, r0
 8014f78:	b118      	cbz	r0, 8014f82 <__swbuf_r+0x12>
 8014f7a:	6a03      	ldr	r3, [r0, #32]
 8014f7c:	b90b      	cbnz	r3, 8014f82 <__swbuf_r+0x12>
 8014f7e:	f7ff f899 	bl	80140b4 <__sinit>
 8014f82:	69a3      	ldr	r3, [r4, #24]
 8014f84:	60a3      	str	r3, [r4, #8]
 8014f86:	89a3      	ldrh	r3, [r4, #12]
 8014f88:	071a      	lsls	r2, r3, #28
 8014f8a:	d501      	bpl.n	8014f90 <__swbuf_r+0x20>
 8014f8c:	6923      	ldr	r3, [r4, #16]
 8014f8e:	b943      	cbnz	r3, 8014fa2 <__swbuf_r+0x32>
 8014f90:	4621      	mov	r1, r4
 8014f92:	4628      	mov	r0, r5
 8014f94:	f000 f82a 	bl	8014fec <__swsetup_r>
 8014f98:	b118      	cbz	r0, 8014fa2 <__swbuf_r+0x32>
 8014f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8014f9e:	4638      	mov	r0, r7
 8014fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fa2:	6823      	ldr	r3, [r4, #0]
 8014fa4:	6922      	ldr	r2, [r4, #16]
 8014fa6:	1a98      	subs	r0, r3, r2
 8014fa8:	6963      	ldr	r3, [r4, #20]
 8014faa:	b2f6      	uxtb	r6, r6
 8014fac:	4283      	cmp	r3, r0
 8014fae:	4637      	mov	r7, r6
 8014fb0:	dc05      	bgt.n	8014fbe <__swbuf_r+0x4e>
 8014fb2:	4621      	mov	r1, r4
 8014fb4:	4628      	mov	r0, r5
 8014fb6:	f7ff ffa1 	bl	8014efc <_fflush_r>
 8014fba:	2800      	cmp	r0, #0
 8014fbc:	d1ed      	bne.n	8014f9a <__swbuf_r+0x2a>
 8014fbe:	68a3      	ldr	r3, [r4, #8]
 8014fc0:	3b01      	subs	r3, #1
 8014fc2:	60a3      	str	r3, [r4, #8]
 8014fc4:	6823      	ldr	r3, [r4, #0]
 8014fc6:	1c5a      	adds	r2, r3, #1
 8014fc8:	6022      	str	r2, [r4, #0]
 8014fca:	701e      	strb	r6, [r3, #0]
 8014fcc:	6962      	ldr	r2, [r4, #20]
 8014fce:	1c43      	adds	r3, r0, #1
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d004      	beq.n	8014fde <__swbuf_r+0x6e>
 8014fd4:	89a3      	ldrh	r3, [r4, #12]
 8014fd6:	07db      	lsls	r3, r3, #31
 8014fd8:	d5e1      	bpl.n	8014f9e <__swbuf_r+0x2e>
 8014fda:	2e0a      	cmp	r6, #10
 8014fdc:	d1df      	bne.n	8014f9e <__swbuf_r+0x2e>
 8014fde:	4621      	mov	r1, r4
 8014fe0:	4628      	mov	r0, r5
 8014fe2:	f7ff ff8b 	bl	8014efc <_fflush_r>
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d0d9      	beq.n	8014f9e <__swbuf_r+0x2e>
 8014fea:	e7d6      	b.n	8014f9a <__swbuf_r+0x2a>

08014fec <__swsetup_r>:
 8014fec:	b538      	push	{r3, r4, r5, lr}
 8014fee:	4b29      	ldr	r3, [pc, #164]	@ (8015094 <__swsetup_r+0xa8>)
 8014ff0:	4605      	mov	r5, r0
 8014ff2:	6818      	ldr	r0, [r3, #0]
 8014ff4:	460c      	mov	r4, r1
 8014ff6:	b118      	cbz	r0, 8015000 <__swsetup_r+0x14>
 8014ff8:	6a03      	ldr	r3, [r0, #32]
 8014ffa:	b90b      	cbnz	r3, 8015000 <__swsetup_r+0x14>
 8014ffc:	f7ff f85a 	bl	80140b4 <__sinit>
 8015000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015004:	0719      	lsls	r1, r3, #28
 8015006:	d422      	bmi.n	801504e <__swsetup_r+0x62>
 8015008:	06da      	lsls	r2, r3, #27
 801500a:	d407      	bmi.n	801501c <__swsetup_r+0x30>
 801500c:	2209      	movs	r2, #9
 801500e:	602a      	str	r2, [r5, #0]
 8015010:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015014:	81a3      	strh	r3, [r4, #12]
 8015016:	f04f 30ff 	mov.w	r0, #4294967295
 801501a:	e033      	b.n	8015084 <__swsetup_r+0x98>
 801501c:	0758      	lsls	r0, r3, #29
 801501e:	d512      	bpl.n	8015046 <__swsetup_r+0x5a>
 8015020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015022:	b141      	cbz	r1, 8015036 <__swsetup_r+0x4a>
 8015024:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015028:	4299      	cmp	r1, r3
 801502a:	d002      	beq.n	8015032 <__swsetup_r+0x46>
 801502c:	4628      	mov	r0, r5
 801502e:	f7ff f9b9 	bl	80143a4 <_free_r>
 8015032:	2300      	movs	r3, #0
 8015034:	6363      	str	r3, [r4, #52]	@ 0x34
 8015036:	89a3      	ldrh	r3, [r4, #12]
 8015038:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801503c:	81a3      	strh	r3, [r4, #12]
 801503e:	2300      	movs	r3, #0
 8015040:	6063      	str	r3, [r4, #4]
 8015042:	6923      	ldr	r3, [r4, #16]
 8015044:	6023      	str	r3, [r4, #0]
 8015046:	89a3      	ldrh	r3, [r4, #12]
 8015048:	f043 0308 	orr.w	r3, r3, #8
 801504c:	81a3      	strh	r3, [r4, #12]
 801504e:	6923      	ldr	r3, [r4, #16]
 8015050:	b94b      	cbnz	r3, 8015066 <__swsetup_r+0x7a>
 8015052:	89a3      	ldrh	r3, [r4, #12]
 8015054:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015058:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801505c:	d003      	beq.n	8015066 <__swsetup_r+0x7a>
 801505e:	4621      	mov	r1, r4
 8015060:	4628      	mov	r0, r5
 8015062:	f000 f884 	bl	801516e <__smakebuf_r>
 8015066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801506a:	f013 0201 	ands.w	r2, r3, #1
 801506e:	d00a      	beq.n	8015086 <__swsetup_r+0x9a>
 8015070:	2200      	movs	r2, #0
 8015072:	60a2      	str	r2, [r4, #8]
 8015074:	6962      	ldr	r2, [r4, #20]
 8015076:	4252      	negs	r2, r2
 8015078:	61a2      	str	r2, [r4, #24]
 801507a:	6922      	ldr	r2, [r4, #16]
 801507c:	b942      	cbnz	r2, 8015090 <__swsetup_r+0xa4>
 801507e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015082:	d1c5      	bne.n	8015010 <__swsetup_r+0x24>
 8015084:	bd38      	pop	{r3, r4, r5, pc}
 8015086:	0799      	lsls	r1, r3, #30
 8015088:	bf58      	it	pl
 801508a:	6962      	ldrpl	r2, [r4, #20]
 801508c:	60a2      	str	r2, [r4, #8]
 801508e:	e7f4      	b.n	801507a <__swsetup_r+0x8e>
 8015090:	2000      	movs	r0, #0
 8015092:	e7f7      	b.n	8015084 <__swsetup_r+0x98>
 8015094:	20000024 	.word	0x20000024

08015098 <_sbrk_r>:
 8015098:	b538      	push	{r3, r4, r5, lr}
 801509a:	4d06      	ldr	r5, [pc, #24]	@ (80150b4 <_sbrk_r+0x1c>)
 801509c:	2300      	movs	r3, #0
 801509e:	4604      	mov	r4, r0
 80150a0:	4608      	mov	r0, r1
 80150a2:	602b      	str	r3, [r5, #0]
 80150a4:	f7ec fb30 	bl	8001708 <_sbrk>
 80150a8:	1c43      	adds	r3, r0, #1
 80150aa:	d102      	bne.n	80150b2 <_sbrk_r+0x1a>
 80150ac:	682b      	ldr	r3, [r5, #0]
 80150ae:	b103      	cbz	r3, 80150b2 <_sbrk_r+0x1a>
 80150b0:	6023      	str	r3, [r4, #0]
 80150b2:	bd38      	pop	{r3, r4, r5, pc}
 80150b4:	20004608 	.word	0x20004608

080150b8 <abort>:
 80150b8:	b508      	push	{r3, lr}
 80150ba:	2006      	movs	r0, #6
 80150bc:	f000 f8bc 	bl	8015238 <raise>
 80150c0:	2001      	movs	r0, #1
 80150c2:	f7ec faa9 	bl	8001618 <_exit>

080150c6 <_realloc_r>:
 80150c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150ca:	4680      	mov	r8, r0
 80150cc:	4615      	mov	r5, r2
 80150ce:	460c      	mov	r4, r1
 80150d0:	b921      	cbnz	r1, 80150dc <_realloc_r+0x16>
 80150d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150d6:	4611      	mov	r1, r2
 80150d8:	f7ff b9d8 	b.w	801448c <_malloc_r>
 80150dc:	b92a      	cbnz	r2, 80150ea <_realloc_r+0x24>
 80150de:	f7ff f961 	bl	80143a4 <_free_r>
 80150e2:	2400      	movs	r4, #0
 80150e4:	4620      	mov	r0, r4
 80150e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150ea:	f000 f8e3 	bl	80152b4 <_malloc_usable_size_r>
 80150ee:	4285      	cmp	r5, r0
 80150f0:	4606      	mov	r6, r0
 80150f2:	d802      	bhi.n	80150fa <_realloc_r+0x34>
 80150f4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80150f8:	d8f4      	bhi.n	80150e4 <_realloc_r+0x1e>
 80150fa:	4629      	mov	r1, r5
 80150fc:	4640      	mov	r0, r8
 80150fe:	f7ff f9c5 	bl	801448c <_malloc_r>
 8015102:	4607      	mov	r7, r0
 8015104:	2800      	cmp	r0, #0
 8015106:	d0ec      	beq.n	80150e2 <_realloc_r+0x1c>
 8015108:	42b5      	cmp	r5, r6
 801510a:	462a      	mov	r2, r5
 801510c:	4621      	mov	r1, r4
 801510e:	bf28      	it	cs
 8015110:	4632      	movcs	r2, r6
 8015112:	f7ff f91a 	bl	801434a <memcpy>
 8015116:	4621      	mov	r1, r4
 8015118:	4640      	mov	r0, r8
 801511a:	f7ff f943 	bl	80143a4 <_free_r>
 801511e:	463c      	mov	r4, r7
 8015120:	e7e0      	b.n	80150e4 <_realloc_r+0x1e>

08015122 <__swhatbuf_r>:
 8015122:	b570      	push	{r4, r5, r6, lr}
 8015124:	460c      	mov	r4, r1
 8015126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801512a:	2900      	cmp	r1, #0
 801512c:	b096      	sub	sp, #88	@ 0x58
 801512e:	4615      	mov	r5, r2
 8015130:	461e      	mov	r6, r3
 8015132:	da0d      	bge.n	8015150 <__swhatbuf_r+0x2e>
 8015134:	89a3      	ldrh	r3, [r4, #12]
 8015136:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801513a:	f04f 0100 	mov.w	r1, #0
 801513e:	bf14      	ite	ne
 8015140:	2340      	movne	r3, #64	@ 0x40
 8015142:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015146:	2000      	movs	r0, #0
 8015148:	6031      	str	r1, [r6, #0]
 801514a:	602b      	str	r3, [r5, #0]
 801514c:	b016      	add	sp, #88	@ 0x58
 801514e:	bd70      	pop	{r4, r5, r6, pc}
 8015150:	466a      	mov	r2, sp
 8015152:	f000 f879 	bl	8015248 <_fstat_r>
 8015156:	2800      	cmp	r0, #0
 8015158:	dbec      	blt.n	8015134 <__swhatbuf_r+0x12>
 801515a:	9901      	ldr	r1, [sp, #4]
 801515c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015160:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015164:	4259      	negs	r1, r3
 8015166:	4159      	adcs	r1, r3
 8015168:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801516c:	e7eb      	b.n	8015146 <__swhatbuf_r+0x24>

0801516e <__smakebuf_r>:
 801516e:	898b      	ldrh	r3, [r1, #12]
 8015170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015172:	079d      	lsls	r5, r3, #30
 8015174:	4606      	mov	r6, r0
 8015176:	460c      	mov	r4, r1
 8015178:	d507      	bpl.n	801518a <__smakebuf_r+0x1c>
 801517a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801517e:	6023      	str	r3, [r4, #0]
 8015180:	6123      	str	r3, [r4, #16]
 8015182:	2301      	movs	r3, #1
 8015184:	6163      	str	r3, [r4, #20]
 8015186:	b003      	add	sp, #12
 8015188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801518a:	ab01      	add	r3, sp, #4
 801518c:	466a      	mov	r2, sp
 801518e:	f7ff ffc8 	bl	8015122 <__swhatbuf_r>
 8015192:	9f00      	ldr	r7, [sp, #0]
 8015194:	4605      	mov	r5, r0
 8015196:	4639      	mov	r1, r7
 8015198:	4630      	mov	r0, r6
 801519a:	f7ff f977 	bl	801448c <_malloc_r>
 801519e:	b948      	cbnz	r0, 80151b4 <__smakebuf_r+0x46>
 80151a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151a4:	059a      	lsls	r2, r3, #22
 80151a6:	d4ee      	bmi.n	8015186 <__smakebuf_r+0x18>
 80151a8:	f023 0303 	bic.w	r3, r3, #3
 80151ac:	f043 0302 	orr.w	r3, r3, #2
 80151b0:	81a3      	strh	r3, [r4, #12]
 80151b2:	e7e2      	b.n	801517a <__smakebuf_r+0xc>
 80151b4:	89a3      	ldrh	r3, [r4, #12]
 80151b6:	6020      	str	r0, [r4, #0]
 80151b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80151bc:	81a3      	strh	r3, [r4, #12]
 80151be:	9b01      	ldr	r3, [sp, #4]
 80151c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80151c4:	b15b      	cbz	r3, 80151de <__smakebuf_r+0x70>
 80151c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151ca:	4630      	mov	r0, r6
 80151cc:	f000 f84e 	bl	801526c <_isatty_r>
 80151d0:	b128      	cbz	r0, 80151de <__smakebuf_r+0x70>
 80151d2:	89a3      	ldrh	r3, [r4, #12]
 80151d4:	f023 0303 	bic.w	r3, r3, #3
 80151d8:	f043 0301 	orr.w	r3, r3, #1
 80151dc:	81a3      	strh	r3, [r4, #12]
 80151de:	89a3      	ldrh	r3, [r4, #12]
 80151e0:	431d      	orrs	r5, r3
 80151e2:	81a5      	strh	r5, [r4, #12]
 80151e4:	e7cf      	b.n	8015186 <__smakebuf_r+0x18>

080151e6 <_raise_r>:
 80151e6:	291f      	cmp	r1, #31
 80151e8:	b538      	push	{r3, r4, r5, lr}
 80151ea:	4605      	mov	r5, r0
 80151ec:	460c      	mov	r4, r1
 80151ee:	d904      	bls.n	80151fa <_raise_r+0x14>
 80151f0:	2316      	movs	r3, #22
 80151f2:	6003      	str	r3, [r0, #0]
 80151f4:	f04f 30ff 	mov.w	r0, #4294967295
 80151f8:	bd38      	pop	{r3, r4, r5, pc}
 80151fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80151fc:	b112      	cbz	r2, 8015204 <_raise_r+0x1e>
 80151fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015202:	b94b      	cbnz	r3, 8015218 <_raise_r+0x32>
 8015204:	4628      	mov	r0, r5
 8015206:	f000 f853 	bl	80152b0 <_getpid_r>
 801520a:	4622      	mov	r2, r4
 801520c:	4601      	mov	r1, r0
 801520e:	4628      	mov	r0, r5
 8015210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015214:	f000 b83a 	b.w	801528c <_kill_r>
 8015218:	2b01      	cmp	r3, #1
 801521a:	d00a      	beq.n	8015232 <_raise_r+0x4c>
 801521c:	1c59      	adds	r1, r3, #1
 801521e:	d103      	bne.n	8015228 <_raise_r+0x42>
 8015220:	2316      	movs	r3, #22
 8015222:	6003      	str	r3, [r0, #0]
 8015224:	2001      	movs	r0, #1
 8015226:	e7e7      	b.n	80151f8 <_raise_r+0x12>
 8015228:	2100      	movs	r1, #0
 801522a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801522e:	4620      	mov	r0, r4
 8015230:	4798      	blx	r3
 8015232:	2000      	movs	r0, #0
 8015234:	e7e0      	b.n	80151f8 <_raise_r+0x12>
	...

08015238 <raise>:
 8015238:	4b02      	ldr	r3, [pc, #8]	@ (8015244 <raise+0xc>)
 801523a:	4601      	mov	r1, r0
 801523c:	6818      	ldr	r0, [r3, #0]
 801523e:	f7ff bfd2 	b.w	80151e6 <_raise_r>
 8015242:	bf00      	nop
 8015244:	20000024 	.word	0x20000024

08015248 <_fstat_r>:
 8015248:	b538      	push	{r3, r4, r5, lr}
 801524a:	4d07      	ldr	r5, [pc, #28]	@ (8015268 <_fstat_r+0x20>)
 801524c:	2300      	movs	r3, #0
 801524e:	4604      	mov	r4, r0
 8015250:	4608      	mov	r0, r1
 8015252:	4611      	mov	r1, r2
 8015254:	602b      	str	r3, [r5, #0]
 8015256:	f7ec fa2f 	bl	80016b8 <_fstat>
 801525a:	1c43      	adds	r3, r0, #1
 801525c:	d102      	bne.n	8015264 <_fstat_r+0x1c>
 801525e:	682b      	ldr	r3, [r5, #0]
 8015260:	b103      	cbz	r3, 8015264 <_fstat_r+0x1c>
 8015262:	6023      	str	r3, [r4, #0]
 8015264:	bd38      	pop	{r3, r4, r5, pc}
 8015266:	bf00      	nop
 8015268:	20004608 	.word	0x20004608

0801526c <_isatty_r>:
 801526c:	b538      	push	{r3, r4, r5, lr}
 801526e:	4d06      	ldr	r5, [pc, #24]	@ (8015288 <_isatty_r+0x1c>)
 8015270:	2300      	movs	r3, #0
 8015272:	4604      	mov	r4, r0
 8015274:	4608      	mov	r0, r1
 8015276:	602b      	str	r3, [r5, #0]
 8015278:	f7ec fa2e 	bl	80016d8 <_isatty>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d102      	bne.n	8015286 <_isatty_r+0x1a>
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	b103      	cbz	r3, 8015286 <_isatty_r+0x1a>
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	20004608 	.word	0x20004608

0801528c <_kill_r>:
 801528c:	b538      	push	{r3, r4, r5, lr}
 801528e:	4d07      	ldr	r5, [pc, #28]	@ (80152ac <_kill_r+0x20>)
 8015290:	2300      	movs	r3, #0
 8015292:	4604      	mov	r4, r0
 8015294:	4608      	mov	r0, r1
 8015296:	4611      	mov	r1, r2
 8015298:	602b      	str	r3, [r5, #0]
 801529a:	f7ec f9ab 	bl	80015f4 <_kill>
 801529e:	1c43      	adds	r3, r0, #1
 80152a0:	d102      	bne.n	80152a8 <_kill_r+0x1c>
 80152a2:	682b      	ldr	r3, [r5, #0]
 80152a4:	b103      	cbz	r3, 80152a8 <_kill_r+0x1c>
 80152a6:	6023      	str	r3, [r4, #0]
 80152a8:	bd38      	pop	{r3, r4, r5, pc}
 80152aa:	bf00      	nop
 80152ac:	20004608 	.word	0x20004608

080152b0 <_getpid_r>:
 80152b0:	f7ec b998 	b.w	80015e4 <_getpid>

080152b4 <_malloc_usable_size_r>:
 80152b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152b8:	1f18      	subs	r0, r3, #4
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	bfbc      	itt	lt
 80152be:	580b      	ldrlt	r3, [r1, r0]
 80152c0:	18c0      	addlt	r0, r0, r3
 80152c2:	4770      	bx	lr

080152c4 <_init>:
 80152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152c6:	bf00      	nop
 80152c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152ca:	bc08      	pop	{r3}
 80152cc:	469e      	mov	lr, r3
 80152ce:	4770      	bx	lr

080152d0 <_fini>:
 80152d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152d2:	bf00      	nop
 80152d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152d6:	bc08      	pop	{r3}
 80152d8:	469e      	mov	lr, r3
 80152da:	4770      	bx	lr
