
basile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018f9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b6c  0801912c  0801912c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cc98  0801cc98  0001e080  2**0
                  CONTENTS
  4 .ARM          00000008  0801cc98  0801cc98  0001dc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cca0  0801cca0  0001e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cca0  0801cca0  0001dca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cca4  0801cca4  0001dca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801cca8  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015304  20000080  0801cd28  0001e080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015384  0801cd28  0001e384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031a0b  00000000  00000000  0001e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000083dd  00000000  00000000  0004fabb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002768  00000000  00000000  00057e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001f0a  00000000  00000000  0005a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000365d4  00000000  00000000  0005c50a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003929f  00000000  00000000  00092ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113f37  00000000  00000000  000cbd7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dfcb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa68  00000000  00000000  001dfcf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001ea760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019114 	.word	0x08019114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08019114 	.word	0x08019114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <SPIx_TxRx>:
#define SPIx_DS   HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);

extern SPI_HandleTypeDef hspi2;

static uint8_t SPIx_TxRx(uint8_t cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800056a:	2017      	movs	r0, #23
 800056c:	f001 fc06 	bl	8001d7c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8000570:	2028      	movs	r0, #40	@ 0x28
 8000572:	f001 fc03 	bl	8001d7c <HAL_NVIC_DisableIRQ>

	HAL_SPI_TransmitReceive(&hspi2, &cmd, &cmd, 1, SPIx_TIMEOUT);
 8000576:	1dfa      	adds	r2, r7, #7
 8000578:	1df9      	adds	r1, r7, #7
 800057a:	230a      	movs	r3, #10
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	2301      	movs	r3, #1
 8000580:	4806      	ldr	r0, [pc, #24]	@ (800059c <SPIx_TxRx+0x3c>)
 8000582:	f003 fca0 	bl	8003ec6 <HAL_SPI_TransmitReceive>

	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000586:	2017      	movs	r0, #23
 8000588:	f001 fbea 	bl	8001d60 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800058c:	2028      	movs	r0, #40	@ 0x28
 800058e:	f001 fbe7 	bl	8001d60 <HAL_NVIC_EnableIRQ>
  return cmd;
 8000592:	79fb      	ldrb	r3, [r7, #7]
}
 8000594:	4618      	mov	r0, r3
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000500 	.word	0x20000500

080005a0 <SPIx_TxBuf>:

static void SPIx_TxBuf(uint8_t *m2s, uint8_t *s2m, uint16_t bufflen)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	4613      	mov	r3, r2
 80005ac:	80fb      	strh	r3, [r7, #6]
	HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80005ae:	2017      	movs	r0, #23
 80005b0:	f001 fbe4 	bl	8001d7c <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80005b4:	2028      	movs	r0, #40	@ 0x28
 80005b6:	f001 fbe1 	bl	8001d7c <HAL_NVIC_DisableIRQ>

  SPIx_CS;
 80005ba:	2200      	movs	r2, #0
 80005bc:	2101      	movs	r1, #1
 80005be:	4818      	ldr	r0, [pc, #96]	@ (8000620 <SPIx_TxBuf+0x80>)
 80005c0:	f001 fd94 	bl	80020ec <HAL_GPIO_WritePin>

  if((s2m == NULL) && (m2s != NULL))
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d109      	bne.n	80005de <SPIx_TxBuf+0x3e>
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <SPIx_TxBuf+0x3e>
  {
    HAL_SPI_Transmit(&hspi2, m2s, bufflen, SPIx_TIMEOUT);
 80005d0:	88fa      	ldrh	r2, [r7, #6]
 80005d2:	230a      	movs	r3, #10
 80005d4:	68f9      	ldr	r1, [r7, #12]
 80005d6:	4813      	ldr	r0, [pc, #76]	@ (8000624 <SPIx_TxBuf+0x84>)
 80005d8:	f003 f9c7 	bl	800396a <HAL_SPI_Transmit>
 80005dc:	e011      	b.n	8000602 <SPIx_TxBuf+0x62>
  }
  else if(m2s == NULL)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d106      	bne.n	80005f2 <SPIx_TxBuf+0x52>
  {
    HAL_SPI_Receive(&hspi2, s2m, bufflen, SPIx_TIMEOUT);
 80005e4:	88fa      	ldrh	r2, [r7, #6]
 80005e6:	230a      	movs	r3, #10
 80005e8:	68b9      	ldr	r1, [r7, #8]
 80005ea:	480e      	ldr	r0, [pc, #56]	@ (8000624 <SPIx_TxBuf+0x84>)
 80005ec:	f003 fb33 	bl	8003c56 <HAL_SPI_Receive>
 80005f0:	e007      	b.n	8000602 <SPIx_TxBuf+0x62>
  }
  else
  {
    HAL_SPI_TransmitReceive(&hspi2, m2s, s2m, bufflen, SPIx_TIMEOUT);
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	220a      	movs	r2, #10
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	68ba      	ldr	r2, [r7, #8]
 80005fa:	68f9      	ldr	r1, [r7, #12]
 80005fc:	4809      	ldr	r0, [pc, #36]	@ (8000624 <SPIx_TxBuf+0x84>)
 80005fe:	f003 fc62 	bl	8003ec6 <HAL_SPI_TransmitReceive>
  }

  SPIx_DS;
 8000602:	2201      	movs	r2, #1
 8000604:	2101      	movs	r1, #1
 8000606:	4806      	ldr	r0, [pc, #24]	@ (8000620 <SPIx_TxBuf+0x80>)
 8000608:	f001 fd70 	bl	80020ec <HAL_GPIO_WritePin>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800060c:	2017      	movs	r0, #23
 800060e:	f001 fba7 	bl	8001d60 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000612:	2028      	movs	r0, #40	@ 0x28
 8000614:	f001 fba4 	bl	8001d60 <HAL_NVIC_EnableIRQ>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	48000400 	.word	0x48000400
 8000624:	20000500 	.word	0x20000500

08000628 <init_udelay>:

/* Initialize STM32 watchdog timer */
static void init_udelay(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <init_udelay+0x4c>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a10      	ldr	r2, [pc, #64]	@ (8000674 <init_udelay+0x4c>)
 8000632:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000636:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <init_udelay+0x4c>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a0d      	ldr	r2, [pc, #52]	@ (8000674 <init_udelay+0x4c>)
 800063e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000642:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000644:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <init_udelay+0x50>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <init_udelay+0x50>)
 800064a:	f023 0301 	bic.w	r3, r3, #1
 800064e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000650:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <init_udelay+0x50>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a08      	ldr	r2, [pc, #32]	@ (8000678 <init_udelay+0x50>)
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	6013      	str	r3, [r2, #0]
  DWT->CYCCNT = 0;
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <init_udelay+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000662:	bf00      	nop
  __ASM volatile ("NOP");
 8000664:	bf00      	nop
  __ASM volatile ("NOP");
 8000666:	bf00      	nop

}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	e000edf0 	.word	0xe000edf0
 8000678:	e0001000 	.word	0xe0001000

0800067c <udelay>:

/* Software delay in us */
void udelay(uint32_t us)
{
 800067c:	b480      	push	{r7}
 800067e:	b087      	sub	sp, #28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <udelay+0x44>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0e      	ldr	r2, [pc, #56]	@ (80006c4 <udelay+0x48>)
 800068a:	fba2 2303 	umull	r2, r3, r2, r3
 800068e:	0c9a      	lsrs	r2, r3, #18
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	fb02 f303 	mul.w	r3, r2, r3
 8000696:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000698:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <udelay+0x4c>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800069e:	4b0a      	ldr	r3, [pc, #40]	@ (80006c8 <udelay+0x4c>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	1ad3      	subs	r3, r2, r3
 80006a6:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	697a      	ldr	r2, [r7, #20]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d8f6      	bhi.n	800069e <udelay+0x22>

}
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	371c      	adds	r7, #28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	20000000 	.word	0x20000000
 80006c4:	431bde83 	.word	0x431bde83
 80006c8:	e0001000 	.word	0xe0001000

080006cc <enc_reset>:
static void enc_rdbuffer(void *buffer, int16_t buflen);
static void enc_linkstatus(ENC_HandleTypeDef *handle);

/* Send the single byte system reset command (SRC). */
void enc_reset(ENC_HandleTypeDef *handle)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Send the system reset command. */

  SPIx_CS;
 80006d4:	2200      	movs	r2, #0
 80006d6:	2101      	movs	r1, #1
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <enc_reset+0x38>)
 80006da:	f001 fd07 	bl	80020ec <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_SRC);
 80006de:	20ff      	movs	r0, #255	@ 0xff
 80006e0:	f7ff ff3e 	bl	8000560 <SPIx_TxRx>
  SPIx_DS;
 80006e4:	2201      	movs	r2, #1
 80006e6:	2101      	movs	r1, #1
 80006e8:	4806      	ldr	r0, [pc, #24]	@ (8000704 <enc_reset+0x38>)
 80006ea:	f001 fcff 	bl	80020ec <HAL_GPIO_WritePin>

  handle->bank = 0; /* Initialize the trace on the current selected bank */
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2200      	movs	r2, #0
 80006f2:	741a      	strb	r2, [r3, #16]
  udelay(2);
 80006f4:	2002      	movs	r0, #2
 80006f6:	f7ff ffc1 	bl	800067c <udelay>
  //HAL_Delay(2); /* >1000 us, conforms to errata #2 */
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	48000400 	.word	0x48000400

08000708 <enc_start>:

/* Initialize the enc28j60 and configure the needed hardware resources */
bool enc_start(ENC_HandleTypeDef *handle)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  uint8_t regval;

  /* Initialize watchdog timer */
  init_udelay();
 8000710:	f7ff ff8a 	bl	8000628 <init_udelay>

  /* System reset */
  enc_reset(handle);
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff ffd9 	bl	80006cc <enc_reset>

  /* Use bank 0 */
  enc_setbank(handle, 0);
 800071a:	2100      	movs	r1, #0
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 fab8 	bl	8000c92 <enc_setbank>

  /* Check if we are actually communicating with the ENC28J60. */
  regval = enc_rdbreg(handle, ENC_EREVID);
 8000722:	2172      	movs	r1, #114	@ 0x72
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 fb63 	bl	8000df0 <enc_rdbreg>
 800072a:	4603      	mov	r3, r0
 800072c:	73fb      	strb	r3, [r7, #15]
  if(regval == 0x00 || regval == 0xff)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d002      	beq.n	800073a <enc_start+0x32>
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	2bff      	cmp	r3, #255	@ 0xff
 8000738:	d101      	bne.n	800073e <enc_start+0x36>
  {
    return false;
 800073a:	2300      	movs	r3, #0
 800073c:	e0cc      	b.n	80008d8 <enc_start+0x1d0>
  }

  /* Initialize ECON2: Enable address auto increment. */
  enc_wrgreg(ENC_ECON2, ECON2_AUTOINC /* | ECON2_VRPS*/);
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	205e      	movs	r0, #94	@ 0x5e
 8000742:	f000 fad8 	bl	8000cf6 <enc_wrgreg2>

  /* Initialize receive buffer. */
  handle->nextpkt = PKTMEM_RX_START;
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	2200      	movs	r2, #0
 800074a:	829a      	strh	r2, [r3, #20]
  enc_wrbreg(handle, ENC_ERXSTL, PKTMEM_RX_START & 0xff);
 800074c:	2200      	movs	r2, #0
 800074e:	2108      	movs	r1, #8
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fb7b 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXSTH, PKTMEM_RX_START >> 8);
 8000756:	2200      	movs	r2, #0
 8000758:	2109      	movs	r1, #9
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 fb76 	bl	8000e4c <enc_wrbreg>

  /* Set the receive data pointer */
  /* Errata 14 */
  enc_wrbreg(handle, ENC_ERXRDPTL, PKTMEM_RX_END & 0xff);
 8000760:	22ff      	movs	r2, #255	@ 0xff
 8000762:	210c      	movs	r1, #12
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f000 fb71 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, PKTMEM_RX_END >> 8);
 800076a:	2219      	movs	r2, #25
 800076c:	210d      	movs	r1, #13
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f000 fb6c 	bl	8000e4c <enc_wrbreg>

  /* Set the receive buffer end. */
  enc_wrbreg(handle, ENC_ERXNDL, PKTMEM_RX_END & 0xff);
 8000774:	22ff      	movs	r2, #255	@ 0xff
 8000776:	210a      	movs	r1, #10
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 fb67 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXNDH, PKTMEM_RX_END >> 8);
 800077e:	2219      	movs	r2, #25
 8000780:	210b      	movs	r1, #11
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f000 fb62 	bl	8000e4c <enc_wrbreg>

  /* Set transmit buffer start. */
  handle->transmitLength = 0;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	831a      	strh	r2, [r3, #24]
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 800078e:	2200      	movs	r2, #0
 8000790:	2104      	movs	r1, #4
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 fb5a 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 8000798:	221a      	movs	r2, #26
 800079a:	2105      	movs	r1, #5
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f000 fb55 	bl	8000e4c <enc_wrbreg>

  /* Set filter mode: unicast OR broadcast AND crc valid */
  enc_wrbreg(handle, ENC_ERXFCON, ERXFCON_UCEN | ERXFCON_CRCEN | ERXFCON_BCEN);
 80007a2:	22a1      	movs	r2, #161	@ 0xa1
 80007a4:	2138      	movs	r1, #56	@ 0x38
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f000 fb50 	bl	8000e4c <enc_wrbreg>

  do
  {
	udelay(10); //HAL_Delay(10); /* Wait for 10 ms to let the clock be ready */
 80007ac:	200a      	movs	r0, #10
 80007ae:	f7ff ff65 	bl	800067c <udelay>
    regval = enc_rdbreg(handle, ENC_ESTAT);
 80007b2:	211d      	movs	r1, #29
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 fb1b 	bl	8000df0 <enc_rdbreg>
 80007ba:	4603      	mov	r3, r0
 80007bc:	73fb      	strb	r3, [r7, #15]
  }while((regval & ESTAT_CLKRDY) == 0);
 80007be:	7bfb      	ldrb	r3, [r7, #15]
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d0f1      	beq.n	80007ac <enc_start+0xa4>

  /* Enable MAC receive */
  enc_wrbreg(handle, ENC_MACON1, MACON1_MARXEN | MACON1_TXPAUS | MACON1_RXPAUS);
 80007c8:	220d      	movs	r2, #13
 80007ca:	21c0      	movs	r1, #192	@ 0xc0
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f000 fb3d 	bl	8000e4c <enc_wrbreg>

  /* Enable automatic padding and CRC operations */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d120      	bne.n	800081c <enc_start+0x114>
  {
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d101      	bne.n	80007e6 <enc_start+0xde>
 80007e2:	2332      	movs	r3, #50	@ 0x32
 80007e4:	e000      	b.n	80007e8 <enc_start+0xe0>
 80007e6:	2302      	movs	r3, #2
 80007e8:	461a      	mov	r2, r3
 80007ea:	21c2      	movs	r1, #194	@ 0xc2
 80007ec:	6878      	ldr	r0, [r7, #4]
 80007ee:	f000 fb2d 	bl	8000e4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MACON4, MACON4_DEFER); /* Defer transmission enable */
 80007f2:	2240      	movs	r2, #64	@ 0x40
 80007f4:	21c3      	movs	r1, #195	@ 0xc3
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 fb28 	bl	8000e4c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 80007fc:	2212      	movs	r2, #18
 80007fe:	21c6      	movs	r1, #198	@ 0xc6
 8000800:	6878      	ldr	r0, [r7, #4]
 8000802:	f000 fb23 	bl	8000e4c <enc_wrbreg>
    enc_wrbreg(handle, ENC_MAIPGH, 0x0c);
 8000806:	220c      	movs	r2, #12
 8000808:	21c7      	movs	r1, #199	@ 0xc7
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f000 fb1e 	bl	8000e4c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x12);
 8000810:	2212      	movs	r2, #18
 8000812:	21c4      	movs	r1, #196	@ 0xc4
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 fb19 	bl	8000e4c <enc_wrbreg>
 800081a:	e015      	b.n	8000848 <enc_start+0x140>
  }
  else
  {
    /* Set filter mode: unicast OR broadcast AND crc valid AND Full Duplex */
    enc_wrbreg(handle, ENC_MACON3,
        ((handle->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE) ? MACON3_PADCFG0 | MACON3_TXCRCEN : 0) | MACON3_FRMLNEN | MACON3_FULDPX);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	689b      	ldr	r3, [r3, #8]
    enc_wrbreg(handle, ENC_MACON3,
 8000820:	2b00      	cmp	r3, #0
 8000822:	d101      	bne.n	8000828 <enc_start+0x120>
 8000824:	2333      	movs	r3, #51	@ 0x33
 8000826:	e000      	b.n	800082a <enc_start+0x122>
 8000828:	2303      	movs	r3, #3
 800082a:	461a      	mov	r2, r3
 800082c:	21c2      	movs	r1, #194	@ 0xc2
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f000 fb0c 	bl	8000e4c <enc_wrbreg>

    /* Set Non-Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MAIPGL, 0x12);
 8000834:	2212      	movs	r2, #18
 8000836:	21c6      	movs	r1, #198	@ 0xc6
 8000838:	6878      	ldr	r0, [r7, #4]
 800083a:	f000 fb07 	bl	8000e4c <enc_wrbreg>

    /* Set Back-to-Back Inter-Packet Gap */
    enc_wrbreg(handle, ENC_MABBIPG, 0x15);
 800083e:	2215      	movs	r2, #21
 8000840:	21c4      	movs	r1, #196	@ 0xc4
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f000 fb02 	bl	8000e4c <enc_wrbreg>
  }

  /* Set the maximum packet size which the controller will accept */
  enc_wrbreg(handle, ENC_MAMXFLL, (CONFIG_NET_ETH_MTU + 18) & 0xff);
 8000848:	22ee      	movs	r2, #238	@ 0xee
 800084a:	21ca      	movs	r1, #202	@ 0xca
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 fafd 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAMXFLH, (CONFIG_NET_ETH_MTU + 18) >> 8);
 8000852:	2205      	movs	r2, #5
 8000854:	21cb      	movs	r1, #203	@ 0xcb
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f000 faf8 	bl	8000e4c <enc_wrbreg>

  /* Setup up PHCON1 & 2 */
  if(handle->Init.DuplexMode == ETH_MODE_HALFDUPLEX)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d10b      	bne.n	800087c <enc_start+0x174>
  {
    enc_wrphy(handle, ENC_PHCON1, 0x00);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 fb88 	bl	8000f7e <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, PHCON2_HDLDIS); /* errata 9 workaround */
 800086e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000872:	2110      	movs	r1, #16
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 fb82 	bl	8000f7e <enc_wrphy>
 800087a:	e00a      	b.n	8000892 <enc_start+0x18a>
  }
  else
  {
    enc_wrphy(handle, ENC_PHCON1, PHCON1_PDPXMD); /* errata 10 workaround */
 800087c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000880:	2100      	movs	r1, #0
 8000882:	6878      	ldr	r0, [r7, #4]
 8000884:	f000 fb7b 	bl	8000f7e <enc_wrphy>
    enc_wrphy(handle, ENC_PHCON2, 0x00);
 8000888:	2200      	movs	r2, #0
 800088a:	2110      	movs	r1, #16
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 fb76 	bl	8000f7e <enc_wrphy>
  }

  /* Process interrupt settings */
  if(handle->Init.InterruptEnableBits & EIE_LINKIE)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	7b1b      	ldrb	r3, [r3, #12]
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	2b00      	cmp	r3, #0
 800089c:	d004      	beq.n	80008a8 <enc_start+0x1a0>
  {
    /* Enable link change interrupt in PHY module */
    enc_wrphy(handle, ENC_PHIE, PHIE_PGEIE | PHIE_PLNKIE);
 800089e:	2212      	movs	r2, #18
 80008a0:	2112      	movs	r1, #18
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f000 fb6b 	bl	8000f7e <enc_wrphy>
  }

  /* Reset all interrupt flags */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 80008a8:	213b      	movs	r1, #59	@ 0x3b
 80008aa:	20bc      	movs	r0, #188	@ 0xbc
 80008ac:	f000 fa23 	bl	8000cf6 <enc_wrgreg2>

  regval = handle->Init.InterruptEnableBits;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	7b1b      	ldrb	r3, [r3, #12]
 80008b4:	73fb      	strb	r3, [r7, #15]
  if(regval)
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d003      	beq.n	80008c4 <enc_start+0x1bc>
  {
    /* Ensure INTIE is set when at least an interruption is selected */
    regval |= EIE_INTIE;
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008c2:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable selected interrupts in ethernet controller module */
  enc_bfsgreg(ENC_EIE, regval);
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	4619      	mov	r1, r3
 80008c8:	209b      	movs	r0, #155	@ 0x9b
 80008ca:	f000 fa14 	bl	8000cf6 <enc_wrgreg2>

  /* Enable the receiver */
  enc_bfsgreg(ENC_ECON1, ECON1_RXEN);
 80008ce:	2104      	movs	r1, #4
 80008d0:	209f      	movs	r0, #159	@ 0x9f
 80008d2:	f000 fa10 	bl	8000cf6 <enc_wrgreg2>

  return true;
 80008d6:	2301      	movs	r3, #1
}
 80008d8:	4618      	mov	r0, r3
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <enc_set_MAC>:

/* Set the MAC address to the configured value. */
void enc_set_MAC(ENC_HandleTypeDef *handle)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  enc_wrbreg(handle, ENC_MAADR1, handle->Init.MACAddr[0]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	685b      	ldr	r3, [r3, #4]
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	461a      	mov	r2, r3
 80008f0:	21e4      	movs	r1, #228	@ 0xe4
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f000 faaa 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR2, handle->Init.MACAddr[1]);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	3301      	adds	r3, #1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	461a      	mov	r2, r3
 8000902:	21e5      	movs	r1, #229	@ 0xe5
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 faa1 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR3, handle->Init.MACAddr[2]);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	3302      	adds	r3, #2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	461a      	mov	r2, r3
 8000914:	21e2      	movs	r1, #226	@ 0xe2
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f000 fa98 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR4, handle->Init.MACAddr[3]);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	3303      	adds	r3, #3
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	21e3      	movs	r1, #227	@ 0xe3
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f000 fa8f 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR5, handle->Init.MACAddr[4]);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	3304      	adds	r3, #4
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	21e0      	movs	r1, #224	@ 0xe0
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fa86 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MAADR6, handle->Init.MACAddr[5]);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	3305      	adds	r3, #5
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	21e1      	movs	r1, #225	@ 0xe1
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f000 fa7d 	bl	8000e4c <enc_wrbreg>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <enc_prepare_txbuffer>:

/* Prepare TX buffer */
int8_t enc_prepare_txbuffer(ENC_HandleTypeDef *handle, uint16_t len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	807b      	strh	r3, [r7, #2]
  uint16_t txend;
  uint8_t control_write[2];

  /* Wait while TX is busy */
  if(!enc_waitgreg(ENC_ECON1, ECON1_TXRTS, 0))
 8000966:	2200      	movs	r2, #0
 8000968:	2108      	movs	r1, #8
 800096a:	201f      	movs	r0, #31
 800096c:	f000 f9da 	bl	8000d24 <enc_waitgreg>
 8000970:	4603      	mov	r3, r0
 8000972:	f083 0301 	eor.w	r3, r3, #1
 8000976:	b2db      	uxtb	r3, r3
 8000978:	2b00      	cmp	r3, #0
 800097a:	d002      	beq.n	8000982 <enc_prepare_txbuffer+0x28>
  {
    return ERR_TIMEOUT;
 800097c:	f06f 0302 	mvn.w	r3, #2
 8000980:	e03c      	b.n	80009fc <enc_prepare_txbuffer+0xa2>
  }

  /* Set transmit buffer start (is this necessary?). */
  enc_wrbreg(handle, ENC_ETXSTL, PKTMEM_TX_START & 0xff);
 8000982:	2200      	movs	r2, #0
 8000984:	2104      	movs	r1, #4
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 fa60 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXSTH, PKTMEM_TX_START >> 8);
 800098c:	221a      	movs	r2, #26
 800098e:	2105      	movs	r1, #5
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fa5b 	bl	8000e4c <enc_wrbreg>

  /* Reset the write pointer to start of transmit buffer */
  enc_wrbreg(handle, ENC_EWRPTL, PKTMEM_TX_START & 0xff);
 8000996:	2200      	movs	r2, #0
 8000998:	2102      	movs	r1, #2
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 fa56 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_EWRPTH, PKTMEM_TX_START >> 8);
 80009a0:	221a      	movs	r2, #26
 80009a2:	2103      	movs	r1, #3
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 fa51 	bl	8000e4c <enc_wrbreg>

  txend = PKTMEM_TX_START + len;
 80009aa:	887b      	ldrh	r3, [r7, #2]
 80009ac:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 80009b0:	81fb      	strh	r3, [r7, #14]

  if(txend + 8 > PKTMEM_TX_ENDP1)
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	f641 72f8 	movw	r2, #8184	@ 0x1ff8
 80009b8:	4293      	cmp	r3, r2
 80009ba:	d902      	bls.n	80009c2 <enc_prepare_txbuffer+0x68>
  {
    return ERR_MEM;
 80009bc:	f04f 33ff 	mov.w	r3, #4294967295
 80009c0:	e01c      	b.n	80009fc <enc_prepare_txbuffer+0xa2>
  }

  enc_wrbreg(handle, ENC_ETXNDL, txend & 0xff);
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	461a      	mov	r2, r3
 80009c8:	2106      	movs	r1, #6
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 fa3e 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ETXNDH, txend >> 8);
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	461a      	mov	r2, r3
 80009da:	2107      	movs	r1, #7
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f000 fa35 	bl	8000e4c <enc_wrbreg>

  control_write[0] = ENC_WBM;
 80009e2:	237a      	movs	r3, #122	@ 0x7a
 80009e4:	733b      	strb	r3, [r7, #12]
  control_write[1] = PKTCTRL_PCRCEN | PKTCTRL_PPADEN | PKTCTRL_PHUGEEN;
 80009e6:	230e      	movs	r3, #14
 80009e8:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(control_write, control_write, 2);
 80009ea:	f107 010c 	add.w	r1, r7, #12
 80009ee:	f107 030c 	add.w	r3, r7, #12
 80009f2:	2202      	movs	r2, #2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fdd3 	bl	80005a0 <SPIx_TxBuf>

  return ERR_OK;
 80009fa:	2300      	movs	r3, #0
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <enc_wrbuffer>:

/* Write a buffer of data. */
void enc_wrbuffer(void *buffer, uint16_t buflen)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8000a10:	2200      	movs	r2, #0
 8000a12:	2101      	movs	r1, #1
 8000a14:	4807      	ldr	r0, [pc, #28]	@ (8000a34 <enc_wrbuffer+0x30>)
 8000a16:	f001 fb69 	bl	80020ec <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_WBM);
 8000a1a:	207a      	movs	r0, #122	@ 0x7a
 8000a1c:	f7ff fda0 	bl	8000560 <SPIx_TxRx>
  SPIx_TxBuf(buffer, NULL, buflen);
 8000a20:	887b      	ldrh	r3, [r7, #2]
 8000a22:	461a      	mov	r2, r3
 8000a24:	2100      	movs	r1, #0
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff fdba 	bl	80005a0 <SPIx_TxBuf>
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	48000400 	.word	0x48000400

08000a38 <enc_transmit>:

/* Start hardware transmission. */
void enc_transmit(ENC_HandleTypeDef *handle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  if(handle->transmitLength != 0)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	8b1b      	ldrh	r3, [r3, #24]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d053      	beq.n	8000af0 <enc_transmit+0xb8>
  {
    handle->retries = 16;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2210      	movs	r2, #16
 8000a4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    do
    {
      enc_bfsgreg(ENC_ECON1, ECON1_TXRST);
 8000a4e:	2180      	movs	r1, #128	@ 0x80
 8000a50:	209f      	movs	r0, #159	@ 0x9f
 8000a52:	f000 f950 	bl	8000cf6 <enc_wrgreg2>
      enc_bfcgreg(ENC_ECON1, ECON1_TXRST);
 8000a56:	2180      	movs	r1, #128	@ 0x80
 8000a58:	20bf      	movs	r0, #191	@ 0xbf
 8000a5a:	f000 f94c 	bl	8000cf6 <enc_wrgreg2>
      enc_bfcgreg(ENC_EIR, EIR_TXERIF | EIR_TXIF);
 8000a5e:	210a      	movs	r1, #10
 8000a60:	20bc      	movs	r0, #188	@ 0xbc
 8000a62:	f000 f948 	bl	8000cf6 <enc_wrgreg2>

      /* Start transmission */
      enc_bfsgreg(ENC_ECON1, ECON1_TXRTS);
 8000a66:	2108      	movs	r1, #8
 8000a68:	209f      	movs	r0, #159	@ 0x9f
 8000a6a:	f000 f944 	bl	8000cf6 <enc_wrgreg2>

      /* Wait for end of transmission */
      enc_waitwhilegreg(ENC_EIR, EIR_TXIF | EIR_TXERIF, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	210a      	movs	r1, #10
 8000a72:	201c      	movs	r0, #28
 8000a74:	f000 f989 	bl	8000d8a <enc_waitwhilegreg>

      /* Stop transmission */
      enc_bfcgreg(ENC_ECON1, ECON1_TXRTS);
 8000a78:	2108      	movs	r1, #8
 8000a7a:	20bf      	movs	r0, #191	@ 0xbf
 8000a7c:	f000 f93b 	bl	8000cf6 <enc_wrgreg2>
      {
        uint16_t addtTsv4;
        uint8_t tsv4, regval;

        /* read tsv */
        addtTsv4 = PKTMEM_TX_START + handle->transmitLength + 4;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	8b1b      	ldrh	r3, [r3, #24]
 8000a84:	f503 53d0 	add.w	r3, r3, #6656	@ 0x1a00
 8000a88:	3304      	adds	r3, #4
 8000a8a:	81fb      	strh	r3, [r7, #14]

        enc_wrbreg(handle, ENC_ERDPTL, addtTsv4 & 0xff);
 8000a8c:	89fb      	ldrh	r3, [r7, #14]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	461a      	mov	r2, r3
 8000a92:	2100      	movs	r1, #0
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f000 f9d9 	bl	8000e4c <enc_wrbreg>
        enc_wrbreg(handle, ENC_ERDPTH, addtTsv4 >> 8);
 8000a9a:	89fb      	ldrh	r3, [r7, #14]
 8000a9c:	0a1b      	lsrs	r3, r3, #8
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f000 f9d0 	bl	8000e4c <enc_wrbreg>

        enc_rdbuffer(&tsv4, 1);
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fa8e 	bl	8000fd4 <enc_rdbuffer>
        regval = enc_rdgreg(ENC_EIR);
 8000ab8:	201c      	movs	r0, #28
 8000aba:	f000 f908 	bl	8000cce <enc_rdgreg2>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	737b      	strb	r3, [r7, #13]
        if(!(regval & EIR_TXERIF) || !(tsv4 & TSV_LATECOL))
 8000ac2:	7b7b      	ldrb	r3, [r7, #13]
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d00e      	beq.n	8000aea <enc_transmit+0xb2>
 8000acc:	7b3b      	ldrb	r3, [r7, #12]
 8000ace:	f003 0320 	and.w	r3, r3, #32
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d009      	beq.n	8000aea <enc_transmit+0xb2>
        {
          break;
        }
      }
      handle->retries--;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ada:	3b01      	subs	r3, #1
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    }while(handle->retries > 0);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d1b1      	bne.n	8000a4e <enc_transmit+0x16>
    handle->transmitLength = 0;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	2200      	movs	r2, #0
 8000aee:	831a      	strh	r2, [r3, #24]
  }
}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <enc_get_received_frame>:

/* Check if we have received packet, and if so, retrieve them. */
bool enc_get_received_frame(ENC_HandleTypeDef *handle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint8_t rsv[6];
  uint16_t pktlen;
  uint16_t rxstat;
  uint8_t pktcnt;

  bool result = true;
 8000b00:	2301      	movs	r3, #1
 8000b02:	757b      	strb	r3, [r7, #21]

  pktcnt = enc_rdbreg(handle, ENC_EPKTCNT);
 8000b04:	2139      	movs	r1, #57	@ 0x39
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 f972 	bl	8000df0 <enc_rdbreg>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	753b      	strb	r3, [r7, #20]
  if(pktcnt == 0)
 8000b10:	7d3b      	ldrb	r3, [r7, #20]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d101      	bne.n	8000b1a <enc_get_received_frame+0x22>
  {
    return false;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e078      	b.n	8000c0c <enc_get_received_frame+0x114>
  };

  /* Set the read pointer to the start of the received packet (ERDPT) */
  enc_wrbreg(handle, ENC_ERDPTL, (handle->nextpkt) & 0xff);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	8a9b      	ldrh	r3, [r3, #20]
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	461a      	mov	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f991 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERDPTH, (handle->nextpkt) >> 8);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	8a9b      	ldrh	r3, [r3, #20]
 8000b2e:	0a1b      	lsrs	r3, r3, #8
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	461a      	mov	r2, r3
 8000b36:	2101      	movs	r1, #1
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f987 	bl	8000e4c <enc_wrbreg>
  enc_rdbuffer(rsv, 6);
 8000b3e:	f107 030c 	add.w	r3, r7, #12
 8000b42:	2106      	movs	r1, #6
 8000b44:	4618      	mov	r0, r3
 8000b46:	f000 fa45 	bl	8000fd4 <enc_rdbuffer>

  handle->nextpkt = (uint16_t) rsv[1] << 8 | (uint16_t) rsv[0];
 8000b4a:	7b7b      	ldrb	r3, [r7, #13]
 8000b4c:	021b      	lsls	r3, r3, #8
 8000b4e:	b21a      	sxth	r2, r3
 8000b50:	7b3b      	ldrb	r3, [r7, #12]
 8000b52:	b21b      	sxth	r3, r3
 8000b54:	4313      	orrs	r3, r2
 8000b56:	b21b      	sxth	r3, r3
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	829a      	strh	r2, [r3, #20]
  pktlen = (uint16_t) rsv[3] << 8 | (uint16_t) rsv[2];
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	7bbb      	ldrb	r3, [r7, #14]
 8000b66:	b21b      	sxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b21b      	sxth	r3, r3
 8000b6c:	827b      	strh	r3, [r7, #18]
  rxstat = (uint16_t) rsv[5] << 8 | (uint16_t) rsv[4];
 8000b6e:	7c7b      	ldrb	r3, [r7, #17]
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	7c3b      	ldrb	r3, [r7, #16]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	82fb      	strh	r3, [r7, #22]

  /* Check if the packet was received OK */
  if((rxstat & RXSTAT_OK) == 0)
 8000b7e:	8afb      	ldrh	r3, [r7, #22]
 8000b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d102      	bne.n	8000b8e <enc_get_received_frame+0x96>
  {
    result = false;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	757b      	strb	r3, [r7, #21]
 8000b8c:	e018      	b.n	8000bc0 <enc_get_received_frame+0xc8>
  }
  else
  { /* Check for a usable packet length (4 added for the CRC) */
    if(pktlen > (CONFIG_NET_ETH_MTU + 4) || pktlen <= (ETH_HDRLEN + 4))
 8000b8e:	8a7b      	ldrh	r3, [r7, #18]
 8000b90:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8000b94:	d802      	bhi.n	8000b9c <enc_get_received_frame+0xa4>
 8000b96:	8a7b      	ldrh	r3, [r7, #18]
 8000b98:	2b12      	cmp	r3, #18
 8000b9a:	d802      	bhi.n	8000ba2 <enc_get_received_frame+0xaa>
    {
      result = false;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	757b      	strb	r3, [r7, #21]
 8000ba0:	e00e      	b.n	8000bc0 <enc_get_received_frame+0xc8>
    }
    else
    {
      handle->RxFrameInfos.length = pktlen - 4;
 8000ba2:	8a7b      	ldrh	r3, [r7, #18]
 8000ba4:	3b04      	subs	r3, #4
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
      enc_rdbuffer(handle->RxFrameInfos.buffer, handle->RxFrameInfos.length);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4610      	mov	r0, r2
 8000bbc:	f000 fa0a 	bl	8000fd4 <enc_rdbuffer>
    }
  }

  /* Errata 14 (on se sert de rxstat comme variable temporaire */
  rxstat = handle->nextpkt;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	8a9b      	ldrh	r3, [r3, #20]
 8000bc4:	82fb      	strh	r3, [r7, #22]
  if(rxstat == PKTMEM_RX_START)
 8000bc6:	8afb      	ldrh	r3, [r7, #22]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d103      	bne.n	8000bd4 <enc_get_received_frame+0xdc>
  {
    rxstat = PKTMEM_RX_END;
 8000bcc:	f641 13ff 	movw	r3, #6655	@ 0x19ff
 8000bd0:	82fb      	strh	r3, [r7, #22]
 8000bd2:	e002      	b.n	8000bda <enc_get_received_frame+0xe2>
  }
  else
  {
    rxstat--;
 8000bd4:	8afb      	ldrh	r3, [r7, #22]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	82fb      	strh	r3, [r7, #22]
  }
  enc_wrbreg(handle, ENC_ERXRDPTL, rxstat && 0xff);
 8000bda:	8afb      	ldrh	r3, [r7, #22]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	461a      	mov	r2, r3
 8000be8:	210c      	movs	r1, #12
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 f92e 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_ERXRDPTH, rxstat >> 8);
 8000bf0:	8afb      	ldrh	r3, [r7, #22]
 8000bf2:	0a1b      	lsrs	r3, r3, #8
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	210d      	movs	r1, #13
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f000 f925 	bl	8000e4c <enc_wrbreg>

  /* Decrement the packet counter indicate we are done with this packet */
  enc_bfsgreg(ENC_ECON2, ECON2_PKTDEC);
 8000c02:	2140      	movs	r1, #64	@ 0x40
 8000c04:	209e      	movs	r0, #158	@ 0x9e
 8000c06:	f000 f876 	bl	8000cf6 <enc_wrgreg2>

  return result;
 8000c0a:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <enc_enable_interrupts>:

/* Enable individual ENC28J60 interrupts */
void enc_enable_interrupts(uint8_t bits)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
  enc_bfsgreg(ENC_EIE, bits);
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	4619      	mov	r1, r3
 8000c22:	209b      	movs	r0, #155	@ 0x9b
 8000c24:	f000 f867 	bl	8000cf6 <enc_wrgreg2>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <enc_irq_handler>:

/* Perform interrupt handling logic outside of the interrupt handler */
void enc_irq_handler(ENC_HandleTypeDef *handle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint8_t eir;

  enc_bfcgreg(ENC_EIE, EIE_INTIE);
 8000c38:	2180      	movs	r1, #128	@ 0x80
 8000c3a:	20bb      	movs	r0, #187	@ 0xbb
 8000c3c:	f000 f85b 	bl	8000cf6 <enc_wrgreg2>

  /* Read EIR for interrupt flags */
  eir = enc_rdgreg(ENC_EIR) & EIR_ALLINTS;
 8000c40:	201c      	movs	r0, #28
 8000c42:	f000 f844 	bl	8000cce <enc_rdgreg2>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f003 033b 	and.w	r3, r3, #59	@ 0x3b
 8000c4c:	73fb      	strb	r3, [r7, #15]

  /* PKTIF is not reliable, check PKCNT instead */
  if(enc_rdbreg(handle, ENC_EPKTCNT) != 0)
 8000c4e:	2139      	movs	r1, #57	@ 0x39
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f000 f8cd 	bl	8000df0 <enc_rdbreg>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d003      	beq.n	8000c64 <enc_irq_handler+0x34>
  {
    /* Manage EIR_PKTIF by software */
    eir |= EIR_PKTIF;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c62:	73fb      	strb	r3, [r7, #15]
  }

  /* Store interrupt flags in handle */
  handle->interruptFlags = eir;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	7bfa      	ldrb	r2, [r7, #15]
 8000c68:	745a      	strb	r2, [r3, #17]

  /* If link status has changed, read it */
  if((eir & EIR_LINKIF) != 0) /* Link change interrupt */
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	f003 0310 	and.w	r3, r3, #16
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <enc_irq_handler+0x52>
  {
    enc_linkstatus(handle); /* Get current link status */
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 f9c7 	bl	8001008 <enc_linkstatus>
    enc_rdphy(handle, ENC_PHIR); /* Clear the LINKIF interrupt */
 8000c7a:	2113      	movs	r1, #19
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f943 	bl	8000f08 <enc_rdphy>
  }

  /* Reset ENC28J60 interrupt flags, except PKTIF form which interruption is deasserted when PKTCNT reaches 0 */
  enc_bfcgreg(ENC_EIR, EIR_ALLINTS);
 8000c82:	213b      	movs	r1, #59	@ 0x3b
 8000c84:	20bc      	movs	r0, #188	@ 0xbc
 8000c86:	f000 f836 	bl	8000cf6 <enc_wrgreg2>

  /* Enable Ethernet interrupts */
  /* done after effective process on interrupts enc_bfsgreg(ENC_EIE, EIE_INTIE); */
}
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <enc_setbank>:

/* Set the bank for these next control register access. */
static void enc_setbank(ENC_HandleTypeDef *handle, uint8_t bank)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	70fb      	strb	r3, [r7, #3]
  if(bank != handle->bank)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	7c1b      	ldrb	r3, [r3, #16]
 8000ca2:	78fa      	ldrb	r2, [r7, #3]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d00e      	beq.n	8000cc6 <enc_setbank+0x34>
  {
    /* Select bank 0 (just so that all of the bits are cleared) */
    enc_bfcgreg(ENC_ECON1, ECON1_BSEL_MASK);
 8000ca8:	2103      	movs	r1, #3
 8000caa:	20bf      	movs	r0, #191	@ 0xbf
 8000cac:	f000 f823 	bl	8000cf6 <enc_wrgreg2>

    if(bank != 0)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <enc_setbank+0x2e>
    {
      enc_bfsgreg(ENC_ECON1, (bank << ECON1_BSEL_SHIFT));
 8000cb6:	78fb      	ldrb	r3, [r7, #3]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	209f      	movs	r0, #159	@ 0x9f
 8000cbc:	f000 f81b 	bl	8000cf6 <enc_wrgreg2>
    }

    handle->bank = bank;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	741a      	strb	r2, [r3, #16]
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <enc_rdgreg2>:

/* Read a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static uint8_t enc_rdgreg2(uint8_t cmd)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b084      	sub	sp, #16
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(cmdpdata, cmdpdata, 2);
 8000cdc:	f107 010c 	add.w	r1, r7, #12
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fc5a 	bl	80005a0 <SPIx_TxBuf>

  return cmdpdata[1];
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <enc_wrgreg2>:

/* Write to a global register (EIE, EIR, ESTAT, ECON2, or ECON1). */
static void enc_wrgreg2(uint8_t cmd, uint8_t wrdata)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b084      	sub	sp, #16
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	460a      	mov	r2, r1
 8000d00:	71fb      	strb	r3, [r7, #7]
 8000d02:	4613      	mov	r3, r2
 8000d04:	71bb      	strb	r3, [r7, #6]
  uint8_t cmdpdata[2];
  cmdpdata[0] = cmd;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	733b      	strb	r3, [r7, #12]
  cmdpdata[1] = wrdata;
 8000d0a:	79bb      	ldrb	r3, [r7, #6]
 8000d0c:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(cmdpdata, NULL, 2);
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	2202      	movs	r2, #2
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fc42 	bl	80005a0 <SPIx_TxBuf>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <enc_waitgreg>:

/* Wait until grouped register bit(s) take a specific value */
static bool enc_waitgreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	71bb      	strb	r3, [r7, #6]
 8000d32:	4613      	mov	r3, r2
 8000d34:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d36:	f000 ff0f 	bl	8001b58 <HAL_GetTick>
 8000d3a:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ffc2 	bl	8000cce <enc_rdgreg2>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000d4e:	f000 ff03 	bl	8001b58 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000d5a:	7cfa      	ldrb	r2, [r7, #19]
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	797a      	ldrb	r2, [r7, #5]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d002      	beq.n	8000d6e <enc_waitgreg+0x4a>
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	2b31      	cmp	r3, #49	@ 0x31
 8000d6c:	d9e6      	bls.n	8000d3c <enc_waitgreg+0x18>

  return (rddata & bits) == value;
 8000d6e:	7cfa      	ldrb	r2, [r7, #19]
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	4013      	ands	r3, r2
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	797a      	ldrb	r2, [r7, #5]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	bf0c      	ite	eq
 8000d7c:	2301      	moveq	r3, #1
 8000d7e:	2300      	movne	r3, #0
 8000d80:	b2db      	uxtb	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <enc_waitwhilegreg>:

/* Wait while grouped register bit(s) have a specific value */
static bool enc_waitwhilegreg(uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	4603      	mov	r3, r0
 8000d92:	71fb      	strb	r3, [r7, #7]
 8000d94:	460b      	mov	r3, r1
 8000d96:	71bb      	strb	r3, [r7, #6]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	717b      	strb	r3, [r7, #5]
  uint32_t start = HAL_GetTick();
 8000d9c:	f000 fedc 	bl	8001b58 <HAL_GetTick>
 8000da0:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdgreg(ctrlreg);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 031f 	and.w	r3, r3, #31
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff ff8f 	bl	8000cce <enc_rdgreg2>
 8000db0:	4603      	mov	r3, r0
 8000db2:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000db4:	f000 fed0 	bl	8001b58 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) == value && elapsed < ENC_POLLTIMEOUT);
 8000dc0:	7cfa      	ldrb	r2, [r7, #19]
 8000dc2:	79bb      	ldrb	r3, [r7, #6]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	797a      	ldrb	r2, [r7, #5]
 8000dca:	429a      	cmp	r2, r3
 8000dcc:	d102      	bne.n	8000dd4 <enc_waitwhilegreg+0x4a>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b31      	cmp	r3, #49	@ 0x31
 8000dd2:	d9e6      	bls.n	8000da2 <enc_waitwhilegreg+0x18>

  return (rddata & bits) != value;
 8000dd4:	7cfa      	ldrb	r2, [r7, #19]
 8000dd6:	79bb      	ldrb	r3, [r7, #6]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	797a      	ldrb	r2, [r7, #5]
 8000dde:	429a      	cmp	r2, r3
 8000de0:	bf14      	ite	ne
 8000de2:	2301      	movne	r3, #1
 8000de4:	2300      	moveq	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3718      	adds	r7, #24
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <enc_rdbreg>:

/* Read from a banked control register using the RCR command. */
static uint8_t enc_rdbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	70fb      	strb	r3, [r7, #3]
  uint8_t data[3];

  enc_setbank(handle, GETBANK(ctrlreg));
 8000dfc:	78fb      	ldrb	r3, [r7, #3]
 8000dfe:	095b      	lsrs	r3, r3, #5
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	4619      	mov	r1, r3
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ff41 	bl	8000c92 <enc_setbank>
  data[0] = ENC_RCR | GETADDR(ctrlreg);
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	733b      	strb	r3, [r7, #12]
  SPIx_TxBuf(data, data, (ISPHYMAC(ctrlreg)) ? 3 : 2);
 8000e1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da01      	bge.n	8000e26 <enc_rdbreg+0x36>
 8000e22:	2203      	movs	r2, #3
 8000e24:	e000      	b.n	8000e28 <enc_rdbreg+0x38>
 8000e26:	2202      	movs	r2, #2
 8000e28:	f107 010c 	add.w	r1, r7, #12
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff fbb5 	bl	80005a0 <SPIx_TxBuf>
  return (ISPHYMAC(ctrlreg)) ? data[2] : data[1];
 8000e36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	da01      	bge.n	8000e42 <enc_rdbreg+0x52>
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	e000      	b.n	8000e44 <enc_rdbreg+0x54>
 8000e42:	7b7b      	ldrb	r3, [r7, #13]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <enc_wrbreg>:

/* Write to a banked control register using the WCR command. */
static void enc_wrbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t wrdata)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	70bb      	strb	r3, [r7, #2]
  uint8_t data[2];
  enc_setbank(handle, GETBANK(ctrlreg));
 8000e5c:	78fb      	ldrb	r3, [r7, #3]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff11 	bl	8000c92 <enc_setbank>
  data[0] = ENC_WCR | GETADDR(ctrlreg);
 8000e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000e74:	f003 031f 	and.w	r3, r3, #31
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e7e:	b25b      	sxtb	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	733b      	strb	r3, [r7, #12]
  data[1] = wrdata;
 8000e84:	78bb      	ldrb	r3, [r7, #2]
 8000e86:	737b      	strb	r3, [r7, #13]
  SPIx_TxBuf(data, NULL, 2);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	2100      	movs	r1, #0
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fb85 	bl	80005a0 <SPIx_TxBuf>
}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <enc_waitbreg>:

/* Wait until banked register bit(s) take a specific value */
static bool enc_waitbreg(ENC_HandleTypeDef *handle, uint8_t ctrlreg, uint8_t bits, uint8_t value)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4603      	mov	r3, r0
 8000eae:	70fb      	strb	r3, [r7, #3]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70bb      	strb	r3, [r7, #2]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	707b      	strb	r3, [r7, #1]
  uint32_t start = HAL_GetTick();
 8000eb8:	f000 fe4e 	bl	8001b58 <HAL_GetTick>
 8000ebc:	6178      	str	r0, [r7, #20]
  uint32_t elapsed;
  uint8_t rddata;

  do
  {
    rddata = enc_rdbreg(handle, ctrlreg);
 8000ebe:	78fb      	ldrb	r3, [r7, #3]
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff94 	bl	8000df0 <enc_rdbreg>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	74fb      	strb	r3, [r7, #19]
    elapsed = HAL_GetTick() - start;
 8000ecc:	f000 fe44 	bl	8001b58 <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	60fb      	str	r3, [r7, #12]
  }while((rddata & bits) != value && elapsed < ENC_POLLTIMEOUT);
 8000ed8:	7cfa      	ldrb	r2, [r7, #19]
 8000eda:	78bb      	ldrb	r3, [r7, #2]
 8000edc:	4013      	ands	r3, r2
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	787a      	ldrb	r2, [r7, #1]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d002      	beq.n	8000eec <enc_waitbreg+0x4e>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b31      	cmp	r3, #49	@ 0x31
 8000eea:	d9e8      	bls.n	8000ebe <enc_waitbreg+0x20>

  return (rddata & bits) == value;
 8000eec:	7cfa      	ldrb	r2, [r7, #19]
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	787a      	ldrb	r2, [r7, #1]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	bf0c      	ite	eq
 8000efa:	2301      	moveq	r3, #1
 8000efc:	2300      	movne	r3, #0
 8000efe:	b2db      	uxtb	r3, r3
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <enc_rdphy>:

/* Read 16-bits of PHY data. */
static uint16_t enc_rdphy(ENC_HandleTypeDef *handle, uint8_t phyaddr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  uint16_t data = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	81fb      	strh	r3, [r7, #14]

  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000f18:	78fb      	ldrb	r3, [r7, #3]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	21d4      	movs	r1, #212	@ 0xd4
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff94 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MICMD, MICMD_MIIRD);
 8000f24:	2201      	movs	r2, #1
 8000f26:	21d2      	movs	r1, #210	@ 0xd2
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f7ff ff8f 	bl	8000e4c <enc_wrbreg>
  udelay(12);
 8000f2e:	200c      	movs	r0, #12
 8000f30:	f7ff fba4 	bl	800067c <udelay>

  if(enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00))
 8000f34:	2300      	movs	r3, #0
 8000f36:	2201      	movs	r2, #1
 8000f38:	21ea      	movs	r1, #234	@ 0xea
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ffaf 	bl	8000e9e <enc_waitbreg>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d016      	beq.n	8000f74 <enc_rdphy+0x6c>
  {
    enc_wrbreg(handle, ENC_MICMD, 0x00);
 8000f46:	2200      	movs	r2, #0
 8000f48:	21d2      	movs	r1, #210	@ 0xd2
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff7e 	bl	8000e4c <enc_wrbreg>
    data = (uint16_t) enc_rdbreg(handle, ENC_MIRDL);
 8000f50:	21d8      	movs	r1, #216	@ 0xd8
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff4c 	bl	8000df0 <enc_rdbreg>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	81fb      	strh	r3, [r7, #14]
    data |= (uint16_t) enc_rdbreg(handle, ENC_MIRDH) << 8;
 8000f5c:	21d9      	movs	r1, #217	@ 0xd9
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff46 	bl	8000df0 <enc_rdbreg>
 8000f64:	4603      	mov	r3, r0
 8000f66:	021b      	lsls	r3, r3, #8
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	b21b      	sxth	r3, r3
 8000f72:	81fb      	strh	r3, [r7, #14]
  }

  return data;
 8000f74:	89fb      	ldrh	r3, [r7, #14]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <enc_wrphy>:

/* write 16-bits of PHY data. */
static void enc_wrphy(ENC_HandleTypeDef *handle, uint8_t phyaddr, uint16_t phydata)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	460b      	mov	r3, r1
 8000f88:	70fb      	strb	r3, [r7, #3]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	803b      	strh	r3, [r7, #0]
  enc_wrbreg(handle, ENC_MIREGADR, phyaddr);
 8000f8e:	78fb      	ldrb	r3, [r7, #3]
 8000f90:	461a      	mov	r2, r3
 8000f92:	21d4      	movs	r1, #212	@ 0xd4
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff59 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRL, phydata);
 8000f9a:	883b      	ldrh	r3, [r7, #0]
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	21d6      	movs	r1, #214	@ 0xd6
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff52 	bl	8000e4c <enc_wrbreg>
  enc_wrbreg(handle, ENC_MIWRH, phydata >> 8);
 8000fa8:	883b      	ldrh	r3, [r7, #0]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	21d7      	movs	r1, #215	@ 0xd7
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff49 	bl	8000e4c <enc_wrbreg>
  udelay(12);
 8000fba:	200c      	movs	r0, #12
 8000fbc:	f7ff fb5e 	bl	800067c <udelay>
  enc_waitbreg(handle, ENC_MISTAT, MISTAT_BUSY, 0x00);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	21ea      	movs	r1, #234	@ 0xea
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff69 	bl	8000e9e <enc_waitbreg>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <enc_rdbuffer>:

/* Read a buffer of data. */
static void enc_rdbuffer(void *buffer, int16_t buflen)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	460b      	mov	r3, r1
 8000fde:	807b      	strh	r3, [r7, #2]
  SPIx_CS;
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4807      	ldr	r0, [pc, #28]	@ (8001004 <enc_rdbuffer+0x30>)
 8000fe6:	f001 f881 	bl	80020ec <HAL_GPIO_WritePin>
  SPIx_TxRx(ENC_RBM);
 8000fea:	203a      	movs	r0, #58	@ 0x3a
 8000fec:	f7ff fab8 	bl	8000560 <SPIx_TxRx>
  SPIx_TxBuf(NULL, buffer, buflen);
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	2000      	movs	r0, #0
 8000ff8:	f7ff fad2 	bl	80005a0 <SPIx_TxBuf>
}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	48000400 	.word	0x48000400

08001008 <enc_linkstatus>:

/* The current link status can be obtained from the PHSTAT1.LLSTAT or PHSTAT2.LSTAT.*/
static void enc_linkstatus(ENC_HandleTypeDef *handle)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  handle->LinkStatus = enc_rdphy(handle, ENC_PHSTAT2);
 8001010:	2111      	movs	r1, #17
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff78 	bl	8000f08 <enc_rdphy>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	82da      	strh	r2, [r3, #22]
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4a07      	ldr	r2, [pc, #28]	@ (8001054 <vApplicationGetIdleTaskMemory+0x2c>)
 8001038:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <vApplicationGetIdleTaskMemory+0x30>)
 800103e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001046:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	2000009c 	.word	0x2000009c
 8001058:	20000100 	.word	0x20000100

0800105c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b088      	sub	sp, #32
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001062:	f000 fd45 	bl	8001af0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001066:	f000 f821 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800106a:	f000 f8df 	bl	800122c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800106e:	f000 f8ad 	bl	80011cc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001072:	f000 f86d 	bl	8001150 <MX_SPI2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 256, defaultTaskBuffer, &defaultTaskControlBlock);
 8001076:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <main+0x48>)
 8001078:	1d3c      	adds	r4, r7, #4
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001084:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fe57 	bl	8005d40 <osThreadCreate>
 8001092:	4603      	mov	r3, r0
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <main+0x4c>)
 8001096:	6013      	str	r3, [r2, #0]

 // xSemaphore = xSemaphoreCreateBinary();
  //StaticSemaphore_t xSemaphoreBuffer;
  //xSemaphore = xSemaphoreCreateBinaryStatic(&xSemaphoreBuffer);

  initRTOS();
 8001098:	f000 f9e2 	bl	8001460 <initRTOS>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800109c:	f004 fe39 	bl	8005d12 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <main+0x44>
 80010a4:	08019138 	.word	0x08019138
 80010a8:	200005ec 	.word	0x200005ec

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	@ 0x58
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2244      	movs	r2, #68	@ 0x44
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f017 f985 	bl	80183ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	463b      	mov	r3, r7
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80010d2:	f001 f863 	bl	800219c <HAL_PWREx_ControlVoltageScaling>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010dc:	f000 f9ba 	bl	8001454 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ea:	2310      	movs	r3, #16
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f2:	2302      	movs	r3, #2
 80010f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010fa:	230a      	movs	r3, #10
 80010fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010fe:	2307      	movs	r3, #7
 8001100:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001102:	2302      	movs	r3, #2
 8001104:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f89a 	bl	8002248 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800111a:	f000 f99b 	bl	8001454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2303      	movs	r3, #3
 8001124:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	2104      	movs	r1, #4
 8001136:	4618      	mov	r0, r3
 8001138:	f001 fc62 	bl	8002a00 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001142:	f000 f987 	bl	8001454 <Error_Handler>
  }
}
 8001146:	bf00      	nop
 8001148:	3758      	adds	r7, #88	@ 0x58
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <MX_SPI2_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800115a:	4b1a      	ldr	r3, [pc, #104]	@ (80011c4 <MX_SPI2_Init+0x74>)
 800115c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001160:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001162:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001168:	4b16      	ldr	r3, [pc, #88]	@ (80011c4 <MX_SPI2_Init+0x74>)
 800116a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800116e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001176:	4b13      	ldr	r3, [pc, #76]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001178:	2200      	movs	r2, #0
 800117a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800117c:	4b11      	ldr	r3, [pc, #68]	@ (80011c4 <MX_SPI2_Init+0x74>)
 800117e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001182:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001184:	4b0f      	ldr	r3, [pc, #60]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001186:	2230      	movs	r2, #48	@ 0x30
 8001188:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800118a:	4b0e      	ldr	r3, [pc, #56]	@ (80011c4 <MX_SPI2_Init+0x74>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001190:	4b0c      	ldr	r3, [pc, #48]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001196:	4b0b      	ldr	r3, [pc, #44]	@ (80011c4 <MX_SPI2_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800119c:	4b09      	ldr	r3, [pc, #36]	@ (80011c4 <MX_SPI2_Init+0x74>)
 800119e:	2207      	movs	r2, #7
 80011a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80011a2:	4b08      	ldr	r3, [pc, #32]	@ (80011c4 <MX_SPI2_Init+0x74>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <MX_SPI2_Init+0x74>)
 80011aa:	2208      	movs	r2, #8
 80011ac:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011ae:	4805      	ldr	r0, [pc, #20]	@ (80011c4 <MX_SPI2_Init+0x74>)
 80011b0:	f002 fb38 	bl	8003824 <HAL_SPI_Init>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 f94b 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000500 	.word	0x20000500
 80011c8:	40003800 	.word	0x40003800

080011cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011d0:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011d2:	4a15      	ldr	r2, [pc, #84]	@ (8001228 <MX_USART2_UART_Init+0x5c>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011d6:	4b13      	ldr	r3, [pc, #76]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b09      	ldr	r3, [pc, #36]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001202:	4b08      	ldr	r3, [pc, #32]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 800120a:	2200      	movs	r2, #0
 800120c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_USART2_UART_Init+0x58>)
 8001210:	f003 fcfa 	bl	8004c08 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800121a:	f000 f91b 	bl	8001454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000564 	.word	0x20000564
 8001228:	40004400 	.word	0x40004400

0800122c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	@ 0x28
 8001230:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b44      	ldr	r3, [pc, #272]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a43      	ldr	r2, [pc, #268]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b41      	ldr	r3, [pc, #260]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	4b3e      	ldr	r3, [pc, #248]	@ (8001354 <MX_GPIO_Init+0x128>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a3d      	ldr	r2, [pc, #244]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b3b      	ldr	r3, [pc, #236]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	4b38      	ldr	r3, [pc, #224]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a37      	ldr	r2, [pc, #220]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b35      	ldr	r3, [pc, #212]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	4b32      	ldr	r3, [pc, #200]	@ (8001354 <MX_GPIO_Init+0x128>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800128e:	4a31      	ldr	r2, [pc, #196]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001296:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <MX_GPIO_Init+0x128>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2120      	movs	r1, #32
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012aa:	f000 ff1f 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2101      	movs	r1, #1
 80012b2:	4829      	ldr	r0, [pc, #164]	@ (8001358 <MX_GPIO_Init+0x12c>)
 80012b4:	f000 ff1a 	bl	80020ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012be:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	4823      	ldr	r0, [pc, #140]	@ (800135c <MX_GPIO_Init+0x130>)
 80012d0:	f000 fd62 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d4:	2320      	movs	r3, #32
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ee:	f000 fd53 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012f2:	2301      	movs	r3, #1
 80012f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	4619      	mov	r1, r3
 8001308:	4813      	ldr	r0, [pc, #76]	@ (8001358 <MX_GPIO_Init+0x12c>)
 800130a:	f000 fd45 	bl	8001d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800130e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001314:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001328:	f000 fd36 	bl	8001d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 800132c:	2200      	movs	r2, #0
 800132e:	2106      	movs	r1, #6
 8001330:	2017      	movs	r0, #23
 8001332:	f000 fcf9 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001336:	2017      	movs	r0, #23
 8001338:	f000 fd12 	bl	8001d60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2106      	movs	r1, #6
 8001340:	2028      	movs	r0, #40	@ 0x28
 8001342:	f000 fcf1 	bl	8001d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001346:	2028      	movs	r0, #40	@ 0x28
 8001348:	f000 fd0a 	bl	8001d60 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134c:	bf00      	nop
 800134e:	3728      	adds	r7, #40	@ 0x28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40021000 	.word	0x40021000
 8001358:	48000400 	.word	0x48000400
 800135c:	48000800 	.word	0x48000800

08001360 <StartTask03>:
  * @param  None
  * @retval None
  */

void StartTask03(void const * argument)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
	taskENTER_CRITICAL();	//disable IRQ
 8001368:	f007 fb0e 	bl	8008988 <vPortEnterCritical>
	xSemaphore = xSemaphoreCreateBinaryStatic(&xSemaphoreBuffer);
 800136c:	2303      	movs	r3, #3
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <StartTask03+0x40>)
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2001      	movs	r0, #1
 8001378:	f005 f8e6 	bl	8006548 <xQueueGenericCreateStatic>
 800137c:	4603      	mov	r3, r0
 800137e:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <StartTask03+0x44>)
 8001380:	6013      	str	r3, [r2, #0]
	/* Create tcp_ip stack thread */
	tcpip_init(NULL, NULL);
 8001382:	2100      	movs	r1, #0
 8001384:	2000      	movs	r0, #0
 8001386:	f009 ffd1 	bl	800b32c <tcpip_init>

	/* Initialize the LwIP stack */
	Netif_Config();
 800138a:	f004 fa59 	bl	8005840 <Netif_Config>

	/* start App thread (tcp echo here) */
	tcpecho_init();
 800138e:	f000 faf7 	bl	8001980 <tcpecho_init>

	taskEXIT_CRITICAL();
 8001392:	f007 fb2b 	bl	80089ec <vPortExitCritical>

	/* infinite loop but pas trop quand même */
	for(;;)
	{
		osThreadTerminate(NULL);
 8001396:	2000      	movs	r0, #0
 8001398:	f004 fd1e 	bl	8005dd8 <osThreadTerminate>
 800139c:	e7fb      	b.n	8001396 <StartTask03+0x36>
 800139e:	bf00      	nop
 80013a0:	20000a58 	.word	0x20000a58
 80013a4:	20000a54 	.word	0x20000a54

080013a8 <HAL_GPIO_EXTI_Callback>:
	}

}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == 256)// pin PA8
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013b8:	d109      	bne.n	80013ce <HAL_GPIO_EXTI_Callback+0x26>
  {
	  if (ethernetTaskHandleGlobal!=NULL)
 80013ba:	4b07      	ldr	r3, [pc, #28]	@ (80013d8 <HAL_GPIO_EXTI_Callback+0x30>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d005      	beq.n	80013ce <HAL_GPIO_EXTI_Callback+0x26>
		  xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 80013c2:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <HAL_GPIO_EXTI_Callback+0x34>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4906      	ldr	r1, [pc, #24]	@ (80013e0 <HAL_GPIO_EXTI_Callback+0x38>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f005 fbef 	bl	8006bac <xQueueGiveFromISR>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000aa0 	.word	0x20000aa0
 80013dc:	20000a54 	.word	0x20000a54
 80013e0:	20000aa4 	.word	0x20000aa4

080013e4 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
    printf("Stack overflow in task: %s\n", pcTaskName);
 80013ee:	6839      	ldr	r1, [r7, #0]
 80013f0:	4802      	ldr	r0, [pc, #8]	@ (80013fc <vApplicationStackOverflowHook+0x18>)
 80013f2:	f016 ff85 	bl	8018300 <iprintf>
    while (1);  // Bloque l'exécution si débordement détecté
 80013f6:	bf00      	nop
 80013f8:	e7fd      	b.n	80013f6 <vApplicationStackOverflowHook+0x12>
 80013fa:	bf00      	nop
 80013fc:	08019154 	.word	0x08019154

08001400 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int i=0;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	  i++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001412:	2120      	movs	r1, #32
 8001414:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001418:	f000 fe80 	bl	800211c <HAL_GPIO_TogglePin>
	  vTaskDelay(500);
 800141c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001420:	f006 fad6 	bl	80079d0 <vTaskDelay>
	  //HAL_UART_Transmit(&huart2, &i, sizeof(i), 1000);
    osDelay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f004 fce3 	bl	8005df0 <osDelay>
	  i++;
 800142a:	bf00      	nop
 800142c:	e7ee      	b.n	800140c <StartDefaultTask+0xc>
	...

08001430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d101      	bne.n	8001446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001442:	f000 fb75 	bl	8001b30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40001000 	.word	0x40001000

08001454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001458:	b672      	cpsid	i
}
 800145a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <Error_Handler+0x8>

08001460 <initRTOS>:
 * param : nop
 *
 * return: nop
 */
status_t initRTOS()
{
 8001460:	b5b0      	push	{r4, r5, r7, lr}
 8001462:	b088      	sub	sp, #32
 8001464:	af00      	add	r7, sp, #0
	/* definition and creation of tache_bacasable */
	//osThreadDef(tache_UartDebug, StartTask02, osPriorityLow, 0, 128);
	//UartDebug_Handle = osThreadCreate( osThread(tache_UartDebug) , NULL );

	/* definition and creation of tache_bacasable */
	osThreadDef(tache_StartThread, StartTask03, osPriorityHigh, 0, 512);
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <initRTOS+0x34>)
 8001468:	1d3c      	adds	r4, r7, #4
 800146a:	461d      	mov	r5, r3
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001474:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	StartThread_Handle = osThreadCreate( osThread(tache_StartThread) , NULL );
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f004 fc5f 	bl	8005d40 <osThreadCreate>
 8001482:	4603      	mov	r3, r0
 8001484:	4a04      	ldr	r2, [pc, #16]	@ (8001498 <initRTOS+0x38>)
 8001486:	6013      	str	r3, [r2, #0]


	return kStatus_Success;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}
 8001492:	bf00      	nop
 8001494:	08019184 	.word	0x08019184
 8001498:	20000aa8 	.word	0x20000aa8

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a6:	4a10      	ldr	r2, [pc, #64]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	210f      	movs	r1, #15
 80014d6:	f06f 0001 	mvn.w	r0, #1
 80014da:	f000 fc25 	bl	8001d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <HAL_SPI_MspInit+0xb4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d144      	bne.n	8001598 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150e:	4b25      	ldr	r3, [pc, #148]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001512:	4a24      	ldr	r2, [pc, #144]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001514:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001518:	6593      	str	r3, [r2, #88]	@ 0x58
 800151a:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800151e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152a:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001532:	4b1c      	ldr	r3, [pc, #112]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001542:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800154a:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <HAL_SPI_MspInit+0xb8>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	60bb      	str	r3, [r7, #8]
 8001554:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001556:	230c      	movs	r3, #12
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001566:	2305      	movs	r3, #5
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <HAL_SPI_MspInit+0xbc>)
 8001572:	f000 fc11 	bl	8001d98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001588:	2305      	movs	r3, #5
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <HAL_SPI_MspInit+0xc0>)
 8001594:	f000 fc00 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40003800 	.word	0x40003800
 80015a4:	40021000 	.word	0x40021000
 80015a8:	48000800 	.word	0x48000800
 80015ac:	48000400 	.word	0x48000400

080015b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b0ac      	sub	sp, #176	@ 0xb0
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2288      	movs	r2, #136	@ 0x88
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f016 fefa 	bl	80183ca <memset>
  if(huart->Instance==USART2)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a21      	ldr	r2, [pc, #132]	@ (8001660 <HAL_UART_MspInit+0xb0>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d13b      	bne.n	8001658 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015e0:	2302      	movs	r3, #2
 80015e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 fc5d 	bl	8002eac <HAL_RCCEx_PeriphCLKConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015f8:	f7ff ff2c 	bl	8001454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 8001602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001606:	6593      	str	r3, [r2, #88]	@ 0x58
 8001608:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001610:	613b      	str	r3, [r7, #16]
 8001612:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 8001616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001618:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_UART_MspInit+0xb4>)
 8001622:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800162c:	230c      	movs	r3, #12
 800162e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001644:	2307      	movs	r3, #7
 8001646:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800164e:	4619      	mov	r1, r3
 8001650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001654:	f000 fba0 	bl	8001d98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001658:	bf00      	nop
 800165a:	37b0      	adds	r7, #176	@ 0xb0
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40004400 	.word	0x40004400
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b08e      	sub	sp, #56	@ 0x38
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001676:	4b34      	ldr	r3, [pc, #208]	@ (8001748 <HAL_InitTick+0xe0>)
 8001678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167a:	4a33      	ldr	r2, [pc, #204]	@ (8001748 <HAL_InitTick+0xe0>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6593      	str	r3, [r2, #88]	@ 0x58
 8001682:	4b31      	ldr	r3, [pc, #196]	@ (8001748 <HAL_InitTick+0xe0>)
 8001684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800168e:	f107 0210 	add.w	r2, r7, #16
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f001 fb75 	bl	8002d88 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800169e:	6a3b      	ldr	r3, [r7, #32]
 80016a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016a8:	f001 fb42 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80016ac:	6378      	str	r0, [r7, #52]	@ 0x34
 80016ae:	e004      	b.n	80016ba <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016b0:	f001 fb3e 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80016b4:	4603      	mov	r3, r0
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016bc:	4a23      	ldr	r2, [pc, #140]	@ (800174c <HAL_InitTick+0xe4>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	0c9b      	lsrs	r3, r3, #18
 80016c4:	3b01      	subs	r3, #1
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016c8:	4b21      	ldr	r3, [pc, #132]	@ (8001750 <HAL_InitTick+0xe8>)
 80016ca:	4a22      	ldr	r2, [pc, #136]	@ (8001754 <HAL_InitTick+0xec>)
 80016cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016ce:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <HAL_InitTick+0xe8>)
 80016d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016d4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001750 <HAL_InitTick+0xe8>)
 80016d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016da:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001750 <HAL_InitTick+0xe8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001750 <HAL_InitTick+0xe8>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <HAL_InitTick+0xe8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016ee:	4818      	ldr	r0, [pc, #96]	@ (8001750 <HAL_InitTick+0xe8>)
 80016f0:	f002 ffc4 	bl	800467c <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016fa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d11b      	bne.n	800173a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001702:	4813      	ldr	r0, [pc, #76]	@ (8001750 <HAL_InitTick+0xe8>)
 8001704:	f003 f81c 	bl	8004740 <HAL_TIM_Base_Start_IT>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800170e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001712:	2b00      	cmp	r3, #0
 8001714:	d111      	bne.n	800173a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001716:	2036      	movs	r0, #54	@ 0x36
 8001718:	f000 fb22 	bl	8001d60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b0f      	cmp	r3, #15
 8001720:	d808      	bhi.n	8001734 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001722:	2200      	movs	r2, #0
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	2036      	movs	r0, #54	@ 0x36
 8001728:	f000 fafe 	bl	8001d28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_InitTick+0xf0>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	e002      	b.n	800173a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800173a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800173e:	4618      	mov	r0, r3
 8001740:	3738      	adds	r7, #56	@ 0x38
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000
 800174c:	431bde83 	.word	0x431bde83
 8001750:	20000aac 	.word	0x20000aac
 8001754:	40001000 	.word	0x40001000
 8001758:	20000004 	.word	0x20000004

0800175c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <NMI_Handler+0x4>

08001764 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	bf00      	nop
 8001772:	e7fd      	b.n	8001770 <MemManage_Handler+0x4>

08001774 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <BusFault_Handler+0x4>

0800177c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001780:	bf00      	nop
 8001782:	e7fd      	b.n	8001780 <UsageFault_Handler+0x4>

08001784 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001796:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800179a:	f000 fcd9 	bl	8002150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017aa:	f000 fcd1 	bl	8002150 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <TIM6_DAC_IRQHandler+0x10>)
 80017ba:	f003 f831 	bl	8004820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000aac 	.word	0x20000aac

080017c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_kill>:

int _kill(int pid, int sig)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017e2:	4b05      	ldr	r3, [pc, #20]	@ (80017f8 <_kill+0x20>)
 80017e4:	2216      	movs	r2, #22
 80017e6:	601a      	str	r2, [r3, #0]
  return -1;
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	20015234 	.word	0x20015234

080017fc <_exit>:

void _exit (int status)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ffe5 	bl	80017d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800180e:	bf00      	nop
 8001810:	e7fd      	b.n	800180e <_exit+0x12>

08001812 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	2300      	movs	r3, #0
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	e00a      	b.n	800183a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001824:	f3af 8000 	nop.w
 8001828:	4601      	mov	r1, r0
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	1c5a      	adds	r2, r3, #1
 800182e:	60ba      	str	r2, [r7, #8]
 8001830:	b2ca      	uxtb	r2, r1
 8001832:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	3301      	adds	r3, #1
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	429a      	cmp	r2, r3
 8001840:	dbf0      	blt.n	8001824 <_read+0x12>
  }

  return len;
 8001842:	687b      	ldr	r3, [r7, #4]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	e009      	b.n	8001872 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	1c5a      	adds	r2, r3, #1
 8001862:	60ba      	str	r2, [r7, #8]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	3301      	adds	r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	429a      	cmp	r2, r3
 8001878:	dbf1      	blt.n	800185e <_write+0x12>
  }
  return len;
 800187a:	687b      	ldr	r3, [r7, #4]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_close>:

int _close(int file)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018ac:	605a      	str	r2, [r3, #4]
  return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <_isatty>:

int _isatty(int file)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018c4:	2301      	movs	r3, #1
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b085      	sub	sp, #20
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	@ (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	@ (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	@ (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	@ (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d205      	bcs.n	8001928 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <_sbrk+0x6c>)
 800191e:	220c      	movs	r2, #12
 8001920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	e009      	b.n	800193c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001928:	4b09      	ldr	r3, [pc, #36]	@ (8001950 <_sbrk+0x64>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800192e:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <_sbrk+0x64>)
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4413      	add	r3, r2
 8001936:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <_sbrk+0x64>)
 8001938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193a:	68fb      	ldr	r3, [r7, #12]
}
 800193c:	4618      	mov	r0, r3
 800193e:	371c      	adds	r7, #28
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	20018000 	.word	0x20018000
 800194c:	00000400 	.word	0x00000400
 8001950:	20000af8 	.word	0x20000af8
 8001954:	20015388 	.word	0x20015388
 8001958:	20015234 	.word	0x20015234

0800195c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <SystemInit+0x20>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <SystemInit+0x20>)
 8001968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800196c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <tcpecho_init>:
#define TCPECHO_THREAD_PRIO	0 	//osPriorityNormal

static void tcpecho_thread(void *arg);

void tcpecho_init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af02      	add	r7, sp, #8
	sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800198e:	2200      	movs	r2, #0
 8001990:	4903      	ldr	r1, [pc, #12]	@ (80019a0 <tcpecho_init+0x20>)
 8001992:	4804      	ldr	r0, [pc, #16]	@ (80019a4 <tcpecho_init+0x24>)
 8001994:	f016 fb70 	bl	8018078 <sys_thread_new>
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	080019a9 	.word	0x080019a9
 80019a4:	080191a0 	.word	0x080191a0

080019a8 <tcpecho_thread>:

static void tcpecho_thread(void *arg)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	@ 0x30
 80019ac:	af02      	add	r7, sp, #8
 80019ae:	6078      	str	r0, [r7, #4]
  err_t recv_err;

  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2010      	movs	r0, #16
 80019b6:	f007 fa19 	bl	8008dec <netconn_new_with_proto_and_callback>
 80019ba:	6238      	str	r0, [r7, #32]

  if (conn!=NULL)
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d060      	beq.n	8001a84 <tcpecho_thread+0xdc>
  {
    /* Bind connection to port number 7. */
    err = netconn_bind(conn, NULL, 7);
 80019c2:	2207      	movs	r2, #7
 80019c4:	2100      	movs	r1, #0
 80019c6:	6a38      	ldr	r0, [r7, #32]
 80019c8:	f007 faca 	bl	8008f60 <netconn_bind>
 80019cc:	4603      	mov	r3, r0
 80019ce:	77fb      	strb	r3, [r7, #31]

    if (err == ERR_OK)
 80019d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d14d      	bne.n	8001a74 <tcpecho_thread+0xcc>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80019d8:	21ff      	movs	r1, #255	@ 0xff
 80019da:	6a38      	ldr	r0, [r7, #32]
 80019dc:	f007 faf8 	bl	8008fd0 <netconn_listen_with_backlog>

      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80019e0:	f107 0318 	add.w	r3, r7, #24
 80019e4:	4619      	mov	r1, r3
 80019e6:	6a38      	ldr	r0, [r7, #32]
 80019e8:	f007 fb1e 	bl	8009028 <netconn_accept>
 80019ec:	4603      	mov	r3, r0
 80019ee:	77bb      	strb	r3, [r7, #30]

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 80019f0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f3      	bne.n	80019e0 <tcpecho_thread+0x38>
        {
          recv_err = netconn_recv(newconn, &buf);
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	f107 0214 	add.w	r2, r7, #20
 80019fe:	4611      	mov	r1, r2
 8001a00:	4618      	mov	r0, r3
 8001a02:	f007 fd19 	bl	8009438 <netconn_recv>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					while ( recv_err == ERR_OK)
 8001a0c:	e025      	b.n	8001a5a <tcpecho_thread+0xb2>
          {
            do
            {
            	netbuf_data(buf, &data, &len);
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f107 020e 	add.w	r2, r7, #14
 8001a14:	f107 0110 	add.w	r1, r7, #16
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f009 faa9 	bl	800af70 <netbuf_data>
            	netconn_write(newconn, data, len, NETCONN_COPY);
 8001a1e:	69b8      	ldr	r0, [r7, #24]
 8001a20:	6939      	ldr	r1, [r7, #16]
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	461a      	mov	r2, r3
 8001a26:	2300      	movs	r3, #0
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f007 fd7e 	bl	800952c <netconn_write_partly>

            }
            while (netbuf_next(buf) >= 0);
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f009 fae6 	bl	800b004 <netbuf_next>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dae7      	bge.n	8001a0e <tcpecho_thread+0x66>

            netbuf_delete(buf);
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f009 fa75 	bl	800af30 <netbuf_delete>
            recv_err = netconn_recv(newconn, &buf);
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f107 0214 	add.w	r2, r7, #20
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 fcf2 	bl	8009438 <netconn_recv>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					while ( recv_err == ERR_OK)
 8001a5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0d5      	beq.n	8001a0e <tcpecho_thread+0x66>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f007 fe63 	bl	8009730 <netconn_close>
          netconn_delete(newconn);
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fa5b 	bl	8008f28 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8001a72:	e7b5      	b.n	80019e0 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f007 fa56 	bl	8008f28 <netconn_delete>
      printf(" can not bind TCP netconn");
 8001a7c:	4805      	ldr	r0, [pc, #20]	@ (8001a94 <tcpecho_thread+0xec>)
 8001a7e:	f016 fc3f 	bl	8018300 <iprintf>
  }
  else
  {
    printf("can not create TCP netconn");
  }
}
 8001a82:	e002      	b.n	8001a8a <tcpecho_thread+0xe2>
    printf("can not create TCP netconn");
 8001a84:	4804      	ldr	r0, [pc, #16]	@ (8001a98 <tcpecho_thread+0xf0>)
 8001a86:	f016 fc3b 	bl	8018300 <iprintf>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	080191b0 	.word	0x080191b0
 8001a98:	080191cc 	.word	0x080191cc

08001a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001aa0:	f7ff ff5c 	bl	800195c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aa4:	480c      	ldr	r0, [pc, #48]	@ (8001ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001aa6:	490d      	ldr	r1, [pc, #52]	@ (8001adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ae0 <LoopForever+0xe>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001abc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ae8 <LoopForever+0x16>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aca:	f016 fccd 	bl	8018468 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ace:	f7ff fac5 	bl	800105c <main>

08001ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ad2:	e7fe      	b.n	8001ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ad4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001adc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ae0:	0801cca8 	.word	0x0801cca8
  ldr r2, =_sbss
 8001ae4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ae8:	20015384 	.word	0x20015384

08001aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001aec:	e7fe      	b.n	8001aec <ADC1_2_IRQHandler>
	...

08001af0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_Init+0x3c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <HAL_Init+0x3c>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b04:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b06:	2003      	movs	r0, #3
 8001b08:	f000 f903 	bl	8001d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b0c:	200f      	movs	r0, #15
 8001b0e:	f7ff fdab 	bl	8001668 <HAL_InitTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	71fb      	strb	r3, [r7, #7]
 8001b1c:	e001      	b.n	8001b22 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b1e:	f7ff fcbd 	bl	800149c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b22:	79fb      	ldrb	r3, [r7, #7]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40022000 	.word	0x40022000

08001b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_IncTick+0x20>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4413      	add	r3, r2
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_IncTick+0x24>)
 8001b42:	6013      	str	r3, [r2, #0]
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	20000008 	.word	0x20000008
 8001b54:	20000afc 	.word	0x20000afc

08001b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <HAL_GetTick+0x14>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000afc 	.word	0x20000afc

08001b70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b80:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba2:	4a04      	ldr	r2, [pc, #16]	@ (8001bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	60d3      	str	r3, [r2, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bbc:	4b04      	ldr	r3, [pc, #16]	@ (8001bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	0a1b      	lsrs	r3, r3, #8
 8001bc2:	f003 0307 	and.w	r3, r3, #7
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	db0b      	blt.n	8001bfe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	f003 021f 	and.w	r2, r3, #31
 8001bec:	4907      	ldr	r1, [pc, #28]	@ (8001c0c <__NVIC_EnableIRQ+0x38>)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	095b      	lsrs	r3, r3, #5
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000e100 	.word	0xe000e100

08001c10 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	db12      	blt.n	8001c48 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	f003 021f 	and.w	r2, r3, #31
 8001c28:	490a      	ldr	r1, [pc, #40]	@ (8001c54 <__NVIC_DisableIRQ+0x44>)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	095b      	lsrs	r3, r3, #5
 8001c30:	2001      	movs	r0, #1
 8001c32:	fa00 f202 	lsl.w	r2, r0, r2
 8001c36:	3320      	adds	r3, #32
 8001c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3c:	f3bf 8f4f 	dsb	sy
}
 8001c40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c42:	f3bf 8f6f 	isb	sy
}
 8001c46:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000e100 	.word	0xe000e100

08001c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	6039      	str	r1, [r7, #0]
 8001c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	db0a      	blt.n	8001c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	490c      	ldr	r1, [pc, #48]	@ (8001ca4 <__NVIC_SetPriority+0x4c>)
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	0112      	lsls	r2, r2, #4
 8001c78:	b2d2      	uxtb	r2, r2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c80:	e00a      	b.n	8001c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	b2da      	uxtb	r2, r3
 8001c86:	4908      	ldr	r1, [pc, #32]	@ (8001ca8 <__NVIC_SetPriority+0x50>)
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	f003 030f 	and.w	r3, r3, #15
 8001c8e:	3b04      	subs	r3, #4
 8001c90:	0112      	lsls	r2, r2, #4
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	440b      	add	r3, r1
 8001c96:	761a      	strb	r2, [r3, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000e100 	.word	0xe000e100
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	@ 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f1c3 0307 	rsb	r3, r3, #7
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	bf28      	it	cs
 8001cca:	2304      	movcs	r3, #4
 8001ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	2b06      	cmp	r3, #6
 8001cd4:	d902      	bls.n	8001cdc <NVIC_EncodePriority+0x30>
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	3b03      	subs	r3, #3
 8001cda:	e000      	b.n	8001cde <NVIC_EncodePriority+0x32>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	401a      	ands	r2, r3
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001cfe:	43d9      	mvns	r1, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d04:	4313      	orrs	r3, r2
         );
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3724      	adds	r7, #36	@ 0x24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff ff28 	bl	8001b70 <__NVIC_SetPriorityGrouping>
}
 8001d20:	bf00      	nop
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3a:	f7ff ff3d 	bl	8001bb8 <__NVIC_GetPriorityGrouping>
 8001d3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	68b9      	ldr	r1, [r7, #8]
 8001d44:	6978      	ldr	r0, [r7, #20]
 8001d46:	f7ff ffb1 	bl	8001cac <NVIC_EncodePriority>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d50:	4611      	mov	r1, r2
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff ff80 	bl	8001c58 <__NVIC_SetPriority>
}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff30 	bl	8001bd4 <__NVIC_EnableIRQ>
}
 8001d74:	bf00      	nop
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff40 	bl	8001c10 <__NVIC_DisableIRQ>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da6:	e17f      	b.n	80020a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2101      	movs	r1, #1
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	fa01 f303 	lsl.w	r3, r1, r3
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 8171 	beq.w	80020a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f003 0303 	and.w	r3, r3, #3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d005      	beq.n	8001dd8 <HAL_GPIO_Init+0x40>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d130      	bne.n	8001e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	2203      	movs	r2, #3
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e0e:	2201      	movs	r2, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43db      	mvns	r3, r3
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0201 	and.w	r2, r3, #1
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d118      	bne.n	8001e78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	08db      	lsrs	r3, r3, #3
 8001e62:	f003 0201 	and.w	r2, r3, #1
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d017      	beq.n	8001eb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	2203      	movs	r2, #3
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d123      	bne.n	8001f08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	08da      	lsrs	r2, r3, #3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3208      	adds	r2, #8
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	220f      	movs	r2, #15
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691a      	ldr	r2, [r3, #16]
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	08da      	lsrs	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3208      	adds	r2, #8
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	2203      	movs	r2, #3
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f003 0203 	and.w	r2, r3, #3
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	f000 80ac 	beq.w	80020a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4a:	4b5f      	ldr	r3, [pc, #380]	@ (80020c8 <HAL_GPIO_Init+0x330>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f4e:	4a5e      	ldr	r2, [pc, #376]	@ (80020c8 <HAL_GPIO_Init+0x330>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f56:	4b5c      	ldr	r3, [pc, #368]	@ (80020c8 <HAL_GPIO_Init+0x330>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f62:	4a5a      	ldr	r2, [pc, #360]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4013      	ands	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f8c:	d025      	beq.n	8001fda <HAL_GPIO_Init+0x242>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4f      	ldr	r2, [pc, #316]	@ (80020d0 <HAL_GPIO_Init+0x338>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01f      	beq.n	8001fd6 <HAL_GPIO_Init+0x23e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4e      	ldr	r2, [pc, #312]	@ (80020d4 <HAL_GPIO_Init+0x33c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d019      	beq.n	8001fd2 <HAL_GPIO_Init+0x23a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80020d8 <HAL_GPIO_Init+0x340>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <HAL_GPIO_Init+0x236>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80020dc <HAL_GPIO_Init+0x344>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00d      	beq.n	8001fca <HAL_GPIO_Init+0x232>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80020e0 <HAL_GPIO_Init+0x348>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d007      	beq.n	8001fc6 <HAL_GPIO_Init+0x22e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <HAL_GPIO_Init+0x34c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d101      	bne.n	8001fc2 <HAL_GPIO_Init+0x22a>
 8001fbe:	2306      	movs	r3, #6
 8001fc0:	e00c      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fc2:	2307      	movs	r3, #7
 8001fc4:	e00a      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fc6:	2305      	movs	r3, #5
 8001fc8:	e008      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fca:	2304      	movs	r3, #4
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e004      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	e002      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_GPIO_Init+0x244>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	f002 0203 	and.w	r2, r2, #3
 8001fe2:	0092      	lsls	r2, r2, #2
 8001fe4:	4093      	lsls	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fec:	4937      	ldr	r1, [pc, #220]	@ (80020cc <HAL_GPIO_Init+0x334>)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	089b      	lsrs	r3, r3, #2
 8001ff2:	3302      	adds	r3, #2
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800201e:	4a32      	ldr	r2, [pc, #200]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002024:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	43db      	mvns	r3, r3
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	4013      	ands	r3, r2
 8002032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	4313      	orrs	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002048:	4a27      	ldr	r2, [pc, #156]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800204e:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	43db      	mvns	r3, r3
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	4013      	ands	r3, r2
 800205c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002072:	4a1d      	ldr	r2, [pc, #116]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d003      	beq.n	800209c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4313      	orrs	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800209c:	4a12      	ldr	r2, [pc, #72]	@ (80020e8 <HAL_GPIO_Init+0x350>)
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3301      	adds	r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	fa22 f303 	lsr.w	r3, r2, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f47f ae78 	bne.w	8001da8 <HAL_GPIO_Init+0x10>
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	371c      	adds	r7, #28
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40010000 	.word	0x40010000
 80020d0:	48000400 	.word	0x48000400
 80020d4:	48000800 	.word	0x48000800
 80020d8:	48000c00 	.word	0x48000c00
 80020dc:	48001000 	.word	0x48001000
 80020e0:	48001400 	.word	0x48001400
 80020e4:	48001800 	.word	0x48001800
 80020e8:	40010400 	.word	0x40010400

080020ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	807b      	strh	r3, [r7, #2]
 80020f8:	4613      	mov	r3, r2
 80020fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020fc:	787b      	ldrb	r3, [r7, #1]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002102:	887a      	ldrh	r2, [r7, #2]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002108:	e002      	b.n	8002110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800210a:	887a      	ldrh	r2, [r7, #2]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4013      	ands	r3, r2
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	43d9      	mvns	r1, r3
 800213a:	887b      	ldrh	r3, [r7, #2]
 800213c:	400b      	ands	r3, r1
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	619a      	str	r2, [r3, #24]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	4013      	ands	r3, r2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d006      	beq.n	8002174 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f91a 	bl	80013a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002184:	4b04      	ldr	r3, [pc, #16]	@ (8002198 <HAL_PWREx_GetVoltageRange+0x18>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021aa:	d130      	bne.n	800220e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ac:	4b23      	ldr	r3, [pc, #140]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b8:	d038      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ba:	4b20      	ldr	r3, [pc, #128]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021c2:	4a1e      	ldr	r2, [pc, #120]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002240 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2232      	movs	r2, #50	@ 0x32
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021d6:	fba2 2303 	umull	r2, r3, r2, r3
 80021da:	0c9b      	lsrs	r3, r3, #18
 80021dc:	3301      	adds	r3, #1
 80021de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e0:	e002      	b.n	80021e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	3b01      	subs	r3, #1
 80021e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021f4:	d102      	bne.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f2      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002208:	d110      	bne.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e00f      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800221a:	d007      	beq.n	800222c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002224:	4a05      	ldr	r2, [pc, #20]	@ (800223c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002226:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800222a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40007000 	.word	0x40007000
 8002240:	20000000 	.word	0x20000000
 8002244:	431bde83 	.word	0x431bde83

08002248 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e3ca      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b97      	ldr	r3, [pc, #604]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002264:	4b94      	ldr	r3, [pc, #592]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	f003 0303 	and.w	r3, r3, #3
 800226c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0310 	and.w	r3, r3, #16
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80e4 	beq.w	8002444 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <HAL_RCC_OscConfig+0x4a>
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2b0c      	cmp	r3, #12
 8002286:	f040 808b 	bne.w	80023a0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b01      	cmp	r3, #1
 800228e:	f040 8087 	bne.w	80023a0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002292:	4b89      	ldr	r3, [pc, #548]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_RCC_OscConfig+0x62>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e3a2      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1a      	ldr	r2, [r3, #32]
 80022ae:	4b82      	ldr	r3, [pc, #520]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d004      	beq.n	80022c4 <HAL_RCC_OscConfig+0x7c>
 80022ba:	4b7f      	ldr	r3, [pc, #508]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c2:	e005      	b.n	80022d0 <HAL_RCC_OscConfig+0x88>
 80022c4:	4b7c      	ldr	r3, [pc, #496]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ca:	091b      	lsrs	r3, r3, #4
 80022cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d223      	bcs.n	800231c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fd87 	bl	8002dec <RCC_SetFlashLatencyFromMSIRange>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e383      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4b73      	ldr	r3, [pc, #460]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a72      	ldr	r2, [pc, #456]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b70      	ldr	r3, [pc, #448]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	496d      	ldr	r1, [pc, #436]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	4b6c      	ldr	r3, [pc, #432]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	4968      	ldr	r1, [pc, #416]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]
 800231a:	e025      	b.n	8002368 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800231c:	4b66      	ldr	r3, [pc, #408]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a65      	ldr	r2, [pc, #404]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4960      	ldr	r1, [pc, #384]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800233a:	4b5f      	ldr	r3, [pc, #380]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	495b      	ldr	r1, [pc, #364]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800234a:	4313      	orrs	r3, r2
 800234c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d109      	bne.n	8002368 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	4618      	mov	r0, r3
 800235a:	f000 fd47 	bl	8002dec <RCC_SetFlashLatencyFromMSIRange>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e343      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002368:	f000 fc4a 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b52      	ldr	r3, [pc, #328]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	4950      	ldr	r1, [pc, #320]	@ (80024bc <HAL_RCC_OscConfig+0x274>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	4a4e      	ldr	r2, [pc, #312]	@ (80024c0 <HAL_RCC_OscConfig+0x278>)
 8002386:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002388:	4b4e      	ldr	r3, [pc, #312]	@ (80024c4 <HAL_RCC_OscConfig+0x27c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f7ff f96b 	bl	8001668 <HAL_InitTick>
 8002392:	4603      	mov	r3, r0
 8002394:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d052      	beq.n	8002442 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	e327      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d032      	beq.n	800240e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023a8:	4b43      	ldr	r3, [pc, #268]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a42      	ldr	r2, [pc, #264]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b4:	f7ff fbd0 	bl	8001b58 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023bc:	f7ff fbcc 	bl	8001b58 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e310      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ce:	4b3a      	ldr	r3, [pc, #232]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4931      	ldr	r1, [pc, #196]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023f8:	4b2f      	ldr	r3, [pc, #188]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	492c      	ldr	r1, [pc, #176]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
 800240c:	e01a      	b.n	8002444 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a29      	ldr	r2, [pc, #164]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002414:	f023 0301 	bic.w	r3, r3, #1
 8002418:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800241a:	f7ff fb9d 	bl	8001b58 <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002422:	f7ff fb99 	bl	8001b58 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e2dd      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002434:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x1da>
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002442:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d074      	beq.n	800253a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x21a>
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	2b0c      	cmp	r3, #12
 800245a:	d10e      	bne.n	800247a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b03      	cmp	r3, #3
 8002460:	d10b      	bne.n	800247a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002462:	4b15      	ldr	r3, [pc, #84]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d064      	beq.n	8002538 <HAL_RCC_OscConfig+0x2f0>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d160      	bne.n	8002538 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e2ba      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002482:	d106      	bne.n	8002492 <HAL_RCC_OscConfig+0x24a>
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800248a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248e:	6013      	str	r3, [r2, #0]
 8002490:	e026      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800249a:	d115      	bne.n	80024c8 <HAL_RCC_OscConfig+0x280>
 800249c:	4b06      	ldr	r3, [pc, #24]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024a6:	6013      	str	r3, [r2, #0]
 80024a8:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a02      	ldr	r2, [pc, #8]	@ (80024b8 <HAL_RCC_OscConfig+0x270>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e014      	b.n	80024e0 <HAL_RCC_OscConfig+0x298>
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	0801ca2c 	.word	0x0801ca2c
 80024c0:	20000000 	.word	0x20000000
 80024c4:	20000004 	.word	0x20000004
 80024c8:	4ba0      	ldr	r3, [pc, #640]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a9f      	ldr	r2, [pc, #636]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80024ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	4b9d      	ldr	r3, [pc, #628]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a9c      	ldr	r2, [pc, #624]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80024da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d013      	beq.n	8002510 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7ff fb36 	bl	8001b58 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024f0:	f7ff fb32 	bl	8001b58 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	@ 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e276      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002502:	4b92      	ldr	r3, [pc, #584]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x2a8>
 800250e:	e014      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff fb22 	bl	8001b58 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002518:	f7ff fb1e 	bl	8001b58 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b64      	cmp	r3, #100	@ 0x64
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e262      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800252a:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x2d0>
 8002536:	e000      	b.n	800253a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d060      	beq.n	8002608 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	2b04      	cmp	r3, #4
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x310>
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d119      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b02      	cmp	r3, #2
 8002556:	d116      	bne.n	8002586 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002558:	4b7c      	ldr	r3, [pc, #496]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_OscConfig+0x328>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e23f      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b76      	ldr	r3, [pc, #472]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	061b      	lsls	r3, r3, #24
 800257e:	4973      	ldr	r1, [pc, #460]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002580:	4313      	orrs	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002584:	e040      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d023      	beq.n	80025d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800258e:	4b6f      	ldr	r3, [pc, #444]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a6e      	ldr	r2, [pc, #440]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800259a:	f7ff fadd 	bl	8001b58 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a2:	f7ff fad9 	bl	8001b58 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e21d      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b4:	4b65      	ldr	r3, [pc, #404]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b62      	ldr	r3, [pc, #392]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	061b      	lsls	r3, r3, #24
 80025ce:	495f      	ldr	r1, [pc, #380]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	604b      	str	r3, [r1, #4]
 80025d4:	e018      	b.n	8002608 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d6:	4b5d      	ldr	r3, [pc, #372]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a5c      	ldr	r2, [pc, #368]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80025dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7ff fab9 	bl	8001b58 <HAL_GetTick>
 80025e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025e8:	e008      	b.n	80025fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025ea:	f7ff fab5 	bl	8001b58 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e1f9      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025fc:	4b53      	ldr	r3, [pc, #332]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f0      	bne.n	80025ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0308 	and.w	r3, r3, #8
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03c      	beq.n	800268e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	695b      	ldr	r3, [r3, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800261c:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 800261e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002622:	4a4a      	ldr	r2, [pc, #296]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff fa94 	bl	8001b58 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002634:	f7ff fa90 	bl	8001b58 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e1d4      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002646:	4b41      	ldr	r3, [pc, #260]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x3ec>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002656:	4b3d      	ldr	r3, [pc, #244]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800265c:	4a3b      	ldr	r2, [pc, #236]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7ff fa77 	bl	8001b58 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800266e:	f7ff fa73 	bl	8001b58 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e1b7      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002680:	4b32      	ldr	r3, [pc, #200]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	f000 80a6 	beq.w	80027e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800269c:	2300      	movs	r3, #0
 800269e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026a0:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80026a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10d      	bne.n	80026c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80026ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b0:	4a26      	ldr	r2, [pc, #152]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80026b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 80026ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c0:	60bb      	str	r3, [r7, #8]
 80026c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026c4:	2301      	movs	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c8:	4b21      	ldr	r3, [pc, #132]	@ (8002750 <HAL_RCC_OscConfig+0x508>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d118      	bne.n	8002706 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <HAL_RCC_OscConfig+0x508>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_RCC_OscConfig+0x508>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026e0:	f7ff fa3a 	bl	8001b58 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e8:	f7ff fa36 	bl	8001b58 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e17a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <HAL_RCC_OscConfig+0x508>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d108      	bne.n	8002720 <HAL_RCC_OscConfig+0x4d8>
 800270e:	4b0f      	ldr	r3, [pc, #60]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002714:	4a0d      	ldr	r2, [pc, #52]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800271e:	e029      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b05      	cmp	r3, #5
 8002726:	d115      	bne.n	8002754 <HAL_RCC_OscConfig+0x50c>
 8002728:	4b08      	ldr	r3, [pc, #32]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002730:	f043 0304 	orr.w	r3, r3, #4
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800273e:	4a03      	ldr	r2, [pc, #12]	@ (800274c <HAL_RCC_OscConfig+0x504>)
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002748:	e014      	b.n	8002774 <HAL_RCC_OscConfig+0x52c>
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	4b9c      	ldr	r3, [pc, #624]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800275a:	4a9b      	ldr	r2, [pc, #620]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002764:	4b98      	ldr	r3, [pc, #608]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	4a97      	ldr	r2, [pc, #604]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d016      	beq.n	80027aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277c:	f7ff f9ec 	bl	8001b58 <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002784:	f7ff f9e8 	bl	8001b58 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002792:	4293      	cmp	r3, r2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e12a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800279a:	4b8b      	ldr	r3, [pc, #556]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d0ed      	beq.n	8002784 <HAL_RCC_OscConfig+0x53c>
 80027a8:	e015      	b.n	80027d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027aa:	f7ff f9d5 	bl	8001b58 <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b0:	e00a      	b.n	80027c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b2:	f7ff f9d1 	bl	8001b58 <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e113      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027c8:	4b7f      	ldr	r3, [pc, #508]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ed      	bne.n	80027b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027d6:	7ffb      	ldrb	r3, [r7, #31]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d105      	bne.n	80027e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027dc:	4b7a      	ldr	r3, [pc, #488]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e0:	4a79      	ldr	r2, [pc, #484]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80fe 	beq.w	80029ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f040 80d0 	bne.w	800299c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027fc:	4b72      	ldr	r3, [pc, #456]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280c:	429a      	cmp	r2, r3
 800280e:	d130      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	3b01      	subs	r3, #1
 800281c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d127      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d11f      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800283c:	2a07      	cmp	r2, #7
 800283e:	bf14      	ite	ne
 8002840:	2201      	movne	r2, #1
 8002842:	2200      	moveq	r2, #0
 8002844:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002846:	4293      	cmp	r3, r2
 8002848:	d113      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	3b01      	subs	r3, #1
 8002858:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800285a:	429a      	cmp	r2, r3
 800285c:	d109      	bne.n	8002872 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d06e      	beq.n	8002950 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b0c      	cmp	r3, #12
 8002876:	d069      	beq.n	800294c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002884:	4b50      	ldr	r3, [pc, #320]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0ad      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002894:	4b4c      	ldr	r3, [pc, #304]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800289a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800289e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028a0:	f7ff f95a 	bl	8001b58 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7ff f956 	bl	8001b58 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e09a      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ba:	4b43      	ldr	r3, [pc, #268]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c6:	4b40      	ldr	r3, [pc, #256]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b40      	ldr	r3, [pc, #256]	@ (80029cc <HAL_RCC_OscConfig+0x784>)
 80028cc:	4013      	ands	r3, r2
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80028d6:	3a01      	subs	r2, #1
 80028d8:	0112      	lsls	r2, r2, #4
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80028e0:	0212      	lsls	r2, r2, #8
 80028e2:	4311      	orrs	r1, r2
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028e8:	0852      	lsrs	r2, r2, #1
 80028ea:	3a01      	subs	r2, #1
 80028ec:	0552      	lsls	r2, r2, #21
 80028ee:	4311      	orrs	r1, r2
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028f4:	0852      	lsrs	r2, r2, #1
 80028f6:	3a01      	subs	r2, #1
 80028f8:	0652      	lsls	r2, r2, #25
 80028fa:	4311      	orrs	r1, r2
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002900:	0912      	lsrs	r2, r2, #4
 8002902:	0452      	lsls	r2, r2, #17
 8002904:	430a      	orrs	r2, r1
 8002906:	4930      	ldr	r1, [pc, #192]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002908:	4313      	orrs	r3, r2
 800290a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800290c:	4b2e      	ldr	r3, [pc, #184]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a2d      	ldr	r2, [pc, #180]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002918:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a2a      	ldr	r2, [pc, #168]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002922:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002924:	f7ff f918 	bl	8001b58 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800292c:	f7ff f914 	bl	8001b58 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e058      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293e:	4b22      	ldr	r3, [pc, #136]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800294a:	e050      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e04f      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002950:	4b1d      	ldr	r3, [pc, #116]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d148      	bne.n	80029ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800295c:	4b1a      	ldr	r3, [pc, #104]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a19      	ldr	r2, [pc, #100]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002966:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a16      	ldr	r2, [pc, #88]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 800296e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002972:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002974:	f7ff f8f0 	bl	8001b58 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297c:	f7ff f8ec 	bl	8001b58 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e030      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800298e:	4b0e      	ldr	r3, [pc, #56]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0f0      	beq.n	800297c <HAL_RCC_OscConfig+0x734>
 800299a:	e028      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d023      	beq.n	80029ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b09      	ldr	r3, [pc, #36]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a08      	ldr	r2, [pc, #32]	@ (80029c8 <HAL_RCC_OscConfig+0x780>)
 80029a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7ff f8d3 	bl	8001b58 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	e00c      	b.n	80029d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b6:	f7ff f8cf 	bl	8001b58 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d905      	bls.n	80029d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e013      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
 80029c8:	40021000 	.word	0x40021000
 80029cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1ec      	bne.n	80029b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029dc:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	4905      	ldr	r1, [pc, #20]	@ (80029f8 <HAL_RCC_OscConfig+0x7b0>)
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_OscConfig+0x7b4>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	60cb      	str	r3, [r1, #12]
 80029e8:	e001      	b.n	80029ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40021000 	.word	0x40021000
 80029fc:	feeefffc 	.word	0xfeeefffc

08002a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e0e7      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a14:	4b75      	ldr	r3, [pc, #468]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d910      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a22:	4b72      	ldr	r3, [pc, #456]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 0207 	bic.w	r2, r3, #7
 8002a2a:	4970      	ldr	r1, [pc, #448]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b6e      	ldr	r3, [pc, #440]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0cf      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	4b66      	ldr	r3, [pc, #408]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d908      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b63      	ldr	r3, [pc, #396]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4960      	ldr	r1, [pc, #384]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d04c      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	4b5a      	ldr	r3, [pc, #360]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d121      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0a6      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9e:	4b54      	ldr	r3, [pc, #336]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d115      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e09a      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ab6:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d109      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e08e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac6:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e086      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ad6:	4b46      	ldr	r3, [pc, #280]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f023 0203 	bic.w	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	4943      	ldr	r1, [pc, #268]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae8:	f7ff f836 	bl	8001b58 <HAL_GetTick>
 8002aec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	e00a      	b.n	8002b06 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002af0:	f7ff f832 	bl	8001b58 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e06e      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 020c 	and.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d1eb      	bne.n	8002af0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d010      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	4b31      	ldr	r3, [pc, #196]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d208      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b2e      	ldr	r3, [pc, #184]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	492b      	ldr	r1, [pc, #172]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b46:	4b29      	ldr	r3, [pc, #164]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d210      	bcs.n	8002b76 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b54:	4b25      	ldr	r3, [pc, #148]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f023 0207 	bic.w	r2, r3, #7
 8002b5c:	4923      	ldr	r1, [pc, #140]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b64:	4b21      	ldr	r3, [pc, #132]	@ (8002bec <HAL_RCC_ClockConfig+0x1ec>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d001      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e036      	b.n	8002be4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b82:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	4918      	ldr	r1, [pc, #96]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba0:	4b13      	ldr	r3, [pc, #76]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4910      	ldr	r1, [pc, #64]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bb4:	f000 f824 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	4b0d      	ldr	r3, [pc, #52]	@ (8002bf0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	f003 030f 	and.w	r3, r3, #15
 8002bc4:	490b      	ldr	r1, [pc, #44]	@ (8002bf4 <HAL_RCC_ClockConfig+0x1f4>)
 8002bc6:	5ccb      	ldrb	r3, [r1, r3]
 8002bc8:	f003 031f 	and.w	r3, r3, #31
 8002bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd0:	4a09      	ldr	r2, [pc, #36]	@ (8002bf8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bd4:	4b09      	ldr	r3, [pc, #36]	@ (8002bfc <HAL_RCC_ClockConfig+0x1fc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7fe fd45 	bl	8001668 <HAL_InitTick>
 8002bde:	4603      	mov	r3, r0
 8002be0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002be2:	7afb      	ldrb	r3, [r7, #11]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40022000 	.word	0x40022000
 8002bf0:	40021000 	.word	0x40021000
 8002bf4:	0801ca2c 	.word	0x0801ca2c
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000004 	.word	0x20000004

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b089      	sub	sp, #36	@ 0x24
 8002c04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c18:	4b3b      	ldr	r3, [pc, #236]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d005      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	2b0c      	cmp	r3, #12
 8002c2c:	d121      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d11e      	bne.n	8002c72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c34:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c46:	0a1b      	lsrs	r3, r3, #8
 8002c48:	f003 030f 	and.w	r3, r3, #15
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e005      	b.n	8002c5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c50:	4b2d      	ldr	r3, [pc, #180]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c5c:	4a2b      	ldr	r2, [pc, #172]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10d      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	2b04      	cmp	r3, #4
 8002c76:	d102      	bne.n	8002c7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c78:	4b25      	ldr	r3, [pc, #148]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	e004      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	2b08      	cmp	r3, #8
 8002c82:	d101      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c84:	4b23      	ldr	r3, [pc, #140]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b0c      	cmp	r3, #12
 8002c8c:	d134      	bne.n	8002cf8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f003 0303 	and.w	r3, r3, #3
 8002c96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d003      	beq.n	8002cac <HAL_RCC_GetSysClockFreq+0xac>
 8002ca4:	e005      	b.n	8002cb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ca6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ca8:	617b      	str	r3, [r7, #20]
      break;
 8002caa:	e005      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cae:	617b      	str	r3, [r7, #20]
      break;
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	617b      	str	r3, [r7, #20]
      break;
 8002cb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cb8:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	091b      	lsrs	r3, r3, #4
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	0a1b      	lsrs	r3, r3, #8
 8002ccc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	fb03 f202 	mul.w	r2, r3, r2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	0e5b      	lsrs	r3, r3, #25
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3724      	adds	r7, #36	@ 0x24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	0801ca44 	.word	0x0801ca44
 8002d10:	00f42400 	.word	0x00f42400
 8002d14:	007a1200 	.word	0x007a1200

08002d18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d1c:	4b03      	ldr	r3, [pc, #12]	@ (8002d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop
 8002d2c:	20000000 	.word	0x20000000

08002d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d34:	f7ff fff0 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	4904      	ldr	r1, [pc, #16]	@ (8002d58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d46:	5ccb      	ldrb	r3, [r1, r3]
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	0801ca3c 	.word	0x0801ca3c

08002d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d60:	f7ff ffda 	bl	8002d18 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	@ (8002d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0adb      	lsrs	r3, r3, #11
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4904      	ldr	r1, [pc, #16]	@ (8002d84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000
 8002d84:	0801ca3c 	.word	0x0801ca3c

08002d88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	220f      	movs	r2, #15
 8002d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d98:	4b12      	ldr	r3, [pc, #72]	@ (8002de4 <HAL_RCC_GetClockConfig+0x5c>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002da4:	4b0f      	ldr	r3, [pc, #60]	@ (8002de4 <HAL_RCC_GetClockConfig+0x5c>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002db0:	4b0c      	ldr	r3, [pc, #48]	@ (8002de4 <HAL_RCC_GetClockConfig+0x5c>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002dbc:	4b09      	ldr	r3, [pc, #36]	@ (8002de4 <HAL_RCC_GetClockConfig+0x5c>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	08db      	lsrs	r3, r3, #3
 8002dc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_RCC_GetClockConfig+0x60>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0207 	and.w	r2, r3, #7
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	601a      	str	r2, [r3, #0]
}
 8002dd6:	bf00      	nop
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40022000 	.word	0x40022000

08002dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002df4:	2300      	movs	r3, #0
 8002df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002df8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002e04:	f7ff f9bc 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002e08:	6178      	str	r0, [r7, #20]
 8002e0a:	e014      	b.n	8002e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e10:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e18:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002e24:	f7ff f9ac 	bl	8002180 <HAL_PWREx_GetVoltageRange>
 8002e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002e30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e3c:	d10b      	bne.n	8002e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b80      	cmp	r3, #128	@ 0x80
 8002e42:	d919      	bls.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e48:	d902      	bls.n	8002e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	e013      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e50:	2301      	movs	r3, #1
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	e010      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2b80      	cmp	r3, #128	@ 0x80
 8002e5a:	d902      	bls.n	8002e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	613b      	str	r3, [r7, #16]
 8002e60:	e00a      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2b80      	cmp	r3, #128	@ 0x80
 8002e66:	d102      	bne.n	8002e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e68:	2302      	movs	r3, #2
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	e004      	b.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b70      	cmp	r3, #112	@ 0x70
 8002e72:	d101      	bne.n	8002e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e74:	2301      	movs	r3, #1
 8002e76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 0207 	bic.w	r2, r3, #7
 8002e80:	4909      	ldr	r1, [pc, #36]	@ (8002ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e88:	4b07      	ldr	r3, [pc, #28]	@ (8002ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d001      	beq.n	8002e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e000      	b.n	8002e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40022000 	.word	0x40022000

08002eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002eb8:	2300      	movs	r3, #0
 8002eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d041      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ecc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ed0:	d02a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002ed2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ed6:	d824      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ed8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002ee2:	d81e      	bhi.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002ee8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002eec:	d010      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002eee:	e018      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ef0:	4b86      	ldr	r3, [pc, #536]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a85      	ldr	r2, [pc, #532]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002efa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002efc:	e015      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	3304      	adds	r3, #4
 8002f02:	2100      	movs	r1, #0
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fabb 	bl	8003480 <RCCEx_PLLSAI1_Config>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f0e:	e00c      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3320      	adds	r3, #32
 8002f14:	2100      	movs	r1, #0
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fba6 	bl	8003668 <RCCEx_PLLSAI2_Config>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f20:	e003      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	74fb      	strb	r3, [r7, #19]
      break;
 8002f26:	e000      	b.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002f28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f2a:	7cfb      	ldrb	r3, [r7, #19]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10b      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f30:	4b76      	ldr	r3, [pc, #472]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f3e:	4973      	ldr	r1, [pc, #460]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002f46:	e001      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d041      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f5c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f60:	d02a      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002f62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002f66:	d824      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f72:	d81e      	bhi.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002f78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f7c:	d010      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002f7e:	e018      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f80:	4b62      	ldr	r3, [pc, #392]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a61      	ldr	r2, [pc, #388]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f8a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f8c:	e015      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	3304      	adds	r3, #4
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fa73 	bl	8003480 <RCCEx_PLLSAI1_Config>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f9e:	e00c      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3320      	adds	r3, #32
 8002fa4:	2100      	movs	r1, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fb5e 	bl	8003668 <RCCEx_PLLSAI2_Config>
 8002fac:	4603      	mov	r3, r0
 8002fae:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002fb0:	e003      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	74fb      	strb	r3, [r7, #19]
      break;
 8002fb6:	e000      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002fb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fba:	7cfb      	ldrb	r3, [r7, #19]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002fc0:	4b52      	ldr	r3, [pc, #328]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002fce:	494f      	ldr	r1, [pc, #316]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002fd6:	e001      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd8:	7cfb      	ldrb	r3, [r7, #19]
 8002fda:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80a0 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fee:	4b47      	ldr	r3, [pc, #284]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ffe:	2300      	movs	r3, #0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003004:	4b41      	ldr	r3, [pc, #260]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003008:	4a40      	ldr	r2, [pc, #256]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003010:	4b3e      	ldr	r3, [pc, #248]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800301c:	2301      	movs	r3, #1
 800301e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b3b      	ldr	r3, [pc, #236]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3a      	ldr	r2, [pc, #232]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800302a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800302c:	f7fe fd94 	bl	8001b58 <HAL_GetTick>
 8003030:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003032:	e009      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003034:	f7fe fd90 	bl	8001b58 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	74fb      	strb	r3, [r7, #19]
        break;
 8003046:	e005      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003048:	4b31      	ldr	r3, [pc, #196]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0ef      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003054:	7cfb      	ldrb	r3, [r7, #19]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d15c      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800305a:	4b2c      	ldr	r3, [pc, #176]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003060:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003064:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01f      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x200>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d019      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003078:	4b24      	ldr	r3, [pc, #144]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800307a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800307e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003082:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003084:	4b21      	ldr	r3, [pc, #132]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800308a:	4a20      	ldr	r2, [pc, #128]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003090:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309a:	4a1c      	ldr	r2, [pc, #112]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030a4:	4a19      	ldr	r2, [pc, #100]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d016      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fd4f 	bl	8001b58 <HAL_GetTick>
 80030ba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030bc:	e00b      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030be:	f7fe fd4b 	bl	8001b58 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d902      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	74fb      	strb	r3, [r7, #19]
            break;
 80030d4:	e006      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030d6:	4b0d      	ldr	r3, [pc, #52]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030dc:	f003 0302 	and.w	r3, r3, #2
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ec      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80030e4:	7cfb      	ldrb	r3, [r7, #19]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10c      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030ea:	4b08      	ldr	r3, [pc, #32]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fa:	4904      	ldr	r1, [pc, #16]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003102:	e009      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
 8003108:	e006      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800310a:	bf00      	nop
 800310c:	40021000 	.word	0x40021000
 8003110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003114:	7cfb      	ldrb	r3, [r7, #19]
 8003116:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003118:	7c7b      	ldrb	r3, [r7, #17]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b9e      	ldr	r3, [pc, #632]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003122:	4a9d      	ldr	r2, [pc, #628]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003128:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003136:	4b98      	ldr	r3, [pc, #608]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313c:	f023 0203 	bic.w	r2, r3, #3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003144:	4994      	ldr	r1, [pc, #592]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003146:	4313      	orrs	r3, r2
 8003148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00a      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003158:	4b8f      	ldr	r3, [pc, #572]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f023 020c 	bic.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003166:	498c      	ldr	r1, [pc, #560]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800317a:	4b87      	ldr	r3, [pc, #540]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800317c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003180:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	4983      	ldr	r1, [pc, #524]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800319c:	4b7e      	ldr	r3, [pc, #504]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800319e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	497b      	ldr	r1, [pc, #492]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031be:	4b76      	ldr	r3, [pc, #472]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031cc:	4972      	ldr	r1, [pc, #456]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0320 	and.w	r3, r3, #32
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00a      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031e0:	4b6d      	ldr	r3, [pc, #436]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031ee:	496a      	ldr	r1, [pc, #424]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00a      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003202:	4b65      	ldr	r3, [pc, #404]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	4961      	ldr	r1, [pc, #388]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003212:	4313      	orrs	r3, r2
 8003214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00a      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003224:	4b5c      	ldr	r3, [pc, #368]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003232:	4959      	ldr	r1, [pc, #356]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00a      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003246:	4b54      	ldr	r3, [pc, #336]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	4950      	ldr	r1, [pc, #320]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003256:	4313      	orrs	r3, r2
 8003258:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003268:	4b4b      	ldr	r3, [pc, #300]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800326e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	4948      	ldr	r1, [pc, #288]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	4313      	orrs	r3, r2
 800327a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800328a:	4b43      	ldr	r3, [pc, #268]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003290:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	493f      	ldr	r1, [pc, #252]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d028      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ac:	4b3a      	ldr	r3, [pc, #232]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ba:	4937      	ldr	r1, [pc, #220]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032ca:	d106      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032cc:	4b32      	ldr	r3, [pc, #200]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	4a31      	ldr	r2, [pc, #196]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032d6:	60d3      	str	r3, [r2, #12]
 80032d8:	e011      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80032e2:	d10c      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	2101      	movs	r1, #1
 80032ea:	4618      	mov	r0, r3
 80032ec:	f000 f8c8 	bl	8003480 <RCCEx_PLLSAI1_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80032fa:	7cfb      	ldrb	r3, [r7, #19]
 80032fc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d028      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800330a:	4b23      	ldr	r3, [pc, #140]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003310:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003318:	491f      	ldr	r1, [pc, #124]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331a:	4313      	orrs	r3, r2
 800331c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003328:	d106      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800332a:	4b1b      	ldr	r3, [pc, #108]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	4a1a      	ldr	r2, [pc, #104]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003334:	60d3      	str	r3, [r2, #12]
 8003336:	e011      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003340:	d10c      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2101      	movs	r1, #1
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f899 	bl	8003480 <RCCEx_PLLSAI1_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003352:	7cfb      	ldrb	r3, [r7, #19]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d02b      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003368:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003376:	4908      	ldr	r1, [pc, #32]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003382:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003386:	d109      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003388:	4b03      	ldr	r3, [pc, #12]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a02      	ldr	r2, [pc, #8]	@ (8003398 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003392:	60d3      	str	r3, [r2, #12]
 8003394:	e014      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003396:	bf00      	nop
 8003398:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033a0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033a4:	d10c      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	3304      	adds	r3, #4
 80033aa:	2101      	movs	r1, #1
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 f867 	bl	8003480 <RCCEx_PLLSAI1_Config>
 80033b2:	4603      	mov	r3, r0
 80033b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80033bc:	7cfb      	ldrb	r3, [r7, #19]
 80033be:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d02f      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033cc:	4b2b      	ldr	r3, [pc, #172]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033da:	4928      	ldr	r1, [pc, #160]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80033dc:	4313      	orrs	r3, r2
 80033de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ea:	d10d      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3304      	adds	r3, #4
 80033f0:	2102      	movs	r1, #2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 f844 	bl	8003480 <RCCEx_PLLSAI1_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d014      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003402:	7cfb      	ldrb	r3, [r7, #19]
 8003404:	74bb      	strb	r3, [r7, #18]
 8003406:	e011      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800340c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3320      	adds	r3, #32
 8003416:	2102      	movs	r1, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f925 	bl	8003668 <RCCEx_PLLSAI2_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003438:	4b10      	ldr	r3, [pc, #64]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800343e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003446:	490d      	ldr	r1, [pc, #52]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d00b      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800345a:	4b08      	ldr	r3, [pc, #32]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800346a:	4904      	ldr	r1, [pc, #16]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003472:	7cbb      	ldrb	r3, [r7, #18]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40021000 	.word	0x40021000

08003480 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800348e:	4b75      	ldr	r3, [pc, #468]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d018      	beq.n	80034cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800349a:	4b72      	ldr	r3, [pc, #456]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800349c:	68db      	ldr	r3, [r3, #12]
 800349e:	f003 0203 	and.w	r2, r3, #3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d10d      	bne.n	80034c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
       ||
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80034b2:	4b6c      	ldr	r3, [pc, #432]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	091b      	lsrs	r3, r3, #4
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
       ||
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d047      	beq.n	8003556 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	e044      	b.n	8003556 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d018      	beq.n	8003506 <RCCEx_PLLSAI1_Config+0x86>
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d825      	bhi.n	8003524 <RCCEx_PLLSAI1_Config+0xa4>
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d002      	beq.n	80034e2 <RCCEx_PLLSAI1_Config+0x62>
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d009      	beq.n	80034f4 <RCCEx_PLLSAI1_Config+0x74>
 80034e0:	e020      	b.n	8003524 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80034e2:	4b60      	ldr	r3, [pc, #384]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11d      	bne.n	800352a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034f2:	e01a      	b.n	800352a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034f4:	4b5b      	ldr	r3, [pc, #364]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d116      	bne.n	800352e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003504:	e013      	b.n	800352e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003506:	4b57      	ldr	r3, [pc, #348]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10f      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003512:	4b54      	ldr	r3, [pc, #336]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003522:	e006      	b.n	8003532 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	73fb      	strb	r3, [r7, #15]
      break;
 8003528:	e004      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352a:	bf00      	nop
 800352c:	e002      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800352e:	bf00      	nop
 8003530:	e000      	b.n	8003534 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003532:	bf00      	nop
    }

    if(status == HAL_OK)
 8003534:	7bfb      	ldrb	r3, [r7, #15]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10d      	bne.n	8003556 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800353a:	4b4a      	ldr	r3, [pc, #296]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	3b01      	subs	r3, #1
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	430b      	orrs	r3, r1
 8003550:	4944      	ldr	r1, [pc, #272]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003552:	4313      	orrs	r3, r2
 8003554:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d17d      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800355c:	4b41      	ldr	r3, [pc, #260]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a40      	ldr	r2, [pc, #256]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003562:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003568:	f7fe faf6 	bl	8001b58 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800356e:	e009      	b.n	8003584 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003570:	f7fe faf2 	bl	8001b58 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	73fb      	strb	r3, [r7, #15]
        break;
 8003582:	e005      	b.n	8003590 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003584:	4b37      	ldr	r3, [pc, #220]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ef      	bne.n	8003570 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d160      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d111      	bne.n	80035c0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800359c:	4b31      	ldr	r3, [pc, #196]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80035a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6892      	ldr	r2, [r2, #8]
 80035ac:	0211      	lsls	r1, r2, #8
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68d2      	ldr	r2, [r2, #12]
 80035b2:	0912      	lsrs	r2, r2, #4
 80035b4:	0452      	lsls	r2, r2, #17
 80035b6:	430a      	orrs	r2, r1
 80035b8:	492a      	ldr	r1, [pc, #168]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	610b      	str	r3, [r1, #16]
 80035be:	e027      	b.n	8003610 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d112      	bne.n	80035ec <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035c6:	4b27      	ldr	r3, [pc, #156]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80035ce:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6892      	ldr	r2, [r2, #8]
 80035d6:	0211      	lsls	r1, r2, #8
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6912      	ldr	r2, [r2, #16]
 80035dc:	0852      	lsrs	r2, r2, #1
 80035de:	3a01      	subs	r2, #1
 80035e0:	0552      	lsls	r2, r2, #21
 80035e2:	430a      	orrs	r2, r1
 80035e4:	491f      	ldr	r1, [pc, #124]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	610b      	str	r3, [r1, #16]
 80035ea:	e011      	b.n	8003610 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80035ec:	4b1d      	ldr	r3, [pc, #116]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80035f4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6892      	ldr	r2, [r2, #8]
 80035fc:	0211      	lsls	r1, r2, #8
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6952      	ldr	r2, [r2, #20]
 8003602:	0852      	lsrs	r2, r2, #1
 8003604:	3a01      	subs	r2, #1
 8003606:	0652      	lsls	r2, r2, #25
 8003608:	430a      	orrs	r2, r1
 800360a:	4916      	ldr	r1, [pc, #88]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800360c:	4313      	orrs	r3, r2
 800360e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003610:	4b14      	ldr	r3, [pc, #80]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003616:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800361a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe fa9c 	bl	8001b58 <HAL_GetTick>
 8003620:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003622:	e009      	b.n	8003638 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003624:	f7fe fa98 	bl	8001b58 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d902      	bls.n	8003638 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	73fb      	strb	r3, [r7, #15]
          break;
 8003636:	e005      	b.n	8003644 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003638:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0ef      	beq.n	8003624 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	691a      	ldr	r2, [r3, #16]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	4904      	ldr	r1, [pc, #16]	@ (8003664 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003654:	4313      	orrs	r3, r2
 8003656:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000

08003668 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003676:	4b6a      	ldr	r3, [pc, #424]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d018      	beq.n	80036b4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003682:	4b67      	ldr	r3, [pc, #412]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f003 0203 	and.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d10d      	bne.n	80036ae <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
       ||
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800369a:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	1c5a      	adds	r2, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
       ||
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d047      	beq.n	800373e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
 80036b2:	e044      	b.n	800373e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d018      	beq.n	80036ee <RCCEx_PLLSAI2_Config+0x86>
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d825      	bhi.n	800370c <RCCEx_PLLSAI2_Config+0xa4>
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d002      	beq.n	80036ca <RCCEx_PLLSAI2_Config+0x62>
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d009      	beq.n	80036dc <RCCEx_PLLSAI2_Config+0x74>
 80036c8:	e020      	b.n	800370c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036ca:	4b55      	ldr	r3, [pc, #340]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d11d      	bne.n	8003712 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036da:	e01a      	b.n	8003712 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036dc:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d116      	bne.n	8003716 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e013      	b.n	8003716 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10f      	bne.n	800371a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036fa:	4b49      	ldr	r3, [pc, #292]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d109      	bne.n	800371a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800370a:	e006      	b.n	800371a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e004      	b.n	800371c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003712:	bf00      	nop
 8003714:	e002      	b.n	800371c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003716:	bf00      	nop
 8003718:	e000      	b.n	800371c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800371a:	bf00      	nop
    }

    if(status == HAL_OK)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10d      	bne.n	800373e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003722:	4b3f      	ldr	r3, [pc, #252]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6819      	ldr	r1, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	430b      	orrs	r3, r1
 8003738:	4939      	ldr	r1, [pc, #228]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800373a:	4313      	orrs	r3, r2
 800373c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d167      	bne.n	8003814 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003744:	4b36      	ldr	r3, [pc, #216]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a35      	ldr	r2, [pc, #212]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800374a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800374e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003750:	f7fe fa02 	bl	8001b58 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003756:	e009      	b.n	800376c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003758:	f7fe f9fe 	bl	8001b58 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	73fb      	strb	r3, [r7, #15]
        break;
 800376a:	e005      	b.n	8003778 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800376c:	4b2c      	ldr	r3, [pc, #176]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d1ef      	bne.n	8003758 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d14a      	bne.n	8003814 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d111      	bne.n	80037a8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003784:	4b26      	ldr	r3, [pc, #152]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800378c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	6892      	ldr	r2, [r2, #8]
 8003794:	0211      	lsls	r1, r2, #8
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68d2      	ldr	r2, [r2, #12]
 800379a:	0912      	lsrs	r2, r2, #4
 800379c:	0452      	lsls	r2, r2, #17
 800379e:	430a      	orrs	r2, r1
 80037a0:	491f      	ldr	r1, [pc, #124]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	614b      	str	r3, [r1, #20]
 80037a6:	e011      	b.n	80037cc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80037a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80037b0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6892      	ldr	r2, [r2, #8]
 80037b8:	0211      	lsls	r1, r2, #8
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6912      	ldr	r2, [r2, #16]
 80037be:	0852      	lsrs	r2, r2, #1
 80037c0:	3a01      	subs	r2, #1
 80037c2:	0652      	lsls	r2, r2, #25
 80037c4:	430a      	orrs	r2, r1
 80037c6:	4916      	ldr	r1, [pc, #88]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80037cc:	4b14      	ldr	r3, [pc, #80]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a13      	ldr	r2, [pc, #76]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe f9be 	bl	8001b58 <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037de:	e009      	b.n	80037f4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80037e0:	f7fe f9ba 	bl	8001b58 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d902      	bls.n	80037f4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	73fb      	strb	r3, [r7, #15]
          break;
 80037f2:	e005      	b.n	8003800 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80037f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0ef      	beq.n	80037e0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003800:	7bfb      	ldrb	r3, [r7, #15]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4904      	ldr	r1, [pc, #16]	@ (8003820 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	4313      	orrs	r3, r2
 8003812:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40021000 	.word	0x40021000

08003824 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e095      	b.n	8003962 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d108      	bne.n	8003850 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003846:	d009      	beq.n	800385c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	61da      	str	r2, [r3, #28]
 800384e:	e005      	b.n	800385c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fd fe38 	bl	80014ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003892:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800389c:	d902      	bls.n	80038a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e002      	b.n	80038aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80038a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80038b2:	d007      	beq.n	80038c4 <HAL_SPI_Init+0xa0>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038bc:	d002      	beq.n	80038c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003906:	ea42 0103 	orr.w	r1, r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	0c1b      	lsrs	r3, r3, #16
 8003920:	f003 0204 	and.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003940:	ea42 0103 	orr.w	r1, r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b088      	sub	sp, #32
 800396e:	af00      	add	r7, sp, #0
 8003970:	60f8      	str	r0, [r7, #12]
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800397a:	f7fe f8ed 	bl	8001b58 <HAL_GetTick>
 800397e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003980:	88fb      	ldrh	r3, [r7, #6]
 8003982:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800398a:	b2db      	uxtb	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d001      	beq.n	8003994 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
 8003992:	e15c      	b.n	8003c4e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0x36>
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e154      	b.n	8003c4e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <HAL_SPI_Transmit+0x48>
 80039ae:	2302      	movs	r3, #2
 80039b0:	e14d      	b.n	8003c4e <HAL_SPI_Transmit+0x2e4>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2203      	movs	r2, #3
 80039be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	88fa      	ldrh	r2, [r7, #6]
 80039d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	88fa      	ldrh	r2, [r7, #6]
 80039d8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a04:	d10f      	bne.n	8003a26 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a24:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a30:	2b40      	cmp	r3, #64	@ 0x40
 8003a32:	d007      	beq.n	8003a44 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a4c:	d952      	bls.n	8003af4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <HAL_SPI_Transmit+0xf2>
 8003a56:	8b7b      	ldrh	r3, [r7, #26]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d145      	bne.n	8003ae8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	881a      	ldrh	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	1c9a      	adds	r2, r3, #2
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a80:	e032      	b.n	8003ae8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d112      	bne.n	8003ab6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	881a      	ldrh	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa0:	1c9a      	adds	r2, r3, #2
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ab4:	e018      	b.n	8003ae8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab6:	f7fe f84f 	bl	8001b58 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d803      	bhi.n	8003ace <HAL_SPI_Transmit+0x164>
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003acc:	d102      	bne.n	8003ad4 <HAL_SPI_Transmit+0x16a>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d109      	bne.n	8003ae8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e0b2      	b.n	8003c4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1c7      	bne.n	8003a82 <HAL_SPI_Transmit+0x118>
 8003af2:	e083      	b.n	8003bfc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit+0x198>
 8003afc:	8b7b      	ldrh	r3, [r7, #26]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d177      	bne.n	8003bf2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d912      	bls.n	8003b32 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b02      	subs	r3, #2
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b30:	e05f      	b.n	8003bf2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	7812      	ldrb	r2, [r2, #0]
 8003b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003b58:	e04b      	b.n	8003bf2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d12b      	bne.n	8003bc0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d912      	bls.n	8003b98 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	881a      	ldrh	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	1c9a      	adds	r2, r3, #2
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	3b02      	subs	r3, #2
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b96:	e02c      	b.n	8003bf2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	7812      	ldrb	r2, [r2, #0]
 8003ba4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bbe:	e018      	b.n	8003bf2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bc0:	f7fd ffca 	bl	8001b58 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d803      	bhi.n	8003bd8 <HAL_SPI_Transmit+0x26e>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd6:	d102      	bne.n	8003bde <HAL_SPI_Transmit+0x274>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e02d      	b.n	8003c4e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1ae      	bne.n	8003b5a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	6839      	ldr	r1, [r7, #0]
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 fcf5 	bl	80045f0 <SPI_EndRxTxTransaction>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3720      	adds	r7, #32
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b088      	sub	sp, #32
 8003c5a:	af02      	add	r7, sp, #8
 8003c5c:	60f8      	str	r0, [r7, #12]
 8003c5e:	60b9      	str	r1, [r7, #8]
 8003c60:	603b      	str	r3, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d001      	beq.n	8003c76 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003c72:	2302      	movs	r3, #2
 8003c74:	e123      	b.n	8003ebe <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7e:	d112      	bne.n	8003ca6 <HAL_SPI_Receive+0x50>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10e      	bne.n	8003ca6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	4613      	mov	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f912 	bl	8003ec6 <HAL_SPI_TransmitReceive>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	e10b      	b.n	8003ebe <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ca6:	f7fd ff57 	bl	8001b58 <HAL_GetTick>
 8003caa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d002      	beq.n	8003cb8 <HAL_SPI_Receive+0x62>
 8003cb2:	88fb      	ldrh	r3, [r7, #6]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e100      	b.n	8003ebe <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d101      	bne.n	8003cca <HAL_SPI_Receive+0x74>
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	e0f9      	b.n	8003ebe <HAL_SPI_Receive+0x268>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	88fa      	ldrh	r2, [r7, #6]
 8003cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	88fa      	ldrh	r2, [r7, #6]
 8003cf2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d1c:	d908      	bls.n	8003d30 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e007      	b.n	8003d40 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d3e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d48:	d10f      	bne.n	8003d6a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d58:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d74:	2b40      	cmp	r3, #64	@ 0x40
 8003d76:	d007      	beq.n	8003d88 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d86:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d90:	d875      	bhi.n	8003e7e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d92:	e037      	b.n	8003e04 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d117      	bne.n	8003dd2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f103 020c 	add.w	r2, r3, #12
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dae:	7812      	ldrb	r2, [r2, #0]
 8003db0:	b2d2      	uxtb	r2, r2
 8003db2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db8:	1c5a      	adds	r2, r3, #1
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003dd0:	e018      	b.n	8003e04 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fd fec1 	bl	8001b58 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Receive+0x194>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Receive+0x19a>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e05c      	b.n	8003ebe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1c1      	bne.n	8003d94 <HAL_SPI_Receive+0x13e>
 8003e10:	e03b      	b.n	8003e8a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d115      	bne.n	8003e4c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68da      	ldr	r2, [r3, #12]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	b292      	uxth	r2, r2
 8003e2c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e32:	1c9a      	adds	r2, r3, #2
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003e4a:	e018      	b.n	8003e7e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4c:	f7fd fe84 	bl	8001b58 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	683a      	ldr	r2, [r7, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d803      	bhi.n	8003e64 <HAL_SPI_Receive+0x20e>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e62:	d102      	bne.n	8003e6a <HAL_SPI_Receive+0x214>
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e01f      	b.n	8003ebe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1c3      	bne.n	8003e12 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	6839      	ldr	r1, [r7, #0]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fb56 	bl	8004540 <SPI_EndRxTransaction>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e000      	b.n	8003ebe <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	@ 0x28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
 8003ed2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ed8:	f7fd fe3e 	bl	8001b58 <HAL_GetTick>
 8003edc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ee4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003eec:	887b      	ldrh	r3, [r7, #2]
 8003eee:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003ef0:	887b      	ldrh	r3, [r7, #2]
 8003ef2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ef4:	7ffb      	ldrb	r3, [r7, #31]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d00c      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x4e>
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f00:	d106      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <HAL_SPI_TransmitReceive+0x4a>
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d001      	beq.n	8003f14 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
 8003f12:	e1f3      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d005      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x60>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_TransmitReceive+0x60>
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e1e8      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d101      	bne.n	8003f38 <HAL_SPI_TransmitReceive+0x72>
 8003f34:	2302      	movs	r3, #2
 8003f36:	e1e1      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d003      	beq.n	8003f54 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2205      	movs	r2, #5
 8003f50:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	887a      	ldrh	r2, [r7, #2]
 8003f64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	887a      	ldrh	r2, [r7, #2]
 8003f7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003f96:	d802      	bhi.n	8003f9e <HAL_SPI_TransmitReceive+0xd8>
 8003f98:	8abb      	ldrh	r3, [r7, #20]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d908      	bls.n	8003fb0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	e007      	b.n	8003fc0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003fbe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b40      	cmp	r3, #64	@ 0x40
 8003fcc:	d007      	beq.n	8003fde <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fdc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003fe6:	f240 8083 	bls.w	80040f0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_SPI_TransmitReceive+0x132>
 8003ff2:	8afb      	ldrh	r3, [r7, #22]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d16f      	bne.n	80040d8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffc:	881a      	ldrh	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800401c:	e05c      	b.n	80040d8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d11b      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x19e>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004030:	b29b      	uxth	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x19e>
 8004036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004038:	2b01      	cmp	r3, #1
 800403a:	d113      	bne.n	8004064 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004060:	2300      	movs	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d11c      	bne.n	80040ac <HAL_SPI_TransmitReceive+0x1e6>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d016      	beq.n	80040ac <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	b292      	uxth	r2, r2
 800408a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	1c9a      	adds	r2, r3, #2
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800409c:	b29b      	uxth	r3, r3
 800409e:	3b01      	subs	r3, #1
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040a8:	2301      	movs	r3, #1
 80040aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040ac:	f7fd fd54 	bl	8001b58 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d80d      	bhi.n	80040d8 <HAL_SPI_TransmitReceive+0x212>
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c2:	d009      	beq.n	80040d8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e111      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040dc:	b29b      	uxth	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d19d      	bne.n	800401e <HAL_SPI_TransmitReceive+0x158>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d197      	bne.n	800401e <HAL_SPI_TransmitReceive+0x158>
 80040ee:	e0e5      	b.n	80042bc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_SPI_TransmitReceive+0x23a>
 80040f8:	8afb      	ldrh	r3, [r7, #22]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	f040 80d1 	bne.w	80042a2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b01      	cmp	r3, #1
 8004108:	d912      	bls.n	8004130 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410e:	881a      	ldrh	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b02      	subs	r3, #2
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800412e:	e0b8      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	7812      	ldrb	r2, [r2, #0]
 800413c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004142:	1c5a      	adds	r2, r3, #1
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004156:	e0a4      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	d134      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x30a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d02f      	beq.n	80041d0 <HAL_SPI_TransmitReceive+0x30a>
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	2b01      	cmp	r3, #1
 8004174:	d12c      	bne.n	80041d0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417a:	b29b      	uxth	r3, r3
 800417c:	2b01      	cmp	r3, #1
 800417e:	d912      	bls.n	80041a6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b02      	subs	r3, #2
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041a4:	e012      	b.n	80041cc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	330c      	adds	r3, #12
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	3b01      	subs	r3, #1
 80041c6:	b29a      	uxth	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d148      	bne.n	8004270 <HAL_SPI_TransmitReceive+0x3aa>
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d042      	beq.n	8004270 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d923      	bls.n	800423e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	b292      	uxth	r2, r2
 8004202:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004208:	1c9a      	adds	r2, r3, #2
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b02      	subs	r3, #2
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004226:	b29b      	uxth	r3, r3
 8004228:	2b01      	cmp	r3, #1
 800422a:	d81f      	bhi.n	800426c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800423a:	605a      	str	r2, [r3, #4]
 800423c:	e016      	b.n	800426c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f103 020c 	add.w	r2, r3, #12
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424a:	7812      	ldrb	r2, [r2, #0]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004260:	b29b      	uxth	r3, r3
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800426c:	2301      	movs	r3, #1
 800426e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004270:	f7fd fc72 	bl	8001b58 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427c:	429a      	cmp	r2, r3
 800427e:	d803      	bhi.n	8004288 <HAL_SPI_TransmitReceive+0x3c2>
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d102      	bne.n	800428e <HAL_SPI_TransmitReceive+0x3c8>
 8004288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e02c      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f47f af55 	bne.w	8004158 <HAL_SPI_TransmitReceive+0x292>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f47f af4e 	bne.w	8004158 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042bc:	6a3a      	ldr	r2, [r7, #32]
 80042be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f995 	bl	80045f0 <SPI_EndRxTxTransaction>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e00e      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
  }
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3728      	adds	r7, #40	@ 0x28
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	4613      	mov	r3, r2
 8004312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004314:	f7fd fc20 	bl	8001b58 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431c:	1a9b      	subs	r3, r3, r2
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	4413      	add	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004324:	f7fd fc18 	bl	8001b58 <HAL_GetTick>
 8004328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800432a:	4b39      	ldr	r3, [pc, #228]	@ (8004410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	015b      	lsls	r3, r3, #5
 8004330:	0d1b      	lsrs	r3, r3, #20
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800433a:	e054      	b.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004342:	d050      	beq.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004344:	f7fd fc08 	bl	8001b58 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	429a      	cmp	r2, r3
 8004352:	d902      	bls.n	800435a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d13d      	bne.n	80043d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004372:	d111      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800437c:	d004      	beq.n	8004388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004386:	d107      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043a0:	d10f      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e017      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4013      	ands	r3, r2
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	bf0c      	ite	eq
 80043f6:	2301      	moveq	r3, #1
 80043f8:	2300      	movne	r3, #0
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	79fb      	ldrb	r3, [r7, #7]
 8004400:	429a      	cmp	r2, r3
 8004402:	d19b      	bne.n	800433c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3720      	adds	r7, #32
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20000000 	.word	0x20000000

08004414 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	@ 0x28
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
 8004420:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004426:	f7fd fb97 	bl	8001b58 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4413      	add	r3, r2
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004436:	f7fd fb8f 	bl	8001b58 <HAL_GetTick>
 800443a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004444:	4b3d      	ldr	r3, [pc, #244]	@ (800453c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	00da      	lsls	r2, r3, #3
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800445c:	e060      	b.n	8004520 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004464:	d107      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d104      	bne.n	8004476 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004474:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447c:	d050      	beq.n	8004520 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800447e:	f7fd fb6b 	bl	8001b58 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800448a:	429a      	cmp	r2, r3
 800448c:	d902      	bls.n	8004494 <SPI_WaitFifoStateUntilTimeout+0x80>
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d13d      	bne.n	8004510 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80044a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044ac:	d111      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b6:	d004      	beq.n	80044c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044c0:	d107      	bne.n	80044d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044da:	d10f      	bne.n	80044fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e010      	b.n	8004532 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	3b01      	subs	r3, #1
 800451e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	429a      	cmp	r2, r3
 800452e:	d196      	bne.n	800445e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3728      	adds	r7, #40	@ 0x28
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000000 	.word	0x20000000

08004540 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004554:	d111      	bne.n	800457a <SPI_EndRxTransaction+0x3a>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800455e:	d004      	beq.n	800456a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004568:	d107      	bne.n	800457a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2200      	movs	r2, #0
 8004582:	2180      	movs	r1, #128	@ 0x80
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f7ff febd 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d007      	beq.n	80045a0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e023      	b.n	80045e8 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045a8:	d11d      	bne.n	80045e6 <SPI_EndRxTransaction+0xa6>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b2:	d004      	beq.n	80045be <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045bc:	d113      	bne.n	80045e6 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff ff22 	bl	8004414 <SPI_WaitFifoStateUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d007      	beq.n	80045e6 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045da:	f043 0220 	orr.w	r2, r3, #32
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e000      	b.n	80045e8 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af02      	add	r7, sp, #8
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2200      	movs	r2, #0
 8004604:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff ff03 	bl	8004414 <SPI_WaitFifoStateUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d007      	beq.n	8004624 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e027      	b.n	8004674 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2200      	movs	r2, #0
 800462c:	2180      	movs	r1, #128	@ 0x80
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f7ff fe68 	bl	8004304 <SPI_WaitFlagStateUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800463e:	f043 0220 	orr.w	r2, r3, #32
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e014      	b.n	8004674 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2200      	movs	r2, #0
 8004652:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff fedc 	bl	8004414 <SPI_WaitFifoStateUntilTimeout>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004666:	f043 0220 	orr.w	r2, r3, #32
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e000      	b.n	8004674 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e049      	b.n	8004722 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f841 	bl	800472a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	3304      	adds	r3, #4
 80046b8:	4619      	mov	r1, r3
 80046ba:	4610      	mov	r0, r2
 80046bc:	f000 f9e0 	bl	8004a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004732:	bf00      	nop
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
	...

08004740 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	d001      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e04f      	b.n	80047f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a23      	ldr	r2, [pc, #140]	@ (8004804 <HAL_TIM_Base_Start_IT+0xc4>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01d      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x76>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004782:	d018      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x76>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <HAL_TIM_Base_Start_IT+0xc8>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x76>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <HAL_TIM_Base_Start_IT+0xcc>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x76>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <HAL_TIM_Base_Start_IT+0xd0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x76>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004814 <HAL_TIM_Base_Start_IT+0xd4>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_TIM_Base_Start_IT+0x76>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a19      	ldr	r2, [pc, #100]	@ (8004818 <HAL_TIM_Base_Start_IT+0xd8>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d115      	bne.n	80047e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	4b17      	ldr	r3, [pc, #92]	@ (800481c <HAL_TIM_Base_Start_IT+0xdc>)
 80047be:	4013      	ands	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b06      	cmp	r3, #6
 80047c6:	d015      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0xb4>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ce:	d011      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e0:	e008      	b.n	80047f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	e000      	b.n	80047f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40013400 	.word	0x40013400
 8004818:	40014000 	.word	0x40014000
 800481c:	00010007 	.word	0x00010007

08004820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0202 	mvn.w	r2, #2
 8004854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f8e9 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8db 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8ec 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0204 	mvn.w	r2, #4
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2202      	movs	r2, #2
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8c3 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f8b5 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f8c6 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0208 	mvn.w	r2, #8
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2204      	movs	r2, #4
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f89d 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f88f 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8a0 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0310 	and.w	r3, r3, #16
 8004922:	2b00      	cmp	r3, #0
 8004924:	d020      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0210 	mvn.w	r2, #16
 8004938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2208      	movs	r2, #8
 800493e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f877 	bl	8004a42 <HAL_TIM_IC_CaptureCallback>
 8004954:	e005      	b.n	8004962 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f869 	bl	8004a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f87a 	bl	8004a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	f003 0301 	and.w	r3, r3, #1
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00c      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f06f 0201 	mvn.w	r2, #1
 8004984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fc fd52 	bl	8001430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004992:	2b00      	cmp	r3, #0
 8004994:	d104      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00c      	beq.n	80049ba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d007      	beq.n	80049ba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80049b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f000 f913 	bl	8004be0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d00c      	beq.n	80049de <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f90b 	bl	8004bf4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d00c      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d007      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f834 	bl	8004a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00c      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f06f 0220 	mvn.w	r2, #32
 8004a1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f8d3 	bl	8004bcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4a46      	ldr	r2, [pc, #280]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d013      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a9e:	d00f      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	4a43      	ldr	r2, [pc, #268]	@ (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d00b      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	4a42      	ldr	r2, [pc, #264]	@ (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d007      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4a41      	ldr	r2, [pc, #260]	@ (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <TIM_Base_SetConfig+0x40>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	4a40      	ldr	r2, [pc, #256]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d108      	bne.n	8004ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a35      	ldr	r2, [pc, #212]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01f      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ae0:	d01b      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a32      	ldr	r2, [pc, #200]	@ (8004bb0 <TIM_Base_SetConfig+0x130>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d017      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4a31      	ldr	r2, [pc, #196]	@ (8004bb4 <TIM_Base_SetConfig+0x134>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d013      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a30      	ldr	r2, [pc, #192]	@ (8004bb8 <TIM_Base_SetConfig+0x138>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00f      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4a2f      	ldr	r2, [pc, #188]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00b      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	4a2e      	ldr	r2, [pc, #184]	@ (8004bc0 <TIM_Base_SetConfig+0x140>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d007      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4a2d      	ldr	r2, [pc, #180]	@ (8004bc4 <TIM_Base_SetConfig+0x144>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d003      	beq.n	8004b1a <TIM_Base_SetConfig+0x9a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a2c      	ldr	r2, [pc, #176]	@ (8004bc8 <TIM_Base_SetConfig+0x148>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d108      	bne.n	8004b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689a      	ldr	r2, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a16      	ldr	r2, [pc, #88]	@ (8004bac <TIM_Base_SetConfig+0x12c>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d00f      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a18      	ldr	r2, [pc, #96]	@ (8004bbc <TIM_Base_SetConfig+0x13c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d00b      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a17      	ldr	r2, [pc, #92]	@ (8004bc0 <TIM_Base_SetConfig+0x140>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d007      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a16      	ldr	r2, [pc, #88]	@ (8004bc4 <TIM_Base_SetConfig+0x144>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d003      	beq.n	8004b78 <TIM_Base_SetConfig+0xf8>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a15      	ldr	r2, [pc, #84]	@ (8004bc8 <TIM_Base_SetConfig+0x148>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d103      	bne.n	8004b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f023 0201 	bic.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	611a      	str	r2, [r3, #16]
  }
}
 8004b9e:	bf00      	nop
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800

08004bcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr

08004bf4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e040      	b.n	8004c9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d106      	bne.n	8004c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7fc fcc0 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2224      	movs	r2, #36	@ 0x24
 8004c34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 0201 	bic.w	r2, r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fae0 	bl	8005214 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 f825 	bl	8004ca4 <UART_SetConfig>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e01b      	b.n	8004c9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685a      	ldr	r2, [r3, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689a      	ldr	r2, [r3, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fb5f 	bl	8005358 <UART_CheckIdleState>
 8004c9a:	4603      	mov	r3, r0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ca8:	b08a      	sub	sp, #40	@ 0x28
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4ba4      	ldr	r3, [pc, #656]	@ (8004f64 <UART_SetConfig+0x2c0>)
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	6812      	ldr	r2, [r2, #0]
 8004cda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a99      	ldr	r2, [pc, #612]	@ (8004f68 <UART_SetConfig+0x2c4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d004      	beq.n	8004d10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a90      	ldr	r2, [pc, #576]	@ (8004f6c <UART_SetConfig+0x2c8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d126      	bne.n	8004d7c <UART_SetConfig+0xd8>
 8004d2e:	4b90      	ldr	r3, [pc, #576]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d81b      	bhi.n	8004d74 <UART_SetConfig+0xd0>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <UART_SetConfig+0xa0>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d65 	.word	0x08004d65
 8004d4c:	08004d5d 	.word	0x08004d5d
 8004d50:	08004d6d 	.word	0x08004d6d
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d5a:	e116      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d62:	e112      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d64:	2304      	movs	r3, #4
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d6a:	e10e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d6c:	2308      	movs	r3, #8
 8004d6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d72:	e10a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d74:	2310      	movs	r3, #16
 8004d76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004d7a:	e106      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a7c      	ldr	r2, [pc, #496]	@ (8004f74 <UART_SetConfig+0x2d0>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d138      	bne.n	8004df8 <UART_SetConfig+0x154>
 8004d86:	4b7a      	ldr	r3, [pc, #488]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8c:	f003 030c 	and.w	r3, r3, #12
 8004d90:	2b0c      	cmp	r3, #12
 8004d92:	d82d      	bhi.n	8004df0 <UART_SetConfig+0x14c>
 8004d94:	a201      	add	r2, pc, #4	@ (adr r2, 8004d9c <UART_SetConfig+0xf8>)
 8004d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9a:	bf00      	nop
 8004d9c:	08004dd1 	.word	0x08004dd1
 8004da0:	08004df1 	.word	0x08004df1
 8004da4:	08004df1 	.word	0x08004df1
 8004da8:	08004df1 	.word	0x08004df1
 8004dac:	08004de1 	.word	0x08004de1
 8004db0:	08004df1 	.word	0x08004df1
 8004db4:	08004df1 	.word	0x08004df1
 8004db8:	08004df1 	.word	0x08004df1
 8004dbc:	08004dd9 	.word	0x08004dd9
 8004dc0:	08004df1 	.word	0x08004df1
 8004dc4:	08004df1 	.word	0x08004df1
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004de9 	.word	0x08004de9
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dd6:	e0d8      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dde:	e0d4      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de6:	e0d0      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dee:	e0cc      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df6:	e0c8      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5e      	ldr	r2, [pc, #376]	@ (8004f78 <UART_SetConfig+0x2d4>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d125      	bne.n	8004e4e <UART_SetConfig+0x1aa>
 8004e02:	4b5b      	ldr	r3, [pc, #364]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e0c:	2b30      	cmp	r3, #48	@ 0x30
 8004e0e:	d016      	beq.n	8004e3e <UART_SetConfig+0x19a>
 8004e10:	2b30      	cmp	r3, #48	@ 0x30
 8004e12:	d818      	bhi.n	8004e46 <UART_SetConfig+0x1a2>
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d00a      	beq.n	8004e2e <UART_SetConfig+0x18a>
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d814      	bhi.n	8004e46 <UART_SetConfig+0x1a2>
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d002      	beq.n	8004e26 <UART_SetConfig+0x182>
 8004e20:	2b10      	cmp	r3, #16
 8004e22:	d008      	beq.n	8004e36 <UART_SetConfig+0x192>
 8004e24:	e00f      	b.n	8004e46 <UART_SetConfig+0x1a2>
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e2c:	e0ad      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e34:	e0a9      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e36:	2304      	movs	r3, #4
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e3c:	e0a5      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e3e:	2308      	movs	r3, #8
 8004e40:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e44:	e0a1      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e46:	2310      	movs	r3, #16
 8004e48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e4c:	e09d      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a4a      	ldr	r2, [pc, #296]	@ (8004f7c <UART_SetConfig+0x2d8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d125      	bne.n	8004ea4 <UART_SetConfig+0x200>
 8004e58:	4b45      	ldr	r3, [pc, #276]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e5e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004e62:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e64:	d016      	beq.n	8004e94 <UART_SetConfig+0x1f0>
 8004e66:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e68:	d818      	bhi.n	8004e9c <UART_SetConfig+0x1f8>
 8004e6a:	2b80      	cmp	r3, #128	@ 0x80
 8004e6c:	d00a      	beq.n	8004e84 <UART_SetConfig+0x1e0>
 8004e6e:	2b80      	cmp	r3, #128	@ 0x80
 8004e70:	d814      	bhi.n	8004e9c <UART_SetConfig+0x1f8>
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <UART_SetConfig+0x1d8>
 8004e76:	2b40      	cmp	r3, #64	@ 0x40
 8004e78:	d008      	beq.n	8004e8c <UART_SetConfig+0x1e8>
 8004e7a:	e00f      	b.n	8004e9c <UART_SetConfig+0x1f8>
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e82:	e082      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e84:	2302      	movs	r3, #2
 8004e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e8a:	e07e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e8c:	2304      	movs	r3, #4
 8004e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e92:	e07a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e94:	2308      	movs	r3, #8
 8004e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e9a:	e076      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004e9c:	2310      	movs	r3, #16
 8004e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ea2:	e072      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a35      	ldr	r2, [pc, #212]	@ (8004f80 <UART_SetConfig+0x2dc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d12a      	bne.n	8004f04 <UART_SetConfig+0x260>
 8004eae:	4b30      	ldr	r3, [pc, #192]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ebc:	d01a      	beq.n	8004ef4 <UART_SetConfig+0x250>
 8004ebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ec2:	d81b      	bhi.n	8004efc <UART_SetConfig+0x258>
 8004ec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ec8:	d00c      	beq.n	8004ee4 <UART_SetConfig+0x240>
 8004eca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ece:	d815      	bhi.n	8004efc <UART_SetConfig+0x258>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <UART_SetConfig+0x238>
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d008      	beq.n	8004eec <UART_SetConfig+0x248>
 8004eda:	e00f      	b.n	8004efc <UART_SetConfig+0x258>
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ee2:	e052      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eea:	e04e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004eec:	2304      	movs	r3, #4
 8004eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef2:	e04a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004ef4:	2308      	movs	r3, #8
 8004ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efa:	e046      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f02:	e042      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a17      	ldr	r2, [pc, #92]	@ (8004f68 <UART_SetConfig+0x2c4>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d13a      	bne.n	8004f84 <UART_SetConfig+0x2e0>
 8004f0e:	4b18      	ldr	r3, [pc, #96]	@ (8004f70 <UART_SetConfig+0x2cc>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f14:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f1c:	d01a      	beq.n	8004f54 <UART_SetConfig+0x2b0>
 8004f1e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f22:	d81b      	bhi.n	8004f5c <UART_SetConfig+0x2b8>
 8004f24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f28:	d00c      	beq.n	8004f44 <UART_SetConfig+0x2a0>
 8004f2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f2e:	d815      	bhi.n	8004f5c <UART_SetConfig+0x2b8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <UART_SetConfig+0x298>
 8004f34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f38:	d008      	beq.n	8004f4c <UART_SetConfig+0x2a8>
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x2b8>
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f42:	e022      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f44:	2302      	movs	r3, #2
 8004f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f4a:	e01e      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f4c:	2304      	movs	r3, #4
 8004f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f52:	e01a      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f54:	2308      	movs	r3, #8
 8004f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f5a:	e016      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f62:	e012      	b.n	8004f8a <UART_SetConfig+0x2e6>
 8004f64:	efff69f3 	.word	0xefff69f3
 8004f68:	40008000 	.word	0x40008000
 8004f6c:	40013800 	.word	0x40013800
 8004f70:	40021000 	.word	0x40021000
 8004f74:	40004400 	.word	0x40004400
 8004f78:	40004800 	.word	0x40004800
 8004f7c:	40004c00 	.word	0x40004c00
 8004f80:	40005000 	.word	0x40005000
 8004f84:	2310      	movs	r3, #16
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a9f      	ldr	r2, [pc, #636]	@ (800520c <UART_SetConfig+0x568>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d17a      	bne.n	800508a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d824      	bhi.n	8004fe6 <UART_SetConfig+0x342>
 8004f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa4 <UART_SetConfig+0x300>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fe7 	.word	0x08004fe7
 8004fac:	08004fd1 	.word	0x08004fd1
 8004fb0:	08004fe7 	.word	0x08004fe7
 8004fb4:	08004fd7 	.word	0x08004fd7
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08004fe7 	.word	0x08004fe7
 8004fc0:	08004fe7 	.word	0x08004fe7
 8004fc4:	08004fdf 	.word	0x08004fdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc8:	f7fd feb2 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8004fcc:	61f8      	str	r0, [r7, #28]
        break;
 8004fce:	e010      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd0:	4b8f      	ldr	r3, [pc, #572]	@ (8005210 <UART_SetConfig+0x56c>)
 8004fd2:	61fb      	str	r3, [r7, #28]
        break;
 8004fd4:	e00d      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7fd fe13 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8004fda:	61f8      	str	r0, [r7, #28]
        break;
 8004fdc:	e009      	b.n	8004ff2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe2:	61fb      	str	r3, [r7, #28]
        break;
 8004fe4:	e005      	b.n	8004ff2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004ff0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 80fb 	beq.w	80051f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	005b      	lsls	r3, r3, #1
 8005002:	4413      	add	r3, r2
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	429a      	cmp	r2, r3
 8005008:	d305      	bcc.n	8005016 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	429a      	cmp	r2, r3
 8005014:	d903      	bls.n	800501e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800501c:	e0e8      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	2200      	movs	r2, #0
 8005022:	461c      	mov	r4, r3
 8005024:	4615      	mov	r5, r2
 8005026:	f04f 0200 	mov.w	r2, #0
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	022b      	lsls	r3, r5, #8
 8005030:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005034:	0222      	lsls	r2, r4, #8
 8005036:	68f9      	ldr	r1, [r7, #12]
 8005038:	6849      	ldr	r1, [r1, #4]
 800503a:	0849      	lsrs	r1, r1, #1
 800503c:	2000      	movs	r0, #0
 800503e:	4688      	mov	r8, r1
 8005040:	4681      	mov	r9, r0
 8005042:	eb12 0a08 	adds.w	sl, r2, r8
 8005046:	eb43 0b09 	adc.w	fp, r3, r9
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	603b      	str	r3, [r7, #0]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005058:	4650      	mov	r0, sl
 800505a:	4659      	mov	r1, fp
 800505c:	f7fb f908 	bl	8000270 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4613      	mov	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800506e:	d308      	bcc.n	8005082 <UART_SetConfig+0x3de>
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005076:	d204      	bcs.n	8005082 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	60da      	str	r2, [r3, #12]
 8005080:	e0b6      	b.n	80051f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005088:	e0b2      	b.n	80051f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005092:	d15e      	bne.n	8005152 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005098:	2b08      	cmp	r3, #8
 800509a:	d828      	bhi.n	80050ee <UART_SetConfig+0x44a>
 800509c:	a201      	add	r2, pc, #4	@ (adr r2, 80050a4 <UART_SetConfig+0x400>)
 800509e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a2:	bf00      	nop
 80050a4:	080050c9 	.word	0x080050c9
 80050a8:	080050d1 	.word	0x080050d1
 80050ac:	080050d9 	.word	0x080050d9
 80050b0:	080050ef 	.word	0x080050ef
 80050b4:	080050df 	.word	0x080050df
 80050b8:	080050ef 	.word	0x080050ef
 80050bc:	080050ef 	.word	0x080050ef
 80050c0:	080050ef 	.word	0x080050ef
 80050c4:	080050e7 	.word	0x080050e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c8:	f7fd fe32 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 80050cc:	61f8      	str	r0, [r7, #28]
        break;
 80050ce:	e014      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050d0:	f7fd fe44 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 80050d4:	61f8      	str	r0, [r7, #28]
        break;
 80050d6:	e010      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005210 <UART_SetConfig+0x56c>)
 80050da:	61fb      	str	r3, [r7, #28]
        break;
 80050dc:	e00d      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fd fd8f 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 80050e2:	61f8      	str	r0, [r7, #28]
        break;
 80050e4:	e009      	b.n	80050fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	61fb      	str	r3, [r7, #28]
        break;
 80050ec:	e005      	b.n	80050fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d077      	beq.n	80051f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	005a      	lsls	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	085b      	lsrs	r3, r3, #1
 800510a:	441a      	add	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b0f      	cmp	r3, #15
 800511a:	d916      	bls.n	800514a <UART_SetConfig+0x4a6>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005122:	d212      	bcs.n	800514a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	b29b      	uxth	r3, r3
 8005128:	f023 030f 	bic.w	r3, r3, #15
 800512c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	085b      	lsrs	r3, r3, #1
 8005132:	b29b      	uxth	r3, r3
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	b29a      	uxth	r2, r3
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	4313      	orrs	r3, r2
 800513e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	8afa      	ldrh	r2, [r7, #22]
 8005146:	60da      	str	r2, [r3, #12]
 8005148:	e052      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005150:	e04e      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005152:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005156:	2b08      	cmp	r3, #8
 8005158:	d827      	bhi.n	80051aa <UART_SetConfig+0x506>
 800515a:	a201      	add	r2, pc, #4	@ (adr r2, 8005160 <UART_SetConfig+0x4bc>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005185 	.word	0x08005185
 8005164:	0800518d 	.word	0x0800518d
 8005168:	08005195 	.word	0x08005195
 800516c:	080051ab 	.word	0x080051ab
 8005170:	0800519b 	.word	0x0800519b
 8005174:	080051ab 	.word	0x080051ab
 8005178:	080051ab 	.word	0x080051ab
 800517c:	080051ab 	.word	0x080051ab
 8005180:	080051a3 	.word	0x080051a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005184:	f7fd fdd4 	bl	8002d30 <HAL_RCC_GetPCLK1Freq>
 8005188:	61f8      	str	r0, [r7, #28]
        break;
 800518a:	e014      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800518c:	f7fd fde6 	bl	8002d5c <HAL_RCC_GetPCLK2Freq>
 8005190:	61f8      	str	r0, [r7, #28]
        break;
 8005192:	e010      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005194:	4b1e      	ldr	r3, [pc, #120]	@ (8005210 <UART_SetConfig+0x56c>)
 8005196:	61fb      	str	r3, [r7, #28]
        break;
 8005198:	e00d      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800519a:	f7fd fd31 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 800519e:	61f8      	str	r0, [r7, #28]
        break;
 80051a0:	e009      	b.n	80051b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051a6:	61fb      	str	r3, [r7, #28]
        break;
 80051a8:	e005      	b.n	80051b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80051b4:	bf00      	nop
    }

    if (pclk != 0U)
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d019      	beq.n	80051f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	085a      	lsrs	r2, r3, #1
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	441a      	add	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d909      	bls.n	80051ea <UART_SetConfig+0x546>
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051dc:	d205      	bcs.n	80051ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60da      	str	r2, [r3, #12]
 80051e8:	e002      	b.n	80051f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005200:	4618      	mov	r0, r3
 8005202:	3728      	adds	r7, #40	@ 0x28
 8005204:	46bd      	mov	sp, r7
 8005206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800520a:	bf00      	nop
 800520c:	40008000 	.word	0x40008000
 8005210:	00f42400 	.word	0x00f42400

08005214 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00a      	beq.n	800523e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	430a      	orrs	r2, r1
 8005280:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	430a      	orrs	r2, r1
 80052a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	f003 0310 	and.w	r3, r3, #16
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01a      	beq.n	800532a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	430a      	orrs	r2, r1
 8005308:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800530e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005312:	d10a      	bne.n	800532a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	605a      	str	r2, [r3, #4]
  }
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b098      	sub	sp, #96	@ 0x60
 800535c:	af02      	add	r7, sp, #8
 800535e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005368:	f7fc fbf6 	bl	8001b58 <HAL_GetTick>
 800536c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b08      	cmp	r3, #8
 800537a:	d12e      	bne.n	80053da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800537c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005384:	2200      	movs	r2, #0
 8005386:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f88c 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d021      	beq.n	80053da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	461a      	mov	r2, r3
 80053b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053bc:	e841 2300 	strex	r3, r2, [r1]
 80053c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1e6      	bne.n	8005396 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e062      	b.n	80054a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b04      	cmp	r3, #4
 80053e6:	d149      	bne.n	800547c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053f0:	2200      	movs	r2, #0
 80053f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f856 	bl	80054a8 <UART_WaitOnFlagUntilTimeout>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d03c      	beq.n	800547c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	623b      	str	r3, [r7, #32]
   return(result);
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005420:	633b      	str	r3, [r7, #48]	@ 0x30
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800542e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e6      	bne.n	8005402 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	3308      	adds	r3, #8
 800543a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	e853 3f00 	ldrex	r3, [r3]
 8005442:	60fb      	str	r3, [r7, #12]
   return(result);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0301 	bic.w	r3, r3, #1
 800544a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3308      	adds	r3, #8
 8005452:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005454:	61fa      	str	r2, [r7, #28]
 8005456:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005458:	69b9      	ldr	r1, [r7, #24]
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	e841 2300 	strex	r3, r2, [r1]
 8005460:	617b      	str	r3, [r7, #20]
   return(result);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e5      	bne.n	8005434 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e011      	b.n	80054a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2220      	movs	r2, #32
 8005480:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2220      	movs	r2, #32
 8005486:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3758      	adds	r7, #88	@ 0x58
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054b8:	e04f      	b.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c0:	d04b      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c2:	f7fc fb49 	bl	8001b58 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e04e      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d037      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	2b80      	cmp	r3, #128	@ 0x80
 80054ee:	d034      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	2b40      	cmp	r3, #64	@ 0x40
 80054f4:	d031      	beq.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	2b08      	cmp	r3, #8
 8005502:	d110      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2208      	movs	r2, #8
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f838 	bl	8005582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2208      	movs	r2, #8
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e029      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69db      	ldr	r3, [r3, #28]
 800552c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005534:	d111      	bne.n	800555a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800553e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f000 f81e 	bl	8005582 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e00f      	b.n	800557a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4013      	ands	r3, r2
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf0c      	ite	eq
 800556a:	2301      	moveq	r3, #1
 800556c:	2300      	movne	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	461a      	mov	r2, r3
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	429a      	cmp	r2, r3
 8005576:	d0a0      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005582:	b480      	push	{r7}
 8005584:	b095      	sub	sp, #84	@ 0x54
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800559e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80055aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e6      	bne.n	800558a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3308      	adds	r3, #8
 80055c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3308      	adds	r3, #8
 80055da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e5      	bne.n	80055bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d118      	bne.n	800562a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	60bb      	str	r3, [r7, #8]
   return(result);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f023 0310 	bic.w	r3, r3, #16
 800560c:	647b      	str	r3, [r7, #68]	@ 0x44
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6979      	ldr	r1, [r7, #20]
 800561c:	69ba      	ldr	r2, [r7, #24]
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	613b      	str	r3, [r7, #16]
   return(result);
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2220      	movs	r2, #32
 800562e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800563e:	bf00      	nop
 8005640:	3754      	adds	r7, #84	@ 0x54
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
	...

0800564c <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800565a:	089b      	lsrs	r3, r3, #2
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	f000 80d9 	beq.w	800581a <ethernetif_notify_conn_changed+0x1ce>
  {
#ifndef USE_DHCP
    IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005668:	4b6f      	ldr	r3, [pc, #444]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	061a      	lsls	r2, r3, #24
 800566e:	4b6e      	ldr	r3, [pc, #440]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	041b      	lsls	r3, r3, #16
 8005674:	431a      	orrs	r2, r3
 8005676:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 8005678:	789b      	ldrb	r3, [r3, #2]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	4313      	orrs	r3, r2
 800567e:	4a6a      	ldr	r2, [pc, #424]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 8005680:	78d2      	ldrb	r2, [r2, #3]
 8005682:	4313      	orrs	r3, r2
 8005684:	061a      	lsls	r2, r3, #24
 8005686:	4b68      	ldr	r3, [pc, #416]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	0619      	lsls	r1, r3, #24
 800568c:	4b66      	ldr	r3, [pc, #408]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 800568e:	785b      	ldrb	r3, [r3, #1]
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	4319      	orrs	r1, r3
 8005694:	4b64      	ldr	r3, [pc, #400]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 8005696:	789b      	ldrb	r3, [r3, #2]
 8005698:	021b      	lsls	r3, r3, #8
 800569a:	430b      	orrs	r3, r1
 800569c:	4962      	ldr	r1, [pc, #392]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 800569e:	78c9      	ldrb	r1, [r1, #3]
 80056a0:	430b      	orrs	r3, r1
 80056a2:	021b      	lsls	r3, r3, #8
 80056a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80056a8:	431a      	orrs	r2, r3
 80056aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	0619      	lsls	r1, r3, #24
 80056b0:	4b5d      	ldr	r3, [pc, #372]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	041b      	lsls	r3, r3, #16
 80056b6:	4319      	orrs	r1, r3
 80056b8:	4b5b      	ldr	r3, [pc, #364]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056ba:	789b      	ldrb	r3, [r3, #2]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	430b      	orrs	r3, r1
 80056c0:	4959      	ldr	r1, [pc, #356]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056c2:	78c9      	ldrb	r1, [r1, #3]
 80056c4:	430b      	orrs	r3, r1
 80056c6:	0a1b      	lsrs	r3, r3, #8
 80056c8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80056cc:	431a      	orrs	r2, r3
 80056ce:	4b56      	ldr	r3, [pc, #344]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	0619      	lsls	r1, r3, #24
 80056d4:	4b54      	ldr	r3, [pc, #336]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056d6:	785b      	ldrb	r3, [r3, #1]
 80056d8:	041b      	lsls	r3, r3, #16
 80056da:	4319      	orrs	r1, r3
 80056dc:	4b52      	ldr	r3, [pc, #328]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056de:	789b      	ldrb	r3, [r3, #2]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	430b      	orrs	r3, r1
 80056e4:	4950      	ldr	r1, [pc, #320]	@ (8005828 <ethernetif_notify_conn_changed+0x1dc>)
 80056e6:	78c9      	ldrb	r1, [r1, #3]
 80056e8:	430b      	orrs	r3, r1
 80056ea:	0e1b      	lsrs	r3, r3, #24
 80056ec:	4313      	orrs	r3, r2
 80056ee:	4a4f      	ldr	r2, [pc, #316]	@ (800582c <ethernetif_notify_conn_changed+0x1e0>)
 80056f0:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80056f2:	4b4f      	ldr	r3, [pc, #316]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	061a      	lsls	r2, r3, #24
 80056f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	041b      	lsls	r3, r3, #16
 80056fe:	431a      	orrs	r2, r3
 8005700:	4b4b      	ldr	r3, [pc, #300]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005702:	789b      	ldrb	r3, [r3, #2]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	4313      	orrs	r3, r2
 8005708:	4a49      	ldr	r2, [pc, #292]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 800570a:	78d2      	ldrb	r2, [r2, #3]
 800570c:	4313      	orrs	r3, r2
 800570e:	061a      	lsls	r2, r3, #24
 8005710:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	0619      	lsls	r1, r3, #24
 8005716:	4b46      	ldr	r3, [pc, #280]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005718:	785b      	ldrb	r3, [r3, #1]
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	4319      	orrs	r1, r3
 800571e:	4b44      	ldr	r3, [pc, #272]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005720:	789b      	ldrb	r3, [r3, #2]
 8005722:	021b      	lsls	r3, r3, #8
 8005724:	430b      	orrs	r3, r1
 8005726:	4942      	ldr	r1, [pc, #264]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005728:	78c9      	ldrb	r1, [r1, #3]
 800572a:	430b      	orrs	r3, r1
 800572c:	021b      	lsls	r3, r3, #8
 800572e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005732:	431a      	orrs	r2, r3
 8005734:	4b3e      	ldr	r3, [pc, #248]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	0619      	lsls	r1, r3, #24
 800573a:	4b3d      	ldr	r3, [pc, #244]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	4319      	orrs	r1, r3
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005744:	789b      	ldrb	r3, [r3, #2]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	430b      	orrs	r3, r1
 800574a:	4939      	ldr	r1, [pc, #228]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 800574c:	78c9      	ldrb	r1, [r1, #3]
 800574e:	430b      	orrs	r3, r1
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005756:	431a      	orrs	r2, r3
 8005758:	4b35      	ldr	r3, [pc, #212]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	0619      	lsls	r1, r3, #24
 800575e:	4b34      	ldr	r3, [pc, #208]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	041b      	lsls	r3, r3, #16
 8005764:	4319      	orrs	r1, r3
 8005766:	4b32      	ldr	r3, [pc, #200]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005768:	789b      	ldrb	r3, [r3, #2]
 800576a:	021b      	lsls	r3, r3, #8
 800576c:	430b      	orrs	r3, r1
 800576e:	4930      	ldr	r1, [pc, #192]	@ (8005830 <ethernetif_notify_conn_changed+0x1e4>)
 8005770:	78c9      	ldrb	r1, [r1, #3]
 8005772:	430b      	orrs	r3, r1
 8005774:	0e1b      	lsrs	r3, r3, #24
 8005776:	4313      	orrs	r3, r2
 8005778:	4a2e      	ldr	r2, [pc, #184]	@ (8005834 <ethernetif_notify_conn_changed+0x1e8>)
 800577a:	6013      	str	r3, [r2, #0]
    IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800577c:	4b2e      	ldr	r3, [pc, #184]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	061a      	lsls	r2, r3, #24
 8005782:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 8005784:	785b      	ldrb	r3, [r3, #1]
 8005786:	041b      	lsls	r3, r3, #16
 8005788:	431a      	orrs	r2, r3
 800578a:	4b2b      	ldr	r3, [pc, #172]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 800578c:	789b      	ldrb	r3, [r3, #2]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	4313      	orrs	r3, r2
 8005792:	4a29      	ldr	r2, [pc, #164]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 8005794:	78d2      	ldrb	r2, [r2, #3]
 8005796:	4313      	orrs	r3, r2
 8005798:	061a      	lsls	r2, r3, #24
 800579a:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	0619      	lsls	r1, r3, #24
 80057a0:	4b25      	ldr	r3, [pc, #148]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	4319      	orrs	r1, r3
 80057a8:	4b23      	ldr	r3, [pc, #140]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057aa:	789b      	ldrb	r3, [r3, #2]
 80057ac:	021b      	lsls	r3, r3, #8
 80057ae:	430b      	orrs	r3, r1
 80057b0:	4921      	ldr	r1, [pc, #132]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057b2:	78c9      	ldrb	r1, [r1, #3]
 80057b4:	430b      	orrs	r3, r1
 80057b6:	021b      	lsls	r3, r3, #8
 80057b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80057bc:	431a      	orrs	r2, r3
 80057be:	4b1e      	ldr	r3, [pc, #120]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	0619      	lsls	r1, r3, #24
 80057c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	041b      	lsls	r3, r3, #16
 80057ca:	4319      	orrs	r1, r3
 80057cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057ce:	789b      	ldrb	r3, [r3, #2]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	430b      	orrs	r3, r1
 80057d4:	4918      	ldr	r1, [pc, #96]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057d6:	78c9      	ldrb	r1, [r1, #3]
 80057d8:	430b      	orrs	r3, r1
 80057da:	0a1b      	lsrs	r3, r3, #8
 80057dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80057e0:	431a      	orrs	r2, r3
 80057e2:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	0619      	lsls	r1, r3, #24
 80057e8:	4b13      	ldr	r3, [pc, #76]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057ea:	785b      	ldrb	r3, [r3, #1]
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	4319      	orrs	r1, r3
 80057f0:	4b11      	ldr	r3, [pc, #68]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057f2:	789b      	ldrb	r3, [r3, #2]
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	430b      	orrs	r3, r1
 80057f8:	490f      	ldr	r1, [pc, #60]	@ (8005838 <ethernetif_notify_conn_changed+0x1ec>)
 80057fa:	78c9      	ldrb	r1, [r1, #3]
 80057fc:	430b      	orrs	r3, r1
 80057fe:	0e1b      	lsrs	r3, r3, #24
 8005800:	4313      	orrs	r3, r2
 8005802:	4a0e      	ldr	r2, [pc, #56]	@ (800583c <ethernetif_notify_conn_changed+0x1f0>)
 8005804:	6013      	str	r3, [r2, #0]
#endif
    netif_set_addr(netif, &ipaddr , &netmask, &gw);
 8005806:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <ethernetif_notify_conn_changed+0x1f0>)
 8005808:	4a0a      	ldr	r2, [pc, #40]	@ (8005834 <ethernetif_notify_conn_changed+0x1e8>)
 800580a:	4908      	ldr	r1, [pc, #32]	@ (800582c <ethernetif_notify_conn_changed+0x1e0>)
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f006 fdf9 	bl	800c404 <netif_set_addr>

    /* When the netif is fully configured this function must be called.*/
    netif_set_up(netif);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f006 fe50 	bl	800c4b8 <netif_set_up>
    netif_set_down(netif);

    /* led off */
   // HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  }
}
 8005818:	e002      	b.n	8005820 <ethernetif_notify_conn_changed+0x1d4>
    netif_set_down(netif);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f006 feb8 	bl	800c590 <netif_set_down>
}
 8005820:	bf00      	nop
 8005822:	3708      	adds	r7, #8
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	20000b4c 	.word	0x20000b4c
 800582c:	20000b40 	.word	0x20000b40
 8005830:	20000b50 	.word	0x20000b50
 8005834:	20000b44 	.word	0x20000b44
 8005838:	20000b54 	.word	0x20000b54
 800583c:	20000b48 	.word	0x20000b48

08005840 <Netif_Config>:

/* USER CODE END 2 */

/* find appropriate file for this on day */
void Netif_Config(void)
{
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08e      	sub	sp, #56	@ 0x38
 8005844:	af04      	add	r7, sp, #16
#ifdef USE_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8005846:	4b27      	ldr	r3, [pc, #156]	@ (80058e4 <Netif_Config+0xa4>)
 8005848:	627b      	str	r3, [r7, #36]	@ 0x24
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 800584a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800584e:	623b      	str	r3, [r7, #32]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8005850:	4b25      	ldr	r3, [pc, #148]	@ (80058e8 <Netif_Config+0xa8>)
 8005852:	61fb      	str	r3, [r7, #28]
#endif /* USE_DHCP */


  /* add the network interface */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8005854:	f107 031c 	add.w	r3, r7, #28
 8005858:	f107 0220 	add.w	r2, r7, #32
 800585c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8005860:	4822      	ldr	r0, [pc, #136]	@ (80058ec <Netif_Config+0xac>)
 8005862:	9002      	str	r0, [sp, #8]
 8005864:	4822      	ldr	r0, [pc, #136]	@ (80058f0 <Netif_Config+0xb0>)
 8005866:	9001      	str	r0, [sp, #4]
 8005868:	2000      	movs	r0, #0
 800586a:	9000      	str	r0, [sp, #0]
 800586c:	4821      	ldr	r0, [pc, #132]	@ (80058f4 <Netif_Config+0xb4>)
 800586e:	f006 fc59 	bl	800c124 <netif_add>

  /* create a binary semaphore used for informing ethernetif of frame reception */

  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 8005872:	4820      	ldr	r0, [pc, #128]	@ (80058f4 <Netif_Config+0xb4>)
 8005874:	f006 fe10 	bl	800c498 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8005878:	4b1e      	ldr	r3, [pc, #120]	@ (80058f4 <Netif_Config+0xb4>)
 800587a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800587e:	089b      	lsrs	r3, r3, #2
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <Netif_Config+0x52>
  {
    /* When the netif is fully configured this function must be called.*/
    netif_set_up(&gnetif);
 800588a:	481a      	ldr	r0, [pc, #104]	@ (80058f4 <Netif_Config+0xb4>)
 800588c:	f006 fe14 	bl	800c4b8 <netif_set_up>
 8005890:	e002      	b.n	8005898 <Netif_Config+0x58>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005892:	4818      	ldr	r0, [pc, #96]	@ (80058f4 <Netif_Config+0xb4>)
 8005894:	f006 fe7c 	bl	800c590 <netif_set_down>
  }
  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8005898:	4917      	ldr	r1, [pc, #92]	@ (80058f8 <Netif_Config+0xb8>)
 800589a:	4816      	ldr	r0, [pc, #88]	@ (80058f4 <Netif_Config+0xb4>)
 800589c:	f006 ff12 	bl	800c6c4 <netif_set_link_callback>

  /* Create the Ethernet IRQ handler thread */
  vQueueAddToRegistry(xSemaphore, "osSemaphore"); // permet le debug via l'interface dedié
 80058a0:	4b16      	ldr	r3, [pc, #88]	@ (80058fc <Netif_Config+0xbc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4916      	ldr	r1, [pc, #88]	@ (8005900 <Netif_Config+0xc0>)
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 fe0e 	bl	80074c8 <vQueueAddToRegistry>
  irq_arg.netif = &gnetif;
 80058ac:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <Netif_Config+0xc4>)
 80058ae:	4a11      	ldr	r2, [pc, #68]	@ (80058f4 <Netif_Config+0xb4>)
 80058b0:	601a      	str	r2, [r3, #0]
  irq_arg.semaphore = xSemaphore;
 80058b2:	4b12      	ldr	r3, [pc, #72]	@ (80058fc <Netif_Config+0xbc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a13      	ldr	r2, [pc, #76]	@ (8005904 <Netif_Config+0xc4>)
 80058b8:	6053      	str	r3, [r2, #4]

  osThreadDef(EthernetTsk, ethernetif_process_irq, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE *2);
 80058ba:	4b13      	ldr	r3, [pc, #76]	@ (8005908 <Netif_Config+0xc8>)
 80058bc:	463c      	mov	r4, r7
 80058be:	461d      	mov	r5, r3
 80058c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandleGlobal = osThreadCreate (osThread(EthernetTsk), &irq_arg);
 80058cc:	463b      	mov	r3, r7
 80058ce:	490d      	ldr	r1, [pc, #52]	@ (8005904 <Netif_Config+0xc4>)
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fa35 	bl	8005d40 <osThreadCreate>
 80058d6:	4603      	mov	r3, r0
 80058d8:	4a0c      	ldr	r2, [pc, #48]	@ (800590c <Netif_Config+0xcc>)
 80058da:	6013      	str	r3, [r2, #0]
}
 80058dc:	bf00      	nop
 80058de:	3728      	adds	r7, #40	@ 0x28
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bdb0      	pop	{r4, r5, r7, pc}
 80058e4:	64a8fea9 	.word	0x64a8fea9
 80058e8:	46a8fea9 	.word	0x46a8fea9
 80058ec:	0800b251 	.word	0x0800b251
 80058f0:	08005b8d 	.word	0x08005b8d
 80058f4:	20000b08 	.word	0x20000b08
 80058f8:	08005c91 	.word	0x08005c91
 80058fc:	20000a54 	.word	0x20000a54
 8005900:	080191e8 	.word	0x080191e8
 8005904:	20000b00 	.word	0x20000b00
 8005908:	08019200 	.word	0x08019200
 800590c:	20000aa0 	.word	0x20000aa0

08005910 <ENC_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void ENC_MspInit(ENC_HandleTypeDef* encHandle)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005918:	4b12      	ldr	r3, [pc, #72]	@ (8005964 <ENC_MspInit+0x54>)
 800591a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800591c:	4a11      	ldr	r2, [pc, #68]	@ (8005964 <ENC_MspInit+0x54>)
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <ENC_MspInit+0x54>)
 8005926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]

  /* ENC28J60_CS ----------------------> PB12 */
  /*Configure GPIO pins : PB12 */
  GPIO_InitStructure.Pin = GPIO_PIN_12;
 8005930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005934:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8005936:	2301      	movs	r3, #1
 8005938:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800593a:	2300      	movs	r3, #0
 800593c:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 800593e:	2301      	movs	r3, #1
 8005940:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	4619      	mov	r1, r3
 8005948:	4807      	ldr	r0, [pc, #28]	@ (8005968 <ENC_MspInit+0x58>)
 800594a:	f7fc fa25 	bl	8001d98 <HAL_GPIO_Init>

  /* Deselect ENC28J60 module */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 800594e:	2201      	movs	r2, #1
 8005950:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005954:	4804      	ldr	r0, [pc, #16]	@ (8005968 <ENC_MspInit+0x58>)
 8005956:	f7fc fbc9 	bl	80020ec <HAL_GPIO_WritePin>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
}
 800595a:	bf00      	nop
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
 8005968:	48000400 	.word	0x48000400

0800596c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* set MAC hardware address length */
  netif->hwaddr_len = ETHARP_HWADDR_LEN;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2206      	movs	r2, #6
 8005978:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC address */
  netif->hwaddr[0] = 0x00;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] = 0x80;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2280      	movs	r2, #128	@ 0x80
 8005988:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] = 0xE1;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	22e1      	movs	r2, #225	@ 0xe1
 8005990:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] = 0x00;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] = 0x00;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] = 0x00;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  EncHandle.Init.MACAddr = netif->hwaddr;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	332a      	adds	r3, #42	@ 0x2a
 80059b0:	4a18      	ldr	r2, [pc, #96]	@ (8005a14 <low_level_init+0xa8>)
 80059b2:	6053      	str	r3, [r2, #4]
  EncHandle.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80059b4:	4b17      	ldr	r3, [pc, #92]	@ (8005a14 <low_level_init+0xa8>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
  EncHandle.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80059ba:	4b16      	ldr	r3, [pc, #88]	@ (8005a14 <low_level_init+0xa8>)
 80059bc:	2200      	movs	r2, #0
 80059be:	609a      	str	r2, [r3, #8]
  EncHandle.Init.InterruptEnableBits = EIE_LINKIE | EIE_PKTIE;
 80059c0:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <low_level_init+0xa8>)
 80059c2:	2250      	movs	r2, #80	@ 0x50
 80059c4:	731a      	strb	r2, [r3, #12]

  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  ENC_MspInit(&EncHandle);
 80059c6:	4813      	ldr	r0, [pc, #76]	@ (8005a14 <low_level_init+0xa8>)
 80059c8:	f7ff ffa2 	bl	8005910 <ENC_MspInit>

  /* maximum transfer unit */
  netif->mtu = 1500;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80059d2:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059da:	f043 030a 	orr.w	r3, r3, #10
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  /* Start the EN28J60 module */
  if(enc_start(&EncHandle))
 80059e6:	480b      	ldr	r0, [pc, #44]	@ (8005a14 <low_level_init+0xa8>)
 80059e8:	f7fa fe8e 	bl	8000708 <enc_start>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00b      	beq.n	8005a0a <low_level_init+0x9e>
  {
    /* Set the MAC address */
    enc_set_MAC(&EncHandle);
 80059f2:	4808      	ldr	r0, [pc, #32]	@ (8005a14 <low_level_init+0xa8>)
 80059f4:	f7fa ff74 	bl	80008e0 <enc_set_MAC>

    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059fe:	f043 0304 	orr.w	r3, r3, #4
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	20000b58 	.word	0x20000b58

08005a18 <low_level_output>:

  return ERR_OK;
}
*/
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
    /* TODO use netif to check if we are the right ethernet interface */
  err_t errval;
  struct pbuf *q;
  uint32_t framelength = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	613b      	str	r3, [r7, #16]

  if (EncHandle.transmitLength != 0) {
 8005a26:	4b23      	ldr	r3, [pc, #140]	@ (8005ab4 <low_level_output+0x9c>)
 8005a28:	8b1b      	ldrh	r3, [r3, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <low_level_output+0x24>
     while (PT_SCHEDULE(enc_transmit(&transmit_pt, &EncHandle))) {
         /* Wait for end of previous transmission */
     }
#else
     do {
         enc_transmit(&EncHandle);
 8005a2e:	4821      	ldr	r0, [pc, #132]	@ (8005ab4 <low_level_output+0x9c>)
 8005a30:	f7fb f802 	bl	8000a38 <enc_transmit>
     } while (EncHandle.transmitLength != 0);
 8005a34:	4b1f      	ldr	r3, [pc, #124]	@ (8005ab4 <low_level_output+0x9c>)
 8005a36:	8b1b      	ldrh	r3, [r3, #24]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1f8      	bne.n	8005a2e <low_level_output+0x16>
#endif
  }

  /* Prepare ENC28J60 Tx buffer */
  errval = enc_prepare_txbuffer(&EncHandle, p->tot_len);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	891b      	ldrh	r3, [r3, #8]
 8005a40:	4619      	mov	r1, r3
 8005a42:	481c      	ldr	r0, [pc, #112]	@ (8005ab4 <low_level_output+0x9c>)
 8005a44:	f7fa ff89 	bl	800095a <enc_prepare_txbuffer>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]
  if (errval != ERR_OK) {
 8005a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <low_level_output+0x42>
      return errval;
 8005a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a58:	e027      	b.n	8005aaa <low_level_output+0x92>
  }

  /* copy frame from pbufs to driver buffers and send packet */
  for(q = p; q != NULL; q = q->next) {
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e010      	b.n	8005a82 <low_level_output+0x6a>
    enc_wrbuffer(q->payload, q->len);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	895b      	ldrh	r3, [r3, #10]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	f7fa ffca 	bl	8000a04 <enc_wrbuffer>
    framelength += q->len;
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	895b      	ldrh	r3, [r3, #10]
 8005a74:	461a      	mov	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
  for(q = p; q != NULL; q = q->next) {
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1eb      	bne.n	8005a60 <low_level_output+0x48>
  }

  if (framelength != p->tot_len) {
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	891b      	ldrh	r3, [r3, #8]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d002      	beq.n	8005a9a <low_level_output+0x82>
     return ERR_BUF;
 8005a94:	f06f 0301 	mvn.w	r3, #1
 8005a98:	e007      	b.n	8005aaa <low_level_output+0x92>
  }

  EncHandle.transmitLength = p->tot_len;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	891a      	ldrh	r2, [r3, #8]
 8005a9e:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <low_level_output+0x9c>)
 8005aa0:	831a      	strh	r2, [r3, #24]

  /* If PROTOTHREADS are use, actual transmission is triggered in main loop */
#ifndef USE_PROTOTHREADS
    enc_transmit(&EncHandle);
 8005aa2:	4804      	ldr	r0, [pc, #16]	@ (8005ab4 <low_level_output+0x9c>)
 8005aa4:	f7fa ffc8 	bl	8000a38 <enc_transmit>
#endif

  return ERR_OK;
 8005aa8:	2300      	movs	r3, #0
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000b58 	.word	0x20000b58

08005ab8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b088      	sub	sp, #32
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]
  struct pbuf *q;
  uint16_t len;
  uint8_t *buffer;
  uint32_t bufferoffset = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]

  if(!enc_get_received_frame(&EncHandle))
 8005ac8:	481e      	ldr	r0, [pc, #120]	@ (8005b44 <low_level_input+0x8c>)
 8005aca:	f7fb f815 	bl	8000af8 <enc_get_received_frame>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f083 0301 	eor.w	r3, r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <low_level_input+0x26>
  {
    return NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	e02e      	b.n	8005b3c <low_level_input+0x84>
  }

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = EncHandle.RxFrameInfos.length;
 8005ade:	4b19      	ldr	r3, [pc, #100]	@ (8005b44 <low_level_input+0x8c>)
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae2:	827b      	strh	r3, [r7, #18]
  buffer = (uint8_t*) EncHandle.RxFrameInfos.buffer;
 8005ae4:	4b18      	ldr	r3, [pc, #96]	@ (8005b48 <low_level_input+0x90>)
 8005ae6:	60fb      	str	r3, [r7, #12]

  if(len > 0)
 8005ae8:	8a7b      	ldrh	r3, [r7, #18]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d007      	beq.n	8005afe <low_level_input+0x46>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8005aee:	8a7b      	ldrh	r3, [r7, #18]
 8005af0:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8005af4:	4619      	mov	r1, r3
 8005af6:	2000      	movs	r0, #0
 8005af8:	f006 fe54 	bl	800c7a4 <pbuf_alloc>
 8005afc:	61f8      	str	r0, [r7, #28]
  }

  if(p != NULL)
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01a      	beq.n	8005b3a <low_level_input+0x82>
  {
    bufferoffset = 0;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]

    for(q = p;q != NULL;q = q->next)
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e012      	b.n	8005b34 <low_level_input+0x7c>
    {
      /* Copy data in pbuf */
      memcpy((uint8_t*) ((uint8_t*) q->payload), (uint8_t*) ((uint8_t*) buffer + bufferoffset), q->len);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	6858      	ldr	r0, [r3, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	18d1      	adds	r1, r2, r3
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f012 fcca 	bl	80184b6 <memcpy>
      bufferoffset = bufferoffset + q->len;
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	895b      	ldrh	r3, [r3, #10]
 8005b26:	461a      	mov	r2, r3
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	617b      	str	r3, [r7, #20]
    for(q = p;q != NULL;q = q->next)
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	61bb      	str	r3, [r7, #24]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e9      	bne.n	8005b0e <low_level_input+0x56>
    }
  }

  return p;
 8005b3a:	69fb      	ldr	r3, [r7, #28]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000b58 	.word	0x20000b58
 8005b48:	20000b84 	.word	0x20000b84

08005b4c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b084      	sub	sp, #16
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7ff ffaf 	bl	8005ab8 <low_level_input>
 8005b5a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if(p == NULL)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d010      	beq.n	8005b84 <ethernetif_input+0x38>
    return;

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	4798      	blx	r3
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	72fb      	strb	r3, [r7, #11]

  if(err != ERR_OK)
 8005b70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d006      	beq.n	8005b86 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f007 f8f7 	bl	800cd6c <pbuf_free>
    p = NULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
 8005b82:	e000      	b.n	8005b86 <ethernetif_input+0x3a>
    return;
 8005b84:	bf00      	nop
  }
}
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d106      	bne.n	8005ba8 <ethernetif_init+0x1c>
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <ethernetif_init+0x48>)
 8005b9c:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8005ba0:	490d      	ldr	r1, [pc, #52]	@ (8005bd8 <ethernetif_init+0x4c>)
 8005ba2:	480e      	ldr	r0, [pc, #56]	@ (8005bdc <ethernetif_init+0x50>)
 8005ba4:	f012 fbac 	bl	8018300 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "stm32idisco";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2265      	movs	r2, #101	@ 0x65
 8005bac:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	226e      	movs	r2, #110	@ 0x6e
 8005bb4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <ethernetif_init+0x54>)
 8005bbc:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a08      	ldr	r2, [pc, #32]	@ (8005be4 <ethernetif_init+0x58>)
 8005bc2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff fed1 	bl	800596c <low_level_init>

  return ERR_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	0801921c 	.word	0x0801921c
 8005bd8:	08019238 	.word	0x08019238
 8005bdc:	08019248 	.word	0x08019248
 8005be0:	08015e81 	.word	0x08015e81
 8005be4:	08005a19 	.word	0x08005a19

08005be8 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005bec:	f7fb ffb4 	bl	8001b58 <HAL_GetTick>
 8005bf0:	4603      	mov	r3, r0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <ethernetif_process_irq_do>:
  * @brief  This function actually process pending IRQs.
  * @param  handler: Reference to the driver state structure
  * @retval None
  */
void ethernetif_process_irq_do(void const *argument)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
    struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	60fb      	str	r3, [r7, #12]

    /* Handle ENC28J60 interrupt */
    enc_irq_handler(&EncHandle);
 8005c04:	4815      	ldr	r0, [pc, #84]	@ (8005c5c <ethernetif_process_irq_do+0x64>)
 8005c06:	f7fb f813 	bl	8000c30 <enc_irq_handler>

    /* Check whether the link is up or down*/
    if ((EncHandle.interruptFlags & EIE_LINKIE) != 0) {
 8005c0a:	4b14      	ldr	r3, [pc, #80]	@ (8005c5c <ethernetif_process_irq_do+0x64>)
 8005c0c:	7c5b      	ldrb	r3, [r3, #17]
 8005c0e:	f003 0310 	and.w	r3, r3, #16
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d010      	beq.n	8005c38 <ethernetif_process_irq_do+0x40>
        if((EncHandle.LinkStatus & PHSTAT2_LSTAT)!= 0) {
 8005c16:	4b11      	ldr	r3, [pc, #68]	@ (8005c5c <ethernetif_process_irq_do+0x64>)
 8005c18:	8adb      	ldrh	r3, [r3, #22]
 8005c1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d005      	beq.n	8005c2e <ethernetif_process_irq_do+0x36>
            netif_set_link_up(irq_arg->netif);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f006 fce4 	bl	800c5f4 <netif_set_link_up>
 8005c2c:	e004      	b.n	8005c38 <ethernetif_process_irq_do+0x40>
        } else {
            netif_set_link_down(irq_arg->netif);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4618      	mov	r0, r3
 8005c34:	f006 fd16 	bl	800c664 <netif_set_link_down>
        }
    }

    /* Check whether we have received a packet */
    if((EncHandle.interruptFlags & EIR_PKTIF) != 0) {
 8005c38:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <ethernetif_process_irq_do+0x64>)
 8005c3a:	7c5b      	ldrb	r3, [r3, #17]
 8005c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d004      	beq.n	8005c4e <ethernetif_process_irq_do+0x56>
        ethernetif_input(irq_arg->netif);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff ff7f 	bl	8005b4c <ethernetif_input>
    }

    /* Renable global interrupts */
    enc_enable_interrupts(EIE_INTIE);
 8005c4e:	2080      	movs	r0, #128	@ 0x80
 8005c50:	f7fa ffe0 	bl	8000c14 <enc_enable_interrupts>
}
 8005c54:	bf00      	nop
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000b58 	.word	0x20000b58

08005c60 <ethernetif_process_irq>:
  * @brief  This function triggers the interrupt service callback.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_process_irq(void const *argument)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  struct enc_irq_str *irq_arg = (struct enc_irq_str *)argument;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	//if (xSemaphoreTake( xSemaphore, ( TickType_t )portMAX_DELAY ) == pdTRUE)
	  if (osSemaphoreWait(irq_arg->semaphore, osWaitForever) == osOK)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f04f 31ff 	mov.w	r1, #4294967295
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 f9ab 	bl	8005fd0 <osSemaphoreWait>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f5      	bne.n	8005c6c <ethernetif_process_irq+0xc>
	  {
    	/* Handle ENC28J60 interrupt */
    	tcpip_callback((tcpip_callback_fn) ethernetif_process_irq_do, (void *) argument);
 8005c80:	6879      	ldr	r1, [r7, #4]
 8005c82:	4802      	ldr	r0, [pc, #8]	@ (8005c8c <ethernetif_process_irq+0x2c>)
 8005c84:	f005 fb06 	bl	800b294 <tcpip_callback>
	  if (osSemaphoreWait(irq_arg->semaphore, osWaitForever) == osOK)
 8005c88:	e7f0      	b.n	8005c6c <ethernetif_process_irq+0xc>
 8005c8a:	bf00      	nop
 8005c8c:	08005bf9 	.word	0x08005bf9

08005c90 <ethernetif_update_config>:
 *         to update low level driver configuration.
 * @param  netif: The network interface
 * @retval None
 */
void ethernetif_update_config(struct netif *netif)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  if(netif_is_link_up(netif))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005c9e:	089b      	lsrs	r3, r3, #2
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <ethernetif_update_config+0x20>
  {
    /* Restart the EN28J60 module */
    low_level_init(netif);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7ff fe5e 	bl	800596c <low_level_init>
  }

  ethernetif_notify_conn_changed(netif);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f7ff fccb 	bl	800564c <ethernetif_notify_conn_changed>
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ccc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005cd0:	2b84      	cmp	r3, #132	@ 0x84
 8005cd2:	d005      	beq.n	8005ce0 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005cd4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	3303      	adds	r3, #3
 8005cde:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf4:	f3ef 8305 	mrs	r3, IPSR
 8005cf8:	607b      	str	r3, [r7, #4]
  return(result);
 8005cfa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	bf14      	ite	ne
 8005d00:	2301      	movne	r3, #1
 8005d02:	2300      	moveq	r3, #0
 8005d04:	b2db      	uxtb	r3, r3
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d16:	f001 fe91 	bl	8007a3c <vTaskStartScheduler>
  
  return osOK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005d24:	f7ff ffe3 	bl	8005cee <inHandlerMode>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d003      	beq.n	8005d36 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005d2e:	f001 ffa3 	bl	8007c78 <xTaskGetTickCountFromISR>
 8005d32:	4603      	mov	r3, r0
 8005d34:	e002      	b.n	8005d3c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005d36:	f001 ff8f 	bl	8007c58 <xTaskGetTickCount>
 8005d3a:	4603      	mov	r3, r0
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	b089      	sub	sp, #36	@ 0x24
 8005d44:	af04      	add	r7, sp, #16
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d020      	beq.n	8005d94 <osThreadCreate+0x54>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01c      	beq.n	8005d94 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685c      	ldr	r4, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691e      	ldr	r6, [r3, #16]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff ffa6 	bl	8005cbe <makeFreeRtosPriority>
 8005d72:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d7c:	9202      	str	r2, [sp, #8]
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	9100      	str	r1, [sp, #0]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	4632      	mov	r2, r6
 8005d86:	4629      	mov	r1, r5
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f001 fbf1 	bl	8007570 <xTaskCreateStatic>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e01c      	b.n	8005dce <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685c      	ldr	r4, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005da0:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ff88 	bl	8005cbe <makeFreeRtosPriority>
 8005dae:	4602      	mov	r2, r0
 8005db0:	f107 030c 	add.w	r3, r7, #12
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	9200      	str	r2, [sp, #0]
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f001 fc36 	bl	8007630 <xTaskCreate>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d001      	beq.n	8005dce <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e000      	b.n	8005dd0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005dce:	68fb      	ldr	r3, [r7, #12]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dd8 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b082      	sub	sp, #8
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 fd65 	bl	80078b0 <vTaskDelete>
  return osOK;
 8005de6:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3708      	adds	r7, #8
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <osDelay+0x16>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	e000      	b.n	8005e08 <osDelay+0x18>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f001 fde1 	bl	80079d0 <vTaskDelay>
  
  return osOK;
 8005e0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d007      	beq.n	8005e38 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	2001      	movs	r0, #1
 8005e30:	f000 fc93 	bl	800675a <xQueueCreateMutexStatic>
 8005e34:	4603      	mov	r3, r0
 8005e36:	e003      	b.n	8005e40 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005e38:	2001      	movs	r0, #1
 8005e3a:	f000 fc76 	bl	800672a <xQueueCreateMutex>
 8005e3e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <osMutexWait+0x18>
    return osErrorParameter;
 8005e5c:	2380      	movs	r3, #128	@ 0x80
 8005e5e:	e03a      	b.n	8005ed6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6a:	d103      	bne.n	8005e74 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	e009      	b.n	8005e88 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d006      	beq.n	8005e88 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <osMutexWait+0x40>
      ticks = 1;
 8005e84:	2301      	movs	r3, #1
 8005e86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005e88:	f7ff ff31 	bl	8005cee <inHandlerMode>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d017      	beq.n	8005ec2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	461a      	mov	r2, r3
 8005e98:	2100      	movs	r1, #0
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f001 f908 	bl	80070b0 <xQueueReceiveFromISR>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <osMutexWait+0x62>
      return osErrorOS;
 8005ea6:	23ff      	movs	r3, #255	@ 0xff
 8005ea8:	e015      	b.n	8005ed6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d011      	beq.n	8005ed4 <osMutexWait+0x8c>
 8005eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ee0 <osMutexWait+0x98>)
 8005eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	f3bf 8f4f 	dsb	sy
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	e008      	b.n	8005ed4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005ec2:	68f9      	ldr	r1, [r7, #12]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 ffe3 	bl	8006e90 <xQueueSemaphoreTake>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d001      	beq.n	8005ed4 <osMutexWait+0x8c>
    return osErrorOS;
 8005ed0:	23ff      	movs	r3, #255	@ 0xff
 8005ed2:	e000      	b.n	8005ed6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	e000ed04 	.word	0xe000ed04

08005ee4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005ef4:	f7ff fefb 	bl	8005cee <inHandlerMode>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d016      	beq.n	8005f2c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005efe:	f107 0308 	add.w	r3, r7, #8
 8005f02:	4619      	mov	r1, r3
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fe51 	bl	8006bac <xQueueGiveFromISR>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d001      	beq.n	8005f14 <osMutexRelease+0x30>
      return osErrorOS;
 8005f10:	23ff      	movs	r3, #255	@ 0xff
 8005f12:	e017      	b.n	8005f44 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d013      	beq.n	8005f42 <osMutexRelease+0x5e>
 8005f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f4c <osMutexRelease+0x68>)
 8005f1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f20:	601a      	str	r2, [r3, #0]
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	e00a      	b.n	8005f42 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2100      	movs	r1, #0
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fc9a 	bl	800686c <xQueueGenericSend>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d001      	beq.n	8005f42 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005f3e:	23ff      	movs	r3, #255	@ 0xff
 8005f40:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005f42:	68fb      	ldr	r3, [r7, #12]
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3710      	adds	r7, #16
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af02      	add	r7, sp, #8
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <osSemaphoreCreate+0x40>
    if (count == 1) {
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d10a      	bne.n	8005f7e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2203      	movs	r2, #3
 8005f6e:	9200      	str	r2, [sp, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2100      	movs	r1, #0
 8005f74:	2001      	movs	r0, #1
 8005f76:	f000 fae7 	bl	8006548 <xQueueGenericCreateStatic>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e023      	b.n	8005fc6 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
 8005f7e:	6838      	ldr	r0, [r7, #0]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	461a      	mov	r2, r3
 8005f88:	f000 fc02 	bl	8006790 <xQueueCreateCountingSemaphoreStatic>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	e01a      	b.n	8005fc6 <osSemaphoreCreate+0x76>
      return NULL;
#endif
    }
  }
  else {
    if (count == 1) {
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d110      	bne.n	8005fb8 <osSemaphoreCreate+0x68>
      vSemaphoreCreateBinary(sema);
 8005f96:	2203      	movs	r2, #3
 8005f98:	2100      	movs	r1, #0
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f000 fb51 	bl	8006642 <xQueueGenericCreate>
 8005fa0:	60f8      	str	r0, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <osSemaphoreCreate+0x64>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2200      	movs	r2, #0
 8005fac:	2100      	movs	r1, #0
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f000 fc5c 	bl	800686c <xQueueGenericSend>
      return sema;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	e006      	b.n	8005fc6 <osSemaphoreCreate+0x76>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fc1f 	bl	8006802 <xQueueCreateCountingSemaphore>
 8005fc4:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
	...

08005fd0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005fda:	2300      	movs	r3, #0
 8005fdc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d101      	bne.n	8005fe8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005fe4:	2380      	movs	r3, #128	@ 0x80
 8005fe6:	e03a      	b.n	800605e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff2:	d103      	bne.n	8005ffc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	e009      	b.n	8006010 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d006      	beq.n	8006010 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <osSemaphoreWait+0x40>
      ticks = 1;
 800600c:	2301      	movs	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006010:	f7ff fe6d 	bl	8005cee <inHandlerMode>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d017      	beq.n	800604a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	461a      	mov	r2, r3
 8006020:	2100      	movs	r1, #0
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 f844 	bl	80070b0 <xQueueReceiveFromISR>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d001      	beq.n	8006032 <osSemaphoreWait+0x62>
      return osErrorOS;
 800602e:	23ff      	movs	r3, #255	@ 0xff
 8006030:	e015      	b.n	800605e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d011      	beq.n	800605c <osSemaphoreWait+0x8c>
 8006038:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <osSemaphoreWait+0x98>)
 800603a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603e:	601a      	str	r2, [r3, #0]
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	e008      	b.n	800605c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f000 ff1f 	bl	8006e90 <xQueueSemaphoreTake>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d001      	beq.n	800605c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006058:	23ff      	movs	r3, #255	@ 0xff
 800605a:	e000      	b.n	800605e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	e000ed04 	.word	0xe000ed04

0800606c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b084      	sub	sp, #16
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006074:	2300      	movs	r3, #0
 8006076:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800607c:	f7ff fe37 	bl	8005cee <inHandlerMode>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8006086:	f107 0308 	add.w	r3, r7, #8
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fd8d 	bl	8006bac <xQueueGiveFromISR>
 8006092:	4603      	mov	r3, r0
 8006094:	2b01      	cmp	r3, #1
 8006096:	d001      	beq.n	800609c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006098:	23ff      	movs	r3, #255	@ 0xff
 800609a:	e017      	b.n	80060cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d013      	beq.n	80060ca <osSemaphoreRelease+0x5e>
 80060a2:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <osSemaphoreRelease+0x68>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	e00a      	b.n	80060ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80060b4:	2300      	movs	r3, #0
 80060b6:	2200      	movs	r2, #0
 80060b8:	2100      	movs	r1, #0
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fbd6 	bl	800686c <xQueueGenericSend>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d001      	beq.n	80060ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80060c6:	23ff      	movs	r3, #255	@ 0xff
 80060c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80060ca:	68fb      	ldr	r3, [r7, #12]
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80060e0:	f7ff fe05 	bl	8005cee <inHandlerMode>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <osSemaphoreDelete+0x16>
    return osErrorISR;
 80060ea:	2382      	movs	r3, #130	@ 0x82
 80060ec:	e003      	b.n	80060f6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f001 f89e 	bl	8007230 <vQueueDelete>

  return osOK; 
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80060fe:	b590      	push	{r4, r7, lr}
 8006100:	b085      	sub	sp, #20
 8006102:	af02      	add	r7, sp, #8
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d011      	beq.n	8006134 <osMessageCreate+0x36>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00d      	beq.n	8006134 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6859      	ldr	r1, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	2400      	movs	r4, #0
 800612a:	9400      	str	r4, [sp, #0]
 800612c:	f000 fa0c 	bl	8006548 <xQueueGenericCreateStatic>
 8006130:	4603      	mov	r3, r0
 8006132:	e008      	b.n	8006146 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	4619      	mov	r1, r3
 8006140:	f000 fa7f 	bl	8006642 <xQueueGenericCreate>
 8006144:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	bd90      	pop	{r4, r7, pc}
	...

08006150 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d101      	bne.n	800616e <osMessagePut+0x1e>
    ticks = 1;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800616e:	f7ff fdbe 	bl	8005cee <inHandlerMode>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d018      	beq.n	80061aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006178:	f107 0210 	add.w	r2, r7, #16
 800617c:	f107 0108 	add.w	r1, r7, #8
 8006180:	2300      	movs	r3, #0
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fc74 	bl	8006a70 <xQueueGenericSendFromISR>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d001      	beq.n	8006192 <osMessagePut+0x42>
      return osErrorOS;
 800618e:	23ff      	movs	r3, #255	@ 0xff
 8006190:	e018      	b.n	80061c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d014      	beq.n	80061c2 <osMessagePut+0x72>
 8006198:	4b0c      	ldr	r3, [pc, #48]	@ (80061cc <osMessagePut+0x7c>)
 800619a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	e00b      	b.n	80061c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80061aa:	f107 0108 	add.w	r1, r7, #8
 80061ae:	2300      	movs	r3, #0
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fb5a 	bl	800686c <xQueueGenericSend>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d001      	beq.n	80061c2 <osMessagePut+0x72>
      return osErrorOS;
 80061be:	23ff      	movs	r3, #255	@ 0xff
 80061c0:	e000      	b.n	80061c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80061d0:	b590      	push	{r4, r7, lr}
 80061d2:	b08b      	sub	sp, #44	@ 0x2c
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80061e0:	2300      	movs	r3, #0
 80061e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80061ea:	2380      	movs	r3, #128	@ 0x80
 80061ec:	617b      	str	r3, [r7, #20]
    return event;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	461c      	mov	r4, r3
 80061f2:	f107 0314 	add.w	r3, r7, #20
 80061f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80061fe:	e054      	b.n	80062aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8006200:	2300      	movs	r3, #0
 8006202:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8006204:	2300      	movs	r3, #0
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620e:	d103      	bne.n	8006218 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8006210:	f04f 33ff 	mov.w	r3, #4294967295
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
 8006216:	e009      	b.n	800622c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d006      	beq.n	800622c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <osMessageGet+0x5c>
      ticks = 1;
 8006228:	2301      	movs	r3, #1
 800622a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800622c:	f7ff fd5f 	bl	8005cee <inHandlerMode>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d01c      	beq.n	8006270 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8006236:	f107 0220 	add.w	r2, r7, #32
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	3304      	adds	r3, #4
 8006240:	4619      	mov	r1, r3
 8006242:	68b8      	ldr	r0, [r7, #8]
 8006244:	f000 ff34 	bl	80070b0 <xQueueReceiveFromISR>
 8006248:	4603      	mov	r3, r0
 800624a:	2b01      	cmp	r3, #1
 800624c:	d102      	bne.n	8006254 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800624e:	2310      	movs	r3, #16
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e001      	b.n	8006258 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01d      	beq.n	800629a <osMessageGet+0xca>
 800625e:	4b15      	ldr	r3, [pc, #84]	@ (80062b4 <osMessageGet+0xe4>)
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	f3bf 8f4f 	dsb	sy
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	e014      	b.n	800629a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006270:	f107 0314 	add.w	r3, r7, #20
 8006274:	3304      	adds	r3, #4
 8006276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006278:	4619      	mov	r1, r3
 800627a:	68b8      	ldr	r0, [r7, #8]
 800627c:	f000 fd26 	bl	8006ccc <xQueueReceive>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006286:	2310      	movs	r3, #16
 8006288:	617b      	str	r3, [r7, #20]
 800628a:	e006      	b.n	800629a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <osMessageGet+0xc6>
 8006292:	2300      	movs	r3, #0
 8006294:	e000      	b.n	8006298 <osMessageGet+0xc8>
 8006296:	2340      	movs	r3, #64	@ 0x40
 8006298:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	461c      	mov	r4, r3
 800629e:	f107 0314 	add.w	r3, r7, #20
 80062a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80062aa:	68f8      	ldr	r0, [r7, #12]
 80062ac:	372c      	adds	r7, #44	@ 0x2c
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd90      	pop	{r4, r7, pc}
 80062b2:	bf00      	nop
 80062b4:	e000ed04 	.word	0xe000ed04

080062b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80062c0:	f7ff fd15 	bl	8005cee <inHandlerMode>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d004      	beq.n	80062d4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 ff91 	bl	80071f2 <uxQueueMessagesWaitingFromISR>
 80062d0:	4603      	mov	r3, r0
 80062d2:	e003      	b.n	80062dc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 ff6d 	bl	80071b4 <uxQueueMessagesWaiting>
 80062da:	4603      	mov	r3, r0
  }
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80062ec:	f7ff fcff 	bl	8005cee <inHandlerMode>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <osMessageDelete+0x16>
    return osErrorISR;
 80062f6:	2382      	movs	r3, #130	@ 0x82
 80062f8:	e003      	b.n	8006302 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 ff98 	bl	8007230 <vQueueDelete>

  return osOK; 
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f103 0208 	add.w	r2, r3, #8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f04f 32ff 	mov.w	r2, #4294967295
 8006322:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f103 0208 	add.w	r2, r3, #8
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f103 0208 	add.w	r2, r3, #8
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	689a      	ldr	r2, [r3, #8]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	601a      	str	r2, [r3, #0]
}
 80063a0:	bf00      	nop
 80063a2:	3714      	adds	r7, #20
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c2:	d103      	bne.n	80063cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e00c      	b.n	80063e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3308      	adds	r3, #8
 80063d0:	60fb      	str	r3, [r7, #12]
 80063d2:	e002      	b.n	80063da <vListInsert+0x2e>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d2f6      	bcs.n	80063d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	685a      	ldr	r2, [r3, #4]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	601a      	str	r2, [r3, #0]
}
 8006412:	bf00      	nop
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr

0800641e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800641e:	b480      	push	{r7}
 8006420:	b085      	sub	sp, #20
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	6892      	ldr	r2, [r2, #8]
 8006434:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	6852      	ldr	r2, [r2, #4]
 800643e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d103      	bne.n	8006452 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689a      	ldr	r2, [r3, #8]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	1e5a      	subs	r2, r3, #1
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
	...

08006474 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064a0:	f002 fa72 	bl	8008988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ac:	68f9      	ldr	r1, [r7, #12]
 80064ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	441a      	add	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	3b01      	subs	r3, #1
 80064d2:	68f9      	ldr	r1, [r7, #12]
 80064d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80064d6:	fb01 f303 	mul.w	r3, r1, r3
 80064da:	441a      	add	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	22ff      	movs	r2, #255	@ 0xff
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	22ff      	movs	r2, #255	@ 0xff
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d114      	bne.n	8006520 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01a      	beq.n	8006534 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3310      	adds	r3, #16
 8006502:	4618      	mov	r0, r3
 8006504:	f001 fd2c 	bl	8007f60 <xTaskRemoveFromEventList>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d012      	beq.n	8006534 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <xQueueGenericReset+0xd0>)
 8006510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	e009      	b.n	8006534 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	3310      	adds	r3, #16
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fef0 	bl	800630a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3324      	adds	r3, #36	@ 0x24
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff feeb 	bl	800630a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006534:	f002 fa5a 	bl	80089ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006538:	2301      	movs	r3, #1
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	e000ed04 	.word	0xe000ed04

08006548 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08e      	sub	sp, #56	@ 0x38
 800654c:	af02      	add	r7, sp, #8
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10b      	bne.n	8006574 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800655c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006560:	f383 8811 	msr	BASEPRI, r3
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800656e:	bf00      	nop
 8006570:	bf00      	nop
 8006572:	e7fd      	b.n	8006570 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10b      	bne.n	8006592 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800658c:	bf00      	nop
 800658e:	bf00      	nop
 8006590:	e7fd      	b.n	800658e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d002      	beq.n	800659e <xQueueGenericCreateStatic+0x56>
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <xQueueGenericCreateStatic+0x5a>
 800659e:	2301      	movs	r3, #1
 80065a0:	e000      	b.n	80065a4 <xQueueGenericCreateStatic+0x5c>
 80065a2:	2300      	movs	r3, #0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10b      	bne.n	80065c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	623b      	str	r3, [r7, #32]
}
 80065ba:	bf00      	nop
 80065bc:	bf00      	nop
 80065be:	e7fd      	b.n	80065bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d102      	bne.n	80065cc <xQueueGenericCreateStatic+0x84>
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <xQueueGenericCreateStatic+0x88>
 80065cc:	2301      	movs	r3, #1
 80065ce:	e000      	b.n	80065d2 <xQueueGenericCreateStatic+0x8a>
 80065d0:	2300      	movs	r3, #0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	61fb      	str	r3, [r7, #28]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80065ee:	2348      	movs	r3, #72	@ 0x48
 80065f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2b48      	cmp	r3, #72	@ 0x48
 80065f6:	d00b      	beq.n	8006610 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61bb      	str	r3, [r7, #24]
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006610:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00d      	beq.n	8006638 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800661c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006624:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662a:	9300      	str	r3, [sp, #0]
 800662c:	4613      	mov	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68b9      	ldr	r1, [r7, #8]
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 f840 	bl	80066b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800663a:	4618      	mov	r0, r3
 800663c:	3730      	adds	r7, #48	@ 0x30
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006642:	b580      	push	{r7, lr}
 8006644:	b08a      	sub	sp, #40	@ 0x28
 8006646:	af02      	add	r7, sp, #8
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	4613      	mov	r3, r2
 800664e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10b      	bne.n	800666e <xQueueGenericCreate+0x2c>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	613b      	str	r3, [r7, #16]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	fb02 f303 	mul.w	r3, r2, r3
 8006676:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	3348      	adds	r3, #72	@ 0x48
 800667c:	4618      	mov	r0, r3
 800667e:	f002 faa5 	bl	8008bcc <pvPortMalloc>
 8006682:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d011      	beq.n	80066ae <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	3348      	adds	r3, #72	@ 0x48
 8006692:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800669c:	79fa      	ldrb	r2, [r7, #7]
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4613      	mov	r3, r2
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	68b9      	ldr	r1, [r7, #8]
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f000 f805 	bl	80066b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066ae:	69bb      	ldr	r3, [r7, #24]
	}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3720      	adds	r7, #32
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d103      	bne.n	80066d4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	601a      	str	r2, [r3, #0]
 80066d2:	e002      	b.n	80066da <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066e6:	2101      	movs	r1, #1
 80066e8:	69b8      	ldr	r0, [r7, #24]
 80066ea:	f7ff fec3 	bl	8006474 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066ee:	bf00      	nop
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00e      	beq.n	8006722 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006716:	2300      	movs	r3, #0
 8006718:	2200      	movs	r2, #0
 800671a:	2100      	movs	r1, #0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f8a5 	bl	800686c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006722:	bf00      	nop
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800672a:	b580      	push	{r7, lr}
 800672c:	b086      	sub	sp, #24
 800672e:	af00      	add	r7, sp, #0
 8006730:	4603      	mov	r3, r0
 8006732:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006734:	2301      	movs	r3, #1
 8006736:	617b      	str	r3, [r7, #20]
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	461a      	mov	r2, r3
 8006740:	6939      	ldr	r1, [r7, #16]
 8006742:	6978      	ldr	r0, [r7, #20]
 8006744:	f7ff ff7d 	bl	8006642 <xQueueGenericCreate>
 8006748:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f7ff ffd3 	bl	80066f6 <prvInitialiseMutex>

		return xNewQueue;
 8006750:	68fb      	ldr	r3, [r7, #12]
	}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800675a:	b580      	push	{r7, lr}
 800675c:	b088      	sub	sp, #32
 800675e:	af02      	add	r7, sp, #8
 8006760:	4603      	mov	r3, r0
 8006762:	6039      	str	r1, [r7, #0]
 8006764:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006766:	2301      	movs	r3, #1
 8006768:	617b      	str	r3, [r7, #20]
 800676a:	2300      	movs	r3, #0
 800676c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800676e:	79fb      	ldrb	r3, [r7, #7]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	6939      	ldr	r1, [r7, #16]
 8006778:	6978      	ldr	r0, [r7, #20]
 800677a:	f7ff fee5 	bl	8006548 <xQueueGenericCreateStatic>
 800677e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f7ff ffb8 	bl	80066f6 <prvInitialiseMutex>

		return xNewQueue;
 8006786:	68fb      	ldr	r3, [r7, #12]
	}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10b      	bne.n	80067ba <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	61bb      	str	r3, [r7, #24]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	429a      	cmp	r2, r3
 80067c0:	d90b      	bls.n	80067da <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	617b      	str	r3, [r7, #20]
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80067da:	2302      	movs	r3, #2
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	2100      	movs	r1, #0
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f7ff feaf 	bl	8006548 <xQueueGenericCreateStatic>
 80067ea:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80067f8:	69fb      	ldr	r3, [r7, #28]
	}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3720      	adds	r7, #32
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10b      	bne.n	800682a <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	613b      	str	r3, [r7, #16]
}
 8006824:	bf00      	nop
 8006826:	bf00      	nop
 8006828:	e7fd      	b.n	8006826 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d90b      	bls.n	800684a <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	f383 8811 	msr	BASEPRI, r3
 800683a:	f3bf 8f6f 	isb	sy
 800683e:	f3bf 8f4f 	dsb	sy
 8006842:	60fb      	str	r3, [r7, #12]
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop
 8006848:	e7fd      	b.n	8006846 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800684a:	2202      	movs	r2, #2
 800684c:	2100      	movs	r1, #0
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fef7 	bl	8006642 <xQueueGenericCreate>
 8006854:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006862:	697b      	ldr	r3, [r7, #20]
	}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08e      	sub	sp, #56	@ 0x38
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800687a:	2300      	movs	r3, #0
 800687c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10b      	bne.n	80068a0 <xQueueGenericSend+0x34>
	__asm volatile
 8006888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688c:	f383 8811 	msr	BASEPRI, r3
 8006890:	f3bf 8f6f 	isb	sy
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800689a:	bf00      	nop
 800689c:	bf00      	nop
 800689e:	e7fd      	b.n	800689c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSend+0x42>
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <xQueueGenericSend+0x46>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <xQueueGenericSend+0x48>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xQueueGenericSend+0x64>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d103      	bne.n	80068de <xQueueGenericSend+0x72>
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <xQueueGenericSend+0x76>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <xQueueGenericSend+0x78>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <xQueueGenericSend+0x94>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	623b      	str	r3, [r7, #32]
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	e7fd      	b.n	80068fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006900:	f001 fcee 	bl	80082e0 <xTaskGetSchedulerState>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d102      	bne.n	8006910 <xQueueGenericSend+0xa4>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <xQueueGenericSend+0xa8>
 8006910:	2301      	movs	r3, #1
 8006912:	e000      	b.n	8006916 <xQueueGenericSend+0xaa>
 8006914:	2300      	movs	r3, #0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10b      	bne.n	8006932 <xQueueGenericSend+0xc6>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	61fb      	str	r3, [r7, #28]
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	e7fd      	b.n	800692e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006932:	f002 f829 	bl	8008988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006938:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800693e:	429a      	cmp	r2, r3
 8006940:	d302      	bcc.n	8006948 <xQueueGenericSend+0xdc>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2b02      	cmp	r3, #2
 8006946:	d129      	bne.n	800699c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	68b9      	ldr	r1, [r7, #8]
 800694c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800694e:	f000 fcab 	bl	80072a8 <prvCopyDataToQueue>
 8006952:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d010      	beq.n	800697e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800695c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695e:	3324      	adds	r3, #36	@ 0x24
 8006960:	4618      	mov	r0, r3
 8006962:	f001 fafd 	bl	8007f60 <xTaskRemoveFromEventList>
 8006966:	4603      	mov	r3, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d013      	beq.n	8006994 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800696c:	4b3f      	ldr	r3, [pc, #252]	@ (8006a6c <xQueueGenericSend+0x200>)
 800696e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	e00a      	b.n	8006994 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	2b00      	cmp	r3, #0
 8006982:	d007      	beq.n	8006994 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006984:	4b39      	ldr	r3, [pc, #228]	@ (8006a6c <xQueueGenericSend+0x200>)
 8006986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006994:	f002 f82a 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 8006998:	2301      	movs	r3, #1
 800699a:	e063      	b.n	8006a64 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d103      	bne.n	80069aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069a2:	f002 f823 	bl	80089ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e05c      	b.n	8006a64 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d106      	bne.n	80069be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069b0:	f107 0314 	add.w	r3, r7, #20
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 fb37 	bl	8008028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069ba:	2301      	movs	r3, #1
 80069bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069be:	f002 f815 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069c2:	f001 f89d 	bl	8007b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069c6:	f001 ffdf 	bl	8008988 <vPortEnterCritical>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d6:	d103      	bne.n	80069e0 <xQueueGenericSend+0x174>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069e6:	b25b      	sxtb	r3, r3
 80069e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ec:	d103      	bne.n	80069f6 <xQueueGenericSend+0x18a>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069f6:	f001 fff9 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069fa:	1d3a      	adds	r2, r7, #4
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	4611      	mov	r1, r2
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 fb26 	bl	8008054 <xTaskCheckForTimeOut>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d124      	bne.n	8006a58 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a10:	f000 fd42 	bl	8007498 <prvIsQueueFull>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	3310      	adds	r3, #16
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	4611      	mov	r1, r2
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 fa76 	bl	8007f14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a2a:	f000 fccd 	bl	80073c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a2e:	f001 f875 	bl	8007b1c <xTaskResumeAll>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f47f af7c 	bne.w	8006932 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8006a6c <xQueueGenericSend+0x200>)
 8006a3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a40:	601a      	str	r2, [r3, #0]
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	e772      	b.n	8006932 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a4e:	f000 fcbb 	bl	80073c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a52:	f001 f863 	bl	8007b1c <xTaskResumeAll>
 8006a56:	e76c      	b.n	8006932 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a5a:	f000 fcb5 	bl	80073c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a5e:	f001 f85d 	bl	8007b1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3738      	adds	r7, #56	@ 0x38
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b090      	sub	sp, #64	@ 0x40
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
 8006a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <xQueueGenericSendFromISR+0x3e>
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <xQueueGenericSendFromISR+0x42>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <xQueueGenericSendFromISR+0x44>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10b      	bne.n	8006ad0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006aca:	bf00      	nop
 8006acc:	bf00      	nop
 8006ace:	e7fd      	b.n	8006acc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d103      	bne.n	8006ade <xQueueGenericSendFromISR+0x6e>
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <xQueueGenericSendFromISR+0x72>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <xQueueGenericSendFromISR+0x74>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10b      	bne.n	8006b00 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	623b      	str	r3, [r7, #32]
}
 8006afa:	bf00      	nop
 8006afc:	bf00      	nop
 8006afe:	e7fd      	b.n	8006afc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b00:	f002 f822 	bl	8008b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b04:	f3ef 8211 	mrs	r2, BASEPRI
 8006b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	61fa      	str	r2, [r7, #28]
 8006b1a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b1c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b1e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <xQueueGenericSendFromISR+0xc2>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d12f      	bne.n	8006b92 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	68b9      	ldr	r1, [r7, #8]
 8006b46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b48:	f000 fbae 	bl	80072a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b54:	d112      	bne.n	8006b7c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d016      	beq.n	8006b8c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b60:	3324      	adds	r3, #36	@ 0x24
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 f9fc 	bl	8007f60 <xTaskRemoveFromEventList>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00e      	beq.n	8006b8c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	e007      	b.n	8006b8c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b80:	3301      	adds	r3, #1
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	b25a      	sxtb	r2, r3
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b90:	e001      	b.n	8006b96 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b92:	2300      	movs	r3, #0
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b98:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ba0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3740      	adds	r7, #64	@ 0x40
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08e      	sub	sp, #56	@ 0x38
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	623b      	str	r3, [r7, #32]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	61fb      	str	r3, [r7, #28]
}
 8006bf2:	bf00      	nop
 8006bf4:	bf00      	nop
 8006bf6:	e7fd      	b.n	8006bf4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d103      	bne.n	8006c08 <xQueueGiveFromISR+0x5c>
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <xQueueGiveFromISR+0x60>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <xQueueGiveFromISR+0x62>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	61bb      	str	r3, [r7, #24]
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	e7fd      	b.n	8006c26 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c2a:	f001 ff8d 	bl	8008b48 <vPortValidateInterruptPriority>
	__asm volatile
 8006c2e:	f3ef 8211 	mrs	r2, BASEPRI
 8006c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c36:	f383 8811 	msr	BASEPRI, r3
 8006c3a:	f3bf 8f6f 	isb	sy
 8006c3e:	f3bf 8f4f 	dsb	sy
 8006c42:	617a      	str	r2, [r7, #20]
 8006c44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006c46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d22b      	bcs.n	8006cb2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d112      	bne.n	8006c9c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d016      	beq.n	8006cac <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c80:	3324      	adds	r3, #36	@ 0x24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f001 f96c 	bl	8007f60 <xTaskRemoveFromEventList>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e007      	b.n	8006cac <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	b25a      	sxtb	r2, r3
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cac:	2301      	movs	r3, #1
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	e001      	b.n	8006cb6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f383 8811 	msr	BASEPRI, r3
}
 8006cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3738      	adds	r7, #56	@ 0x38
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	@ 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <xQueueReceive+0x32>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	623b      	str	r3, [r7, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d103      	bne.n	8006d0c <xQueueReceive+0x40>
 8006d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <xQueueReceive+0x44>
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e000      	b.n	8006d12 <xQueueReceive+0x46>
 8006d10:	2300      	movs	r3, #0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10b      	bne.n	8006d2e <xQueueReceive+0x62>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	61fb      	str	r3, [r7, #28]
}
 8006d28:	bf00      	nop
 8006d2a:	bf00      	nop
 8006d2c:	e7fd      	b.n	8006d2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d2e:	f001 fad7 	bl	80082e0 <xTaskGetSchedulerState>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d102      	bne.n	8006d3e <xQueueReceive+0x72>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d101      	bne.n	8006d42 <xQueueReceive+0x76>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <xQueueReceive+0x78>
 8006d42:	2300      	movs	r3, #0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10b      	bne.n	8006d60 <xQueueReceive+0x94>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	61bb      	str	r3, [r7, #24]
}
 8006d5a:	bf00      	nop
 8006d5c:	bf00      	nop
 8006d5e:	e7fd      	b.n	8006d5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d60:	f001 fe12 	bl	8008988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d01f      	beq.n	8006db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d70:	68b9      	ldr	r1, [r7, #8]
 8006d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d74:	f000 fb02 	bl	800737c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d7a:	1e5a      	subs	r2, r3, #1
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d00f      	beq.n	8006da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	3310      	adds	r3, #16
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f8e7 	bl	8007f60 <xTaskRemoveFromEventList>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d98:	4b3c      	ldr	r3, [pc, #240]	@ (8006e8c <xQueueReceive+0x1c0>)
 8006d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	f3bf 8f4f 	dsb	sy
 8006da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006da8:	f001 fe20 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e069      	b.n	8006e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d103      	bne.n	8006dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006db6:	f001 fe19 	bl	80089ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e062      	b.n	8006e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 f92d 	bl	8008028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dd2:	f001 fe0b 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dd6:	f000 fe93 	bl	8007b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dda:	f001 fdd5 	bl	8008988 <vPortEnterCritical>
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006de4:	b25b      	sxtb	r3, r3
 8006de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dea:	d103      	bne.n	8006df4 <xQueueReceive+0x128>
 8006dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dfa:	b25b      	sxtb	r3, r3
 8006dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e00:	d103      	bne.n	8006e0a <xQueueReceive+0x13e>
 8006e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e0a:	f001 fdef 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e0e:	1d3a      	adds	r2, r7, #4
 8006e10:	f107 0310 	add.w	r3, r7, #16
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f001 f91c 	bl	8008054 <xTaskCheckForTimeOut>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d123      	bne.n	8006e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e24:	f000 fb22 	bl	800746c <prvIsQueueEmpty>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d017      	beq.n	8006e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e30:	3324      	adds	r3, #36	@ 0x24
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4611      	mov	r1, r2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f86c 	bl	8007f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e3e:	f000 fac3 	bl	80073c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e42:	f000 fe6b 	bl	8007b1c <xTaskResumeAll>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d189      	bne.n	8006d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006e8c <xQueueReceive+0x1c0>)
 8006e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	e780      	b.n	8006d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e60:	f000 fab2 	bl	80073c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e64:	f000 fe5a 	bl	8007b1c <xTaskResumeAll>
 8006e68:	e77a      	b.n	8006d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e6c:	f000 faac 	bl	80073c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e70:	f000 fe54 	bl	8007b1c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e76:	f000 faf9 	bl	800746c <prvIsQueueEmpty>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f43f af6f 	beq.w	8006d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3730      	adds	r7, #48	@ 0x30
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08e      	sub	sp, #56	@ 0x38
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	623b      	str	r3, [r7, #32]
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed0:	f383 8811 	msr	BASEPRI, r3
 8006ed4:	f3bf 8f6f 	isb	sy
 8006ed8:	f3bf 8f4f 	dsb	sy
 8006edc:	61fb      	str	r3, [r7, #28]
}
 8006ede:	bf00      	nop
 8006ee0:	bf00      	nop
 8006ee2:	e7fd      	b.n	8006ee0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ee4:	f001 f9fc 	bl	80082e0 <xTaskGetSchedulerState>
 8006ee8:	4603      	mov	r3, r0
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d102      	bne.n	8006ef4 <xQueueSemaphoreTake+0x64>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <xQueueSemaphoreTake+0x68>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <xQueueSemaphoreTake+0x6a>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10b      	bne.n	8006f16 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	61bb      	str	r3, [r7, #24]
}
 8006f10:	bf00      	nop
 8006f12:	bf00      	nop
 8006f14:	e7fd      	b.n	8006f12 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f16:	f001 fd37 	bl	8008988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d024      	beq.n	8006f70 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	1e5a      	subs	r2, r3, #1
 8006f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f2c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d104      	bne.n	8006f40 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f36:	f001 fb7f 	bl	8008638 <pvTaskIncrementMutexHeldCount>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f3e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00f      	beq.n	8006f68 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4a:	3310      	adds	r3, #16
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f001 f807 	bl	8007f60 <xTaskRemoveFromEventList>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d007      	beq.n	8006f68 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f58:	4b54      	ldr	r3, [pc, #336]	@ (80070ac <xQueueSemaphoreTake+0x21c>)
 8006f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f5e:	601a      	str	r2, [r3, #0]
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f68:	f001 fd40 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e098      	b.n	80070a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d112      	bne.n	8006f9c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	617b      	str	r3, [r7, #20]
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	e7fd      	b.n	8006f90 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006f94:	f001 fd2a 	bl	80089ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	e082      	b.n	80070a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d106      	bne.n	8006fb0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fa2:	f107 030c 	add.w	r3, r7, #12
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f001 f83e 	bl	8008028 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fac:	2301      	movs	r3, #1
 8006fae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fb0:	f001 fd1c 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fb4:	f000 fda4 	bl	8007b00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fb8:	f001 fce6 	bl	8008988 <vPortEnterCritical>
 8006fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d103      	bne.n	8006fd2 <xQueueSemaphoreTake+0x142>
 8006fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fd8:	b25b      	sxtb	r3, r3
 8006fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fde:	d103      	bne.n	8006fe8 <xQueueSemaphoreTake+0x158>
 8006fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fe8:	f001 fd00 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fec:	463a      	mov	r2, r7
 8006fee:	f107 030c 	add.w	r3, r7, #12
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f001 f82d 	bl	8008054 <xTaskCheckForTimeOut>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d132      	bne.n	8007066 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007000:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007002:	f000 fa33 	bl	800746c <prvIsQueueEmpty>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d026      	beq.n	800705a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800700c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d109      	bne.n	8007028 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8007014:	f001 fcb8 	bl	8008988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4618      	mov	r0, r3
 800701e:	f001 f97d 	bl	800831c <xTaskPriorityInherit>
 8007022:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8007024:	f001 fce2 	bl	80089ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	3324      	adds	r3, #36	@ 0x24
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	4611      	mov	r1, r2
 8007030:	4618      	mov	r0, r3
 8007032:	f000 ff6f 	bl	8007f14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007038:	f000 f9c6 	bl	80073c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800703c:	f000 fd6e 	bl	8007b1c <xTaskResumeAll>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f47f af67 	bne.w	8006f16 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8007048:	4b18      	ldr	r3, [pc, #96]	@ (80070ac <xQueueSemaphoreTake+0x21c>)
 800704a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800704e:	601a      	str	r2, [r3, #0]
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	e75d      	b.n	8006f16 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800705a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800705c:	f000 f9b4 	bl	80073c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007060:	f000 fd5c 	bl	8007b1c <xTaskResumeAll>
 8007064:	e757      	b.n	8006f16 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007066:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007068:	f000 f9ae 	bl	80073c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800706c:	f000 fd56 	bl	8007b1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007070:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007072:	f000 f9fb 	bl	800746c <prvIsQueueEmpty>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	f43f af4c 	beq.w	8006f16 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00d      	beq.n	80070a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8007084:	f001 fc80 	bl	8008988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007088:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800708a:	f000 f8f5 	bl	8007278 <prvGetDisinheritPriorityAfterTimeout>
 800708e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007096:	4618      	mov	r0, r3
 8007098:	f001 fa3e 	bl	8008518 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800709c:	f001 fca6 	bl	80089ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3738      	adds	r7, #56	@ 0x38
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	e000ed04 	.word	0xe000ed04

080070b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08e      	sub	sp, #56	@ 0x38
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d10b      	bne.n	80070de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	623b      	str	r3, [r7, #32]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d103      	bne.n	80070ec <xQueueReceiveFromISR+0x3c>
 80070e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <xQueueReceiveFromISR+0x40>
 80070ec:	2301      	movs	r3, #1
 80070ee:	e000      	b.n	80070f2 <xQueueReceiveFromISR+0x42>
 80070f0:	2300      	movs	r3, #0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10b      	bne.n	800710e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80070f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fa:	f383 8811 	msr	BASEPRI, r3
 80070fe:	f3bf 8f6f 	isb	sy
 8007102:	f3bf 8f4f 	dsb	sy
 8007106:	61fb      	str	r3, [r7, #28]
}
 8007108:	bf00      	nop
 800710a:	bf00      	nop
 800710c:	e7fd      	b.n	800710a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800710e:	f001 fd1b 	bl	8008b48 <vPortValidateInterruptPriority>
	__asm volatile
 8007112:	f3ef 8211 	mrs	r2, BASEPRI
 8007116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	61ba      	str	r2, [r7, #24]
 8007128:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800712a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800712c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007132:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	2b00      	cmp	r3, #0
 8007138:	d02f      	beq.n	800719a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007148:	f000 f918 	bl	800737c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	1e5a      	subs	r2, r3, #1
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007154:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d112      	bne.n	8007184 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800715e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d016      	beq.n	8007194 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007168:	3310      	adds	r3, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fef8 	bl	8007f60 <xTaskRemoveFromEventList>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e007      	b.n	8007194 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007188:	3301      	adds	r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	b25a      	sxtb	r2, r3
 800718e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007194:	2301      	movs	r3, #1
 8007196:	637b      	str	r3, [r7, #52]	@ 0x34
 8007198:	e001      	b.n	800719e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800719a:	2300      	movs	r3, #0
 800719c:	637b      	str	r3, [r7, #52]	@ 0x34
 800719e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f383 8811 	msr	BASEPRI, r3
}
 80071a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3738      	adds	r7, #56	@ 0x38
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10b      	bne.n	80071da <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80071c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c6:	f383 8811 	msr	BASEPRI, r3
 80071ca:	f3bf 8f6f 	isb	sy
 80071ce:	f3bf 8f4f 	dsb	sy
 80071d2:	60bb      	str	r3, [r7, #8]
}
 80071d4:	bf00      	nop
 80071d6:	bf00      	nop
 80071d8:	e7fd      	b.n	80071d6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80071da:	f001 fbd5 	bl	8008988 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80071e4:	f001 fc02 	bl	80089ec <vPortExitCritical>

	return uxReturn;
 80071e8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80071f2:	b480      	push	{r7}
 80071f4:	b087      	sub	sp, #28
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d10b      	bne.n	800721c <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8007204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007208:	f383 8811 	msr	BASEPRI, r3
 800720c:	f3bf 8f6f 	isb	sy
 8007210:	f3bf 8f4f 	dsb	sy
 8007214:	60fb      	str	r3, [r7, #12]
}
 8007216:	bf00      	nop
 8007218:	bf00      	nop
 800721a:	e7fd      	b.n	8007218 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007220:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007222:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007224:	4618      	mov	r0, r3
 8007226:	371c      	adds	r7, #28
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d10b      	bne.n	800725a <vQueueDelete+0x2a>
	__asm volatile
 8007242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007246:	f383 8811 	msr	BASEPRI, r3
 800724a:	f3bf 8f6f 	isb	sy
 800724e:	f3bf 8f4f 	dsb	sy
 8007252:	60bb      	str	r3, [r7, #8]
}
 8007254:	bf00      	nop
 8007256:	bf00      	nop
 8007258:	e7fd      	b.n	8007256 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 f95e 	bl	800751c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007266:	2b00      	cmp	r3, #0
 8007268:	d102      	bne.n	8007270 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f001 fd3c 	bl	8008ce8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}

08007278 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d006      	beq.n	8007296 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f1c3 0307 	rsb	r3, r3, #7
 8007292:	60fb      	str	r3, [r7, #12]
 8007294:	e001      	b.n	800729a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800729a:	68fb      	ldr	r3, [r7, #12]
	}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10d      	bne.n	80072e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d14d      	bne.n	800736a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	4618      	mov	r0, r3
 80072d4:	f001 f898 	bl	8008408 <xTaskPriorityDisinherit>
 80072d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2200      	movs	r2, #0
 80072de:	609a      	str	r2, [r3, #8]
 80072e0:	e043      	b.n	800736a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d119      	bne.n	800731c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6858      	ldr	r0, [r3, #4]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f0:	461a      	mov	r2, r3
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	f011 f8df 	bl	80184b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007300:	441a      	add	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	429a      	cmp	r2, r3
 8007310:	d32b      	bcc.n	800736a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	605a      	str	r2, [r3, #4]
 800731a:	e026      	b.n	800736a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	68d8      	ldr	r0, [r3, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007324:	461a      	mov	r2, r3
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	f011 f8c5 	bl	80184b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007334:	425b      	negs	r3, r3
 8007336:	441a      	add	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d207      	bcs.n	8007358 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	689a      	ldr	r2, [r3, #8]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007350:	425b      	negs	r3, r3
 8007352:	441a      	add	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d105      	bne.n	800736a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	3b01      	subs	r3, #1
 8007368:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007372:	697b      	ldr	r3, [r7, #20]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3718      	adds	r7, #24
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800738a:	2b00      	cmp	r3, #0
 800738c:	d018      	beq.n	80073c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	441a      	add	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d303      	bcc.n	80073b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68d9      	ldr	r1, [r3, #12]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b8:	461a      	mov	r2, r3
 80073ba:	6838      	ldr	r0, [r7, #0]
 80073bc:	f011 f87b 	bl	80184b6 <memcpy>
	}
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80073d0:	f001 fada 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80073dc:	e011      	b.n	8007402 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d012      	beq.n	800740c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3324      	adds	r3, #36	@ 0x24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f000 fdb8 	bl	8007f60 <xTaskRemoveFromEventList>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d001      	beq.n	80073fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80073f6:	f000 fe91 	bl	800811c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007406:	2b00      	cmp	r3, #0
 8007408:	dce9      	bgt.n	80073de <prvUnlockQueue+0x16>
 800740a:	e000      	b.n	800740e <prvUnlockQueue+0x46>
					break;
 800740c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	22ff      	movs	r2, #255	@ 0xff
 8007412:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007416:	f001 fae9 	bl	80089ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800741a:	f001 fab5 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007424:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007426:	e011      	b.n	800744c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d012      	beq.n	8007456 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	3310      	adds	r3, #16
 8007434:	4618      	mov	r0, r3
 8007436:	f000 fd93 	bl	8007f60 <xTaskRemoveFromEventList>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007440:	f000 fe6c 	bl	800811c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007444:	7bbb      	ldrb	r3, [r7, #14]
 8007446:	3b01      	subs	r3, #1
 8007448:	b2db      	uxtb	r3, r3
 800744a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800744c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007450:	2b00      	cmp	r3, #0
 8007452:	dce9      	bgt.n	8007428 <prvUnlockQueue+0x60>
 8007454:	e000      	b.n	8007458 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007456:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	22ff      	movs	r2, #255	@ 0xff
 800745c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007460:	f001 fac4 	bl	80089ec <vPortExitCritical>
}
 8007464:	bf00      	nop
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007474:	f001 fa88 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747c:	2b00      	cmp	r3, #0
 800747e:	d102      	bne.n	8007486 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007480:	2301      	movs	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	e001      	b.n	800748a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007486:	2300      	movs	r3, #0
 8007488:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800748a:	f001 faaf 	bl	80089ec <vPortExitCritical>

	return xReturn;
 800748e:	68fb      	ldr	r3, [r7, #12]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3710      	adds	r7, #16
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074a0:	f001 fa72 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d102      	bne.n	80074b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	60fb      	str	r3, [r7, #12]
 80074b4:	e001      	b.n	80074ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ba:	f001 fa97 	bl	80089ec <vPortExitCritical>

	return xReturn;
 80074be:	68fb      	ldr	r3, [r7, #12]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e014      	b.n	8007502 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80074d8:	4a0f      	ldr	r2, [pc, #60]	@ (8007518 <vQueueAddToRegistry+0x50>)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10b      	bne.n	80074fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80074e4:	490c      	ldr	r1, [pc, #48]	@ (8007518 <vQueueAddToRegistry+0x50>)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80074ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007518 <vQueueAddToRegistry+0x50>)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	00db      	lsls	r3, r3, #3
 80074f4:	4413      	add	r3, r2
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80074fa:	e006      	b.n	800750a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2b07      	cmp	r3, #7
 8007506:	d9e7      	bls.n	80074d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	20001188 	.word	0x20001188

0800751c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007524:	2300      	movs	r3, #0
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e016      	b.n	8007558 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800752a:	4a10      	ldr	r2, [pc, #64]	@ (800756c <vQueueUnregisterQueue+0x50>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	4413      	add	r3, r2
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d10b      	bne.n	8007552 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800753a:	4a0c      	ldr	r2, [pc, #48]	@ (800756c <vQueueUnregisterQueue+0x50>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2100      	movs	r1, #0
 8007540:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007544:	4a09      	ldr	r2, [pc, #36]	@ (800756c <vQueueUnregisterQueue+0x50>)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	4413      	add	r3, r2
 800754c:	2200      	movs	r2, #0
 800754e:	605a      	str	r2, [r3, #4]
				break;
 8007550:	e006      	b.n	8007560 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	3301      	adds	r3, #1
 8007556:	60fb      	str	r3, [r7, #12]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b07      	cmp	r3, #7
 800755c:	d9e5      	bls.n	800752a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800755e:	bf00      	nop
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20001188 	.word	0x20001188

08007570 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007570:	b580      	push	{r7, lr}
 8007572:	b08e      	sub	sp, #56	@ 0x38
 8007574:	af04      	add	r7, sp, #16
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10b      	bne.n	800759c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	623b      	str	r3, [r7, #32]
}
 8007596:	bf00      	nop
 8007598:	bf00      	nop
 800759a:	e7fd      	b.n	8007598 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800759c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80075a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a6:	f383 8811 	msr	BASEPRI, r3
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	f3bf 8f4f 	dsb	sy
 80075b2:	61fb      	str	r3, [r7, #28]
}
 80075b4:	bf00      	nop
 80075b6:	bf00      	nop
 80075b8:	e7fd      	b.n	80075b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80075ba:	2364      	movs	r3, #100	@ 0x64
 80075bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	2b64      	cmp	r3, #100	@ 0x64
 80075c2:	d00b      	beq.n	80075dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	61bb      	str	r3, [r7, #24]
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	e7fd      	b.n	80075d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d01e      	beq.n	8007622 <xTaskCreateStatic+0xb2>
 80075e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01b      	beq.n	8007622 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075fc:	2300      	movs	r3, #0
 80075fe:	9303      	str	r3, [sp, #12]
 8007600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007602:	9302      	str	r3, [sp, #8]
 8007604:	f107 0314 	add.w	r3, r7, #20
 8007608:	9301      	str	r3, [sp, #4]
 800760a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f000 f850 	bl	80076ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800761a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800761c:	f000 f8de 	bl	80077dc <prvAddNewTaskToReadyList>
 8007620:	e001      	b.n	8007626 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007626:	697b      	ldr	r3, [r7, #20]
	}
 8007628:	4618      	mov	r0, r3
 800762a:	3728      	adds	r7, #40	@ 0x28
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007630:	b580      	push	{r7, lr}
 8007632:	b08c      	sub	sp, #48	@ 0x30
 8007634:	af04      	add	r7, sp, #16
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	603b      	str	r3, [r7, #0]
 800763c:	4613      	mov	r3, r2
 800763e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007640:	88fb      	ldrh	r3, [r7, #6]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	4618      	mov	r0, r3
 8007646:	f001 fac1 	bl	8008bcc <pvPortMalloc>
 800764a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00e      	beq.n	8007670 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007652:	2064      	movs	r0, #100	@ 0x64
 8007654:	f001 faba 	bl	8008bcc <pvPortMalloc>
 8007658:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d003      	beq.n	8007668 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	631a      	str	r2, [r3, #48]	@ 0x30
 8007666:	e005      	b.n	8007674 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007668:	6978      	ldr	r0, [r7, #20]
 800766a:	f001 fb3d 	bl	8008ce8 <vPortFree>
 800766e:	e001      	b.n	8007674 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d017      	beq.n	80076aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007682:	88fa      	ldrh	r2, [r7, #6]
 8007684:	2300      	movs	r3, #0
 8007686:	9303      	str	r3, [sp, #12]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	9302      	str	r3, [sp, #8]
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f000 f80e 	bl	80076ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800769e:	69f8      	ldr	r0, [r7, #28]
 80076a0:	f000 f89c 	bl	80077dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076a4:	2301      	movs	r3, #1
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	e002      	b.n	80076b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076aa:	f04f 33ff 	mov.w	r3, #4294967295
 80076ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076b0:	69bb      	ldr	r3, [r7, #24]
	}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3720      	adds	r7, #32
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b088      	sub	sp, #32
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80076c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ca:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	461a      	mov	r2, r3
 80076d2:	21a5      	movs	r1, #165	@ 0xa5
 80076d4:	f010 fe79 	bl	80183ca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80076d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80076e2:	3b01      	subs	r3, #1
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	4413      	add	r3, r2
 80076e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	f023 0307 	bic.w	r3, r3, #7
 80076f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80076fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007700:	f383 8811 	msr	BASEPRI, r3
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	f3bf 8f4f 	dsb	sy
 800770c:	617b      	str	r3, [r7, #20]
}
 800770e:	bf00      	nop
 8007710:	bf00      	nop
 8007712:	e7fd      	b.n	8007710 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d01f      	beq.n	800775a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800771a:	2300      	movs	r3, #0
 800771c:	61fb      	str	r3, [r7, #28]
 800771e:	e012      	b.n	8007746 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	4413      	add	r3, r2
 8007726:	7819      	ldrb	r1, [r3, #0]
 8007728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	4413      	add	r3, r2
 800772e:	3334      	adds	r3, #52	@ 0x34
 8007730:	460a      	mov	r2, r1
 8007732:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d006      	beq.n	800774e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	3301      	adds	r3, #1
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b1f      	cmp	r3, #31
 800774a:	d9e9      	bls.n	8007720 <prvInitialiseNewTask+0x66>
 800774c:	e000      	b.n	8007750 <prvInitialiseNewTask+0x96>
			{
				break;
 800774e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8007758:	e003      	b.n	8007762 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800775a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	2b06      	cmp	r3, #6
 8007766:	d901      	bls.n	800776c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007768:	2306      	movs	r3, #6
 800776a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800776c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007770:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007776:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->uxMutexesHeld = 0;
 8007778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800777a:	2200      	movs	r2, #0
 800777c:	659a      	str	r2, [r3, #88]	@ 0x58
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	3304      	adds	r3, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fe fde1 	bl	800634a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800778a:	3318      	adds	r3, #24
 800778c:	4618      	mov	r0, r3
 800778e:	f7fe fddc 	bl	800634a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007794:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007796:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779a:	f1c3 0207 	rsb	r2, r3, #7
 800779e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077a6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	2200      	movs	r2, #0
 80077ac:	65da      	str	r2, [r3, #92]	@ 0x5c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	68f9      	ldr	r1, [r7, #12]
 80077ba:	69b8      	ldr	r0, [r7, #24]
 80077bc:	f000 ffb6 	bl	800872c <pxPortInitialiseStack>
 80077c0:	4602      	mov	r2, r0
 80077c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80077c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80077cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077d2:	bf00      	nop
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
	...

080077dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80077e4:	f001 f8d0 	bl	8008988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80077e8:	4b2a      	ldr	r3, [pc, #168]	@ (8007894 <prvAddNewTaskToReadyList+0xb8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3301      	adds	r3, #1
 80077ee:	4a29      	ldr	r2, [pc, #164]	@ (8007894 <prvAddNewTaskToReadyList+0xb8>)
 80077f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077f2:	4b29      	ldr	r3, [pc, #164]	@ (8007898 <prvAddNewTaskToReadyList+0xbc>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d109      	bne.n	800780e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077fa:	4a27      	ldr	r2, [pc, #156]	@ (8007898 <prvAddNewTaskToReadyList+0xbc>)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007800:	4b24      	ldr	r3, [pc, #144]	@ (8007894 <prvAddNewTaskToReadyList+0xb8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d110      	bne.n	800782a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007808:	f000 fcac 	bl	8008164 <prvInitialiseTaskLists>
 800780c:	e00d      	b.n	800782a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800780e:	4b23      	ldr	r3, [pc, #140]	@ (800789c <prvAddNewTaskToReadyList+0xc0>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d109      	bne.n	800782a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007816:	4b20      	ldr	r3, [pc, #128]	@ (8007898 <prvAddNewTaskToReadyList+0xbc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007820:	429a      	cmp	r2, r3
 8007822:	d802      	bhi.n	800782a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007824:	4a1c      	ldr	r2, [pc, #112]	@ (8007898 <prvAddNewTaskToReadyList+0xbc>)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800782a:	4b1d      	ldr	r3, [pc, #116]	@ (80078a0 <prvAddNewTaskToReadyList+0xc4>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	3301      	adds	r3, #1
 8007830:	4a1b      	ldr	r2, [pc, #108]	@ (80078a0 <prvAddNewTaskToReadyList+0xc4>)
 8007832:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007838:	2201      	movs	r2, #1
 800783a:	409a      	lsls	r2, r3
 800783c:	4b19      	ldr	r3, [pc, #100]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4313      	orrs	r3, r2
 8007842:	4a18      	ldr	r2, [pc, #96]	@ (80078a4 <prvAddNewTaskToReadyList+0xc8>)
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a15      	ldr	r2, [pc, #84]	@ (80078a8 <prvAddNewTaskToReadyList+0xcc>)
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3304      	adds	r3, #4
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7fe fd81 	bl	8006364 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007862:	f001 f8c3 	bl	80089ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007866:	4b0d      	ldr	r3, [pc, #52]	@ (800789c <prvAddNewTaskToReadyList+0xc0>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00e      	beq.n	800788c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800786e:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <prvAddNewTaskToReadyList+0xbc>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007878:	429a      	cmp	r2, r3
 800787a:	d207      	bcs.n	800788c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800787c:	4b0b      	ldr	r3, [pc, #44]	@ (80078ac <prvAddNewTaskToReadyList+0xd0>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800788c:	bf00      	nop
 800788e:	3708      	adds	r7, #8
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200012c8 	.word	0x200012c8
 8007898:	200011c8 	.word	0x200011c8
 800789c:	200012d4 	.word	0x200012d4
 80078a0:	200012e4 	.word	0x200012e4
 80078a4:	200012d0 	.word	0x200012d0
 80078a8:	200011cc 	.word	0x200011cc
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80078b8:	f001 f866 	bl	8008988 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d102      	bne.n	80078c8 <vTaskDelete+0x18>
 80078c2:	4b39      	ldr	r3, [pc, #228]	@ (80079a8 <vTaskDelete+0xf8>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	e000      	b.n	80078ca <vTaskDelete+0x1a>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	3304      	adds	r3, #4
 80078d0:	4618      	mov	r0, r3
 80078d2:	f7fe fda4 	bl	800641e <uxListRemove>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d115      	bne.n	8007908 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078e0:	4932      	ldr	r1, [pc, #200]	@ (80079ac <vTaskDelete+0xfc>)
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d10a      	bne.n	8007908 <vTaskDelete+0x58>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	2201      	movs	r2, #1
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	43da      	mvns	r2, r3
 80078fe:	4b2c      	ldr	r3, [pc, #176]	@ (80079b0 <vTaskDelete+0x100>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4013      	ands	r3, r2
 8007904:	4a2a      	ldr	r2, [pc, #168]	@ (80079b0 <vTaskDelete+0x100>)
 8007906:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3318      	adds	r3, #24
 8007914:	4618      	mov	r0, r3
 8007916:	f7fe fd82 	bl	800641e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800791a:	4b26      	ldr	r3, [pc, #152]	@ (80079b4 <vTaskDelete+0x104>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	4a24      	ldr	r2, [pc, #144]	@ (80079b4 <vTaskDelete+0x104>)
 8007922:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8007924:	4b20      	ldr	r3, [pc, #128]	@ (80079a8 <vTaskDelete+0xf8>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	429a      	cmp	r2, r3
 800792c:	d10b      	bne.n	8007946 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3304      	adds	r3, #4
 8007932:	4619      	mov	r1, r3
 8007934:	4820      	ldr	r0, [pc, #128]	@ (80079b8 <vTaskDelete+0x108>)
 8007936:	f7fe fd15 	bl	8006364 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800793a:	4b20      	ldr	r3, [pc, #128]	@ (80079bc <vTaskDelete+0x10c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	3301      	adds	r3, #1
 8007940:	4a1e      	ldr	r2, [pc, #120]	@ (80079bc <vTaskDelete+0x10c>)
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e009      	b.n	800795a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007946:	4b1e      	ldr	r3, [pc, #120]	@ (80079c0 <vTaskDelete+0x110>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3b01      	subs	r3, #1
 800794c:	4a1c      	ldr	r2, [pc, #112]	@ (80079c0 <vTaskDelete+0x110>)
 800794e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8007950:	68f8      	ldr	r0, [r7, #12]
 8007952:	f000 fc75 	bl	8008240 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007956:	f000 fca3 	bl	80082a0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800795a:	f001 f847 	bl	80089ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800795e:	4b19      	ldr	r3, [pc, #100]	@ (80079c4 <vTaskDelete+0x114>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01c      	beq.n	80079a0 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8007966:	4b10      	ldr	r3, [pc, #64]	@ (80079a8 <vTaskDelete+0xf8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	429a      	cmp	r2, r3
 800796e:	d117      	bne.n	80079a0 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007970:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <vTaskDelete+0x118>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d00b      	beq.n	8007990 <vTaskDelete+0xe0>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	60bb      	str	r3, [r7, #8]
}
 800798a:	bf00      	nop
 800798c:	bf00      	nop
 800798e:	e7fd      	b.n	800798c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8007990:	4b0e      	ldr	r3, [pc, #56]	@ (80079cc <vTaskDelete+0x11c>)
 8007992:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	f3bf 8f4f 	dsb	sy
 800799c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80079a0:	bf00      	nop
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	200011c8 	.word	0x200011c8
 80079ac:	200011cc 	.word	0x200011cc
 80079b0:	200012d0 	.word	0x200012d0
 80079b4:	200012e4 	.word	0x200012e4
 80079b8:	2000129c 	.word	0x2000129c
 80079bc:	200012b0 	.word	0x200012b0
 80079c0:	200012c8 	.word	0x200012c8
 80079c4:	200012d4 	.word	0x200012d4
 80079c8:	200012f0 	.word	0x200012f0
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d018      	beq.n	8007a14 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079e2:	4b14      	ldr	r3, [pc, #80]	@ (8007a34 <vTaskDelay+0x64>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <vTaskDelay+0x32>
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	60bb      	str	r3, [r7, #8]
}
 80079fc:	bf00      	nop
 80079fe:	bf00      	nop
 8007a00:	e7fd      	b.n	80079fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a02:	f000 f87d 	bl	8007b00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a06:	2100      	movs	r1, #0
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fe29 	bl	8008660 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a0e:	f000 f885 	bl	8007b1c <xTaskResumeAll>
 8007a12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d107      	bne.n	8007a2a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007a1a:	4b07      	ldr	r3, [pc, #28]	@ (8007a38 <vTaskDelay+0x68>)
 8007a1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a20:	601a      	str	r2, [r3, #0]
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a2a:	bf00      	nop
 8007a2c:	3710      	adds	r7, #16
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200012f0 	.word	0x200012f0
 8007a38:	e000ed04 	.word	0xe000ed04

08007a3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b08a      	sub	sp, #40	@ 0x28
 8007a40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a42:	2300      	movs	r3, #0
 8007a44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a4a:	463a      	mov	r2, r7
 8007a4c:	1d39      	adds	r1, r7, #4
 8007a4e:	f107 0308 	add.w	r3, r7, #8
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7f9 fae8 	bl	8001028 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	68ba      	ldr	r2, [r7, #8]
 8007a5e:	9202      	str	r2, [sp, #8]
 8007a60:	9301      	str	r3, [sp, #4]
 8007a62:	2300      	movs	r3, #0
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	2300      	movs	r3, #0
 8007a68:	460a      	mov	r2, r1
 8007a6a:	491f      	ldr	r1, [pc, #124]	@ (8007ae8 <vTaskStartScheduler+0xac>)
 8007a6c:	481f      	ldr	r0, [pc, #124]	@ (8007aec <vTaskStartScheduler+0xb0>)
 8007a6e:	f7ff fd7f 	bl	8007570 <xTaskCreateStatic>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4a1e      	ldr	r2, [pc, #120]	@ (8007af0 <vTaskStartScheduler+0xb4>)
 8007a76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a78:	4b1d      	ldr	r3, [pc, #116]	@ (8007af0 <vTaskStartScheduler+0xb4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a80:	2301      	movs	r3, #1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	e001      	b.n	8007a8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a86:	2300      	movs	r3, #0
 8007a88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d116      	bne.n	8007abe <vTaskStartScheduler+0x82>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aa4:	4b13      	ldr	r3, [pc, #76]	@ (8007af4 <vTaskStartScheduler+0xb8>)
 8007aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aaa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007aac:	4b12      	ldr	r3, [pc, #72]	@ (8007af8 <vTaskStartScheduler+0xbc>)
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007ab2:	4b12      	ldr	r3, [pc, #72]	@ (8007afc <vTaskStartScheduler+0xc0>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ab8:	f000 fec2 	bl	8008840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007abc:	e00f      	b.n	8007ade <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ac4:	d10b      	bne.n	8007ade <vTaskStartScheduler+0xa2>
	__asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60fb      	str	r3, [r7, #12]
}
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <vTaskStartScheduler+0x9e>
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	08019270 	.word	0x08019270
 8007aec:	08008135 	.word	0x08008135
 8007af0:	200012ec 	.word	0x200012ec
 8007af4:	200012e8 	.word	0x200012e8
 8007af8:	200012d4 	.word	0x200012d4
 8007afc:	200012cc 	.word	0x200012cc

08007b00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007b00:	b480      	push	{r7}
 8007b02:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007b04:	4b04      	ldr	r3, [pc, #16]	@ (8007b18 <vTaskSuspendAll+0x18>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	4a03      	ldr	r2, [pc, #12]	@ (8007b18 <vTaskSuspendAll+0x18>)
 8007b0c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007b0e:	bf00      	nop
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	200012f0 	.word	0x200012f0

08007b1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b2a:	4b42      	ldr	r3, [pc, #264]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10b      	bne.n	8007b4a <xTaskResumeAll+0x2e>
	__asm volatile
 8007b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b36:	f383 8811 	msr	BASEPRI, r3
 8007b3a:	f3bf 8f6f 	isb	sy
 8007b3e:	f3bf 8f4f 	dsb	sy
 8007b42:	603b      	str	r3, [r7, #0]
}
 8007b44:	bf00      	nop
 8007b46:	bf00      	nop
 8007b48:	e7fd      	b.n	8007b46 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b4a:	f000 ff1d 	bl	8008988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b4e:	4b39      	ldr	r3, [pc, #228]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3b01      	subs	r3, #1
 8007b54:	4a37      	ldr	r2, [pc, #220]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b58:	4b36      	ldr	r3, [pc, #216]	@ (8007c34 <xTaskResumeAll+0x118>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d161      	bne.n	8007c24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b60:	4b35      	ldr	r3, [pc, #212]	@ (8007c38 <xTaskResumeAll+0x11c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d05d      	beq.n	8007c24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b68:	e02e      	b.n	8007bc8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6a:	4b34      	ldr	r3, [pc, #208]	@ (8007c3c <xTaskResumeAll+0x120>)
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3318      	adds	r3, #24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fc51 	bl	800641e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fe fc4c 	bl	800641e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	409a      	lsls	r2, r3
 8007b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c40 <xTaskResumeAll+0x124>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4313      	orrs	r3, r2
 8007b94:	4a2a      	ldr	r2, [pc, #168]	@ (8007c40 <xTaskResumeAll+0x124>)
 8007b96:	6013      	str	r3, [r2, #0]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9c:	4613      	mov	r3, r2
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	4a27      	ldr	r2, [pc, #156]	@ (8007c44 <xTaskResumeAll+0x128>)
 8007ba6:	441a      	add	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	3304      	adds	r3, #4
 8007bac:	4619      	mov	r1, r3
 8007bae:	4610      	mov	r0, r2
 8007bb0:	f7fe fbd8 	bl	8006364 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb8:	4b23      	ldr	r3, [pc, #140]	@ (8007c48 <xTaskResumeAll+0x12c>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d302      	bcc.n	8007bc8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007bc2:	4b22      	ldr	r3, [pc, #136]	@ (8007c4c <xTaskResumeAll+0x130>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8007c3c <xTaskResumeAll+0x120>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1cc      	bne.n	8007b6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bd6:	f000 fb63 	bl	80082a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bda:	4b1d      	ldr	r3, [pc, #116]	@ (8007c50 <xTaskResumeAll+0x134>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d010      	beq.n	8007c08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007be6:	f000 f859 	bl	8007c9c <xTaskIncrementTick>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d002      	beq.n	8007bf6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bf0:	4b16      	ldr	r3, [pc, #88]	@ (8007c4c <xTaskResumeAll+0x130>)
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1f1      	bne.n	8007be6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007c02:	4b13      	ldr	r3, [pc, #76]	@ (8007c50 <xTaskResumeAll+0x134>)
 8007c04:	2200      	movs	r2, #0
 8007c06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007c08:	4b10      	ldr	r3, [pc, #64]	@ (8007c4c <xTaskResumeAll+0x130>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d009      	beq.n	8007c24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007c14:	4b0f      	ldr	r3, [pc, #60]	@ (8007c54 <xTaskResumeAll+0x138>)
 8007c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c24:	f000 fee2 	bl	80089ec <vPortExitCritical>

	return xAlreadyYielded;
 8007c28:	68bb      	ldr	r3, [r7, #8]
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	200012f0 	.word	0x200012f0
 8007c38:	200012c8 	.word	0x200012c8
 8007c3c:	20001288 	.word	0x20001288
 8007c40:	200012d0 	.word	0x200012d0
 8007c44:	200011cc 	.word	0x200011cc
 8007c48:	200011c8 	.word	0x200011c8
 8007c4c:	200012dc 	.word	0x200012dc
 8007c50:	200012d8 	.word	0x200012d8
 8007c54:	e000ed04 	.word	0xe000ed04

08007c58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c5e:	4b05      	ldr	r3, [pc, #20]	@ (8007c74 <xTaskGetTickCount+0x1c>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c64:	687b      	ldr	r3, [r7, #4]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	370c      	adds	r7, #12
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	200012cc 	.word	0x200012cc

08007c78 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c7e:	f000 ff63 	bl	8008b48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007c82:	2300      	movs	r3, #0
 8007c84:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007c86:	4b04      	ldr	r3, [pc, #16]	@ (8007c98 <xTaskGetTickCountFromISR+0x20>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8c:	683b      	ldr	r3, [r7, #0]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	200012cc 	.word	0x200012cc

08007c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8007de4 <xTaskIncrementTick+0x148>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f040 808f 	bne.w	8007dce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8007de8 <xTaskIncrementTick+0x14c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8007de8 <xTaskIncrementTick+0x14c>)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d121      	bne.n	8007d08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007cc4:	4b49      	ldr	r3, [pc, #292]	@ (8007dec <xTaskIncrementTick+0x150>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	603b      	str	r3, [r7, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <xTaskIncrementTick+0x46>
 8007ce6:	4b41      	ldr	r3, [pc, #260]	@ (8007dec <xTaskIncrementTick+0x150>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
 8007cec:	4b40      	ldr	r3, [pc, #256]	@ (8007df0 <xTaskIncrementTick+0x154>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8007dec <xTaskIncrementTick+0x150>)
 8007cf2:	6013      	str	r3, [r2, #0]
 8007cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8007df0 <xTaskIncrementTick+0x154>)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8007df4 <xTaskIncrementTick+0x158>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	4a3c      	ldr	r2, [pc, #240]	@ (8007df4 <xTaskIncrementTick+0x158>)
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	f000 facc 	bl	80082a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007d08:	4b3b      	ldr	r3, [pc, #236]	@ (8007df8 <xTaskIncrementTick+0x15c>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d348      	bcc.n	8007da4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d12:	4b36      	ldr	r3, [pc, #216]	@ (8007dec <xTaskIncrementTick+0x150>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d1c:	4b36      	ldr	r3, [pc, #216]	@ (8007df8 <xTaskIncrementTick+0x15c>)
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d22:	601a      	str	r2, [r3, #0]
					break;
 8007d24:	e03e      	b.n	8007da4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d26:	4b31      	ldr	r3, [pc, #196]	@ (8007dec <xTaskIncrementTick+0x150>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d203      	bcs.n	8007d46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8007df8 <xTaskIncrementTick+0x15c>)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d44:	e02e      	b.n	8007da4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3304      	adds	r3, #4
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe fb67 	bl	800641e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	3318      	adds	r3, #24
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fe fb5e 	bl	800641e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d66:	2201      	movs	r2, #1
 8007d68:	409a      	lsls	r2, r3
 8007d6a:	4b24      	ldr	r3, [pc, #144]	@ (8007dfc <xTaskIncrementTick+0x160>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	4a22      	ldr	r2, [pc, #136]	@ (8007dfc <xTaskIncrementTick+0x160>)
 8007d72:	6013      	str	r3, [r2, #0]
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d78:	4613      	mov	r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4a1f      	ldr	r2, [pc, #124]	@ (8007e00 <xTaskIncrementTick+0x164>)
 8007d82:	441a      	add	r2, r3
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4610      	mov	r0, r2
 8007d8c:	f7fe faea 	bl	8006364 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d94:	4b1b      	ldr	r3, [pc, #108]	@ (8007e04 <xTaskIncrementTick+0x168>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d3b9      	bcc.n	8007d12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007da2:	e7b6      	b.n	8007d12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007da4:	4b17      	ldr	r3, [pc, #92]	@ (8007e04 <xTaskIncrementTick+0x168>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007daa:	4915      	ldr	r1, [pc, #84]	@ (8007e00 <xTaskIncrementTick+0x164>)
 8007dac:	4613      	mov	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	4413      	add	r3, r2
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	440b      	add	r3, r1
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d901      	bls.n	8007dc0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007dc0:	4b11      	ldr	r3, [pc, #68]	@ (8007e08 <xTaskIncrementTick+0x16c>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	617b      	str	r3, [r7, #20]
 8007dcc:	e004      	b.n	8007dd8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007dce:	4b0f      	ldr	r3, [pc, #60]	@ (8007e0c <xTaskIncrementTick+0x170>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8007e0c <xTaskIncrementTick+0x170>)
 8007dd6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007dd8:	697b      	ldr	r3, [r7, #20]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200012f0 	.word	0x200012f0
 8007de8:	200012cc 	.word	0x200012cc
 8007dec:	20001280 	.word	0x20001280
 8007df0:	20001284 	.word	0x20001284
 8007df4:	200012e0 	.word	0x200012e0
 8007df8:	200012e8 	.word	0x200012e8
 8007dfc:	200012d0 	.word	0x200012d0
 8007e00:	200011cc 	.word	0x200011cc
 8007e04:	200011c8 	.word	0x200011c8
 8007e08:	200012dc 	.word	0x200012dc
 8007e0c:	200012d8 	.word	0x200012d8

08007e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b088      	sub	sp, #32
 8007e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007e16:	4b3a      	ldr	r3, [pc, #232]	@ (8007f00 <vTaskSwitchContext+0xf0>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007e1e:	4b39      	ldr	r3, [pc, #228]	@ (8007f04 <vTaskSwitchContext+0xf4>)
 8007e20:	2201      	movs	r2, #1
 8007e22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e24:	e067      	b.n	8007ef6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8007e26:	4b37      	ldr	r3, [pc, #220]	@ (8007f04 <vTaskSwitchContext+0xf4>)
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007e2c:	4b36      	ldr	r3, [pc, #216]	@ (8007f08 <vTaskSwitchContext+0xf8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e32:	61fb      	str	r3, [r7, #28]
 8007e34:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8007e38:	61bb      	str	r3, [r7, #24]
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d111      	bne.n	8007e68 <vTaskSwitchContext+0x58>
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	3304      	adds	r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d10b      	bne.n	8007e68 <vTaskSwitchContext+0x58>
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3308      	adds	r3, #8
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d105      	bne.n	8007e68 <vTaskSwitchContext+0x58>
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	330c      	adds	r3, #12
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d008      	beq.n	8007e7a <vTaskSwitchContext+0x6a>
 8007e68:	4b27      	ldr	r3, [pc, #156]	@ (8007f08 <vTaskSwitchContext+0xf8>)
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	4b26      	ldr	r3, [pc, #152]	@ (8007f08 <vTaskSwitchContext+0xf8>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3334      	adds	r3, #52	@ 0x34
 8007e72:	4619      	mov	r1, r3
 8007e74:	4610      	mov	r0, r2
 8007e76:	f7f9 fab5 	bl	80013e4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7a:	4b24      	ldr	r3, [pc, #144]	@ (8007f0c <vTaskSwitchContext+0xfc>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	fab3 f383 	clz	r3, r3
 8007e86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007e88:	7afb      	ldrb	r3, [r7, #11]
 8007e8a:	f1c3 031f 	rsb	r3, r3, #31
 8007e8e:	617b      	str	r3, [r7, #20]
 8007e90:	491f      	ldr	r1, [pc, #124]	@ (8007f10 <vTaskSwitchContext+0x100>)
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	440b      	add	r3, r1
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10b      	bne.n	8007ebc <vTaskSwitchContext+0xac>
	__asm volatile
 8007ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea8:	f383 8811 	msr	BASEPRI, r3
 8007eac:	f3bf 8f6f 	isb	sy
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	607b      	str	r3, [r7, #4]
}
 8007eb6:	bf00      	nop
 8007eb8:	bf00      	nop
 8007eba:	e7fd      	b.n	8007eb8 <vTaskSwitchContext+0xa8>
 8007ebc:	697a      	ldr	r2, [r7, #20]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a12      	ldr	r2, [pc, #72]	@ (8007f10 <vTaskSwitchContext+0x100>)
 8007ec8:	4413      	add	r3, r2
 8007eca:	613b      	str	r3, [r7, #16]
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	685a      	ldr	r2, [r3, #4]
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	605a      	str	r2, [r3, #4]
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	685a      	ldr	r2, [r3, #4]
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	3308      	adds	r3, #8
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d104      	bne.n	8007eec <vTaskSwitchContext+0xdc>
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	605a      	str	r2, [r3, #4]
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	4a05      	ldr	r2, [pc, #20]	@ (8007f08 <vTaskSwitchContext+0xf8>)
 8007ef4:	6013      	str	r3, [r2, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	3720      	adds	r7, #32
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	200012f0 	.word	0x200012f0
 8007f04:	200012dc 	.word	0x200012dc
 8007f08:	200011c8 	.word	0x200011c8
 8007f0c:	200012d0 	.word	0x200012d0
 8007f10:	200011cc 	.word	0x200011cc

08007f14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d10b      	bne.n	8007f3c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60fb      	str	r3, [r7, #12]
}
 8007f36:	bf00      	nop
 8007f38:	bf00      	nop
 8007f3a:	e7fd      	b.n	8007f38 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f3c:	4b07      	ldr	r3, [pc, #28]	@ (8007f5c <vTaskPlaceOnEventList+0x48>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3318      	adds	r3, #24
 8007f42:	4619      	mov	r1, r3
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f7fe fa31 	bl	80063ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f4a:	2101      	movs	r1, #1
 8007f4c:	6838      	ldr	r0, [r7, #0]
 8007f4e:	f000 fb87 	bl	8008660 <prvAddCurrentTaskToDelayedList>
}
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	200011c8 	.word	0x200011c8

08007f60 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68db      	ldr	r3, [r3, #12]
 8007f6e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10b      	bne.n	8007f8e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f7a:	f383 8811 	msr	BASEPRI, r3
 8007f7e:	f3bf 8f6f 	isb	sy
 8007f82:	f3bf 8f4f 	dsb	sy
 8007f86:	60fb      	str	r3, [r7, #12]
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	e7fd      	b.n	8007f8a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	3318      	adds	r3, #24
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fe fa43 	bl	800641e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f98:	4b1d      	ldr	r3, [pc, #116]	@ (8008010 <xTaskRemoveFromEventList+0xb0>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d11c      	bne.n	8007fda <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fa3a 	bl	800641e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fae:	2201      	movs	r2, #1
 8007fb0:	409a      	lsls	r2, r3
 8007fb2:	4b18      	ldr	r3, [pc, #96]	@ (8008014 <xTaskRemoveFromEventList+0xb4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	4a16      	ldr	r2, [pc, #88]	@ (8008014 <xTaskRemoveFromEventList+0xb4>)
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	4413      	add	r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4a13      	ldr	r2, [pc, #76]	@ (8008018 <xTaskRemoveFromEventList+0xb8>)
 8007fca:	441a      	add	r2, r3
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	4610      	mov	r0, r2
 8007fd4:	f7fe f9c6 	bl	8006364 <vListInsertEnd>
 8007fd8:	e005      	b.n	8007fe6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	3318      	adds	r3, #24
 8007fde:	4619      	mov	r1, r3
 8007fe0:	480e      	ldr	r0, [pc, #56]	@ (800801c <xTaskRemoveFromEventList+0xbc>)
 8007fe2:	f7fe f9bf 	bl	8006364 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fea:	4b0d      	ldr	r3, [pc, #52]	@ (8008020 <xTaskRemoveFromEventList+0xc0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d905      	bls.n	8008000 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <xTaskRemoveFromEventList+0xc4>)
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	e001      	b.n	8008004 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008004:	697b      	ldr	r3, [r7, #20]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200012f0 	.word	0x200012f0
 8008014:	200012d0 	.word	0x200012d0
 8008018:	200011cc 	.word	0x200011cc
 800801c:	20001288 	.word	0x20001288
 8008020:	200011c8 	.word	0x200011c8
 8008024:	200012dc 	.word	0x200012dc

08008028 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008030:	4b06      	ldr	r3, [pc, #24]	@ (800804c <vTaskInternalSetTimeOutState+0x24>)
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008038:	4b05      	ldr	r3, [pc, #20]	@ (8008050 <vTaskInternalSetTimeOutState+0x28>)
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	605a      	str	r2, [r3, #4]
}
 8008040:	bf00      	nop
 8008042:	370c      	adds	r7, #12
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr
 800804c:	200012e0 	.word	0x200012e0
 8008050:	200012cc 	.word	0x200012cc

08008054 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	613b      	str	r3, [r7, #16]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10b      	bne.n	800809a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	60fb      	str	r3, [r7, #12]
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	e7fd      	b.n	8008096 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800809a:	f000 fc75 	bl	8008988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800809e:	4b1d      	ldr	r3, [pc, #116]	@ (8008114 <xTaskCheckForTimeOut+0xc0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b6:	d102      	bne.n	80080be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]
 80080bc:	e023      	b.n	8008106 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b15      	ldr	r3, [pc, #84]	@ (8008118 <xTaskCheckForTimeOut+0xc4>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d007      	beq.n	80080da <xTaskCheckForTimeOut+0x86>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d302      	bcc.n	80080da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	61fb      	str	r3, [r7, #28]
 80080d8:	e015      	b.n	8008106 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d20b      	bcs.n	80080fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	681a      	ldr	r2, [r3, #0]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	1ad2      	subs	r2, r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff ff99 	bl	8008028 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	61fb      	str	r3, [r7, #28]
 80080fa:	e004      	b.n	8008106 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008102:	2301      	movs	r3, #1
 8008104:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008106:	f000 fc71 	bl	80089ec <vPortExitCritical>

	return xReturn;
 800810a:	69fb      	ldr	r3, [r7, #28]
}
 800810c:	4618      	mov	r0, r3
 800810e:	3720      	adds	r7, #32
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	200012cc 	.word	0x200012cc
 8008118:	200012e0 	.word	0x200012e0

0800811c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800811c:	b480      	push	{r7}
 800811e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008120:	4b03      	ldr	r3, [pc, #12]	@ (8008130 <vTaskMissedYield+0x14>)
 8008122:	2201      	movs	r2, #1
 8008124:	601a      	str	r2, [r3, #0]
}
 8008126:	bf00      	nop
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr
 8008130:	200012dc 	.word	0x200012dc

08008134 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800813c:	f000 f852 	bl	80081e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008140:	4b06      	ldr	r3, [pc, #24]	@ (800815c <prvIdleTask+0x28>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b01      	cmp	r3, #1
 8008146:	d9f9      	bls.n	800813c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008148:	4b05      	ldr	r3, [pc, #20]	@ (8008160 <prvIdleTask+0x2c>)
 800814a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800814e:	601a      	str	r2, [r3, #0]
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008158:	e7f0      	b.n	800813c <prvIdleTask+0x8>
 800815a:	bf00      	nop
 800815c:	200011cc 	.word	0x200011cc
 8008160:	e000ed04 	.word	0xe000ed04

08008164 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	e00c      	b.n	800818a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4a12      	ldr	r2, [pc, #72]	@ (80081c4 <prvInitialiseTaskLists+0x60>)
 800817c:	4413      	add	r3, r2
 800817e:	4618      	mov	r0, r3
 8008180:	f7fe f8c3 	bl	800630a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3301      	adds	r3, #1
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b06      	cmp	r3, #6
 800818e:	d9ef      	bls.n	8008170 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008190:	480d      	ldr	r0, [pc, #52]	@ (80081c8 <prvInitialiseTaskLists+0x64>)
 8008192:	f7fe f8ba 	bl	800630a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008196:	480d      	ldr	r0, [pc, #52]	@ (80081cc <prvInitialiseTaskLists+0x68>)
 8008198:	f7fe f8b7 	bl	800630a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800819c:	480c      	ldr	r0, [pc, #48]	@ (80081d0 <prvInitialiseTaskLists+0x6c>)
 800819e:	f7fe f8b4 	bl	800630a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081a2:	480c      	ldr	r0, [pc, #48]	@ (80081d4 <prvInitialiseTaskLists+0x70>)
 80081a4:	f7fe f8b1 	bl	800630a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081a8:	480b      	ldr	r0, [pc, #44]	@ (80081d8 <prvInitialiseTaskLists+0x74>)
 80081aa:	f7fe f8ae 	bl	800630a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ae:	4b0b      	ldr	r3, [pc, #44]	@ (80081dc <prvInitialiseTaskLists+0x78>)
 80081b0:	4a05      	ldr	r2, [pc, #20]	@ (80081c8 <prvInitialiseTaskLists+0x64>)
 80081b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081b4:	4b0a      	ldr	r3, [pc, #40]	@ (80081e0 <prvInitialiseTaskLists+0x7c>)
 80081b6:	4a05      	ldr	r2, [pc, #20]	@ (80081cc <prvInitialiseTaskLists+0x68>)
 80081b8:	601a      	str	r2, [r3, #0]
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	200011cc 	.word	0x200011cc
 80081c8:	20001258 	.word	0x20001258
 80081cc:	2000126c 	.word	0x2000126c
 80081d0:	20001288 	.word	0x20001288
 80081d4:	2000129c 	.word	0x2000129c
 80081d8:	200012b4 	.word	0x200012b4
 80081dc:	20001280 	.word	0x20001280
 80081e0:	20001284 	.word	0x20001284

080081e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081ea:	e019      	b.n	8008220 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081ec:	f000 fbcc 	bl	8008988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081f0:	4b10      	ldr	r3, [pc, #64]	@ (8008234 <prvCheckTasksWaitingTermination+0x50>)
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fe f90e 	bl	800641e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008202:	4b0d      	ldr	r3, [pc, #52]	@ (8008238 <prvCheckTasksWaitingTermination+0x54>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3b01      	subs	r3, #1
 8008208:	4a0b      	ldr	r2, [pc, #44]	@ (8008238 <prvCheckTasksWaitingTermination+0x54>)
 800820a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800820c:	4b0b      	ldr	r3, [pc, #44]	@ (800823c <prvCheckTasksWaitingTermination+0x58>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	3b01      	subs	r3, #1
 8008212:	4a0a      	ldr	r2, [pc, #40]	@ (800823c <prvCheckTasksWaitingTermination+0x58>)
 8008214:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008216:	f000 fbe9 	bl	80089ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 f810 	bl	8008240 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008220:	4b06      	ldr	r3, [pc, #24]	@ (800823c <prvCheckTasksWaitingTermination+0x58>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e1      	bne.n	80081ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	3708      	adds	r7, #8
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	2000129c 	.word	0x2000129c
 8008238:	200012c8 	.word	0x200012c8
 800823c:	200012b0 	.word	0x200012b0

08008240 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800824e:	2b00      	cmp	r3, #0
 8008250:	d108      	bne.n	8008264 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008256:	4618      	mov	r0, r3
 8008258:	f000 fd46 	bl	8008ce8 <vPortFree>
				vPortFree( pxTCB );
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 fd43 	bl	8008ce8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008262:	e019      	b.n	8008298 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800826a:	2b01      	cmp	r3, #1
 800826c:	d103      	bne.n	8008276 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 fd3a 	bl	8008ce8 <vPortFree>
	}
 8008274:	e010      	b.n	8008298 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800827c:	2b02      	cmp	r3, #2
 800827e:	d00b      	beq.n	8008298 <prvDeleteTCB+0x58>
	__asm volatile
 8008280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008284:	f383 8811 	msr	BASEPRI, r3
 8008288:	f3bf 8f6f 	isb	sy
 800828c:	f3bf 8f4f 	dsb	sy
 8008290:	60fb      	str	r3, [r7, #12]
}
 8008292:	bf00      	nop
 8008294:	bf00      	nop
 8008296:	e7fd      	b.n	8008294 <prvDeleteTCB+0x54>
	}
 8008298:	bf00      	nop
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082a6:	4b0c      	ldr	r3, [pc, #48]	@ (80082d8 <prvResetNextTaskUnblockTime+0x38>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082b0:	4b0a      	ldr	r3, [pc, #40]	@ (80082dc <prvResetNextTaskUnblockTime+0x3c>)
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80082b8:	e008      	b.n	80082cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082ba:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <prvResetNextTaskUnblockTime+0x38>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	4a04      	ldr	r2, [pc, #16]	@ (80082dc <prvResetNextTaskUnblockTime+0x3c>)
 80082ca:	6013      	str	r3, [r2, #0]
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	20001280 	.word	0x20001280
 80082dc:	200012e8 	.word	0x200012e8

080082e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008314 <xTaskGetSchedulerState+0x34>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d102      	bne.n	80082f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082ee:	2301      	movs	r3, #1
 80082f0:	607b      	str	r3, [r7, #4]
 80082f2:	e008      	b.n	8008306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f4:	4b08      	ldr	r3, [pc, #32]	@ (8008318 <xTaskGetSchedulerState+0x38>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d102      	bne.n	8008302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082fc:	2302      	movs	r3, #2
 80082fe:	607b      	str	r3, [r7, #4]
 8008300:	e001      	b.n	8008306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008302:	2300      	movs	r3, #0
 8008304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008306:	687b      	ldr	r3, [r7, #4]
	}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	200012d4 	.word	0x200012d4
 8008318:	200012f0 	.word	0x200012f0

0800831c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d05e      	beq.n	80083f0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008336:	4b31      	ldr	r3, [pc, #196]	@ (80083fc <xTaskPriorityInherit+0xe0>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833c:	429a      	cmp	r2, r3
 800833e:	d24e      	bcs.n	80083de <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	2b00      	cmp	r3, #0
 8008346:	db06      	blt.n	8008356 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008348:	4b2c      	ldr	r3, [pc, #176]	@ (80083fc <xTaskPriorityInherit+0xe0>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800834e:	f1c3 0207 	rsb	r2, r3, #7
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	6959      	ldr	r1, [r3, #20]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	4a26      	ldr	r2, [pc, #152]	@ (8008400 <xTaskPriorityInherit+0xe4>)
 8008368:	4413      	add	r3, r2
 800836a:	4299      	cmp	r1, r3
 800836c:	d12f      	bne.n	80083ce <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	3304      	adds	r3, #4
 8008372:	4618      	mov	r0, r3
 8008374:	f7fe f853 	bl	800641e <uxListRemove>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10a      	bne.n	8008394 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008382:	2201      	movs	r2, #1
 8008384:	fa02 f303 	lsl.w	r3, r2, r3
 8008388:	43da      	mvns	r2, r3
 800838a:	4b1e      	ldr	r3, [pc, #120]	@ (8008404 <xTaskPriorityInherit+0xe8>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4013      	ands	r3, r2
 8008390:	4a1c      	ldr	r2, [pc, #112]	@ (8008404 <xTaskPriorityInherit+0xe8>)
 8008392:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008394:	4b19      	ldr	r3, [pc, #100]	@ (80083fc <xTaskPriorityInherit+0xe0>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a2:	2201      	movs	r2, #1
 80083a4:	409a      	lsls	r2, r3
 80083a6:	4b17      	ldr	r3, [pc, #92]	@ (8008404 <xTaskPriorityInherit+0xe8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4313      	orrs	r3, r2
 80083ac:	4a15      	ldr	r2, [pc, #84]	@ (8008404 <xTaskPriorityInherit+0xe8>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4a10      	ldr	r2, [pc, #64]	@ (8008400 <xTaskPriorityInherit+0xe4>)
 80083be:	441a      	add	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	3304      	adds	r3, #4
 80083c4:	4619      	mov	r1, r3
 80083c6:	4610      	mov	r0, r2
 80083c8:	f7fd ffcc 	bl	8006364 <vListInsertEnd>
 80083cc:	e004      	b.n	80083d8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083ce:	4b0b      	ldr	r3, [pc, #44]	@ (80083fc <xTaskPriorityInherit+0xe0>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	e008      	b.n	80083f0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80083e2:	4b06      	ldr	r3, [pc, #24]	@ (80083fc <xTaskPriorityInherit+0xe0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d201      	bcs.n	80083f0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80083ec:	2301      	movs	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083f0:	68fb      	ldr	r3, [r7, #12]
	}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	bf00      	nop
 80083fc:	200011c8 	.word	0x200011c8
 8008400:	200011cc 	.word	0x200011cc
 8008404:	200012d0 	.word	0x200012d0

08008408 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008408:	b580      	push	{r7, lr}
 800840a:	b086      	sub	sp, #24
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008414:	2300      	movs	r3, #0
 8008416:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d070      	beq.n	8008500 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800841e:	4b3b      	ldr	r3, [pc, #236]	@ (800850c <xTaskPriorityDisinherit+0x104>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	429a      	cmp	r2, r3
 8008426:	d00b      	beq.n	8008440 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	60fb      	str	r3, [r7, #12]
}
 800843a:	bf00      	nop
 800843c:	bf00      	nop
 800843e:	e7fd      	b.n	800843c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008444:	2b00      	cmp	r3, #0
 8008446:	d10b      	bne.n	8008460 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800844c:	f383 8811 	msr	BASEPRI, r3
 8008450:	f3bf 8f6f 	isb	sy
 8008454:	f3bf 8f4f 	dsb	sy
 8008458:	60bb      	str	r3, [r7, #8]
}
 800845a:	bf00      	nop
 800845c:	bf00      	nop
 800845e:	e7fd      	b.n	800845c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008464:	1e5a      	subs	r2, r3, #1
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	659a      	str	r2, [r3, #88]	@ 0x58

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008472:	429a      	cmp	r2, r3
 8008474:	d044      	beq.n	8008500 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800847a:	2b00      	cmp	r3, #0
 800847c:	d140      	bne.n	8008500 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3304      	adds	r3, #4
 8008482:	4618      	mov	r0, r3
 8008484:	f7fd ffcb 	bl	800641e <uxListRemove>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d115      	bne.n	80084ba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008492:	491f      	ldr	r1, [pc, #124]	@ (8008510 <xTaskPriorityDisinherit+0x108>)
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	440b      	add	r3, r1
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <xTaskPriorityDisinherit+0xb2>
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084a8:	2201      	movs	r2, #1
 80084aa:	fa02 f303 	lsl.w	r3, r2, r3
 80084ae:	43da      	mvns	r2, r3
 80084b0:	4b18      	ldr	r3, [pc, #96]	@ (8008514 <xTaskPriorityDisinherit+0x10c>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4013      	ands	r3, r2
 80084b6:	4a17      	ldr	r2, [pc, #92]	@ (8008514 <xTaskPriorityDisinherit+0x10c>)
 80084b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c6:	f1c3 0207 	rsb	r2, r3, #7
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d2:	2201      	movs	r2, #1
 80084d4:	409a      	lsls	r2, r3
 80084d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008514 <xTaskPriorityDisinherit+0x10c>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4313      	orrs	r3, r2
 80084dc:	4a0d      	ldr	r2, [pc, #52]	@ (8008514 <xTaskPriorityDisinherit+0x10c>)
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4a08      	ldr	r2, [pc, #32]	@ (8008510 <xTaskPriorityDisinherit+0x108>)
 80084ee:	441a      	add	r2, r3
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	3304      	adds	r3, #4
 80084f4:	4619      	mov	r1, r3
 80084f6:	4610      	mov	r0, r2
 80084f8:	f7fd ff34 	bl	8006364 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80084fc:	2301      	movs	r3, #1
 80084fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008500:	697b      	ldr	r3, [r7, #20]
	}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200011c8 	.word	0x200011c8
 8008510:	200011cc 	.word	0x200011cc
 8008514:	200012d0 	.word	0x200012d0

08008518 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008518:	b580      	push	{r7, lr}
 800851a:	b088      	sub	sp, #32
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008526:	2301      	movs	r3, #1
 8008528:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d079      	beq.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008530:	69bb      	ldr	r3, [r7, #24]
 8008532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008534:	2b00      	cmp	r3, #0
 8008536:	d10b      	bne.n	8008550 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8008538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	60fb      	str	r3, [r7, #12]
}
 800854a:	bf00      	nop
 800854c:	bf00      	nop
 800854e:	e7fd      	b.n	800854c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008554:	683a      	ldr	r2, [r7, #0]
 8008556:	429a      	cmp	r2, r3
 8008558:	d902      	bls.n	8008560 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	61fb      	str	r3, [r7, #28]
 800855e:	e002      	b.n	8008566 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008564:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	429a      	cmp	r2, r3
 800856e:	d059      	beq.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008574:	697a      	ldr	r2, [r7, #20]
 8008576:	429a      	cmp	r2, r3
 8008578:	d154      	bne.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800857a:	4b2c      	ldr	r3, [pc, #176]	@ (800862c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	429a      	cmp	r2, r3
 8008582:	d10b      	bne.n	800859c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8008584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008588:	f383 8811 	msr	BASEPRI, r3
 800858c:	f3bf 8f6f 	isb	sy
 8008590:	f3bf 8f4f 	dsb	sy
 8008594:	60bb      	str	r3, [r7, #8]
}
 8008596:	bf00      	nop
 8008598:	bf00      	nop
 800859a:	e7fd      	b.n	8008598 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	69fa      	ldr	r2, [r7, #28]
 80085a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	db04      	blt.n	80085ba <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f1c3 0207 	rsb	r2, r3, #7
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	6959      	ldr	r1, [r3, #20]
 80085be:	693a      	ldr	r2, [r7, #16]
 80085c0:	4613      	mov	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	4a19      	ldr	r2, [pc, #100]	@ (8008630 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80085ca:	4413      	add	r3, r2
 80085cc:	4299      	cmp	r1, r3
 80085ce:	d129      	bne.n	8008624 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085d0:	69bb      	ldr	r3, [r7, #24]
 80085d2:	3304      	adds	r3, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fd ff22 	bl	800641e <uxListRemove>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10a      	bne.n	80085f6 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80085e0:	69bb      	ldr	r3, [r7, #24]
 80085e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e4:	2201      	movs	r2, #1
 80085e6:	fa02 f303 	lsl.w	r3, r2, r3
 80085ea:	43da      	mvns	r2, r3
 80085ec:	4b11      	ldr	r3, [pc, #68]	@ (8008634 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4013      	ands	r3, r2
 80085f2:	4a10      	ldr	r2, [pc, #64]	@ (8008634 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80085f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085f6:	69bb      	ldr	r3, [r7, #24]
 80085f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085fa:	2201      	movs	r2, #1
 80085fc:	409a      	lsls	r2, r3
 80085fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008634 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	4a0b      	ldr	r2, [pc, #44]	@ (8008634 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860c:	4613      	mov	r3, r2
 800860e:	009b      	lsls	r3, r3, #2
 8008610:	4413      	add	r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	4a06      	ldr	r2, [pc, #24]	@ (8008630 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8008616:	441a      	add	r2, r3
 8008618:	69bb      	ldr	r3, [r7, #24]
 800861a:	3304      	adds	r3, #4
 800861c:	4619      	mov	r1, r3
 800861e:	4610      	mov	r0, r2
 8008620:	f7fd fea0 	bl	8006364 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008624:	bf00      	nop
 8008626:	3720      	adds	r7, #32
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}
 800862c:	200011c8 	.word	0x200011c8
 8008630:	200011cc 	.word	0x200011cc
 8008634:	200012d0 	.word	0x200012d0

08008638 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800863c:	4b07      	ldr	r3, [pc, #28]	@ (800865c <pvTaskIncrementMutexHeldCount+0x24>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d004      	beq.n	800864e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008644:	4b05      	ldr	r3, [pc, #20]	@ (800865c <pvTaskIncrementMutexHeldCount+0x24>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800864a:	3201      	adds	r2, #1
 800864c:	659a      	str	r2, [r3, #88]	@ 0x58
		}

		return pxCurrentTCB;
 800864e:	4b03      	ldr	r3, [pc, #12]	@ (800865c <pvTaskIncrementMutexHeldCount+0x24>)
 8008650:	681b      	ldr	r3, [r3, #0]
	}
 8008652:	4618      	mov	r0, r3
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr
 800865c:	200011c8 	.word	0x200011c8

08008660 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800866a:	4b29      	ldr	r3, [pc, #164]	@ (8008710 <prvAddCurrentTaskToDelayedList+0xb0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008670:	4b28      	ldr	r3, [pc, #160]	@ (8008714 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3304      	adds	r3, #4
 8008676:	4618      	mov	r0, r3
 8008678:	f7fd fed1 	bl	800641e <uxListRemove>
 800867c:	4603      	mov	r3, r0
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10b      	bne.n	800869a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008682:	4b24      	ldr	r3, [pc, #144]	@ (8008714 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008688:	2201      	movs	r2, #1
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43da      	mvns	r2, r3
 8008690:	4b21      	ldr	r3, [pc, #132]	@ (8008718 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4013      	ands	r3, r2
 8008696:	4a20      	ldr	r2, [pc, #128]	@ (8008718 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008698:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a0:	d10a      	bne.n	80086b8 <prvAddCurrentTaskToDelayedList+0x58>
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d007      	beq.n	80086b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3304      	adds	r3, #4
 80086ae:	4619      	mov	r1, r3
 80086b0:	481a      	ldr	r0, [pc, #104]	@ (800871c <prvAddCurrentTaskToDelayedList+0xbc>)
 80086b2:	f7fd fe57 	bl	8006364 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80086b6:	e026      	b.n	8008706 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80086c0:	4b14      	ldr	r3, [pc, #80]	@ (8008714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	68ba      	ldr	r2, [r7, #8]
 80086c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086c8:	68ba      	ldr	r2, [r7, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d209      	bcs.n	80086e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086d0:	4b13      	ldr	r3, [pc, #76]	@ (8008720 <prvAddCurrentTaskToDelayedList+0xc0>)
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f7fd fe65 	bl	80063ac <vListInsert>
}
 80086e2:	e010      	b.n	8008706 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008724 <prvAddCurrentTaskToDelayedList+0xc4>)
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008714 <prvAddCurrentTaskToDelayedList+0xb4>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f7fd fe5b 	bl	80063ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008728 <prvAddCurrentTaskToDelayedList+0xc8>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d202      	bcs.n	8008706 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008700:	4a09      	ldr	r2, [pc, #36]	@ (8008728 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	6013      	str	r3, [r2, #0]
}
 8008706:	bf00      	nop
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200012cc 	.word	0x200012cc
 8008714:	200011c8 	.word	0x200011c8
 8008718:	200012d0 	.word	0x200012d0
 800871c:	200012b4 	.word	0x200012b4
 8008720:	20001284 	.word	0x20001284
 8008724:	20001280 	.word	0x20001280
 8008728:	200012e8 	.word	0x200012e8

0800872c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3b04      	subs	r3, #4
 800873c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3b04      	subs	r3, #4
 800874a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f023 0201 	bic.w	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3b04      	subs	r3, #4
 800875a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800875c:	4a0c      	ldr	r2, [pc, #48]	@ (8008790 <pxPortInitialiseStack+0x64>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b14      	subs	r3, #20
 8008766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3b04      	subs	r3, #4
 8008772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f06f 0202 	mvn.w	r2, #2
 800877a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3b20      	subs	r3, #32
 8008780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008782:	68fb      	ldr	r3, [r7, #12]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	08008795 	.word	0x08008795

08008794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800879e:	4b13      	ldr	r3, [pc, #76]	@ (80087ec <prvTaskExitError+0x58>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a6:	d00b      	beq.n	80087c0 <prvTaskExitError+0x2c>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60fb      	str	r3, [r7, #12]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <prvTaskExitError+0x28>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60bb      	str	r3, [r7, #8]
}
 80087d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087d4:	bf00      	nop
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0fc      	beq.n	80087d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	2000000c 	.word	0x2000000c

080087f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087f0:	4b07      	ldr	r3, [pc, #28]	@ (8008810 <pxCurrentTCBConst2>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6808      	ldr	r0, [r1, #0]
 80087f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	f380 8809 	msr	PSP, r0
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8811 	msr	BASEPRI, r0
 800880a:	4770      	bx	lr
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst2>:
 8008810:	200011c8 	.word	0x200011c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008818:	4808      	ldr	r0, [pc, #32]	@ (800883c <prvPortStartFirstTask+0x24>)
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	6800      	ldr	r0, [r0, #0]
 800881e:	f380 8808 	msr	MSP, r0
 8008822:	f04f 0000 	mov.w	r0, #0
 8008826:	f380 8814 	msr	CONTROL, r0
 800882a:	b662      	cpsie	i
 800882c:	b661      	cpsie	f
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	df00      	svc	0
 8008838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800883a:	bf00      	nop
 800883c:	e000ed08 	.word	0xe000ed08

08008840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008846:	4b47      	ldr	r3, [pc, #284]	@ (8008964 <xPortStartScheduler+0x124>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a47      	ldr	r2, [pc, #284]	@ (8008968 <xPortStartScheduler+0x128>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d10b      	bne.n	8008868 <xPortStartScheduler+0x28>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	613b      	str	r3, [r7, #16]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008868:	4b3e      	ldr	r3, [pc, #248]	@ (8008964 <xPortStartScheduler+0x124>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <xPortStartScheduler+0x12c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10b      	bne.n	800888a <xPortStartScheduler+0x4a>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	60fb      	str	r3, [r7, #12]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800888a:	4b39      	ldr	r3, [pc, #228]	@ (8008970 <xPortStartScheduler+0x130>)
 800888c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	22ff      	movs	r2, #255	@ 0xff
 800889a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	4b31      	ldr	r3, [pc, #196]	@ (8008974 <xPortStartScheduler+0x134>)
 80088b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088b2:	4b31      	ldr	r3, [pc, #196]	@ (8008978 <xPortStartScheduler+0x138>)
 80088b4:	2207      	movs	r2, #7
 80088b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088b8:	e009      	b.n	80088ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80088ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008978 <xPortStartScheduler+0x138>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008978 <xPortStartScheduler+0x138>)
 80088c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d6:	2b80      	cmp	r3, #128	@ 0x80
 80088d8:	d0ef      	beq.n	80088ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088da:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <xPortStartScheduler+0x138>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f1c3 0307 	rsb	r3, r3, #7
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d00b      	beq.n	80088fe <xPortStartScheduler+0xbe>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60bb      	str	r3, [r7, #8]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <xPortStartScheduler+0x138>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	4a1c      	ldr	r2, [pc, #112]	@ (8008978 <xPortStartScheduler+0x138>)
 8008906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008908:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <xPortStartScheduler+0x138>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008910:	4a19      	ldr	r2, [pc, #100]	@ (8008978 <xPortStartScheduler+0x138>)
 8008912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800891c:	4b17      	ldr	r3, [pc, #92]	@ (800897c <xPortStartScheduler+0x13c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a16      	ldr	r2, [pc, #88]	@ (800897c <xPortStartScheduler+0x13c>)
 8008922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008928:	4b14      	ldr	r3, [pc, #80]	@ (800897c <xPortStartScheduler+0x13c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a13      	ldr	r2, [pc, #76]	@ (800897c <xPortStartScheduler+0x13c>)
 800892e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008934:	f000 f8da 	bl	8008aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008938:	4b11      	ldr	r3, [pc, #68]	@ (8008980 <xPortStartScheduler+0x140>)
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800893e:	f000 f8f9 	bl	8008b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008942:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <xPortStartScheduler+0x144>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a0f      	ldr	r2, [pc, #60]	@ (8008984 <xPortStartScheduler+0x144>)
 8008948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800894c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800894e:	f7ff ff63 	bl	8008818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008952:	f7ff fa5d 	bl	8007e10 <vTaskSwitchContext>
	prvTaskExitError();
 8008956:	f7ff ff1d 	bl	8008794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	e000ed00 	.word	0xe000ed00
 8008968:	410fc271 	.word	0x410fc271
 800896c:	410fc270 	.word	0x410fc270
 8008970:	e000e400 	.word	0xe000e400
 8008974:	200012f4 	.word	0x200012f4
 8008978:	200012f8 	.word	0x200012f8
 800897c:	e000ed20 	.word	0xe000ed20
 8008980:	2000000c 	.word	0x2000000c
 8008984:	e000ef34 	.word	0xe000ef34

08008988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	607b      	str	r3, [r7, #4]
}
 80089a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089a2:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	4a0e      	ldr	r2, [pc, #56]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089ac:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d110      	bne.n	80089d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089b4:	4b0c      	ldr	r3, [pc, #48]	@ (80089e8 <vPortEnterCritical+0x60>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	603b      	str	r3, [r7, #0]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <vPortEnterCritical+0x4a>
	}
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	2000000c 	.word	0x2000000c
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089f2:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <vPortExitCritical+0x50>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <vPortExitCritical+0x26>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	607b      	str	r3, [r7, #4]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a12:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4a08      	ldr	r2, [pc, #32]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a1c:	4b07      	ldr	r3, [pc, #28]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <vPortExitCritical+0x44>
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f383 8811 	msr	BASEPRI, r3
}
 8008a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	2000000c 	.word	0x2000000c

08008a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a40:	f3ef 8009 	mrs	r0, PSP
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <pxCurrentTCBConst>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	f01e 0f10 	tst.w	lr, #16
 8008a50:	bf08      	it	eq
 8008a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	6010      	str	r0, [r2, #0]
 8008a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a64:	f380 8811 	msr	BASEPRI, r0
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f7ff f9ce 	bl	8007e10 <vTaskSwitchContext>
 8008a74:	f04f 0000 	mov.w	r0, #0
 8008a78:	f380 8811 	msr	BASEPRI, r0
 8008a7c:	bc09      	pop	{r0, r3}
 8008a7e:	6819      	ldr	r1, [r3, #0]
 8008a80:	6808      	ldr	r0, [r1, #0]
 8008a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a86:	f01e 0f10 	tst.w	lr, #16
 8008a8a:	bf08      	it	eq
 8008a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a90:	f380 8809 	msr	PSP, r0
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst>:
 8008aa0:	200011c8 	.word	0x200011c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ac2:	f7ff f8eb 	bl	8007c9c <xTaskIncrementTick>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008acc:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <SysTick_Handler+0x40>)
 8008ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f383 8811 	msr	BASEPRI, r3
}
 8008ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008af0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b20 <vPortSetupTimerInterrupt+0x34>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <vPortSetupTimerInterrupt+0x38>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <vPortSetupTimerInterrupt+0x3c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	@ (8008b2c <vPortSetupTimerInterrupt+0x40>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	099b      	lsrs	r3, r3, #6
 8008b08:	4a09      	ldr	r2, [pc, #36]	@ (8008b30 <vPortSetupTimerInterrupt+0x44>)
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b0e:	4b04      	ldr	r3, [pc, #16]	@ (8008b20 <vPortSetupTimerInterrupt+0x34>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	e000e010 	.word	0xe000e010
 8008b24:	e000e018 	.word	0xe000e018
 8008b28:	20000000 	.word	0x20000000
 8008b2c:	10624dd3 	.word	0x10624dd3
 8008b30:	e000e014 	.word	0xe000e014

08008b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b44 <vPortEnableVFP+0x10>
 8008b38:	6801      	ldr	r1, [r0, #0]
 8008b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b3e:	6001      	str	r1, [r0, #0]
 8008b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b42:	bf00      	nop
 8008b44:	e000ed88 	.word	0xe000ed88

08008b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b4e:	f3ef 8305 	mrs	r3, IPSR
 8008b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b0f      	cmp	r3, #15
 8008b58:	d915      	bls.n	8008b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b5a:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <vPortValidateInterruptPriority+0x74>)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b64:	4b16      	ldr	r3, [pc, #88]	@ (8008bc0 <vPortValidateInterruptPriority+0x78>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	7afa      	ldrb	r2, [r7, #11]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d20b      	bcs.n	8008b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <vPortValidateInterruptPriority+0x7c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <vPortValidateInterruptPriority+0x80>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d90b      	bls.n	8008bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	603b      	str	r3, [r7, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	e7fd      	b.n	8008baa <vPortValidateInterruptPriority+0x62>
	}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	e000e3f0 	.word	0xe000e3f0
 8008bc0:	200012f4 	.word	0x200012f4
 8008bc4:	e000ed0c 	.word	0xe000ed0c
 8008bc8:	200012f8 	.word	0x200012f8

08008bcc <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b088      	sub	sp, #32
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8008bd8:	f7fe ff92 	bl	8007b00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 8008bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8008cd8 <pvPortMalloc+0x10c>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d104      	bne.n	8008bee <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8008be4:	f000 f8ba 	bl	8008d5c <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8008be8:	4b3b      	ldr	r3, [pc, #236]	@ (8008cd8 <pvPortMalloc+0x10c>)
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d00e      	beq.n	8008c12 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8008bf4:	2308      	movs	r3, #8
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f003 0307 	and.w	r3, r3, #7
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d004      	beq.n	8008c12 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f023 0307 	bic.w	r3, r3, #7
 8008c0e:	3308      	adds	r3, #8
 8008c10:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d057      	beq.n	8008cc8 <pvPortMalloc+0xfc>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f647 72f7 	movw	r2, #32759	@ 0x7ff7
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d852      	bhi.n	8008cc8 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 8008c22:	4b2e      	ldr	r3, [pc, #184]	@ (8008cdc <pvPortMalloc+0x110>)
 8008c24:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 8008c26:	4b2d      	ldr	r3, [pc, #180]	@ (8008cdc <pvPortMalloc+0x110>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c2c:	e004      	b.n	8008c38 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d903      	bls.n	8008c4a <pvPortMalloc+0x7e>
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1f1      	bne.n	8008c2e <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 8008c4a:	69fb      	ldr	r3, [r7, #28]
 8008c4c:	4a24      	ldr	r2, [pc, #144]	@ (8008ce0 <pvPortMalloc+0x114>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d03a      	beq.n	8008cc8 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2208      	movs	r2, #8
 8008c58:	4413      	add	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	0052      	lsls	r2, r2, #1
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d922      	bls.n	8008cba <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	1ad2      	subs	r2, r2, r3
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	4b11      	ldr	r3, [pc, #68]	@ (8008cdc <pvPortMalloc+0x110>)
 8008c96:	613b      	str	r3, [r7, #16]
 8008c98:	e002      	b.n	8008ca0 <pvPortMalloc+0xd4>
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	613b      	str	r3, [r7, #16]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d8f6      	bhi.n	8008c9a <pvPortMalloc+0xce>
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cba:	4b0a      	ldr	r3, [pc, #40]	@ (8008ce4 <pvPortMalloc+0x118>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	4a07      	ldr	r2, [pc, #28]	@ (8008ce4 <pvPortMalloc+0x118>)
 8008cc6:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cc8:	f7fe ff28 	bl	8007b1c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8008ccc:	697b      	ldr	r3, [r7, #20]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3720      	adds	r7, #32
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	2000930c 	.word	0x2000930c
 8008cdc:	200092fc 	.word	0x200092fc
 8008ce0:	20009304 	.word	0x20009304
 8008ce4:	20000010 	.word	0x20000010

08008ce8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d027      	beq.n	8008d4a <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 8008cfa:	2308      	movs	r3, #8
 8008cfc:	425b      	negs	r3, r3
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4413      	add	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8008d08:	f7fe fefa 	bl	8007b00 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	60bb      	str	r3, [r7, #8]
 8008d12:	4b10      	ldr	r3, [pc, #64]	@ (8008d54 <vPortFree+0x6c>)
 8008d14:	617b      	str	r3, [r7, #20]
 8008d16:	e002      	b.n	8008d1e <vPortFree+0x36>
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d8f6      	bhi.n	8008d18 <vPortFree+0x30>
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	68fa      	ldr	r2, [r7, #12]
 8008d36:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	4b06      	ldr	r3, [pc, #24]	@ (8008d58 <vPortFree+0x70>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4413      	add	r3, r2
 8008d42:	4a05      	ldr	r2, [pc, #20]	@ (8008d58 <vPortFree+0x70>)
 8008d44:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 8008d46:	f7fe fee9 	bl	8007b1c <xTaskResumeAll>
	}
}
 8008d4a:	bf00      	nop
 8008d4c:	3718      	adds	r7, #24
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	200092fc 	.word	0x200092fc
 8008d58:	20000010 	.word	0x20000010

08008d5c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b083      	sub	sp, #12
 8008d60:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8008d62:	4b10      	ldr	r3, [pc, #64]	@ (8008da4 <prvHeapInit+0x48>)
 8008d64:	f023 0307 	bic.w	r3, r3, #7
 8008d68:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d6a:	4a0f      	ldr	r2, [pc, #60]	@ (8008da8 <prvHeapInit+0x4c>)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d70:	4b0d      	ldr	r3, [pc, #52]	@ (8008da8 <prvHeapInit+0x4c>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8008d76:	4b0d      	ldr	r3, [pc, #52]	@ (8008dac <prvHeapInit+0x50>)
 8008d78:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 8008d7c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 8008d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008dac <prvHeapInit+0x50>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	f647 72f8 	movw	r2, #32760	@ 0x7ff8
 8008d8e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	4a06      	ldr	r2, [pc, #24]	@ (8008dac <prvHeapInit+0x50>)
 8008d94:	601a      	str	r2, [r3, #0]
}
 8008d96:	bf00      	nop
 8008d98:	370c      	adds	r7, #12
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	20001304 	.word	0x20001304
 8008da8:	200092fc 	.word	0x200092fc
 8008dac:	20009304 	.word	0x20009304

08008db0 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	330c      	adds	r3, #12
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f002 fa9b 	bl	800b300 <tcpip_send_msg_wait_sem>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d103      	bne.n	8008dde <netconn_apimsg+0x2e>
    return apimsg->err;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008ddc:	e001      	b.n	8008de2 <netconn_apimsg+0x32>
  }
  return err;
 8008dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08c      	sub	sp, #48	@ 0x30
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	4603      	mov	r3, r0
 8008df4:	603a      	str	r2, [r7, #0]
 8008df6:	71fb      	strb	r3, [r7, #7]
 8008df8:	460b      	mov	r3, r1
 8008dfa:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008dfc:	79fb      	ldrb	r3, [r7, #7]
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f001 f927 	bl	800a054 <netconn_alloc>
 8008e06:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8008e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d054      	beq.n	8008eb8 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008e0e:	79bb      	ldrb	r3, [r7, #6]
 8008e10:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e14:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4829      	ldr	r0, [pc, #164]	@ (8008ec4 <netconn_new_with_proto_and_callback+0xd8>)
 8008e1e:	f7ff ffc7 	bl	8008db0 <netconn_apimsg>
 8008e22:	4603      	mov	r3, r0
 8008e24:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8008e28:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d043      	beq.n	8008eb8 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d005      	beq.n	8008e44 <netconn_new_with_proto_and_callback+0x58>
 8008e38:	4b23      	ldr	r3, [pc, #140]	@ (8008ec8 <netconn_new_with_proto_and_callback+0xdc>)
 8008e3a:	22a3      	movs	r2, #163	@ 0xa3
 8008e3c:	4923      	ldr	r1, [pc, #140]	@ (8008ecc <netconn_new_with_proto_and_callback+0xe0>)
 8008e3e:	4824      	ldr	r0, [pc, #144]	@ (8008ed0 <netconn_new_with_proto_and_callback+0xe4>)
 8008e40:	f00f fa5e 	bl	8018300 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e46:	3310      	adds	r3, #16
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f00f f820 	bl	8017e8e <sys_mbox_valid>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d105      	bne.n	8008e60 <netconn_new_with_proto_and_callback+0x74>
 8008e54:	4b1c      	ldr	r3, [pc, #112]	@ (8008ec8 <netconn_new_with_proto_and_callback+0xdc>)
 8008e56:	22a4      	movs	r2, #164	@ 0xa4
 8008e58:	491e      	ldr	r1, [pc, #120]	@ (8008ed4 <netconn_new_with_proto_and_callback+0xe8>)
 8008e5a:	481d      	ldr	r0, [pc, #116]	@ (8008ed0 <netconn_new_with_proto_and_callback+0xe4>)
 8008e5c:	f00f fa50 	bl	8018300 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e62:	3314      	adds	r3, #20
 8008e64:	4618      	mov	r0, r3
 8008e66:	f00f f812 	bl	8017e8e <sys_mbox_valid>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d005      	beq.n	8008e7c <netconn_new_with_proto_and_callback+0x90>
 8008e70:	4b15      	ldr	r3, [pc, #84]	@ (8008ec8 <netconn_new_with_proto_and_callback+0xdc>)
 8008e72:	22a6      	movs	r2, #166	@ 0xa6
 8008e74:	4918      	ldr	r1, [pc, #96]	@ (8008ed8 <netconn_new_with_proto_and_callback+0xec>)
 8008e76:	4816      	ldr	r0, [pc, #88]	@ (8008ed0 <netconn_new_with_proto_and_callback+0xe4>)
 8008e78:	f00f fa42 	bl	8018300 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7e:	330c      	adds	r3, #12
 8008e80:	4618      	mov	r0, r3
 8008e82:	f00f f895 	bl	8017fb0 <sys_sem_valid>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d105      	bne.n	8008e98 <netconn_new_with_proto_and_callback+0xac>
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec8 <netconn_new_with_proto_and_callback+0xdc>)
 8008e8e:	22a9      	movs	r2, #169	@ 0xa9
 8008e90:	4912      	ldr	r1, [pc, #72]	@ (8008edc <netconn_new_with_proto_and_callback+0xf0>)
 8008e92:	480f      	ldr	r0, [pc, #60]	@ (8008ed0 <netconn_new_with_proto_and_callback+0xe4>)
 8008e94:	f00f fa34 	bl	8018300 <iprintf>
      sys_sem_free(&conn->op_completed);
 8008e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e9a:	330c      	adds	r3, #12
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f00f f87a 	bl	8017f96 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea4:	3310      	adds	r3, #16
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f00e ff54 	bl	8017d54 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008eac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eae:	2007      	movs	r0, #7
 8008eb0:	f003 f906 	bl	800c0c0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	e000      	b.n	8008eba <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3730      	adds	r7, #48	@ 0x30
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	0800a029 	.word	0x0800a029
 8008ec8:	08019278 	.word	0x08019278
 8008ecc:	080192ac 	.word	0x080192ac
 8008ed0:	080192d0 	.word	0x080192d0
 8008ed4:	080192f8 	.word	0x080192f8
 8008ed8:	08019310 	.word	0x08019310
 8008edc:	08019334 	.word	0x08019334

08008ee0 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08c      	sub	sp, #48	@ 0x30
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	e014      	b.n	8008f1c <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008ef6:	2329      	movs	r3, #41	@ 0x29
 8008ef8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008efa:	f107 030c 	add.w	r3, r7, #12
 8008efe:	4619      	mov	r1, r3
 8008f00:	4808      	ldr	r0, [pc, #32]	@ (8008f24 <netconn_prepare_delete+0x44>)
 8008f02:	f7ff ff55 	bl	8008db0 <netconn_apimsg>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008f0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d002      	beq.n	8008f1a <netconn_prepare_delete+0x3a>
    return err;
 8008f14:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008f18:	e000      	b.n	8008f1c <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008f1a:	2300      	movs	r3, #0
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3730      	adds	r7, #48	@ 0x30
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	0800a58d 	.word	0x0800a58d

08008f28 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d101      	bne.n	8008f3a <netconn_delete+0x12>
    return ERR_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	e00d      	b.n	8008f56 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7ff ffd0 	bl	8008ee0 <netconn_prepare_delete>
 8008f40:	4603      	mov	r3, r0
 8008f42:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d102      	bne.n	8008f52 <netconn_delete+0x2a>
    netconn_free(conn);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 f8eb 	bl	800a128 <netconn_free>
  }
  return err;
 8008f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
	...

08008f60 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b08e      	sub	sp, #56	@ 0x38
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	60f8      	str	r0, [r7, #12]
 8008f68:	60b9      	str	r1, [r7, #8]
 8008f6a:	4613      	mov	r3, r2
 8008f6c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d109      	bne.n	8008f88 <netconn_bind+0x28>
 8008f74:	4b11      	ldr	r3, [pc, #68]	@ (8008fbc <netconn_bind+0x5c>)
 8008f76:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8008f7a:	4911      	ldr	r1, [pc, #68]	@ (8008fc0 <netconn_bind+0x60>)
 8008f7c:	4811      	ldr	r0, [pc, #68]	@ (8008fc4 <netconn_bind+0x64>)
 8008f7e:	f00f f9bf 	bl	8018300 <iprintf>
 8008f82:	f06f 030f 	mvn.w	r3, #15
 8008f86:	e015      	b.n	8008fb4 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc8 <netconn_bind+0x68>)
 8008f90:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f9a:	88fb      	ldrh	r3, [r7, #6]
 8008f9c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008f9e:	f107 0314 	add.w	r3, r7, #20
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	4809      	ldr	r0, [pc, #36]	@ (8008fcc <netconn_bind+0x6c>)
 8008fa6:	f7ff ff03 	bl	8008db0 <netconn_apimsg>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008fb0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3738      	adds	r7, #56	@ 0x38
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	08019278 	.word	0x08019278
 8008fc0:	080193b0 	.word	0x080193b0
 8008fc4:	080192d0 	.word	0x080192d0
 8008fc8:	0801cb98 	.word	0x0801cb98
 8008fcc:	0800a755 	.word	0x0800a755

08008fd0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08c      	sub	sp, #48	@ 0x30
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <netconn_listen_with_backlog+0x26>
 8008fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <netconn_listen_with_backlog+0x48>)
 8008fe4:	f240 12bb 	movw	r2, #443	@ 0x1bb
 8008fe8:	490c      	ldr	r1, [pc, #48]	@ (800901c <netconn_listen_with_backlog+0x4c>)
 8008fea:	480d      	ldr	r0, [pc, #52]	@ (8009020 <netconn_listen_with_backlog+0x50>)
 8008fec:	f00f f988 	bl	8018300 <iprintf>
 8008ff0:	f06f 030f 	mvn.w	r3, #15
 8008ff4:	e00c      	b.n	8009010 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008ffa:	f107 030c 	add.w	r3, r7, #12
 8008ffe:	4619      	mov	r1, r3
 8009000:	4808      	ldr	r0, [pc, #32]	@ (8009024 <netconn_listen_with_backlog+0x54>)
 8009002:	f7ff fed5 	bl	8008db0 <netconn_apimsg>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800900c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009010:	4618      	mov	r0, r3
 8009012:	3730      	adds	r7, #48	@ 0x30
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	08019278 	.word	0x08019278
 800901c:	08019430 	.word	0x08019430
 8009020:	080192d0 	.word	0x080192d0
 8009024:	0800a7c9 	.word	0x0800a7c9

08009028 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d109      	bne.n	800904c <netconn_accept+0x24>
 8009038:	4b3d      	ldr	r3, [pc, #244]	@ (8009130 <netconn_accept+0x108>)
 800903a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800903e:	493d      	ldr	r1, [pc, #244]	@ (8009134 <netconn_accept+0x10c>)
 8009040:	483d      	ldr	r0, [pc, #244]	@ (8009138 <netconn_accept+0x110>)
 8009042:	f00f f95d 	bl	8018300 <iprintf>
 8009046:	f06f 030f 	mvn.w	r3, #15
 800904a:	e06c      	b.n	8009126 <netconn_accept+0xfe>
  *new_conn = NULL;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <netconn_accept+0x44>
 8009058:	4b35      	ldr	r3, [pc, #212]	@ (8009130 <netconn_accept+0x108>)
 800905a:	f240 12e3 	movw	r2, #483	@ 0x1e3
 800905e:	4937      	ldr	r1, [pc, #220]	@ (800913c <netconn_accept+0x114>)
 8009060:	4835      	ldr	r0, [pc, #212]	@ (8009138 <netconn_accept+0x110>)
 8009062:	f00f f94d 	bl	8018300 <iprintf>
 8009066:	f06f 030f 	mvn.w	r3, #15
 800906a:	e05c      	b.n	8009126 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fb6c 	bl	800974a <netconn_err>
 8009072:	4603      	mov	r3, r0
 8009074:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009076:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800907e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009082:	e050      	b.n	8009126 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3314      	adds	r3, #20
 8009088:	4618      	mov	r0, r3
 800908a:	f00e ff00 	bl	8017e8e <sys_mbox_valid>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d005      	beq.n	80090a0 <netconn_accept+0x78>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	7e1b      	ldrb	r3, [r3, #24]
 8009098:	f003 0301 	and.w	r3, r3, #1
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80090a0:	f06f 030e 	mvn.w	r3, #14
 80090a4:	e03f      	b.n	8009126 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	7e1b      	ldrb	r3, [r3, #24]
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00e      	beq.n	80090d0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	3314      	adds	r3, #20
 80090b6:	f107 020c 	add.w	r2, r7, #12
 80090ba:	4611      	mov	r1, r2
 80090bc:	4618      	mov	r0, r3
 80090be:	f00e feca 	bl	8017e56 <sys_arch_mbox_tryfetch>
 80090c2:	4603      	mov	r3, r0
 80090c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c8:	d10a      	bne.n	80090e0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80090ca:	f06f 0306 	mvn.w	r3, #6
 80090ce:	e02a      	b.n	8009126 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	3314      	adds	r3, #20
 80090d4:	f107 010c 	add.w	r1, r7, #12
 80090d8:	2200      	movs	r2, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f00e fe7c 	bl	8017dd8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6a1b      	ldr	r3, [r3, #32]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d005      	beq.n	80090f4 <netconn_accept+0xcc>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	2200      	movs	r2, #0
 80090ee:	2101      	movs	r1, #1
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f107 0213 	add.w	r2, r7, #19
 80090fa:	4611      	mov	r1, r2
 80090fc:	4618      	mov	r0, r3
 80090fe:	f000 fb75 	bl	80097ec <lwip_netconn_is_err_msg>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d002      	beq.n	800910e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009108:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800910c:	e00b      	b.n	8009126 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d102      	bne.n	800911a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009114:	f06f 030e 	mvn.w	r3, #14
 8009118:	e005      	b.n	8009126 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009124:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	08019278 	.word	0x08019278
 8009134:	08019450 	.word	0x08019450
 8009138:	080192d0 	.word	0x080192d0
 800913c:	08019470 	.word	0x08019470

08009140 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b088      	sub	sp, #32
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800914e:	2300      	movs	r3, #0
 8009150:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d109      	bne.n	800916c <netconn_recv_data+0x2c>
 8009158:	4b58      	ldr	r3, [pc, #352]	@ (80092bc <netconn_recv_data+0x17c>)
 800915a:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800915e:	4958      	ldr	r1, [pc, #352]	@ (80092c0 <netconn_recv_data+0x180>)
 8009160:	4858      	ldr	r0, [pc, #352]	@ (80092c4 <netconn_recv_data+0x184>)
 8009162:	f00f f8cd 	bl	8018300 <iprintf>
 8009166:	f06f 030f 	mvn.w	r3, #15
 800916a:	e0a2      	b.n	80092b2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2200      	movs	r2, #0
 8009170:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <netconn_recv_data+0x4c>
 8009178:	4b50      	ldr	r3, [pc, #320]	@ (80092bc <netconn_recv_data+0x17c>)
 800917a:	f240 224a 	movw	r2, #586	@ 0x24a
 800917e:	4952      	ldr	r1, [pc, #328]	@ (80092c8 <netconn_recv_data+0x188>)
 8009180:	4850      	ldr	r0, [pc, #320]	@ (80092c4 <netconn_recv_data+0x184>)
 8009182:	f00f f8bd 	bl	8018300 <iprintf>
 8009186:	f06f 030f 	mvn.w	r3, #15
 800918a:	e092      	b.n	80092b2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3310      	adds	r3, #16
 8009190:	4618      	mov	r0, r3
 8009192:	f00e fe7c 	bl	8017e8e <sys_mbox_valid>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10e      	bne.n	80091ba <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f000 fad4 	bl	800974a <netconn_err>
 80091a2:	4603      	mov	r3, r0
 80091a4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80091a6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d002      	beq.n	80091b4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80091ae:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80091b2:	e07e      	b.n	80092b2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80091b4:	f06f 030a 	mvn.w	r3, #10
 80091b8:	e07b      	b.n	80092b2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	7e1b      	ldrb	r3, [r3, #24]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10f      	bne.n	80091e6 <netconn_recv_data+0xa6>
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d10a      	bne.n	80091e6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	7e1b      	ldrb	r3, [r3, #24]
 80091d4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d104      	bne.n	80091e6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d023      	beq.n	800922e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3310      	adds	r3, #16
 80091ea:	f107 0218 	add.w	r2, r7, #24
 80091ee:	4611      	mov	r1, r2
 80091f0:	4618      	mov	r0, r3
 80091f2:	f00e fe30 	bl	8017e56 <sys_arch_mbox_tryfetch>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091fc:	d11f      	bne.n	800923e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 faa3 	bl	800974a <netconn_err>
 8009204:	4603      	mov	r3, r0
 8009206:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009208:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800920c:	2b00      	cmp	r3, #0
 800920e:	d002      	beq.n	8009216 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009210:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009214:	e04d      	b.n	80092b2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	7e1b      	ldrb	r3, [r3, #24]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009222:	f06f 030a 	mvn.w	r3, #10
 8009226:	e044      	b.n	80092b2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009228:	f06f 0306 	mvn.w	r3, #6
 800922c:	e041      	b.n	80092b2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3310      	adds	r3, #16
 8009232:	f107 0118 	add.w	r1, r7, #24
 8009236:	2200      	movs	r2, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f00e fdcd 	bl	8017dd8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009246:	2b10      	cmp	r3, #16
 8009248:	d117      	bne.n	800927a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	f107 0217 	add.w	r2, r7, #23
 8009250:	4611      	mov	r1, r2
 8009252:	4618      	mov	r0, r3
 8009254:	f000 faca 	bl	80097ec <lwip_netconn_is_err_msg>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d009      	beq.n	8009272 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800925e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009262:	f113 0f0f 	cmn.w	r3, #15
 8009266:	d101      	bne.n	800926c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009268:	2300      	movs	r3, #0
 800926a:	e022      	b.n	80092b2 <netconn_recv_data+0x172>
      }
      return err;
 800926c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009270:	e01f      	b.n	80092b2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009272:	69bb      	ldr	r3, [r7, #24]
 8009274:	891b      	ldrh	r3, [r3, #8]
 8009276:	83fb      	strh	r3, [r7, #30]
 8009278:	e00d      	b.n	8009296 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d106      	bne.n	800928e <netconn_recv_data+0x14e>
 8009280:	4b0e      	ldr	r3, [pc, #56]	@ (80092bc <netconn_recv_data+0x17c>)
 8009282:	f240 2291 	movw	r2, #657	@ 0x291
 8009286:	4911      	ldr	r1, [pc, #68]	@ (80092cc <netconn_recv_data+0x18c>)
 8009288:	480e      	ldr	r0, [pc, #56]	@ (80092c4 <netconn_recv_data+0x184>)
 800928a:	f00f f839 	bl	8018300 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800928e:	69bb      	ldr	r3, [r7, #24]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	891b      	ldrh	r3, [r3, #8]
 8009294:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d005      	beq.n	80092aa <netconn_recv_data+0x16a>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6a1b      	ldr	r3, [r3, #32]
 80092a2:	8bfa      	ldrh	r2, [r7, #30]
 80092a4:	2101      	movs	r1, #1
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80092b0:	2300      	movs	r3, #0
}
 80092b2:	4618      	mov	r0, r3
 80092b4:	3720      	adds	r7, #32
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	bf00      	nop
 80092bc:	08019278 	.word	0x08019278
 80092c0:	08019490 	.word	0x08019490
 80092c4:	080192d0 	.word	0x080192d0
 80092c8:	080194b0 	.word	0x080194b0
 80092cc:	080194cc 	.word	0x080194cc

080092d0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d005      	beq.n	80092ee <netconn_tcp_recvd_msg+0x1e>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d009      	beq.n	8009302 <netconn_tcp_recvd_msg+0x32>
 80092ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <netconn_tcp_recvd_msg+0x50>)
 80092f0:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80092f4:	490b      	ldr	r1, [pc, #44]	@ (8009324 <netconn_tcp_recvd_msg+0x54>)
 80092f6:	480c      	ldr	r0, [pc, #48]	@ (8009328 <netconn_tcp_recvd_msg+0x58>)
 80092f8:	f00f f802 	bl	8018300 <iprintf>
 80092fc:	f06f 030f 	mvn.w	r3, #15
 8009300:	e00a      	b.n	8009318 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800930e:	6879      	ldr	r1, [r7, #4]
 8009310:	4806      	ldr	r0, [pc, #24]	@ (800932c <netconn_tcp_recvd_msg+0x5c>)
 8009312:	f7ff fd4d 	bl	8008db0 <netconn_apimsg>
 8009316:	4603      	mov	r3, r0
}
 8009318:	4618      	mov	r0, r3
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	08019278 	.word	0x08019278
 8009324:	080194d8 	.word	0x080194d8
 8009328:	080192d0 	.word	0x080192d0
 800932c:	0800a8f9 	.word	0x0800a8f9

08009330 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b090      	sub	sp, #64	@ 0x40
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	4613      	mov	r3, r2
 800933c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	3310      	adds	r3, #16
 8009342:	4618      	mov	r0, r3
 8009344:	f00e fda3 	bl	8017e8e <sys_mbox_valid>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d102      	bne.n	8009354 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800934e:	f06f 030a 	mvn.w	r3, #10
 8009352:	e06d      	b.n	8009430 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	7e1b      	ldrb	r3, [r3, #24]
 8009358:	b25b      	sxtb	r3, r3
 800935a:	2b00      	cmp	r3, #0
 800935c:	da07      	bge.n	800936e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	7e1b      	ldrb	r3, [r3, #24]
 8009362:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009366:	b2da      	uxtb	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	761a      	strb	r2, [r3, #24]
    goto handle_fin;
 800936c:	e039      	b.n	80093e2 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800936e:	79fb      	ldrb	r3, [r7, #7]
 8009370:	461a      	mov	r2, r3
 8009372:	68b9      	ldr	r1, [r7, #8]
 8009374:	68f8      	ldr	r0, [r7, #12]
 8009376:	f7ff fee3 	bl	8009140 <netconn_recv_data>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8009380:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009388:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800938c:	e050      	b.n	8009430 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10e      	bne.n	80093bc <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800939e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d002      	beq.n	80093aa <netconn_recv_data_tcp+0x7a>
 80093a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093a6:	891b      	ldrh	r3, [r3, #8]
 80093a8:	e000      	b.n	80093ac <netconn_recv_data_tcp+0x7c>
 80093aa:	2301      	movs	r3, #1
 80093ac:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80093ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80093b0:	f107 0214 	add.w	r2, r7, #20
 80093b4:	4619      	mov	r1, r3
 80093b6:	68f8      	ldr	r0, [r7, #12]
 80093b8:	f7ff ff8a 	bl	80092d0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80093bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d134      	bne.n	800942c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80093c2:	79fb      	ldrb	r3, [r7, #7]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d009      	beq.n	80093e0 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	7e1b      	ldrb	r3, [r3, #24]
 80093d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	761a      	strb	r2, [r3, #24]
      return ERR_WOULDBLOCK;
 80093da:	f06f 0306 	mvn.w	r3, #6
 80093de:	e027      	b.n	8009430 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80093e0:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a1b      	ldr	r3, [r3, #32]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d005      	beq.n	80093f6 <netconn_recv_data_tcp+0xc6>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	2200      	movs	r2, #0
 80093f0:	2101      	movs	r1, #1
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10f      	bne.n	800941e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 f9a3 	bl	800974a <netconn_err>
 8009404:	4603      	mov	r3, r0
 8009406:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800940a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800940e:	2b00      	cmp	r3, #0
 8009410:	d002      	beq.n	8009418 <netconn_recv_data_tcp+0xe8>
          return err;
 8009412:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009416:	e00b      	b.n	8009430 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009418:	f06f 030d 	mvn.w	r3, #13
 800941c:	e008      	b.n	8009430 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800941e:	2101      	movs	r1, #1
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 f955 	bl	80096d0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009426:	f06f 030e 	mvn.w	r3, #14
 800942a:	e001      	b.n	8009430 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800942c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8009430:	4618      	mov	r0, r3
 8009432:	3740      	adds	r7, #64	@ 0x40
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d109      	bne.n	8009460 <netconn_recv+0x28>
 800944c:	4b32      	ldr	r3, [pc, #200]	@ (8009518 <netconn_recv+0xe0>)
 800944e:	f240 3263 	movw	r2, #867	@ 0x363
 8009452:	4932      	ldr	r1, [pc, #200]	@ (800951c <netconn_recv+0xe4>)
 8009454:	4832      	ldr	r0, [pc, #200]	@ (8009520 <netconn_recv+0xe8>)
 8009456:	f00e ff53 	bl	8018300 <iprintf>
 800945a:	f06f 030f 	mvn.w	r3, #15
 800945e:	e056      	b.n	800950e <netconn_recv+0xd6>
  *new_buf = NULL;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	2200      	movs	r2, #0
 8009464:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d109      	bne.n	8009480 <netconn_recv+0x48>
 800946c:	4b2a      	ldr	r3, [pc, #168]	@ (8009518 <netconn_recv+0xe0>)
 800946e:	f240 3265 	movw	r2, #869	@ 0x365
 8009472:	492c      	ldr	r1, [pc, #176]	@ (8009524 <netconn_recv+0xec>)
 8009474:	482a      	ldr	r0, [pc, #168]	@ (8009520 <netconn_recv+0xe8>)
 8009476:	f00e ff43 	bl	8018300 <iprintf>
 800947a:	f06f 030f 	mvn.w	r3, #15
 800947e:	e046      	b.n	800950e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009488:	2b10      	cmp	r3, #16
 800948a:	d13a      	bne.n	8009502 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009490:	2006      	movs	r0, #6
 8009492:	f002 fdc3 	bl	800c01c <memp_malloc>
 8009496:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d102      	bne.n	80094a4 <netconn_recv+0x6c>
      return ERR_MEM;
 800949e:	f04f 33ff 	mov.w	r3, #4294967295
 80094a2:	e034      	b.n	800950e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80094a4:	f107 030c 	add.w	r3, r7, #12
 80094a8:	2200      	movs	r2, #0
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f7ff ff3f 	bl	8009330 <netconn_recv_data_tcp>
 80094b2:	4603      	mov	r3, r0
 80094b4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80094b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d006      	beq.n	80094cc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80094be:	6979      	ldr	r1, [r7, #20]
 80094c0:	2006      	movs	r0, #6
 80094c2:	f002 fdfd 	bl	800c0c0 <memp_free>
      return err;
 80094c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80094ca:	e020      	b.n	800950e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <netconn_recv+0xa8>
 80094d2:	4b11      	ldr	r3, [pc, #68]	@ (8009518 <netconn_recv+0xe0>)
 80094d4:	f240 3279 	movw	r2, #889	@ 0x379
 80094d8:	4913      	ldr	r1, [pc, #76]	@ (8009528 <netconn_recv+0xf0>)
 80094da:	4811      	ldr	r0, [pc, #68]	@ (8009520 <netconn_recv+0xe8>)
 80094dc:	f00e ff10 	bl	8018300 <iprintf>

    buf->p = p;
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2200      	movs	r2, #0
 80094f0:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2200      	movs	r2, #0
 80094f6:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	697a      	ldr	r2, [r7, #20]
 80094fc:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80094fe:	2300      	movs	r3, #0
 8009500:	e005      	b.n	800950e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009502:	2200      	movs	r2, #0
 8009504:	6839      	ldr	r1, [r7, #0]
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f7ff fe1a 	bl	8009140 <netconn_recv_data>
 800950c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	08019278 	.word	0x08019278
 800951c:	08019490 	.word	0x08019490
 8009520:	080192d0 	.word	0x080192d0
 8009524:	080194b0 	.word	0x080194b0
 8009528:	08019528 	.word	0x08019528

0800952c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af02      	add	r7, sp, #8
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	607a      	str	r2, [r7, #4]
 8009538:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	f107 0110 	add.w	r1, r7, #16
 8009548:	6a3b      	ldr	r3, [r7, #32]
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	4613      	mov	r3, r2
 800954e:	2201      	movs	r2, #1
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f805 	bl	8009560 <netconn_write_vectors_partly>
 8009556:	4603      	mov	r3, r0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3718      	adds	r7, #24
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b092      	sub	sp, #72	@ 0x48
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	4611      	mov	r1, r2
 800956c:	461a      	mov	r2, r3
 800956e:	460b      	mov	r3, r1
 8009570:	80fb      	strh	r3, [r7, #6]
 8009572:	4613      	mov	r3, r2
 8009574:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d109      	bne.n	8009590 <netconn_write_vectors_partly+0x30>
 800957c:	4b4e      	ldr	r3, [pc, #312]	@ (80096b8 <netconn_write_vectors_partly+0x158>)
 800957e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8009582:	494e      	ldr	r1, [pc, #312]	@ (80096bc <netconn_write_vectors_partly+0x15c>)
 8009584:	484e      	ldr	r0, [pc, #312]	@ (80096c0 <netconn_write_vectors_partly+0x160>)
 8009586:	f00e febb 	bl	8018300 <iprintf>
 800958a:	f06f 030f 	mvn.w	r3, #15
 800958e:	e08e      	b.n	80096ae <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009598:	2b10      	cmp	r3, #16
 800959a:	d009      	beq.n	80095b0 <netconn_write_vectors_partly+0x50>
 800959c:	4b46      	ldr	r3, [pc, #280]	@ (80096b8 <netconn_write_vectors_partly+0x158>)
 800959e:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 80095a2:	4948      	ldr	r1, [pc, #288]	@ (80096c4 <netconn_write_vectors_partly+0x164>)
 80095a4:	4846      	ldr	r0, [pc, #280]	@ (80096c0 <netconn_write_vectors_partly+0x160>)
 80095a6:	f00e feab 	bl	8018300 <iprintf>
 80095aa:	f06f 0305 	mvn.w	r3, #5
 80095ae:	e07e      	b.n	80096ae <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	7e1b      	ldrb	r3, [r3, #24]
 80095b4:	f003 0302 	and.w	r3, r3, #2
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d104      	bne.n	80095c6 <netconn_write_vectors_partly+0x66>
 80095bc:	797b      	ldrb	r3, [r7, #5]
 80095be:	f003 0304 	and.w	r3, r3, #4
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <netconn_write_vectors_partly+0x6a>
 80095c6:	2301      	movs	r3, #1
 80095c8:	e000      	b.n	80095cc <netconn_write_vectors_partly+0x6c>
 80095ca:	2300      	movs	r3, #0
 80095cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80095d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d005      	beq.n	80095e4 <netconn_write_vectors_partly+0x84>
 80095d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d102      	bne.n	80095e4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80095de:	f06f 0305 	mvn.w	r3, #5
 80095e2:	e064      	b.n	80096ae <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 80095e8:	2300      	movs	r3, #0
 80095ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80095ec:	e015      	b.n	800961a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80095ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095f0:	00db      	lsls	r3, r3, #3
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	4413      	add	r3, r2
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095fa:	4413      	add	r3, r2
 80095fc:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 80095fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009600:	00db      	lsls	r3, r3, #3
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	4413      	add	r3, r2
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800960a:	429a      	cmp	r2, r3
 800960c:	d202      	bcs.n	8009614 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800960e:	f06f 0305 	mvn.w	r3, #5
 8009612:	e04c      	b.n	80096ae <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009616:	3301      	adds	r3, #1
 8009618:	643b      	str	r3, [r7, #64]	@ 0x40
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800961e:	429a      	cmp	r2, r3
 8009620:	dbe5      	blt.n	80095ee <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009622:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	e040      	b.n	80096ae <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800962c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800962e:	2b00      	cmp	r3, #0
 8009630:	da0a      	bge.n	8009648 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009638:	f06f 0305 	mvn.w	r3, #5
 800963c:	e037      	b.n	80096ae <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800963e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009642:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8009644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009646:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009650:	88fb      	ldrh	r3, [r7, #6]
 8009652:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009658:	797b      	ldrb	r3, [r7, #5]
 800965a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800965e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009660:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009666:	f107 0314 	add.w	r3, r7, #20
 800966a:	4619      	mov	r1, r3
 800966c:	4816      	ldr	r0, [pc, #88]	@ (80096c8 <netconn_write_vectors_partly+0x168>)
 800966e:	f7ff fb9f 	bl	8008db0 <netconn_apimsg>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8009678:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800967c:	2b00      	cmp	r3, #0
 800967e:	d114      	bne.n	80096aa <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009688:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800968a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800968c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009698:	429a      	cmp	r2, r3
 800969a:	d006      	beq.n	80096aa <netconn_write_vectors_partly+0x14a>
 800969c:	4b06      	ldr	r3, [pc, #24]	@ (80096b8 <netconn_write_vectors_partly+0x158>)
 800969e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80096a2:	490a      	ldr	r1, [pc, #40]	@ (80096cc <netconn_write_vectors_partly+0x16c>)
 80096a4:	4806      	ldr	r0, [pc, #24]	@ (80096c0 <netconn_write_vectors_partly+0x160>)
 80096a6:	f00e fe2b 	bl	8018300 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80096aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3748      	adds	r7, #72	@ 0x48
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	08019278 	.word	0x08019278
 80096bc:	08019550 	.word	0x08019550
 80096c0:	080192d0 	.word	0x080192d0
 80096c4:	0801956c 	.word	0x0801956c
 80096c8:	0800ad01 	.word	0x0800ad01
 80096cc:	08019590 	.word	0x08019590

080096d0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08c      	sub	sp, #48	@ 0x30
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	460b      	mov	r3, r1
 80096da:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <netconn_close_shutdown+0x26>
 80096e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009720 <netconn_close_shutdown+0x50>)
 80096e4:	f240 4247 	movw	r2, #1095	@ 0x447
 80096e8:	490e      	ldr	r1, [pc, #56]	@ (8009724 <netconn_close_shutdown+0x54>)
 80096ea:	480f      	ldr	r0, [pc, #60]	@ (8009728 <netconn_close_shutdown+0x58>)
 80096ec:	f00e fe08 	bl	8018300 <iprintf>
 80096f0:	f06f 030f 	mvn.w	r3, #15
 80096f4:	e010      	b.n	8009718 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80096fa:	78fb      	ldrb	r3, [r7, #3]
 80096fc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80096fe:	2329      	movs	r3, #41	@ 0x29
 8009700:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009702:	f107 030c 	add.w	r3, r7, #12
 8009706:	4619      	mov	r1, r3
 8009708:	4808      	ldr	r0, [pc, #32]	@ (800972c <netconn_close_shutdown+0x5c>)
 800970a:	f7ff fb51 	bl	8008db0 <netconn_apimsg>
 800970e:	4603      	mov	r3, r0
 8009710:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009714:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8009718:	4618      	mov	r0, r3
 800971a:	3730      	adds	r7, #48	@ 0x30
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}
 8009720:	08019278 	.word	0x08019278
 8009724:	080195b4 	.word	0x080195b4
 8009728:	080192d0 	.word	0x080192d0
 800972c:	0800ae19 	.word	0x0800ae19

08009730 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009738:	2103      	movs	r1, #3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff ffc8 	bl	80096d0 <netconn_close_shutdown>
 8009740:	4603      	mov	r3, r0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b084      	sub	sp, #16
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <netconn_err+0x12>
    return ERR_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	e00d      	b.n	8009778 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800975c:	f00e fcb2 	bl	80180c4 <sys_arch_protect>
 8009760:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	7a1b      	ldrb	r3, [r3, #8]
 8009766:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f00e fcb6 	bl	80180e0 <sys_arch_unprotect>
  return err;
 8009774:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800978a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800978e:	f113 0f0d 	cmn.w	r3, #13
 8009792:	d009      	beq.n	80097a8 <lwip_netconn_err_to_msg+0x28>
 8009794:	f113 0f0d 	cmn.w	r3, #13
 8009798:	dc0c      	bgt.n	80097b4 <lwip_netconn_err_to_msg+0x34>
 800979a:	f113 0f0f 	cmn.w	r3, #15
 800979e:	d007      	beq.n	80097b0 <lwip_netconn_err_to_msg+0x30>
 80097a0:	f113 0f0e 	cmn.w	r3, #14
 80097a4:	d002      	beq.n	80097ac <lwip_netconn_err_to_msg+0x2c>
 80097a6:	e005      	b.n	80097b4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80097a8:	4b0a      	ldr	r3, [pc, #40]	@ (80097d4 <lwip_netconn_err_to_msg+0x54>)
 80097aa:	e00e      	b.n	80097ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80097ac:	4b0a      	ldr	r3, [pc, #40]	@ (80097d8 <lwip_netconn_err_to_msg+0x58>)
 80097ae:	e00c      	b.n	80097ca <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80097b0:	4b0a      	ldr	r3, [pc, #40]	@ (80097dc <lwip_netconn_err_to_msg+0x5c>)
 80097b2:	e00a      	b.n	80097ca <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80097b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d005      	beq.n	80097c8 <lwip_netconn_err_to_msg+0x48>
 80097bc:	4b08      	ldr	r3, [pc, #32]	@ (80097e0 <lwip_netconn_err_to_msg+0x60>)
 80097be:	227d      	movs	r2, #125	@ 0x7d
 80097c0:	4908      	ldr	r1, [pc, #32]	@ (80097e4 <lwip_netconn_err_to_msg+0x64>)
 80097c2:	4809      	ldr	r0, [pc, #36]	@ (80097e8 <lwip_netconn_err_to_msg+0x68>)
 80097c4:	f00e fd9c 	bl	8018300 <iprintf>
      return NULL;
 80097c8:	2300      	movs	r3, #0
  }
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	0801ca74 	.word	0x0801ca74
 80097d8:	0801ca75 	.word	0x0801ca75
 80097dc:	0801ca76 	.word	0x0801ca76
 80097e0:	080195d0 	.word	0x080195d0
 80097e4:	08019604 	.word	0x08019604
 80097e8:	08019614 	.word	0x08019614

080097ec <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d105      	bne.n	8009808 <lwip_netconn_is_err_msg+0x1c>
 80097fc:	4b12      	ldr	r3, [pc, #72]	@ (8009848 <lwip_netconn_is_err_msg+0x5c>)
 80097fe:	2285      	movs	r2, #133	@ 0x85
 8009800:	4912      	ldr	r1, [pc, #72]	@ (800984c <lwip_netconn_is_err_msg+0x60>)
 8009802:	4813      	ldr	r0, [pc, #76]	@ (8009850 <lwip_netconn_is_err_msg+0x64>)
 8009804:	f00e fd7c 	bl	8018300 <iprintf>

  if (msg == &netconn_aborted) {
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a12      	ldr	r2, [pc, #72]	@ (8009854 <lwip_netconn_is_err_msg+0x68>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d104      	bne.n	800981a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	22f3      	movs	r2, #243	@ 0xf3
 8009814:	701a      	strb	r2, [r3, #0]
    return 1;
 8009816:	2301      	movs	r3, #1
 8009818:	e012      	b.n	8009840 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a0e      	ldr	r2, [pc, #56]	@ (8009858 <lwip_netconn_is_err_msg+0x6c>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d104      	bne.n	800982c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	22f2      	movs	r2, #242	@ 0xf2
 8009826:	701a      	strb	r2, [r3, #0]
    return 1;
 8009828:	2301      	movs	r3, #1
 800982a:	e009      	b.n	8009840 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	4a0b      	ldr	r2, [pc, #44]	@ (800985c <lwip_netconn_is_err_msg+0x70>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d104      	bne.n	800983e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	22f1      	movs	r2, #241	@ 0xf1
 8009838:	701a      	strb	r2, [r3, #0]
    return 1;
 800983a:	2301      	movs	r3, #1
 800983c:	e000      	b.n	8009840 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800983e:	2300      	movs	r3, #0
}
 8009840:	4618      	mov	r0, r3
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	080195d0 	.word	0x080195d0
 800984c:	0801963c 	.word	0x0801963c
 8009850:	08019614 	.word	0x08019614
 8009854:	0801ca74 	.word	0x0801ca74
 8009858:	0801ca75 	.word	0x0801ca75
 800985c:	0801ca76 	.word	0x0801ca76

08009860 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b088      	sub	sp, #32
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	607a      	str	r2, [r7, #4]
 800986c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800986e:	68bb      	ldr	r3, [r7, #8]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d105      	bne.n	8009880 <recv_udp+0x20>
 8009874:	4b34      	ldr	r3, [pc, #208]	@ (8009948 <recv_udp+0xe8>)
 8009876:	22e5      	movs	r2, #229	@ 0xe5
 8009878:	4934      	ldr	r1, [pc, #208]	@ (800994c <recv_udp+0xec>)
 800987a:	4835      	ldr	r0, [pc, #212]	@ (8009950 <recv_udp+0xf0>)
 800987c:	f00e fd40 	bl	8018300 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d105      	bne.n	8009892 <recv_udp+0x32>
 8009886:	4b30      	ldr	r3, [pc, #192]	@ (8009948 <recv_udp+0xe8>)
 8009888:	22e6      	movs	r2, #230	@ 0xe6
 800988a:	4932      	ldr	r1, [pc, #200]	@ (8009954 <recv_udp+0xf4>)
 800988c:	4830      	ldr	r0, [pc, #192]	@ (8009950 <recv_udp+0xf0>)
 800988e:	f00e fd37 	bl	8018300 <iprintf>
  conn = (struct netconn *)arg;
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <recv_udp+0x44>
    pbuf_free(p);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f003 fa65 	bl	800cd6c <pbuf_free>
    return;
 80098a2:	e04d      	b.n	8009940 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80098a4:	69fb      	ldr	r3, [r7, #28]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	68ba      	ldr	r2, [r7, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d005      	beq.n	80098ba <recv_udp+0x5a>
 80098ae:	4b26      	ldr	r3, [pc, #152]	@ (8009948 <recv_udp+0xe8>)
 80098b0:	22ee      	movs	r2, #238	@ 0xee
 80098b2:	4929      	ldr	r1, [pc, #164]	@ (8009958 <recv_udp+0xf8>)
 80098b4:	4826      	ldr	r0, [pc, #152]	@ (8009950 <recv_udp+0xf0>)
 80098b6:	f00e fd23 	bl	8018300 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	3310      	adds	r3, #16
 80098be:	4618      	mov	r0, r3
 80098c0:	f00e fae5 	bl	8017e8e <sys_mbox_valid>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d103      	bne.n	80098d2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f003 fa4e 	bl	800cd6c <pbuf_free>
    return;
 80098d0:	e036      	b.n	8009940 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80098d2:	2006      	movs	r0, #6
 80098d4:	f002 fba2 	bl	800c01c <memp_malloc>
 80098d8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d103      	bne.n	80098e8 <recv_udp+0x88>
    pbuf_free(p);
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f003 fa43 	bl	800cd6c <pbuf_free>
    return;
 80098e6:	e02b      	b.n	8009940 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <recv_udp+0xa0>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	e000      	b.n	8009902 <recv_udp+0xa2>
 8009900:	2300      	movs	r3, #0
 8009902:	69ba      	ldr	r2, [r7, #24]
 8009904:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800990a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	891b      	ldrh	r3, [r3, #8]
 8009910:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	3310      	adds	r3, #16
 8009916:	69b9      	ldr	r1, [r7, #24]
 8009918:	4618      	mov	r0, r3
 800991a:	f00e fa43 	bl	8017da4 <sys_mbox_trypost>
 800991e:	4603      	mov	r3, r0
 8009920:	2b00      	cmp	r3, #0
 8009922:	d003      	beq.n	800992c <recv_udp+0xcc>
    netbuf_delete(buf);
 8009924:	69b8      	ldr	r0, [r7, #24]
 8009926:	f001 fb03 	bl	800af30 <netbuf_delete>
    return;
 800992a:	e009      	b.n	8009940 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	6a1b      	ldr	r3, [r3, #32]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d005      	beq.n	8009940 <recv_udp+0xe0>
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	6a1b      	ldr	r3, [r3, #32]
 8009938:	8afa      	ldrh	r2, [r7, #22]
 800993a:	2100      	movs	r1, #0
 800993c:	69f8      	ldr	r0, [r7, #28]
 800993e:	4798      	blx	r3
  }
}
 8009940:	3720      	adds	r7, #32
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	bf00      	nop
 8009948:	080195d0 	.word	0x080195d0
 800994c:	08019648 	.word	0x08019648
 8009950:	08019614 	.word	0x08019614
 8009954:	0801966c 	.word	0x0801966c
 8009958:	0801968c 	.word	0x0801968c

0800995c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b088      	sub	sp, #32
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d106      	bne.n	800997e <recv_tcp+0x22>
 8009970:	4b36      	ldr	r3, [pc, #216]	@ (8009a4c <recv_tcp+0xf0>)
 8009972:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009976:	4936      	ldr	r1, [pc, #216]	@ (8009a50 <recv_tcp+0xf4>)
 8009978:	4836      	ldr	r0, [pc, #216]	@ (8009a54 <recv_tcp+0xf8>)
 800997a:	f00e fcc1 	bl	8018300 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d106      	bne.n	8009992 <recv_tcp+0x36>
 8009984:	4b31      	ldr	r3, [pc, #196]	@ (8009a4c <recv_tcp+0xf0>)
 8009986:	f240 122d 	movw	r2, #301	@ 0x12d
 800998a:	4933      	ldr	r1, [pc, #204]	@ (8009a58 <recv_tcp+0xfc>)
 800998c:	4831      	ldr	r0, [pc, #196]	@ (8009a54 <recv_tcp+0xf8>)
 800998e:	f00e fcb7 	bl	8018300 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009992:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d006      	beq.n	80099a8 <recv_tcp+0x4c>
 800999a:	4b2c      	ldr	r3, [pc, #176]	@ (8009a4c <recv_tcp+0xf0>)
 800999c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 80099a0:	492e      	ldr	r1, [pc, #184]	@ (8009a5c <recv_tcp+0x100>)
 80099a2:	482c      	ldr	r0, [pc, #176]	@ (8009a54 <recv_tcp+0xf8>)
 80099a4:	f00e fcac 	bl	8018300 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d102      	bne.n	80099b8 <recv_tcp+0x5c>
    return ERR_VAL;
 80099b2:	f06f 0305 	mvn.w	r3, #5
 80099b6:	e045      	b.n	8009a44 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d006      	beq.n	80099d0 <recv_tcp+0x74>
 80099c2:	4b22      	ldr	r3, [pc, #136]	@ (8009a4c <recv_tcp+0xf0>)
 80099c4:	f240 1235 	movw	r2, #309	@ 0x135
 80099c8:	4925      	ldr	r1, [pc, #148]	@ (8009a60 <recv_tcp+0x104>)
 80099ca:	4822      	ldr	r0, [pc, #136]	@ (8009a54 <recv_tcp+0xf8>)
 80099cc:	f00e fc98 	bl	8018300 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	3310      	adds	r3, #16
 80099d4:	4618      	mov	r0, r3
 80099d6:	f00e fa5a 	bl	8017e8e <sys_mbox_valid>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d10d      	bne.n	80099fc <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d008      	beq.n	80099f8 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	891b      	ldrh	r3, [r3, #8]
 80099ea:	4619      	mov	r1, r3
 80099ec:	68b8      	ldr	r0, [r7, #8]
 80099ee:	f004 f97b 	bl	800dce8 <tcp_recved>
      pbuf_free(p);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f003 f9ba 	bl	800cd6c <pbuf_free>
    }
    return ERR_OK;
 80099f8:	2300      	movs	r3, #0
 80099fa:	e023      	b.n	8009a44 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d005      	beq.n	8009a0e <recv_tcp+0xb2>
    msg = p;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	891b      	ldrh	r3, [r3, #8]
 8009a0a:	83fb      	strh	r3, [r7, #30]
 8009a0c:	e003      	b.n	8009a16 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009a0e:	4b15      	ldr	r3, [pc, #84]	@ (8009a64 <recv_tcp+0x108>)
 8009a10:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	3310      	adds	r3, #16
 8009a1a:	69b9      	ldr	r1, [r7, #24]
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f00e f9c1 	bl	8017da4 <sys_mbox_trypost>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d002      	beq.n	8009a2e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009a28:	f04f 33ff 	mov.w	r3, #4294967295
 8009a2c:	e00a      	b.n	8009a44 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d005      	beq.n	8009a42 <recv_tcp+0xe6>
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	6a1b      	ldr	r3, [r3, #32]
 8009a3a:	8bfa      	ldrh	r2, [r7, #30]
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	6978      	ldr	r0, [r7, #20]
 8009a40:	4798      	blx	r3
  }

  return ERR_OK;
 8009a42:	2300      	movs	r3, #0
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3720      	adds	r7, #32
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	080195d0 	.word	0x080195d0
 8009a50:	080196ac 	.word	0x080196ac
 8009a54:	08019614 	.word	0x08019614
 8009a58:	080196d0 	.word	0x080196d0
 8009a5c:	080196f0 	.word	0x080196f0
 8009a60:	08019708 	.word	0x08019708
 8009a64:	0801ca76 	.word	0x0801ca76

08009a68 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d106      	bne.n	8009a8a <poll_tcp+0x22>
 8009a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8009b28 <poll_tcp+0xc0>)
 8009a7e:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8009a82:	492a      	ldr	r1, [pc, #168]	@ (8009b2c <poll_tcp+0xc4>)
 8009a84:	482a      	ldr	r0, [pc, #168]	@ (8009b30 <poll_tcp+0xc8>)
 8009a86:	f00e fc3b 	bl	8018300 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	785b      	ldrb	r3, [r3, #1]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d104      	bne.n	8009a9c <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a92:	2101      	movs	r1, #1
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 ff65 	bl	800a964 <lwip_netconn_do_writemore>
 8009a9a:	e016      	b.n	8009aca <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	785b      	ldrb	r3, [r3, #1]
 8009aa0:	2b04      	cmp	r3, #4
 8009aa2:	d112      	bne.n	8009aca <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00a      	beq.n	8009ac2 <poll_tcp+0x5a>
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	69db      	ldr	r3, [r3, #28]
 8009ab0:	7a5b      	ldrb	r3, [r3, #9]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d005      	beq.n	8009ac2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	69db      	ldr	r3, [r3, #28]
 8009aba:	7a5a      	ldrb	r2, [r3, #9]
 8009abc:	3a01      	subs	r2, #1
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 fbf7 	bl	800a2b8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	7e1b      	ldrb	r3, [r3, #24]
 8009ace:	f003 0310 	and.w	r3, r3, #16
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d022      	beq.n	8009b1c <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d01e      	beq.n	8009b1c <poll_tcp+0xb4>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009ae6:	f640 3269 	movw	r2, #2921	@ 0xb69
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d916      	bls.n	8009b1c <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009af6:	2b04      	cmp	r3, #4
 8009af8:	d810      	bhi.n	8009b1c <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	7e1b      	ldrb	r3, [r3, #24]
 8009afe:	f023 0310 	bic.w	r3, r3, #16
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	6a1b      	ldr	r3, [r3, #32]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <poll_tcp+0xb4>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	2200      	movs	r2, #0
 8009b16:	2102      	movs	r1, #2
 8009b18:	68f8      	ldr	r0, [r7, #12]
 8009b1a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	080195d0 	.word	0x080195d0
 8009b2c:	08019728 	.word	0x08019728
 8009b30:	08019614 	.word	0x08019614

08009b34 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	4613      	mov	r3, r2
 8009b40:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <sent_tcp+0x26>
 8009b4c:	4b21      	ldr	r3, [pc, #132]	@ (8009bd4 <sent_tcp+0xa0>)
 8009b4e:	f240 1293 	movw	r2, #403	@ 0x193
 8009b52:	4921      	ldr	r1, [pc, #132]	@ (8009bd8 <sent_tcp+0xa4>)
 8009b54:	4821      	ldr	r0, [pc, #132]	@ (8009bdc <sent_tcp+0xa8>)
 8009b56:	f00e fbd3 	bl	8018300 <iprintf>

  if (conn) {
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d033      	beq.n	8009bc8 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	785b      	ldrb	r3, [r3, #1]
 8009b64:	2b01      	cmp	r3, #1
 8009b66:	d104      	bne.n	8009b72 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009b68:	2101      	movs	r1, #1
 8009b6a:	6978      	ldr	r0, [r7, #20]
 8009b6c:	f000 fefa 	bl	800a964 <lwip_netconn_do_writemore>
 8009b70:	e007      	b.n	8009b82 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	785b      	ldrb	r3, [r3, #1]
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d103      	bne.n	8009b82 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	6978      	ldr	r0, [r7, #20]
 8009b7e:	f000 fb9b 	bl	800a2b8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01e      	beq.n	8009bc8 <sent_tcp+0x94>
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009b92:	f640 3269 	movw	r2, #2921	@ 0xb69
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d916      	bls.n	8009bc8 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ba2:	2b04      	cmp	r3, #4
 8009ba4:	d810      	bhi.n	8009bc8 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	7e1b      	ldrb	r3, [r3, #24]
 8009baa:	f023 0310 	bic.w	r3, r3, #16
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	761a      	strb	r2, [r3, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	6a1b      	ldr	r3, [r3, #32]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d005      	beq.n	8009bc8 <sent_tcp+0x94>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	6a1b      	ldr	r3, [r3, #32]
 8009bc0:	88fa      	ldrh	r2, [r7, #6]
 8009bc2:	2102      	movs	r1, #2
 8009bc4:	6978      	ldr	r0, [r7, #20]
 8009bc6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009bc8:	2300      	movs	r3, #0
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3718      	adds	r7, #24
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	080195d0 	.word	0x080195d0
 8009bd8:	08019728 	.word	0x08019728
 8009bdc:	08019614 	.word	0x08019614

08009be0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <err_tcp+0x24>
 8009bf6:	4b5f      	ldr	r3, [pc, #380]	@ (8009d74 <err_tcp+0x194>)
 8009bf8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009bfc:	495e      	ldr	r1, [pc, #376]	@ (8009d78 <err_tcp+0x198>)
 8009bfe:	485f      	ldr	r0, [pc, #380]	@ (8009d7c <err_tcp+0x19c>)
 8009c00:	f00e fb7e 	bl	8018300 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009c04:	f00e fa5e 	bl	80180c4 <sys_arch_protect>
 8009c08:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009c10:	69fb      	ldr	r3, [r7, #28]
 8009c12:	78fa      	ldrb	r2, [r7, #3]
 8009c14:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	7e1b      	ldrb	r3, [r3, #24]
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	b2da      	uxtb	r2, r3
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	761a      	strb	r2, [r3, #24]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009c24:	69fb      	ldr	r3, [r7, #28]
 8009c26:	785b      	ldrb	r3, [r3, #1]
 8009c28:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009c2a:	69fb      	ldr	r3, [r7, #28]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009c30:	69b8      	ldr	r0, [r7, #24]
 8009c32:	f00e fa55 	bl	80180e0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	6a1b      	ldr	r3, [r3, #32]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d005      	beq.n	8009c4a <err_tcp+0x6a>
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	2200      	movs	r2, #0
 8009c44:	2104      	movs	r1, #4
 8009c46:	69f8      	ldr	r0, [r7, #28]
 8009c48:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d005      	beq.n	8009c5e <err_tcp+0x7e>
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	2200      	movs	r2, #0
 8009c58:	2100      	movs	r1, #0
 8009c5a:	69f8      	ldr	r0, [r7, #28]
 8009c5c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d005      	beq.n	8009c72 <err_tcp+0x92>
 8009c66:	69fb      	ldr	r3, [r7, #28]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	2102      	movs	r1, #2
 8009c6e:	69f8      	ldr	r0, [r7, #28]
 8009c70:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f7ff fd82 	bl	8009780 <lwip_netconn_err_to_msg>
 8009c7c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	3310      	adds	r3, #16
 8009c82:	4618      	mov	r0, r3
 8009c84:	f00e f903 	bl	8017e8e <sys_mbox_valid>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d005      	beq.n	8009c9a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	3310      	adds	r3, #16
 8009c92:	6939      	ldr	r1, [r7, #16]
 8009c94:	4618      	mov	r0, r3
 8009c96:	f00e f885 	bl	8017da4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	3314      	adds	r3, #20
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f00e f8f5 	bl	8017e8e <sys_mbox_valid>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009caa:	69fb      	ldr	r3, [r7, #28]
 8009cac:	3314      	adds	r3, #20
 8009cae:	6939      	ldr	r1, [r7, #16]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f00e f877 	bl	8017da4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d005      	beq.n	8009cc8 <err_tcp+0xe8>
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d002      	beq.n	8009cc8 <err_tcp+0xe8>
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
 8009cc4:	2b03      	cmp	r3, #3
 8009cc6:	d143      	bne.n	8009d50 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	7e1b      	ldrb	r3, [r3, #24]
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf14      	ite	ne
 8009cd4:	2301      	movne	r3, #1
 8009cd6:	2300      	moveq	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009cdc:	69fb      	ldr	r3, [r7, #28]
 8009cde:	7e1b      	ldrb	r3, [r3, #24]
 8009ce0:	f023 0304 	bic.w	r3, r3, #4
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	69fb      	ldr	r3, [r7, #28]
 8009ce8:	761a      	strb	r2, [r3, #24]

    if (!was_nonblocking_connect) {
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d13b      	bne.n	8009d68 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	69db      	ldr	r3, [r3, #28]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d106      	bne.n	8009d06 <err_tcp+0x126>
 8009cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d74 <err_tcp+0x194>)
 8009cfa:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009cfe:	4920      	ldr	r1, [pc, #128]	@ (8009d80 <err_tcp+0x1a0>)
 8009d00:	481e      	ldr	r0, [pc, #120]	@ (8009d7c <err_tcp+0x19c>)
 8009d02:	f00e fafd 	bl	8018300 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009d06:	7dfb      	ldrb	r3, [r7, #23]
 8009d08:	2b04      	cmp	r3, #4
 8009d0a:	d104      	bne.n	8009d16 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	69db      	ldr	r3, [r3, #28]
 8009d10:	2200      	movs	r2, #0
 8009d12:	711a      	strb	r2, [r3, #4]
 8009d14:	e003      	b.n	8009d1e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009d16:	69fb      	ldr	r3, [r7, #28]
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	78fa      	ldrb	r2, [r7, #3]
 8009d1c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	330c      	adds	r3, #12
 8009d26:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009d28:	68b8      	ldr	r0, [r7, #8]
 8009d2a:	f00e f941 	bl	8017fb0 <sys_sem_valid>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d106      	bne.n	8009d42 <err_tcp+0x162>
 8009d34:	4b0f      	ldr	r3, [pc, #60]	@ (8009d74 <err_tcp+0x194>)
 8009d36:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8009d3a:	4912      	ldr	r1, [pc, #72]	@ (8009d84 <err_tcp+0x1a4>)
 8009d3c:	480f      	ldr	r0, [pc, #60]	@ (8009d7c <err_tcp+0x19c>)
 8009d3e:	f00e fadf 	bl	8018300 <iprintf>
      conn->current_msg = NULL;
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	2200      	movs	r2, #0
 8009d46:	61da      	str	r2, [r3, #28]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009d48:	68b8      	ldr	r0, [r7, #8]
 8009d4a:	f00e f917 	bl	8017f7c <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009d4e:	e00b      	b.n	8009d68 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	69db      	ldr	r3, [r3, #28]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d008      	beq.n	8009d6a <err_tcp+0x18a>
 8009d58:	4b06      	ldr	r3, [pc, #24]	@ (8009d74 <err_tcp+0x194>)
 8009d5a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009d5e:	490a      	ldr	r1, [pc, #40]	@ (8009d88 <err_tcp+0x1a8>)
 8009d60:	4806      	ldr	r0, [pc, #24]	@ (8009d7c <err_tcp+0x19c>)
 8009d62:	f00e facd 	bl	8018300 <iprintf>
  }
}
 8009d66:	e000      	b.n	8009d6a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009d68:	bf00      	nop
}
 8009d6a:	bf00      	nop
 8009d6c:	3720      	adds	r7, #32
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}
 8009d72:	bf00      	nop
 8009d74:	080195d0 	.word	0x080195d0
 8009d78:	08019728 	.word	0x08019728
 8009d7c:	08019614 	.word	0x08019614
 8009d80:	08019738 	.word	0x08019738
 8009d84:	08019754 	.word	0x08019754
 8009d88:	08019770 	.word	0x08019770

08009d8c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f004 fe2d 	bl	800e9fc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009da2:	490a      	ldr	r1, [pc, #40]	@ (8009dcc <setup_tcp+0x40>)
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f004 fe3b 	bl	800ea20 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009daa:	4909      	ldr	r1, [pc, #36]	@ (8009dd0 <setup_tcp+0x44>)
 8009dac:	68f8      	ldr	r0, [r7, #12]
 8009dae:	f004 fe59 	bl	800ea64 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009db2:	2202      	movs	r2, #2
 8009db4:	4907      	ldr	r1, [pc, #28]	@ (8009dd4 <setup_tcp+0x48>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f004 feae 	bl	800eb18 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009dbc:	4906      	ldr	r1, [pc, #24]	@ (8009dd8 <setup_tcp+0x4c>)
 8009dbe:	68f8      	ldr	r0, [r7, #12]
 8009dc0:	f004 fe70 	bl	800eaa4 <tcp_err>
}
 8009dc4:	bf00      	nop
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	0800995d 	.word	0x0800995d
 8009dd0:	08009b35 	.word	0x08009b35
 8009dd4:	08009a69 	.word	0x08009a69
 8009dd8:	08009be1 	.word	0x08009be1

08009ddc <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009ddc:	b590      	push	{r4, r7, lr}
 8009dde:	b089      	sub	sp, #36	@ 0x24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	4613      	mov	r3, r2
 8009de8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009dee:	69fb      	ldr	r3, [r7, #28]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d102      	bne.n	8009dfa <accept_function+0x1e>
    return ERR_VAL;
 8009df4:	f06f 0305 	mvn.w	r3, #5
 8009df8:	e0a1      	b.n	8009f3e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	3314      	adds	r3, #20
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f00e f845 	bl	8017e8e <sys_mbox_valid>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d102      	bne.n	8009e10 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009e0a:	f06f 0305 	mvn.w	r3, #5
 8009e0e:	e096      	b.n	8009f3e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d11b      	bne.n	8009e4e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	f103 0414 	add.w	r4, r3, #20
 8009e1c:	f06f 000c 	mvn.w	r0, #12
 8009e20:	f7ff fcae 	bl	8009780 <lwip_netconn_err_to_msg>
 8009e24:	4603      	mov	r3, r0
 8009e26:	4619      	mov	r1, r3
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f00d ffbb 	bl	8017da4 <sys_mbox_trypost>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d109      	bne.n	8009e48 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <accept_function+0x6c>
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	6a1b      	ldr	r3, [r3, #32]
 8009e40:	2200      	movs	r2, #0
 8009e42:	2100      	movs	r1, #0
 8009e44:	69f8      	ldr	r0, [r7, #28]
 8009e46:	4798      	blx	r3
    }
    return ERR_VAL;
 8009e48:	f06f 0305 	mvn.w	r3, #5
 8009e4c:	e077      	b.n	8009f3e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d006      	beq.n	8009e64 <accept_function+0x88>
 8009e56:	4b3c      	ldr	r3, [pc, #240]	@ (8009f48 <accept_function+0x16c>)
 8009e58:	f240 222a 	movw	r2, #554	@ 0x22a
 8009e5c:	493b      	ldr	r1, [pc, #236]	@ (8009f4c <accept_function+0x170>)
 8009e5e:	483c      	ldr	r0, [pc, #240]	@ (8009f50 <accept_function+0x174>)
 8009e60:	f00e fa4e 	bl	8018300 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	781a      	ldrb	r2, [r3, #0]
 8009e68:	69fb      	ldr	r3, [r7, #28]
 8009e6a:	6a1b      	ldr	r3, [r3, #32]
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	4610      	mov	r0, r2
 8009e70:	f000 f8f0 	bl	800a054 <netconn_alloc>
 8009e74:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d11b      	bne.n	8009eb4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	f103 0414 	add.w	r4, r3, #20
 8009e82:	f06f 000c 	mvn.w	r0, #12
 8009e86:	f7ff fc7b 	bl	8009780 <lwip_netconn_err_to_msg>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4620      	mov	r0, r4
 8009e90:	f00d ff88 	bl	8017da4 <sys_mbox_trypost>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d109      	bne.n	8009eae <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <accept_function+0xd2>
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	69f8      	ldr	r0, [r7, #28]
 8009eac:	4798      	blx	r3
    }
    return ERR_MEM;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb2:	e044      	b.n	8009f3e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009eba:	69b8      	ldr	r0, [r7, #24]
 8009ebc:	f7ff ff66 	bl	8009d8c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	3314      	adds	r3, #20
 8009ec4:	69b9      	ldr	r1, [r7, #24]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f00d ff6c 	bl	8017da4 <sys_mbox_trypost>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d02a      	beq.n	8009f28 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	685b      	ldr	r3, [r3, #4]
 8009ed6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6978      	ldr	r0, [r7, #20]
 8009edc:	f004 fd8e 	bl	800e9fc <tcp_arg>
    tcp_recv(pcb, NULL);
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	6978      	ldr	r0, [r7, #20]
 8009ee4:	f004 fd9c 	bl	800ea20 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009ee8:	2100      	movs	r1, #0
 8009eea:	6978      	ldr	r0, [r7, #20]
 8009eec:	f004 fdba 	bl	800ea64 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	2100      	movs	r1, #0
 8009ef4:	6978      	ldr	r0, [r7, #20]
 8009ef6:	f004 fe0f 	bl	800eb18 <tcp_poll>
    tcp_err(pcb, NULL);
 8009efa:	2100      	movs	r1, #0
 8009efc:	6978      	ldr	r0, [r7, #20]
 8009efe:	f004 fdd1 	bl	800eaa4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	2200      	movs	r2, #0
 8009f06:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	3310      	adds	r3, #16
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f00d ff21 	bl	8017d54 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	3310      	adds	r3, #16
 8009f16:	4618      	mov	r0, r3
 8009f18:	f00d ffca 	bl	8017eb0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009f1c:	69b8      	ldr	r0, [r7, #24]
 8009f1e:	f000 f903 	bl	800a128 <netconn_free>
    return ERR_MEM;
 8009f22:	f04f 33ff 	mov.w	r3, #4294967295
 8009f26:	e00a      	b.n	8009f3e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	6a1b      	ldr	r3, [r3, #32]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d005      	beq.n	8009f3c <accept_function+0x160>
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	6a1b      	ldr	r3, [r3, #32]
 8009f34:	2200      	movs	r2, #0
 8009f36:	2100      	movs	r1, #0
 8009f38:	69f8      	ldr	r0, [r7, #28]
 8009f3a:	4798      	blx	r3
  }

  return ERR_OK;
 8009f3c:	2300      	movs	r3, #0
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3724      	adds	r7, #36	@ 0x24
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd90      	pop	{r4, r7, pc}
 8009f46:	bf00      	nop
 8009f48:	080195d0 	.word	0x080195d0
 8009f4c:	0801978c 	.word	0x0801978c
 8009f50:	08019614 	.word	0x08019614

08009f54 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009f54:	b590      	push	{r4, r7, lr}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d006      	beq.n	8009f78 <pcb_new+0x24>
 8009f6a:	4b2b      	ldr	r3, [pc, #172]	@ (800a018 <pcb_new+0xc4>)
 8009f6c:	f240 2265 	movw	r2, #613	@ 0x265
 8009f70:	492a      	ldr	r1, [pc, #168]	@ (800a01c <pcb_new+0xc8>)
 8009f72:	482b      	ldr	r0, [pc, #172]	@ (800a020 <pcb_new+0xcc>)
 8009f74:	f00e f9c4 	bl	8018300 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f82:	2b10      	cmp	r3, #16
 8009f84:	d022      	beq.n	8009fcc <pcb_new+0x78>
 8009f86:	2b20      	cmp	r3, #32
 8009f88:	d133      	bne.n	8009ff2 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681c      	ldr	r4, [r3, #0]
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
 8009f90:	4618      	mov	r0, r3
 8009f92:	f009 fc5c 	bl	801384e <udp_new_ip_type>
 8009f96:	4603      	mov	r3, r0
 8009f98:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d02a      	beq.n	8009ffa <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	781b      	ldrb	r3, [r3, #0]
 8009faa:	2b22      	cmp	r3, #34	@ 0x22
 8009fac:	d104      	bne.n	8009fb8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	6858      	ldr	r0, [r3, #4]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	4917      	ldr	r1, [pc, #92]	@ (800a024 <pcb_new+0xd0>)
 8009fc6:	f009 fbc9 	bl	801375c <udp_recv>
      }
      break;
 8009fca:	e016      	b.n	8009ffa <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681c      	ldr	r4, [r3, #0]
 8009fd0:	7bfb      	ldrb	r3, [r7, #15]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f004 fd04 	bl	800e9e0 <tcp_new_ip_type>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00b      	beq.n	8009ffe <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4618      	mov	r0, r3
 8009fec:	f7ff fece 	bl	8009d8c <setup_tcp>
      }
      break;
 8009ff0:	e005      	b.n	8009ffe <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	22fa      	movs	r2, #250	@ 0xfa
 8009ff6:	711a      	strb	r2, [r3, #4]
      return;
 8009ff8:	e00a      	b.n	800a010 <pcb_new+0xbc>
      break;
 8009ffa:	bf00      	nop
 8009ffc:	e000      	b.n	800a000 <pcb_new+0xac>
      break;
 8009ffe:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d102      	bne.n	800a010 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	22ff      	movs	r2, #255	@ 0xff
 800a00e:	711a      	strb	r2, [r3, #4]
  }
}
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	bd90      	pop	{r4, r7, pc}
 800a016:	bf00      	nop
 800a018:	080195d0 	.word	0x080195d0
 800a01c:	080197b4 	.word	0x080197b4
 800a020:	08019614 	.word	0x08019614
 800a024:	08009861 	.word	0x08009861

0800a028 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f7ff ff85 	bl	8009f54 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a04a:	bf00      	nop
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b086      	sub	sp, #24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	4603      	mov	r3, r0
 800a05c:	6039      	str	r1, [r7, #0]
 800a05e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a064:	2007      	movs	r0, #7
 800a066:	f001 ffd9 	bl	800c01c <memp_malloc>
 800a06a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <netconn_alloc+0x22>
    return NULL;
 800a072:	2300      	movs	r3, #0
 800a074:	e04e      	b.n	800a114 <netconn_alloc+0xc0>
  }

  conn->pending_err = ERR_OK;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	79fa      	ldrb	r2, [r7, #7]
 800a080:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2200      	movs	r2, #0
 800a086:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a08e:	2b10      	cmp	r3, #16
 800a090:	d004      	beq.n	800a09c <netconn_alloc+0x48>
 800a092:	2b20      	cmp	r3, #32
 800a094:	d105      	bne.n	800a0a2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a096:	2306      	movs	r3, #6
 800a098:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a09a:	e00a      	b.n	800a0b2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a09c:	2306      	movs	r3, #6
 800a09e:	617b      	str	r3, [r7, #20]
      break;
 800a0a0:	e007      	b.n	800a0b2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a0a2:	4b1e      	ldr	r3, [pc, #120]	@ (800a11c <netconn_alloc+0xc8>)
 800a0a4:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800a0a8:	491d      	ldr	r1, [pc, #116]	@ (800a120 <netconn_alloc+0xcc>)
 800a0aa:	481e      	ldr	r0, [pc, #120]	@ (800a124 <netconn_alloc+0xd0>)
 800a0ac:	f00e f928 	bl	8018300 <iprintf>
      goto free_and_return;
 800a0b0:	e02b      	b.n	800a10a <netconn_alloc+0xb6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	3310      	adds	r3, #16
 800a0b6:	6979      	ldr	r1, [r7, #20]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f00d fe29 	bl	8017d10 <sys_mbox_new>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d121      	bne.n	800a108 <netconn_alloc+0xb4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	330c      	adds	r3, #12
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f00d fefd 	bl	8017eca <sys_sem_new>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d005      	beq.n	800a0e2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3310      	adds	r3, #16
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f00d fe3a 	bl	8017d54 <sys_mbox_free>
    goto free_and_return;
 800a0e0:	e013      	b.n	800a10a <netconn_alloc+0xb6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	3314      	adds	r3, #20
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f00d fee2 	bl	8017eb0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	683a      	ldr	r2, [r7, #0]
 800a0f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	7cfa      	ldrb	r2, [r7, #19]
 800a102:	761a      	strb	r2, [r3, #24]
  return conn;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	e005      	b.n	800a114 <netconn_alloc+0xc0>
    goto free_and_return;
 800a108:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a10a:	68f9      	ldr	r1, [r7, #12]
 800a10c:	2007      	movs	r0, #7
 800a10e:	f001 ffd7 	bl	800c0c0 <memp_free>
  return NULL;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	080195d0 	.word	0x080195d0
 800a120:	080197d4 	.word	0x080197d4
 800a124:	08019614 	.word	0x08019614

0800a128 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d006      	beq.n	800a146 <netconn_free+0x1e>
 800a138:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a8 <netconn_free+0x80>)
 800a13a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800a13e:	491b      	ldr	r1, [pc, #108]	@ (800a1ac <netconn_free+0x84>)
 800a140:	481b      	ldr	r0, [pc, #108]	@ (800a1b0 <netconn_free+0x88>)
 800a142:	f00e f8dd 	bl	8018300 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	3310      	adds	r3, #16
 800a14a:	4618      	mov	r0, r3
 800a14c:	f00d fe9f 	bl	8017e8e <sys_mbox_valid>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d006      	beq.n	800a164 <netconn_free+0x3c>
 800a156:	4b14      	ldr	r3, [pc, #80]	@ (800a1a8 <netconn_free+0x80>)
 800a158:	f240 3223 	movw	r2, #803	@ 0x323
 800a15c:	4915      	ldr	r1, [pc, #84]	@ (800a1b4 <netconn_free+0x8c>)
 800a15e:	4814      	ldr	r0, [pc, #80]	@ (800a1b0 <netconn_free+0x88>)
 800a160:	f00e f8ce 	bl	8018300 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3314      	adds	r3, #20
 800a168:	4618      	mov	r0, r3
 800a16a:	f00d fe90 	bl	8017e8e <sys_mbox_valid>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	d006      	beq.n	800a182 <netconn_free+0x5a>
 800a174:	4b0c      	ldr	r3, [pc, #48]	@ (800a1a8 <netconn_free+0x80>)
 800a176:	f240 3226 	movw	r2, #806	@ 0x326
 800a17a:	490f      	ldr	r1, [pc, #60]	@ (800a1b8 <netconn_free+0x90>)
 800a17c:	480c      	ldr	r0, [pc, #48]	@ (800a1b0 <netconn_free+0x88>)
 800a17e:	f00e f8bf 	bl	8018300 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	330c      	adds	r3, #12
 800a186:	4618      	mov	r0, r3
 800a188:	f00d ff05 	bl	8017f96 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	330c      	adds	r3, #12
 800a190:	4618      	mov	r0, r3
 800a192:	f00d ff1e 	bl	8017fd2 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	2007      	movs	r0, #7
 800a19a:	f001 ff91 	bl	800c0c0 <memp_free>
}
 800a19e:	bf00      	nop
 800a1a0:	3708      	adds	r7, #8
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	080195d0 	.word	0x080195d0
 800a1ac:	080197fc 	.word	0x080197fc
 800a1b0:	08019614 	.word	0x08019614
 800a1b4:	0801982c 	.word	0x0801982c
 800a1b8:	08019868 	.word	0x08019868

0800a1bc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b086      	sub	sp, #24
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3310      	adds	r3, #16
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f00d fe60 	bl	8017e8e <sys_mbox_valid>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d02f      	beq.n	800a234 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a1d4:	e018      	b.n	800a208 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1de:	2b10      	cmp	r3, #16
 800a1e0:	d10e      	bne.n	800a200 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	f107 020f 	add.w	r2, r7, #15
 800a1e8:	4611      	mov	r1, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f7ff fafe 	bl	80097ec <lwip_netconn_is_err_msg>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d108      	bne.n	800a208 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a1f6:	693b      	ldr	r3, [r7, #16]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f002 fdb7 	bl	800cd6c <pbuf_free>
 800a1fe:	e003      	b.n	800a208 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fe94 	bl	800af30 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3310      	adds	r3, #16
 800a20c:	f107 0210 	add.w	r2, r7, #16
 800a210:	4611      	mov	r1, r2
 800a212:	4618      	mov	r0, r3
 800a214:	f00d fe1f 	bl	8017e56 <sys_arch_mbox_tryfetch>
 800a218:	4603      	mov	r3, r0
 800a21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21e:	d1da      	bne.n	800a1d6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	3310      	adds	r3, #16
 800a224:	4618      	mov	r0, r3
 800a226:	f00d fd95 	bl	8017d54 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3310      	adds	r3, #16
 800a22e:	4618      	mov	r0, r3
 800a230:	f00d fe3e 	bl	8017eb0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3314      	adds	r3, #20
 800a238:	4618      	mov	r0, r3
 800a23a:	f00d fe28 	bl	8017e8e <sys_mbox_valid>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d034      	beq.n	800a2ae <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a244:	e01d      	b.n	800a282 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	f107 020e 	add.w	r2, r7, #14
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff facc 	bl	80097ec <lwip_netconn_is_err_msg>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d113      	bne.n	800a282 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a25e:	6978      	ldr	r0, [r7, #20]
 800a260:	f7ff ffac 	bl	800a1bc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	685b      	ldr	r3, [r3, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	4618      	mov	r0, r3
 800a272:	f003 fb71 	bl	800d958 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2200      	movs	r2, #0
 800a27a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a27c:	6978      	ldr	r0, [r7, #20]
 800a27e:	f7ff ff53 	bl	800a128 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3314      	adds	r3, #20
 800a286:	f107 0210 	add.w	r2, r7, #16
 800a28a:	4611      	mov	r1, r2
 800a28c:	4618      	mov	r0, r3
 800a28e:	f00d fde2 	bl	8017e56 <sys_arch_mbox_tryfetch>
 800a292:	4603      	mov	r3, r0
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d1d5      	bne.n	800a246 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	3314      	adds	r3, #20
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f00d fd58 	bl	8017d54 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	3314      	adds	r3, #20
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f00d fe01 	bl	8017eb0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a2ae:	bf00      	nop
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <lwip_netconn_do_close_internal+0x24>
 800a2ce:	4b87      	ldr	r3, [pc, #540]	@ (800a4ec <lwip_netconn_do_close_internal+0x234>)
 800a2d0:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800a2d4:	4986      	ldr	r1, [pc, #536]	@ (800a4f0 <lwip_netconn_do_close_internal+0x238>)
 800a2d6:	4887      	ldr	r0, [pc, #540]	@ (800a4f4 <lwip_netconn_do_close_internal+0x23c>)
 800a2d8:	f00e f812 	bl	8018300 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a2e4:	2b10      	cmp	r3, #16
 800a2e6:	d006      	beq.n	800a2f6 <lwip_netconn_do_close_internal+0x3e>
 800a2e8:	4b80      	ldr	r3, [pc, #512]	@ (800a4ec <lwip_netconn_do_close_internal+0x234>)
 800a2ea:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800a2ee:	4982      	ldr	r1, [pc, #520]	@ (800a4f8 <lwip_netconn_do_close_internal+0x240>)
 800a2f0:	4880      	ldr	r0, [pc, #512]	@ (800a4f4 <lwip_netconn_do_close_internal+0x23c>)
 800a2f2:	f00e f805 	bl	8018300 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	785b      	ldrb	r3, [r3, #1]
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d006      	beq.n	800a30c <lwip_netconn_do_close_internal+0x54>
 800a2fe:	4b7b      	ldr	r3, [pc, #492]	@ (800a4ec <lwip_netconn_do_close_internal+0x234>)
 800a300:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800a304:	497d      	ldr	r1, [pc, #500]	@ (800a4fc <lwip_netconn_do_close_internal+0x244>)
 800a306:	487b      	ldr	r0, [pc, #492]	@ (800a4f4 <lwip_netconn_do_close_internal+0x23c>)
 800a308:	f00d fffa 	bl	8018300 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <lwip_netconn_do_close_internal+0x6a>
 800a314:	4b75      	ldr	r3, [pc, #468]	@ (800a4ec <lwip_netconn_do_close_internal+0x234>)
 800a316:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800a31a:	4979      	ldr	r1, [pc, #484]	@ (800a500 <lwip_netconn_do_close_internal+0x248>)
 800a31c:	4875      	ldr	r0, [pc, #468]	@ (800a4f4 <lwip_netconn_do_close_internal+0x23c>)
 800a31e:	f00d ffef 	bl	8018300 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	69db      	ldr	r3, [r3, #28]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d106      	bne.n	800a338 <lwip_netconn_do_close_internal+0x80>
 800a32a:	4b70      	ldr	r3, [pc, #448]	@ (800a4ec <lwip_netconn_do_close_internal+0x234>)
 800a32c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800a330:	4974      	ldr	r1, [pc, #464]	@ (800a504 <lwip_netconn_do_close_internal+0x24c>)
 800a332:	4870      	ldr	r0, [pc, #448]	@ (800a4f4 <lwip_netconn_do_close_internal+0x23c>)
 800a334:	f00d ffe4 	bl	8018300 <iprintf>

  tpcb = conn->pcb.tcp;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	69db      	ldr	r3, [r3, #28]
 800a342:	7a1b      	ldrb	r3, [r3, #8]
 800a344:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a346:	7bfb      	ldrb	r3, [r7, #15]
 800a348:	f003 0301 	and.w	r3, r3, #1
 800a34c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a34e:	7bfb      	ldrb	r3, [r7, #15]
 800a350:	f003 0302 	and.w	r3, r3, #2
 800a354:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a356:	7bfb      	ldrb	r3, [r7, #15]
 800a358:	2b03      	cmp	r3, #3
 800a35a:	d102      	bne.n	800a362 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a35c:	2301      	movs	r3, #1
 800a35e:	75bb      	strb	r3, [r7, #22]
 800a360:	e01f      	b.n	800a3a2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a362:	7bbb      	ldrb	r3, [r7, #14]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d00e      	beq.n	800a386 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a36c:	2b05      	cmp	r3, #5
 800a36e:	d007      	beq.n	800a380 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a374:	2b06      	cmp	r3, #6
 800a376:	d003      	beq.n	800a380 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a37c:	2b08      	cmp	r3, #8
 800a37e:	d102      	bne.n	800a386 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a380:	2301      	movs	r3, #1
 800a382:	75bb      	strb	r3, [r7, #22]
 800a384:	e00d      	b.n	800a3a2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a386:	7b7b      	ldrb	r3, [r7, #13]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d008      	beq.n	800a39e <lwip_netconn_do_close_internal+0xe6>
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	8b5b      	ldrh	r3, [r3, #26]
 800a390:	f003 0310 	and.w	r3, r3, #16
 800a394:	2b00      	cmp	r3, #0
 800a396:	d002      	beq.n	800a39e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a398:	2301      	movs	r3, #1
 800a39a:	75bb      	strb	r3, [r7, #22]
 800a39c:	e001      	b.n	800a3a2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a3a2:	7dbb      	ldrb	r3, [r7, #22]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6938      	ldr	r0, [r7, #16]
 800a3ac:	f004 fb26 	bl	800e9fc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	7d1b      	ldrb	r3, [r3, #20]
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d104      	bne.n	800a3c2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	6938      	ldr	r0, [r7, #16]
 800a3bc:	f004 fb94 	bl	800eae8 <tcp_accept>
 800a3c0:	e01d      	b.n	800a3fe <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d007      	beq.n	800a3d8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a3c8:	2100      	movs	r1, #0
 800a3ca:	6938      	ldr	r0, [r7, #16]
 800a3cc:	f004 fb28 	bl	800ea20 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	6938      	ldr	r0, [r7, #16]
 800a3d4:	f004 fb88 	bl	800eae8 <tcp_accept>
    }
    if (shut_tx) {
 800a3d8:	7b7b      	ldrb	r3, [r7, #13]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d003      	beq.n	800a3e6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a3de:	2100      	movs	r1, #0
 800a3e0:	6938      	ldr	r0, [r7, #16]
 800a3e2:	f004 fb3f 	bl	800ea64 <tcp_sent>
    }
    if (shut_close) {
 800a3e6:	7dbb      	ldrb	r3, [r7, #22]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d008      	beq.n	800a3fe <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	6938      	ldr	r0, [r7, #16]
 800a3f2:	f004 fb91 	bl	800eb18 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	6938      	ldr	r0, [r7, #16]
 800a3fa:	f004 fb53 	bl	800eaa4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a3fe:	7dbb      	ldrb	r3, [r7, #22]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a404:	6938      	ldr	r0, [r7, #16]
 800a406:	f003 f96b 	bl	800d6e0 <tcp_close>
 800a40a:	4603      	mov	r3, r0
 800a40c:	75fb      	strb	r3, [r7, #23]
 800a40e:	e007      	b.n	800a420 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a410:	7bbb      	ldrb	r3, [r7, #14]
 800a412:	7b7a      	ldrb	r2, [r7, #13]
 800a414:	4619      	mov	r1, r3
 800a416:	6938      	ldr	r0, [r7, #16]
 800a418:	f003 f98e 	bl	800d738 <tcp_shutdown>
 800a41c:	4603      	mov	r3, r0
 800a41e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d102      	bne.n	800a42e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a428:	2301      	movs	r3, #1
 800a42a:	757b      	strb	r3, [r7, #21]
 800a42c:	e016      	b.n	800a45c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a42e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a432:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a436:	d10f      	bne.n	800a458 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	69db      	ldr	r3, [r3, #28]
 800a43c:	7a5b      	ldrb	r3, [r3, #9]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d10c      	bne.n	800a45c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a442:	2301      	movs	r3, #1
 800a444:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a446:	7dbb      	ldrb	r3, [r7, #22]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d007      	beq.n	800a45c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a44c:	6938      	ldr	r0, [r7, #16]
 800a44e:	f003 fa83 	bl	800d958 <tcp_abort>
          err = ERR_OK;
 800a452:	2300      	movs	r3, #0
 800a454:	75fb      	strb	r3, [r7, #23]
 800a456:	e001      	b.n	800a45c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a458:	2301      	movs	r3, #1
 800a45a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a45c:	7d7b      	ldrb	r3, [r7, #21]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d052      	beq.n	800a508 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	69db      	ldr	r3, [r3, #28]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	330c      	adds	r3, #12
 800a46a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	69db      	ldr	r3, [r3, #28]
 800a470:	7dfa      	ldrb	r2, [r7, #23]
 800a472:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2200      	movs	r2, #0
 800a47e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a480:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d129      	bne.n	800a4dc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a488:	7dbb      	ldrb	r3, [r7, #22]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00c      	beq.n	800a4a8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2200      	movs	r2, #0
 800a492:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d005      	beq.n	800a4a8 <lwip_netconn_do_close_internal+0x1f0>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a1b      	ldr	r3, [r3, #32]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	2104      	movs	r1, #4
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	4798      	blx	r3
      }
      if (shut_rx) {
 800a4a8:	7bbb      	ldrb	r3, [r7, #14]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d009      	beq.n	800a4c2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <lwip_netconn_do_close_internal+0x20a>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a1b      	ldr	r3, [r3, #32]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	2100      	movs	r1, #0
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	4798      	blx	r3
      }
      if (shut_tx) {
 800a4c2:	7b7b      	ldrb	r3, [r7, #13]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d009      	beq.n	800a4dc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d005      	beq.n	800a4dc <lwip_netconn_do_close_internal+0x224>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6a1b      	ldr	r3, [r3, #32]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2102      	movs	r1, #2
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a4dc:	78fb      	ldrb	r3, [r7, #3]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a4e2:	68b8      	ldr	r0, [r7, #8]
 800a4e4:	f00d fd4a 	bl	8017f7c <sys_sem_signal>
    }
    return ERR_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e03c      	b.n	800a566 <lwip_netconn_do_close_internal+0x2ae>
 800a4ec:	080195d0 	.word	0x080195d0
 800a4f0:	080198a4 	.word	0x080198a4
 800a4f4:	08019614 	.word	0x08019614
 800a4f8:	080198b4 	.word	0x080198b4
 800a4fc:	080198d4 	.word	0x080198d4
 800a500:	080198f8 	.word	0x080198f8
 800a504:	08019738 	.word	0x08019738
  }
  if (!close_finished) {
 800a508:	7d7b      	ldrb	r3, [r7, #21]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d11e      	bne.n	800a54c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	7d1b      	ldrb	r3, [r3, #20]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d106      	bne.n	800a524 <lwip_netconn_do_close_internal+0x26c>
 800a516:	4b16      	ldr	r3, [pc, #88]	@ (800a570 <lwip_netconn_do_close_internal+0x2b8>)
 800a518:	f240 4241 	movw	r2, #1089	@ 0x441
 800a51c:	4915      	ldr	r1, [pc, #84]	@ (800a574 <lwip_netconn_do_close_internal+0x2bc>)
 800a51e:	4816      	ldr	r0, [pc, #88]	@ (800a578 <lwip_netconn_do_close_internal+0x2c0>)
 800a520:	f00d feee 	bl	8018300 <iprintf>
    if (shut_tx) {
 800a524:	7b7b      	ldrb	r3, [r7, #13]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800a52a:	4914      	ldr	r1, [pc, #80]	@ (800a57c <lwip_netconn_do_close_internal+0x2c4>)
 800a52c:	6938      	ldr	r0, [r7, #16]
 800a52e:	f004 fa99 	bl	800ea64 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a532:	2201      	movs	r2, #1
 800a534:	4912      	ldr	r1, [pc, #72]	@ (800a580 <lwip_netconn_do_close_internal+0x2c8>)
 800a536:	6938      	ldr	r0, [r7, #16]
 800a538:	f004 faee 	bl	800eb18 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a53c:	4911      	ldr	r1, [pc, #68]	@ (800a584 <lwip_netconn_do_close_internal+0x2cc>)
 800a53e:	6938      	ldr	r0, [r7, #16]
 800a540:	f004 fab0 	bl	800eaa4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	6938      	ldr	r0, [r7, #16]
 800a548:	f004 fa58 	bl	800e9fc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a54c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d106      	bne.n	800a562 <lwip_netconn_do_close_internal+0x2aa>
 800a554:	4b06      	ldr	r3, [pc, #24]	@ (800a570 <lwip_netconn_do_close_internal+0x2b8>)
 800a556:	f240 424d 	movw	r2, #1101	@ 0x44d
 800a55a:	490b      	ldr	r1, [pc, #44]	@ (800a588 <lwip_netconn_do_close_internal+0x2d0>)
 800a55c:	4806      	ldr	r0, [pc, #24]	@ (800a578 <lwip_netconn_do_close_internal+0x2c0>)
 800a55e:	f00d fecf 	bl	8018300 <iprintf>
  return err;
 800a562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	080195d0 	.word	0x080195d0
 800a574:	0801990c 	.word	0x0801990c
 800a578:	08019614 	.word	0x08019614
 800a57c:	08009b35 	.word	0x08009b35
 800a580:	08009a69 	.word	0x08009a69
 800a584:	08009be1 	.word	0x08009be1
 800a588:	08019930 	.word	0x08019930

0800a58c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	785b      	ldrb	r3, [r3, #1]
 800a59e:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00d      	beq.n	800a5c2 <lwip_netconn_do_delconn+0x36>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5b0:	2b10      	cmp	r3, #16
 800a5b2:	d006      	beq.n	800a5c2 <lwip_netconn_do_delconn+0x36>
 800a5b4:	4b60      	ldr	r3, [pc, #384]	@ (800a738 <lwip_netconn_do_delconn+0x1ac>)
 800a5b6:	f240 425e 	movw	r2, #1118	@ 0x45e
 800a5ba:	4960      	ldr	r1, [pc, #384]	@ (800a73c <lwip_netconn_do_delconn+0x1b0>)
 800a5bc:	4860      	ldr	r0, [pc, #384]	@ (800a740 <lwip_netconn_do_delconn+0x1b4>)
 800a5be:	f00d fe9f 	bl	8018300 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a5c2:	7afb      	ldrb	r3, [r7, #11]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d005      	beq.n	800a5d4 <lwip_netconn_do_delconn+0x48>
 800a5c8:	7afb      	ldrb	r3, [r7, #11]
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d002      	beq.n	800a5d4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a5ce:	7afb      	ldrb	r3, [r7, #11]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	d109      	bne.n	800a5e8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a5d4:	7afb      	ldrb	r3, [r7, #11]
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d10a      	bne.n	800a5f0 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	7e1b      	ldrb	r3, [r3, #24]
 800a5e0:	f003 0304 	and.w	r3, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d103      	bne.n	800a5f0 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	22fb      	movs	r2, #251	@ 0xfb
 800a5ec:	711a      	strb	r2, [r3, #4]
 800a5ee:	e097      	b.n	800a720 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a5f0:	7afb      	ldrb	r3, [r7, #11]
 800a5f2:	2b03      	cmp	r3, #3
 800a5f4:	d10d      	bne.n	800a612 <lwip_netconn_do_delconn+0x86>
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	7e1b      	ldrb	r3, [r3, #24]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d106      	bne.n	800a612 <lwip_netconn_do_delconn+0x86>
 800a604:	4b4c      	ldr	r3, [pc, #304]	@ (800a738 <lwip_netconn_do_delconn+0x1ac>)
 800a606:	f240 427a 	movw	r2, #1146	@ 0x47a
 800a60a:	494e      	ldr	r1, [pc, #312]	@ (800a744 <lwip_netconn_do_delconn+0x1b8>)
 800a60c:	484c      	ldr	r0, [pc, #304]	@ (800a740 <lwip_netconn_do_delconn+0x1b4>)
 800a60e:	f00d fe77 	bl	8018300 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2200      	movs	r2, #0
 800a616:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4618      	mov	r0, r3
 800a61e:	f7ff fdcd 	bl	800a1bc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d05f      	beq.n	800a6ec <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	781b      	ldrb	r3, [r3, #0]
 800a632:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a636:	2b10      	cmp	r3, #16
 800a638:	d00d      	beq.n	800a656 <lwip_netconn_do_delconn+0xca>
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	d151      	bne.n	800a6e2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	2200      	movs	r2, #0
 800a646:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	4618      	mov	r0, r3
 800a650:	f009 f8a4 	bl	801379c <udp_remove>
          break;
 800a654:	e046      	b.n	800a6e4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	69db      	ldr	r3, [r3, #28]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d006      	beq.n	800a66e <lwip_netconn_do_delconn+0xe2>
 800a660:	4b35      	ldr	r3, [pc, #212]	@ (800a738 <lwip_netconn_do_delconn+0x1ac>)
 800a662:	f240 4294 	movw	r2, #1172	@ 0x494
 800a666:	4938      	ldr	r1, [pc, #224]	@ (800a748 <lwip_netconn_do_delconn+0x1bc>)
 800a668:	4835      	ldr	r0, [pc, #212]	@ (800a740 <lwip_netconn_do_delconn+0x1b4>)
 800a66a:	f00d fe49 	bl	8018300 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2204      	movs	r2, #4
 800a674:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2203      	movs	r2, #3
 800a67a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2100      	movs	r1, #0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7ff fe14 	bl	800a2b8 <lwip_netconn_do_close_internal>
 800a690:	4603      	mov	r3, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	d04b      	beq.n	800a72e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d006      	beq.n	800a6ae <lwip_netconn_do_delconn+0x122>
 800a6a0:	4b25      	ldr	r3, [pc, #148]	@ (800a738 <lwip_netconn_do_delconn+0x1ac>)
 800a6a2:	f240 429a 	movw	r2, #1178	@ 0x49a
 800a6a6:	4929      	ldr	r1, [pc, #164]	@ (800a74c <lwip_netconn_do_delconn+0x1c0>)
 800a6a8:	4825      	ldr	r0, [pc, #148]	@ (800a740 <lwip_netconn_do_delconn+0x1b4>)
 800a6aa:	f00d fe29 	bl	8018300 <iprintf>
            UNLOCK_TCPIP_CORE();
 800a6ae:	4828      	ldr	r0, [pc, #160]	@ (800a750 <lwip_netconn_do_delconn+0x1c4>)
 800a6b0:	f00d fcd5 	bl	801805e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	330c      	adds	r3, #12
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f00d fc2c 	bl	8017f1a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a6c2:	4823      	ldr	r0, [pc, #140]	@ (800a750 <lwip_netconn_do_delconn+0x1c4>)
 800a6c4:	f00d fcbc 	bl	8018040 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	785b      	ldrb	r3, [r3, #1]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d02d      	beq.n	800a72e <lwip_netconn_do_delconn+0x1a2>
 800a6d2:	4b19      	ldr	r3, [pc, #100]	@ (800a738 <lwip_netconn_do_delconn+0x1ac>)
 800a6d4:	f240 429e 	movw	r2, #1182	@ 0x49e
 800a6d8:	491c      	ldr	r1, [pc, #112]	@ (800a74c <lwip_netconn_do_delconn+0x1c0>)
 800a6da:	4819      	ldr	r0, [pc, #100]	@ (800a740 <lwip_netconn_do_delconn+0x1b4>)
 800a6dc:	f00d fe10 	bl	8018300 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a6e0:	e025      	b.n	800a72e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a6e2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6a1b      	ldr	r3, [r3, #32]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d007      	beq.n	800a706 <lwip_netconn_do_delconn+0x17a>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6a1b      	ldr	r3, [r3, #32]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	6810      	ldr	r0, [r2, #0]
 800a700:	2200      	movs	r2, #0
 800a702:	2100      	movs	r1, #0
 800a704:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d007      	beq.n	800a720 <lwip_netconn_do_delconn+0x194>
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6a1b      	ldr	r3, [r3, #32]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	6810      	ldr	r0, [r2, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	2102      	movs	r1, #2
 800a71e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	330c      	adds	r3, #12
 800a726:	4618      	mov	r0, r3
 800a728:	f00d fc42 	bl	8017fb0 <sys_sem_valid>
 800a72c:	e000      	b.n	800a730 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a72e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	080195d0 	.word	0x080195d0
 800a73c:	08019940 	.word	0x08019940
 800a740:	08019614 	.word	0x08019614
 800a744:	08019954 	.word	0x08019954
 800a748:	08019974 	.word	0x08019974
 800a74c:	08019990 	.word	0x08019990
 800a750:	2000931c 	.word	0x2000931c

0800a754 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a760:	68bb      	ldr	r3, [r7, #8]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d025      	beq.n	800a7b6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a774:	2b10      	cmp	r3, #16
 800a776:	d00e      	beq.n	800a796 <lwip_netconn_do_bind+0x42>
 800a778:	2b20      	cmp	r3, #32
 800a77a:	d119      	bne.n	800a7b0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6858      	ldr	r0, [r3, #4]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	6899      	ldr	r1, [r3, #8]
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	899b      	ldrh	r3, [r3, #12]
 800a78a:	461a      	mov	r2, r3
 800a78c:	f008 fef0 	bl	8013570 <udp_bind>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]
        break;
 800a794:	e011      	b.n	800a7ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6858      	ldr	r0, [r3, #4]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	6899      	ldr	r1, [r3, #8]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	899b      	ldrh	r3, [r3, #12]
 800a7a4:	461a      	mov	r2, r3
 800a7a6:	f003 f8e3 	bl	800d970 <tcp_bind>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]
        break;
 800a7ae:	e004      	b.n	800a7ba <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a7b0:	23fa      	movs	r3, #250	@ 0xfa
 800a7b2:	73fb      	strb	r3, [r7, #15]
        break;
 800a7b4:	e001      	b.n	800a7ba <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a7b6:	23fa      	movs	r3, #250	@ 0xfa
 800a7b8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	7bfa      	ldrb	r2, [r7, #15]
 800a7be:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a7c0:	bf00      	nop
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b086      	sub	sp, #24
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d07f      	beq.n	800a8de <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a7e8:	2b10      	cmp	r3, #16
 800a7ea:	d175      	bne.n	800a8d8 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d165      	bne.n	800a8c2 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	7d1b      	ldrb	r3, [r3, #20]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a802:	23fa      	movs	r3, #250	@ 0xfa
 800a804:	72fb      	strb	r3, [r7, #11]
 800a806:	e06c      	b.n	800a8e2 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a808:	23ff      	movs	r3, #255	@ 0xff
 800a80a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	f107 020b 	add.w	r2, r7, #11
 800a816:	7cf9      	ldrb	r1, [r7, #19]
 800a818:	4618      	mov	r0, r3
 800a81a:	f003 f961 	bl	800dae0 <tcp_listen_with_backlog_and_err>
 800a81e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d05d      	beq.n	800a8e2 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3310      	adds	r3, #16
 800a82c:	4618      	mov	r0, r3
 800a82e:	f00d fb2e 	bl	8017e8e <sys_mbox_valid>
 800a832:	4603      	mov	r3, r0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d00b      	beq.n	800a850 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3310      	adds	r3, #16
 800a83e:	4618      	mov	r0, r3
 800a840:	f00d fa88 	bl	8017d54 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3310      	adds	r3, #16
 800a84a:	4618      	mov	r0, r3
 800a84c:	f00d fb30 	bl	8017eb0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a850:	2300      	movs	r3, #0
 800a852:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3314      	adds	r3, #20
 800a85a:	4618      	mov	r0, r3
 800a85c:	f00d fb17 	bl	8017e8e <sys_mbox_valid>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d108      	bne.n	800a878 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	3314      	adds	r3, #20
 800a86c:	2106      	movs	r1, #6
 800a86e:	4618      	mov	r0, r3
 800a870:	f00d fa4e 	bl	8017d10 <sys_mbox_new>
 800a874:	4603      	mov	r3, r0
 800a876:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a878:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d118      	bne.n	800a8b2 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	2202      	movs	r2, #2
 800a886:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68fa      	ldr	r2, [r7, #12]
 800a88e:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	685a      	ldr	r2, [r3, #4]
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4619      	mov	r1, r3
 800a89c:	4610      	mov	r0, r2
 800a89e:	f004 f8ad 	bl	800e9fc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4912      	ldr	r1, [pc, #72]	@ (800a8f4 <lwip_netconn_do_listen+0x12c>)
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f004 f91c 	bl	800eae8 <tcp_accept>
 800a8b0:	e017      	b.n	800a8e2 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f002 ff14 	bl	800d6e0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	605a      	str	r2, [r3, #4]
 800a8c0:	e00f      	b.n	800a8e2 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	785b      	ldrb	r3, [r3, #1]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d102      	bne.n	800a8d2 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	72fb      	strb	r3, [r7, #11]
 800a8d0:	e007      	b.n	800a8e2 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a8d2:	23f5      	movs	r3, #245	@ 0xf5
 800a8d4:	72fb      	strb	r3, [r7, #11]
 800a8d6:	e004      	b.n	800a8e2 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a8d8:	23f0      	movs	r3, #240	@ 0xf0
 800a8da:	72fb      	strb	r3, [r7, #11]
 800a8dc:	e001      	b.n	800a8e2 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a8de:	23f5      	movs	r3, #245	@ 0xf5
 800a8e0:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a8e2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a8ea:	bf00      	nop
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	08009ddd 	.word	0x08009ddd

0800a8f8 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a904:	693b      	ldr	r3, [r7, #16]
 800a906:	2200      	movs	r2, #0
 800a908:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d022      	beq.n	800a95a <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	781b      	ldrb	r3, [r3, #0]
 800a91a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a91e:	2b10      	cmp	r3, #16
 800a920:	d11b      	bne.n	800a95a <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a92e:	d202      	bcs.n	800a936 <lwip_netconn_do_recv+0x3e>
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	b29b      	uxth	r3, r3
 800a934:	e001      	b.n	800a93a <lwip_netconn_do_recv+0x42>
 800a936:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a93a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	89fa      	ldrh	r2, [r7, #14]
 800a944:	4611      	mov	r1, r2
 800a946:	4618      	mov	r0, r3
 800a948:	f003 f9ce 	bl	800dce8 <tcp_recved>
        remaining -= recved;
 800a94c:	89fb      	ldrh	r3, [r7, #14]
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1e6      	bne.n	800a928 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a95a:	bf00      	nop
 800a95c:	3718      	adds	r7, #24
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
	...

0800a964 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b088      	sub	sp, #32
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
 800a96c:	460b      	mov	r3, r1
 800a96e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a970:	2300      	movs	r3, #0
 800a972:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <lwip_netconn_do_writemore+0x24>
 800a97a:	4b96      	ldr	r3, [pc, #600]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800a97c:	f240 6273 	movw	r2, #1651	@ 0x673
 800a980:	4995      	ldr	r1, [pc, #596]	@ (800abd8 <lwip_netconn_do_writemore+0x274>)
 800a982:	4896      	ldr	r0, [pc, #600]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800a984:	f00d fcbc 	bl	8018300 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	785b      	ldrb	r3, [r3, #1]
 800a98c:	2b01      	cmp	r3, #1
 800a98e:	d006      	beq.n	800a99e <lwip_netconn_do_writemore+0x3a>
 800a990:	4b90      	ldr	r3, [pc, #576]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800a992:	f240 6274 	movw	r2, #1652	@ 0x674
 800a996:	4992      	ldr	r1, [pc, #584]	@ (800abe0 <lwip_netconn_do_writemore+0x27c>)
 800a998:	4890      	ldr	r0, [pc, #576]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800a99a:	f00d fcb1 	bl	8018300 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d106      	bne.n	800a9b4 <lwip_netconn_do_writemore+0x50>
 800a9a6:	4b8b      	ldr	r3, [pc, #556]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800a9a8:	f240 6275 	movw	r2, #1653	@ 0x675
 800a9ac:	498d      	ldr	r1, [pc, #564]	@ (800abe4 <lwip_netconn_do_writemore+0x280>)
 800a9ae:	488b      	ldr	r0, [pc, #556]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800a9b0:	f00d fca6 	bl	8018300 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d106      	bne.n	800a9ca <lwip_netconn_do_writemore+0x66>
 800a9bc:	4b85      	ldr	r3, [pc, #532]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800a9be:	f240 6276 	movw	r2, #1654	@ 0x676
 800a9c2:	4989      	ldr	r1, [pc, #548]	@ (800abe8 <lwip_netconn_do_writemore+0x284>)
 800a9c4:	4885      	ldr	r0, [pc, #532]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800a9c6:	f00d fc9b 	bl	8018300 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	69db      	ldr	r3, [r3, #28]
 800a9ce:	699a      	ldr	r2, [r3, #24]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	69db      	ldr	r3, [r3, #28]
 800a9d4:	695b      	ldr	r3, [r3, #20]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d306      	bcc.n	800a9e8 <lwip_netconn_do_writemore+0x84>
 800a9da:	4b7e      	ldr	r3, [pc, #504]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800a9dc:	f240 6277 	movw	r2, #1655	@ 0x677
 800a9e0:	4982      	ldr	r1, [pc, #520]	@ (800abec <lwip_netconn_do_writemore+0x288>)
 800a9e2:	487e      	ldr	r0, [pc, #504]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800a9e4:	f00d fc8c 	bl	8018300 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	69db      	ldr	r3, [r3, #28]
 800a9ec:	899b      	ldrh	r3, [r3, #12]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d106      	bne.n	800aa00 <lwip_netconn_do_writemore+0x9c>
 800a9f2:	4b78      	ldr	r3, [pc, #480]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800a9f4:	f240 6279 	movw	r2, #1657	@ 0x679
 800a9f8:	497d      	ldr	r1, [pc, #500]	@ (800abf0 <lwip_netconn_do_writemore+0x28c>)
 800a9fa:	4878      	ldr	r0, [pc, #480]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800a9fc:	f00d fc80 	bl	8018300 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	69db      	ldr	r3, [r3, #28]
 800aa04:	7f1b      	ldrb	r3, [r3, #28]
 800aa06:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7e1b      	ldrb	r3, [r3, #24]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d104      	bne.n	800aa1e <lwip_netconn_do_writemore+0xba>
 800aa14:	7ebb      	ldrb	r3, [r7, #26]
 800aa16:	f003 0304 	and.w	r3, r3, #4
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <lwip_netconn_do_writemore+0xbe>
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e000      	b.n	800aa24 <lwip_netconn_do_writemore+0xc0>
 800aa22:	2300      	movs	r3, #0
 800aa24:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	4413      	add	r3, r2
 800aa36:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	69db      	ldr	r3, [r3, #28]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	685a      	ldr	r2, [r3, #4]
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	69db      	ldr	r3, [r3, #28]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa50:	d307      	bcc.n	800aa62 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800aa52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aa56:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aa58:	7ebb      	ldrb	r3, [r7, #26]
 800aa5a:	f043 0302 	orr.w	r3, r3, #2
 800aa5e:	76bb      	strb	r3, [r7, #26]
 800aa60:	e001      	b.n	800aa66 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800aa6e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800aa70:	89fa      	ldrh	r2, [r7, #14]
 800aa72:	8bbb      	ldrh	r3, [r7, #28]
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d216      	bcs.n	800aaa6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800aa78:	89fb      	ldrh	r3, [r7, #14]
 800aa7a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800aa7c:	7e3b      	ldrb	r3, [r7, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d00d      	beq.n	800aa9e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800aa82:	8bbb      	ldrh	r3, [r7, #28]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10e      	bne.n	800aaa6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	69db      	ldr	r3, [r3, #28]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d102      	bne.n	800aa98 <lwip_netconn_do_writemore+0x134>
 800aa92:	f06f 0306 	mvn.w	r3, #6
 800aa96:	e000      	b.n	800aa9a <lwip_netconn_do_writemore+0x136>
 800aa98:	2300      	movs	r3, #0
 800aa9a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800aa9c:	e07d      	b.n	800ab9a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800aa9e:	7ebb      	ldrb	r3, [r7, #26]
 800aaa0:	f043 0302 	orr.w	r3, r3, #2
 800aaa4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	691a      	ldr	r2, [r3, #16]
 800aaac:	8bbb      	ldrh	r3, [r7, #28]
 800aaae:	441a      	add	r2, r3
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d906      	bls.n	800aaca <lwip_netconn_do_writemore+0x166>
 800aabc:	4b45      	ldr	r3, [pc, #276]	@ (800abd4 <lwip_netconn_do_writemore+0x270>)
 800aabe:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800aac2:	494c      	ldr	r1, [pc, #304]	@ (800abf4 <lwip_netconn_do_writemore+0x290>)
 800aac4:	4845      	ldr	r0, [pc, #276]	@ (800abdc <lwip_netconn_do_writemore+0x278>)
 800aac6:	f00d fc1b 	bl	8018300 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aaca:	8bbb      	ldrh	r3, [r7, #28]
 800aacc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d103      	bne.n	800aadc <lwip_netconn_do_writemore+0x178>
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aada:	d209      	bcs.n	800aaf0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800aae0:	8bba      	ldrh	r2, [r7, #28]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d10b      	bne.n	800aafe <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	899b      	ldrh	r3, [r3, #12]
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d906      	bls.n	800aafe <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800aaf4:	7ebb      	ldrb	r3, [r7, #26]
 800aaf6:	f043 0302 	orr.w	r3, r3, #2
 800aafa:	76bb      	strb	r3, [r7, #26]
 800aafc:	e001      	b.n	800ab02 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800aafe:	2300      	movs	r3, #0
 800ab00:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6858      	ldr	r0, [r3, #4]
 800ab06:	7ebb      	ldrb	r3, [r7, #26]
 800ab08:	8bba      	ldrh	r2, [r7, #28]
 800ab0a:	6979      	ldr	r1, [r7, #20]
 800ab0c:	f006 fae6 	bl	80110dc <tcp_write>
 800ab10:	4603      	mov	r3, r0
 800ab12:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ab14:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d12c      	bne.n	800ab76 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	69db      	ldr	r3, [r3, #28]
 800ab20:	6999      	ldr	r1, [r3, #24]
 800ab22:	8bba      	ldrh	r2, [r7, #28]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	69db      	ldr	r3, [r3, #28]
 800ab28:	440a      	add	r2, r1
 800ab2a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	6919      	ldr	r1, [r3, #16]
 800ab32:	8bba      	ldrh	r2, [r7, #28]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	69db      	ldr	r3, [r3, #28]
 800ab38:	440a      	add	r2, r1
 800ab3a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	69db      	ldr	r3, [r3, #28]
 800ab40:	691a      	ldr	r2, [r3, #16]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	69db      	ldr	r3, [r3, #28]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d113      	bne.n	800ab76 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	899a      	ldrh	r2, [r3, #12]
 800ab54:	3a01      	subs	r2, #1
 800ab56:	b292      	uxth	r2, r2
 800ab58:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	69db      	ldr	r3, [r3, #28]
 800ab5e:	899b      	ldrh	r3, [r3, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d008      	beq.n	800ab76 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	69db      	ldr	r3, [r3, #28]
 800ab68:	689a      	ldr	r2, [r3, #8]
 800ab6a:	3208      	adds	r2, #8
 800ab6c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69db      	ldr	r3, [r3, #28]
 800ab72:	2200      	movs	r2, #0
 800ab74:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ab76:	7e7b      	ldrb	r3, [r7, #25]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d004      	beq.n	800ab86 <lwip_netconn_do_writemore+0x222>
 800ab7c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f43f af50 	beq.w	800aa26 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ab86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d004      	beq.n	800ab98 <lwip_netconn_do_writemore+0x234>
 800ab8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab96:	d147      	bne.n	800ac28 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800ab98:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ab9a:	7e3b      	ldrb	r3, [r7, #24]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d02b      	beq.n	800abf8 <lwip_netconn_do_writemore+0x294>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	699a      	ldr	r2, [r3, #24]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	69db      	ldr	r3, [r3, #28]
 800abaa:	695b      	ldr	r3, [r3, #20]
 800abac:	429a      	cmp	r2, r3
 800abae:	d223      	bcs.n	800abf8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6a1b      	ldr	r3, [r3, #32]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <lwip_netconn_do_writemore+0x260>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	2200      	movs	r2, #0
 800abbe:	2103      	movs	r1, #3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	7e1b      	ldrb	r3, [r3, #24]
 800abc8:	f043 0310 	orr.w	r3, r3, #16
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	761a      	strb	r2, [r3, #24]
 800abd2:	e029      	b.n	800ac28 <lwip_netconn_do_writemore+0x2c4>
 800abd4:	080195d0 	.word	0x080195d0
 800abd8:	08019728 	.word	0x08019728
 800abdc:	08019614 	.word	0x08019614
 800abe0:	08019a30 	.word	0x08019a30
 800abe4:	08019738 	.word	0x08019738
 800abe8:	08019a50 	.word	0x08019a50
 800abec:	08019a68 	.word	0x08019a68
 800abf0:	08019aa8 	.word	0x08019aa8
 800abf4:	08019ad0 	.word	0x08019ad0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	685b      	ldr	r3, [r3, #4]
 800abfc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ac00:	f640 3269 	movw	r2, #2921	@ 0xb69
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d905      	bls.n	800ac14 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d909      	bls.n	800ac28 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6a1b      	ldr	r3, [r3, #32]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d005      	beq.n	800ac28 <lwip_netconn_do_writemore+0x2c4>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	2200      	movs	r2, #0
 800ac22:	2103      	movs	r1, #3
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ac28:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11d      	bne.n	800ac6c <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	699a      	ldr	r2, [r3, #24]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	69db      	ldr	r3, [r3, #28]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d002      	beq.n	800ac46 <lwip_netconn_do_writemore+0x2e2>
 800ac40:	7e3b      	ldrb	r3, [r7, #24]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ac46:	2301      	movs	r3, #1
 800ac48:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f007 f82e 	bl	8011cb0 <tcp_output>
 800ac54:	4603      	mov	r3, r0
 800ac56:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ac58:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ac5c:	f113 0f04 	cmn.w	r3, #4
 800ac60:	d12c      	bne.n	800acbc <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac62:	7b3b      	ldrb	r3, [r7, #12]
 800ac64:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac66:	2301      	movs	r3, #1
 800ac68:	76fb      	strb	r3, [r7, #27]
 800ac6a:	e027      	b.n	800acbc <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800ac6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac74:	d120      	bne.n	800acb8 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	685b      	ldr	r3, [r3, #4]
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f007 f818 	bl	8011cb0 <tcp_output>
 800ac80:	4603      	mov	r3, r0
 800ac82:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ac84:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ac88:	f113 0f04 	cmn.w	r3, #4
 800ac8c:	d104      	bne.n	800ac98 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ac8e:	7b7b      	ldrb	r3, [r7, #13]
 800ac90:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ac92:	2301      	movs	r3, #1
 800ac94:	76fb      	strb	r3, [r7, #27]
 800ac96:	e011      	b.n	800acbc <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800ac98:	7e3b      	ldrb	r3, [r7, #24]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00e      	beq.n	800acbc <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	699b      	ldr	r3, [r3, #24]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d102      	bne.n	800acae <lwip_netconn_do_writemore+0x34a>
 800aca8:	f06f 0306 	mvn.w	r3, #6
 800acac:	e000      	b.n	800acb0 <lwip_netconn_do_writemore+0x34c>
 800acae:	2300      	movs	r3, #0
 800acb0:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800acb2:	2301      	movs	r3, #1
 800acb4:	76fb      	strb	r3, [r7, #27]
 800acb6:	e001      	b.n	800acbc <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800acb8:	2301      	movs	r3, #1
 800acba:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800acbc:	7efb      	ldrb	r3, [r7, #27]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d015      	beq.n	800acee <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	69db      	ldr	r3, [r3, #28]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	330c      	adds	r3, #12
 800acca:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	7ffa      	ldrb	r2, [r7, #31]
 800acd2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	61da      	str	r2, [r3, #28]
    conn->state = NETCONN_NONE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ace0:	78fb      	ldrb	r3, [r7, #3]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d006      	beq.n	800acf4 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ace6:	68b8      	ldr	r0, [r7, #8]
 800ace8:	f00d f948 	bl	8017f7c <sys_sem_signal>
 800acec:	e002      	b.n	800acf4 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800acee:	f04f 33ff 	mov.w	r3, #4294967295
 800acf2:	e000      	b.n	800acf6 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3720      	adds	r7, #32
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop

0800ad00 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7fe fd1a 	bl	800974a <netconn_err>
 800ad16:	4603      	mov	r3, r0
 800ad18:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ad1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d166      	bne.n	800adf0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ad2c:	2b10      	cmp	r3, #16
 800ad2e:	d15d      	bne.n	800adec <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	785b      	ldrb	r3, [r3, #1]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d002      	beq.n	800ad40 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ad3a:	23fb      	movs	r3, #251	@ 0xfb
 800ad3c:	73fb      	strb	r3, [r7, #15]
 800ad3e:	e057      	b.n	800adf0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d04d      	beq.n	800ade6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	69db      	ldr	r3, [r3, #28]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d006      	beq.n	800ad6a <lwip_netconn_do_write+0x6a>
 800ad5c:	4b28      	ldr	r3, [pc, #160]	@ (800ae00 <lwip_netconn_do_write+0x100>)
 800ad5e:	f240 7223 	movw	r2, #1827	@ 0x723
 800ad62:	4928      	ldr	r1, [pc, #160]	@ (800ae04 <lwip_netconn_do_write+0x104>)
 800ad64:	4828      	ldr	r0, [pc, #160]	@ (800ae08 <lwip_netconn_do_write+0x108>)
 800ad66:	f00d facb 	bl	8018300 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	695b      	ldr	r3, [r3, #20]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d106      	bne.n	800ad80 <lwip_netconn_do_write+0x80>
 800ad72:	4b23      	ldr	r3, [pc, #140]	@ (800ae00 <lwip_netconn_do_write+0x100>)
 800ad74:	f240 7224 	movw	r2, #1828	@ 0x724
 800ad78:	4924      	ldr	r1, [pc, #144]	@ (800ae0c <lwip_netconn_do_write+0x10c>)
 800ad7a:	4823      	ldr	r0, [pc, #140]	@ (800ae08 <lwip_netconn_do_write+0x108>)
 800ad7c:	f00d fac0 	bl	8018300 <iprintf>
        msg->conn->current_msg = msg;
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f7ff fde8 	bl	800a964 <lwip_netconn_do_writemore>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d02e      	beq.n	800adf8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	785b      	ldrb	r3, [r3, #1]
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d006      	beq.n	800adb2 <lwip_netconn_do_write+0xb2>
 800ada4:	4b16      	ldr	r3, [pc, #88]	@ (800ae00 <lwip_netconn_do_write+0x100>)
 800ada6:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800adaa:	4919      	ldr	r1, [pc, #100]	@ (800ae10 <lwip_netconn_do_write+0x110>)
 800adac:	4816      	ldr	r0, [pc, #88]	@ (800ae08 <lwip_netconn_do_write+0x108>)
 800adae:	f00d faa7 	bl	8018300 <iprintf>
          UNLOCK_TCPIP_CORE();
 800adb2:	4818      	ldr	r0, [pc, #96]	@ (800ae14 <lwip_netconn_do_write+0x114>)
 800adb4:	f00d f953 	bl	801805e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	330c      	adds	r3, #12
 800adbe:	2100      	movs	r1, #0
 800adc0:	4618      	mov	r0, r3
 800adc2:	f00d f8aa 	bl	8017f1a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800adc6:	4813      	ldr	r0, [pc, #76]	@ (800ae14 <lwip_netconn_do_write+0x114>)
 800adc8:	f00d f93a 	bl	8018040 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	785b      	ldrb	r3, [r3, #1]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d110      	bne.n	800adf8 <lwip_netconn_do_write+0xf8>
 800add6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae00 <lwip_netconn_do_write+0x100>)
 800add8:	f240 722c 	movw	r2, #1836	@ 0x72c
 800addc:	490c      	ldr	r1, [pc, #48]	@ (800ae10 <lwip_netconn_do_write+0x110>)
 800adde:	480a      	ldr	r0, [pc, #40]	@ (800ae08 <lwip_netconn_do_write+0x108>)
 800ade0:	f00d fa8e 	bl	8018300 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ade4:	e008      	b.n	800adf8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ade6:	23f5      	movs	r3, #245	@ 0xf5
 800ade8:	73fb      	strb	r3, [r7, #15]
 800adea:	e001      	b.n	800adf0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800adec:	23fa      	movs	r3, #250	@ 0xfa
 800adee:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	7bfa      	ldrb	r2, [r7, #15]
 800adf4:	711a      	strb	r2, [r3, #4]
 800adf6:	e000      	b.n	800adfa <lwip_netconn_do_write+0xfa>
        return;
 800adf8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800adfa:	3710      	adds	r7, #16
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	080195d0 	.word	0x080195d0
 800ae04:	08019974 	.word	0x08019974
 800ae08:	08019614 	.word	0x08019614
 800ae0c:	08019afc 	.word	0x08019afc
 800ae10:	08019990 	.word	0x08019990
 800ae14:	2000931c 	.word	0x2000931c

0800ae18 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	785b      	ldrb	r3, [r3, #1]
 800ae2a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d069      	beq.n	800af0a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800ae40:	2b10      	cmp	r3, #16
 800ae42:	d162      	bne.n	800af0a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800ae48:	2b03      	cmp	r3, #3
 800ae4a:	d002      	beq.n	800ae52 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800ae4c:	7afb      	ldrb	r3, [r7, #11]
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d05b      	beq.n	800af0a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	2b03      	cmp	r3, #3
 800ae56:	d103      	bne.n	800ae60 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	22f5      	movs	r2, #245	@ 0xf5
 800ae5c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ae5e:	e059      	b.n	800af14 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ae60:	7afb      	ldrb	r3, [r7, #11]
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d103      	bne.n	800ae6e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	22fb      	movs	r2, #251	@ 0xfb
 800ae6a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ae6c:	e052      	b.n	800af14 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	7a1b      	ldrb	r3, [r3, #8]
 800ae72:	f003 0301 	and.w	r3, r3, #1
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d004      	beq.n	800ae84 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff f99c 	bl	800a1bc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d006      	beq.n	800ae9c <lwip_netconn_do_close+0x84>
 800ae8e:	4b23      	ldr	r3, [pc, #140]	@ (800af1c <lwip_netconn_do_close+0x104>)
 800ae90:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800ae94:	4922      	ldr	r1, [pc, #136]	@ (800af20 <lwip_netconn_do_close+0x108>)
 800ae96:	4823      	ldr	r0, [pc, #140]	@ (800af24 <lwip_netconn_do_close+0x10c>)
 800ae98:	f00d fa32 	bl	8018300 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2204      	movs	r2, #4
 800aea2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	61da      	str	r2, [r3, #28]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fa00 	bl	800a2b8 <lwip_netconn_do_close_internal>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d029      	beq.n	800af12 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	785b      	ldrb	r3, [r3, #1]
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d006      	beq.n	800aed6 <lwip_netconn_do_close+0xbe>
 800aec8:	4b14      	ldr	r3, [pc, #80]	@ (800af1c <lwip_netconn_do_close+0x104>)
 800aeca:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800aece:	4916      	ldr	r1, [pc, #88]	@ (800af28 <lwip_netconn_do_close+0x110>)
 800aed0:	4814      	ldr	r0, [pc, #80]	@ (800af24 <lwip_netconn_do_close+0x10c>)
 800aed2:	f00d fa15 	bl	8018300 <iprintf>
        UNLOCK_TCPIP_CORE();
 800aed6:	4815      	ldr	r0, [pc, #84]	@ (800af2c <lwip_netconn_do_close+0x114>)
 800aed8:	f00d f8c1 	bl	801805e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	330c      	adds	r3, #12
 800aee2:	2100      	movs	r1, #0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f00d f818 	bl	8017f1a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800aeea:	4810      	ldr	r0, [pc, #64]	@ (800af2c <lwip_netconn_do_close+0x114>)
 800aeec:	f00d f8a8 	bl	8018040 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	785b      	ldrb	r3, [r3, #1]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00b      	beq.n	800af12 <lwip_netconn_do_close+0xfa>
 800aefa:	4b08      	ldr	r3, [pc, #32]	@ (800af1c <lwip_netconn_do_close+0x104>)
 800aefc:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800af00:	4909      	ldr	r1, [pc, #36]	@ (800af28 <lwip_netconn_do_close+0x110>)
 800af02:	4808      	ldr	r0, [pc, #32]	@ (800af24 <lwip_netconn_do_close+0x10c>)
 800af04:	f00d f9fc 	bl	8018300 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800af08:	e003      	b.n	800af12 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	22f5      	movs	r2, #245	@ 0xf5
 800af0e:	711a      	strb	r2, [r3, #4]
 800af10:	e000      	b.n	800af14 <lwip_netconn_do_close+0xfc>
      return;
 800af12:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	080195d0 	.word	0x080195d0
 800af20:	08019974 	.word	0x08019974
 800af24:	08019614 	.word	0x08019614
 800af28:	08019990 	.word	0x08019990
 800af2c:	2000931c 	.word	0x2000931c

0800af30 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b082      	sub	sp, #8
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d013      	beq.n	800af66 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00b      	beq.n	800af5e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4618      	mov	r0, r3
 800af4c:	f001 ff0e 	bl	800cd6c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	605a      	str	r2, [r3, #4]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800af5e:	6879      	ldr	r1, [r7, #4]
 800af60:	2006      	movs	r0, #6
 800af62:	f001 f8ad 	bl	800c0c0 <memp_free>
  }
}
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
	...

0800af70 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d108      	bne.n	800af94 <netbuf_data+0x24>
 800af82:	4b1b      	ldr	r3, [pc, #108]	@ (800aff0 <netbuf_data+0x80>)
 800af84:	22c6      	movs	r2, #198	@ 0xc6
 800af86:	491b      	ldr	r1, [pc, #108]	@ (800aff4 <netbuf_data+0x84>)
 800af88:	481b      	ldr	r0, [pc, #108]	@ (800aff8 <netbuf_data+0x88>)
 800af8a:	f00d f9b9 	bl	8018300 <iprintf>
 800af8e:	f06f 030f 	mvn.w	r3, #15
 800af92:	e029      	b.n	800afe8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d108      	bne.n	800afac <netbuf_data+0x3c>
 800af9a:	4b15      	ldr	r3, [pc, #84]	@ (800aff0 <netbuf_data+0x80>)
 800af9c:	22c7      	movs	r2, #199	@ 0xc7
 800af9e:	4917      	ldr	r1, [pc, #92]	@ (800affc <netbuf_data+0x8c>)
 800afa0:	4815      	ldr	r0, [pc, #84]	@ (800aff8 <netbuf_data+0x88>)
 800afa2:	f00d f9ad 	bl	8018300 <iprintf>
 800afa6:	f06f 030f 	mvn.w	r3, #15
 800afaa:	e01d      	b.n	800afe8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d108      	bne.n	800afc4 <netbuf_data+0x54>
 800afb2:	4b0f      	ldr	r3, [pc, #60]	@ (800aff0 <netbuf_data+0x80>)
 800afb4:	22c8      	movs	r2, #200	@ 0xc8
 800afb6:	4912      	ldr	r1, [pc, #72]	@ (800b000 <netbuf_data+0x90>)
 800afb8:	480f      	ldr	r0, [pc, #60]	@ (800aff8 <netbuf_data+0x88>)
 800afba:	f00d f9a1 	bl	8018300 <iprintf>
 800afbe:	f06f 030f 	mvn.w	r3, #15
 800afc2:	e011      	b.n	800afe8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <netbuf_data+0x62>
    return ERR_BUF;
 800afcc:	f06f 0301 	mvn.w	r3, #1
 800afd0:	e00a      	b.n	800afe8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	685b      	ldr	r3, [r3, #4]
 800afd6:	685a      	ldr	r2, [r3, #4]
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	895a      	ldrh	r2, [r3, #10]
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800afe6:	2300      	movs	r3, #0
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	08019b28 	.word	0x08019b28
 800aff4:	08019c30 	.word	0x08019c30
 800aff8:	08019b78 	.word	0x08019b78
 800affc:	08019c4c 	.word	0x08019c4c
 800b000:	08019c6c 	.word	0x08019c6c

0800b004 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d108      	bne.n	800b024 <netbuf_next+0x20>
 800b012:	4b11      	ldr	r3, [pc, #68]	@ (800b058 <netbuf_next+0x54>)
 800b014:	22e0      	movs	r2, #224	@ 0xe0
 800b016:	4911      	ldr	r1, [pc, #68]	@ (800b05c <netbuf_next+0x58>)
 800b018:	4811      	ldr	r0, [pc, #68]	@ (800b060 <netbuf_next+0x5c>)
 800b01a:	f00d f971 	bl	8018300 <iprintf>
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295
 800b022:	e014      	b.n	800b04e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	685b      	ldr	r3, [r3, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d102      	bne.n	800b034 <netbuf_next+0x30>
    return -1;
 800b02e:	f04f 33ff 	mov.w	r3, #4294967295
 800b032:	e00c      	b.n	800b04e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <netbuf_next+0x48>
    return 1;
 800b048:	2301      	movs	r3, #1
 800b04a:	e000      	b.n	800b04e <netbuf_next+0x4a>
  }
  return 0;
 800b04c:	2300      	movs	r3, #0
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	08019b28 	.word	0x08019b28
 800b05c:	08019c88 	.word	0x08019c88
 800b060:	08019b78 	.word	0x08019b78

0800b064 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b06e:	f007 fef9 	bl	8012e64 <sys_timeouts_sleeptime>
 800b072:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07a:	d10b      	bne.n	800b094 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b07c:	4813      	ldr	r0, [pc, #76]	@ (800b0cc <tcpip_timeouts_mbox_fetch+0x68>)
 800b07e:	f00c ffee 	bl	801805e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b082:	2200      	movs	r2, #0
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f00c fea6 	bl	8017dd8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b08c:	480f      	ldr	r0, [pc, #60]	@ (800b0cc <tcpip_timeouts_mbox_fetch+0x68>)
 800b08e:	f00c ffd7 	bl	8018040 <sys_mutex_lock>
    return;
 800b092:	e018      	b.n	800b0c6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d102      	bne.n	800b0a0 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b09a:	f007 fea9 	bl	8012df0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b09e:	e7e6      	b.n	800b06e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b0a0:	480a      	ldr	r0, [pc, #40]	@ (800b0cc <tcpip_timeouts_mbox_fetch+0x68>)
 800b0a2:	f00c ffdc 	bl	801805e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b0a6:	68fa      	ldr	r2, [r7, #12]
 800b0a8:	6839      	ldr	r1, [r7, #0]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f00c fe94 	bl	8017dd8 <sys_arch_mbox_fetch>
 800b0b0:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b0b2:	4806      	ldr	r0, [pc, #24]	@ (800b0cc <tcpip_timeouts_mbox_fetch+0x68>)
 800b0b4:	f00c ffc4 	bl	8018040 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0be:	d102      	bne.n	800b0c6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b0c0:	f007 fe96 	bl	8012df0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b0c4:	e7d3      	b.n	800b06e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	2000931c 	.word	0x2000931c

0800b0d0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b0d8:	4810      	ldr	r0, [pc, #64]	@ (800b11c <tcpip_thread+0x4c>)
 800b0da:	f00c ffb1 	bl	8018040 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b0de:	4b10      	ldr	r3, [pc, #64]	@ (800b120 <tcpip_thread+0x50>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d005      	beq.n	800b0f2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b0e6:	4b0e      	ldr	r3, [pc, #56]	@ (800b120 <tcpip_thread+0x50>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a0e      	ldr	r2, [pc, #56]	@ (800b124 <tcpip_thread+0x54>)
 800b0ec:	6812      	ldr	r2, [r2, #0]
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b0f2:	f107 030c 	add.w	r3, r7, #12
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	480b      	ldr	r0, [pc, #44]	@ (800b128 <tcpip_thread+0x58>)
 800b0fa:	f7ff ffb3 	bl	800b064 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b104:	4b09      	ldr	r3, [pc, #36]	@ (800b12c <tcpip_thread+0x5c>)
 800b106:	2291      	movs	r2, #145	@ 0x91
 800b108:	4909      	ldr	r1, [pc, #36]	@ (800b130 <tcpip_thread+0x60>)
 800b10a:	480a      	ldr	r0, [pc, #40]	@ (800b134 <tcpip_thread+0x64>)
 800b10c:	f00d f8f8 	bl	8018300 <iprintf>
      continue;
 800b110:	e003      	b.n	800b11a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4618      	mov	r0, r3
 800b116:	f000 f80f 	bl	800b138 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b11a:	e7ea      	b.n	800b0f2 <tcpip_thread+0x22>
 800b11c:	2000931c 	.word	0x2000931c
 800b120:	20009310 	.word	0x20009310
 800b124:	20009314 	.word	0x20009314
 800b128:	20009318 	.word	0x20009318
 800b12c:	08019cc0 	.word	0x08019cc0
 800b130:	08019cf0 	.word	0x08019cf0
 800b134:	08019d10 	.word	0x08019d10

0800b138 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d026      	beq.n	800b196 <tcpip_thread_handle_msg+0x5e>
 800b148:	2b02      	cmp	r3, #2
 800b14a:	dc2b      	bgt.n	800b1a4 <tcpip_thread_handle_msg+0x6c>
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <tcpip_thread_handle_msg+0x1e>
 800b150:	2b01      	cmp	r3, #1
 800b152:	d015      	beq.n	800b180 <tcpip_thread_handle_msg+0x48>
 800b154:	e026      	b.n	800b1a4 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68db      	ldr	r3, [r3, #12]
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	6850      	ldr	r0, [r2, #4]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	6892      	ldr	r2, [r2, #8]
 800b162:	4611      	mov	r1, r2
 800b164:	4798      	blx	r3
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d004      	beq.n	800b176 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fdfb 	bl	800cd6c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b176:	6879      	ldr	r1, [r7, #4]
 800b178:	2009      	movs	r0, #9
 800b17a:	f000 ffa1 	bl	800c0c0 <memp_free>
      break;
 800b17e:	e018      	b.n	800b1b2 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6892      	ldr	r2, [r2, #8]
 800b188:	4610      	mov	r0, r2
 800b18a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b18c:	6879      	ldr	r1, [r7, #4]
 800b18e:	2008      	movs	r0, #8
 800b190:	f000 ff96 	bl	800c0c0 <memp_free>
      break;
 800b194:	e00d      	b.n	800b1b2 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	687a      	ldr	r2, [r7, #4]
 800b19c:	6892      	ldr	r2, [r2, #8]
 800b19e:	4610      	mov	r0, r2
 800b1a0:	4798      	blx	r3
      break;
 800b1a2:	e006      	b.n	800b1b2 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b1a4:	4b05      	ldr	r3, [pc, #20]	@ (800b1bc <tcpip_thread_handle_msg+0x84>)
 800b1a6:	22cf      	movs	r2, #207	@ 0xcf
 800b1a8:	4905      	ldr	r1, [pc, #20]	@ (800b1c0 <tcpip_thread_handle_msg+0x88>)
 800b1aa:	4806      	ldr	r0, [pc, #24]	@ (800b1c4 <tcpip_thread_handle_msg+0x8c>)
 800b1ac:	f00d f8a8 	bl	8018300 <iprintf>
      break;
 800b1b0:	bf00      	nop
  }
}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	08019cc0 	.word	0x08019cc0
 800b1c0:	08019cf0 	.word	0x08019cf0
 800b1c4:	08019d10 	.word	0x08019d10

0800b1c8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b1d4:	481a      	ldr	r0, [pc, #104]	@ (800b240 <tcpip_inpkt+0x78>)
 800b1d6:	f00c fe5a 	bl	8017e8e <sys_mbox_valid>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d105      	bne.n	800b1ec <tcpip_inpkt+0x24>
 800b1e0:	4b18      	ldr	r3, [pc, #96]	@ (800b244 <tcpip_inpkt+0x7c>)
 800b1e2:	22fc      	movs	r2, #252	@ 0xfc
 800b1e4:	4918      	ldr	r1, [pc, #96]	@ (800b248 <tcpip_inpkt+0x80>)
 800b1e6:	4819      	ldr	r0, [pc, #100]	@ (800b24c <tcpip_inpkt+0x84>)
 800b1e8:	f00d f88a 	bl	8018300 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b1ec:	2009      	movs	r0, #9
 800b1ee:	f000 ff15 	bl	800c01c <memp_malloc>
 800b1f2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d102      	bne.n	800b200 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b1fe:	e01a      	b.n	800b236 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b218:	6979      	ldr	r1, [r7, #20]
 800b21a:	4809      	ldr	r0, [pc, #36]	@ (800b240 <tcpip_inpkt+0x78>)
 800b21c:	f00c fdc2 	bl	8017da4 <sys_mbox_trypost>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d006      	beq.n	800b234 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b226:	6979      	ldr	r1, [r7, #20]
 800b228:	2009      	movs	r0, #9
 800b22a:	f000 ff49 	bl	800c0c0 <memp_free>
    return ERR_MEM;
 800b22e:	f04f 33ff 	mov.w	r3, #4294967295
 800b232:	e000      	b.n	800b236 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b234:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b236:	4618      	mov	r0, r3
 800b238:	3718      	adds	r7, #24
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}
 800b23e:	bf00      	nop
 800b240:	20009318 	.word	0x20009318
 800b244:	08019cc0 	.word	0x08019cc0
 800b248:	08019d38 	.word	0x08019d38
 800b24c:	08019d10 	.word	0x08019d10

0800b250 <tcpip_input>:
 *          to an IP header (if inp doesn't have NETIF_FLAG_ETHARP or
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b082      	sub	sp, #8
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800b260:	f003 0318 	and.w	r3, r3, #24
 800b264:	2b00      	cmp	r3, #0
 800b266:	d006      	beq.n	800b276 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b268:	4a08      	ldr	r2, [pc, #32]	@ (800b28c <tcpip_input+0x3c>)
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f7ff ffab 	bl	800b1c8 <tcpip_inpkt>
 800b272:	4603      	mov	r3, r0
 800b274:	e005      	b.n	800b282 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b276:	4a06      	ldr	r2, [pc, #24]	@ (800b290 <tcpip_input+0x40>)
 800b278:	6839      	ldr	r1, [r7, #0]
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f7ff ffa4 	bl	800b1c8 <tcpip_inpkt>
 800b280:	4603      	mov	r3, r0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3708      	adds	r7, #8
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	08017b65 	.word	0x08017b65
 800b290:	0801692d 	.word	0x0801692d

0800b294 <tcpip_callback>:
 *
 * @see tcpip_try_callback
 */
err_t
tcpip_callback(tcpip_callback_fn function, void *ctx)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b29e:	4814      	ldr	r0, [pc, #80]	@ (800b2f0 <tcpip_callback+0x5c>)
 800b2a0:	f00c fdf5 	bl	8017e8e <sys_mbox_valid>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <tcpip_callback+0x24>
 800b2aa:	4b12      	ldr	r3, [pc, #72]	@ (800b2f4 <tcpip_callback+0x60>)
 800b2ac:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800b2b0:	4911      	ldr	r1, [pc, #68]	@ (800b2f8 <tcpip_callback+0x64>)
 800b2b2:	4812      	ldr	r0, [pc, #72]	@ (800b2fc <tcpip_callback+0x68>)
 800b2b4:	f00d f824 	bl	8018300 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b2b8:	2008      	movs	r0, #8
 800b2ba:	f000 feaf 	bl	800c01c <memp_malloc>
 800b2be:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <tcpip_callback+0x38>
    return ERR_MEM;
 800b2c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ca:	e00d      	b.n	800b2e8 <tcpip_callback+0x54>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	609a      	str	r2, [r3, #8]

  sys_mbox_post(&tcpip_mbox, msg);
 800b2de:	68f9      	ldr	r1, [r7, #12]
 800b2e0:	4803      	ldr	r0, [pc, #12]	@ (800b2f0 <tcpip_callback+0x5c>)
 800b2e2:	f00c fd49 	bl	8017d78 <sys_mbox_post>
  return ERR_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	20009318 	.word	0x20009318
 800b2f4:	08019cc0 	.word	0x08019cc0
 800b2f8:	08019d38 	.word	0x08019d38
 800b2fc:	08019d10 	.word	0x08019d10

0800b300 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b30c:	4806      	ldr	r0, [pc, #24]	@ (800b328 <tcpip_send_msg_wait_sem+0x28>)
 800b30e:	f00c fe97 	bl	8018040 <sys_mutex_lock>
  fn(apimsg);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	68b8      	ldr	r0, [r7, #8]
 800b316:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b318:	4803      	ldr	r0, [pc, #12]	@ (800b328 <tcpip_send_msg_wait_sem+0x28>)
 800b31a:	f00c fea0 	bl	801805e <sys_mutex_unlock>
  return ERR_OK;
 800b31e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	2000931c 	.word	0x2000931c

0800b32c <tcpip_init>:
 *
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af02      	add	r7, sp, #8
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b336:	f000 f9ea 	bl	800b70e <lwip_init>

  tcpip_init_done = initfunc;
 800b33a:	4a17      	ldr	r2, [pc, #92]	@ (800b398 <tcpip_init+0x6c>)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b340:	4a16      	ldr	r2, [pc, #88]	@ (800b39c <tcpip_init+0x70>)
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b346:	2106      	movs	r1, #6
 800b348:	4815      	ldr	r0, [pc, #84]	@ (800b3a0 <tcpip_init+0x74>)
 800b34a:	f00c fce1 	bl	8017d10 <sys_mbox_new>
 800b34e:	4603      	mov	r3, r0
 800b350:	2b00      	cmp	r3, #0
 800b352:	d006      	beq.n	800b362 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b354:	4b13      	ldr	r3, [pc, #76]	@ (800b3a4 <tcpip_init+0x78>)
 800b356:	f240 225f 	movw	r2, #607	@ 0x25f
 800b35a:	4913      	ldr	r1, [pc, #76]	@ (800b3a8 <tcpip_init+0x7c>)
 800b35c:	4813      	ldr	r0, [pc, #76]	@ (800b3ac <tcpip_init+0x80>)
 800b35e:	f00c ffcf 	bl	8018300 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b362:	4813      	ldr	r0, [pc, #76]	@ (800b3b0 <tcpip_init+0x84>)
 800b364:	f00c fe50 	bl	8018008 <sys_mutex_new>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d006      	beq.n	800b37c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <tcpip_init+0x78>)
 800b370:	f240 2263 	movw	r2, #611	@ 0x263
 800b374:	490f      	ldr	r1, [pc, #60]	@ (800b3b4 <tcpip_init+0x88>)
 800b376:	480d      	ldr	r0, [pc, #52]	@ (800b3ac <tcpip_init+0x80>)
 800b378:	f00c ffc2 	bl	8018300 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b37c:	2300      	movs	r3, #0
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800b384:	2200      	movs	r2, #0
 800b386:	490c      	ldr	r1, [pc, #48]	@ (800b3b8 <tcpip_init+0x8c>)
 800b388:	480c      	ldr	r0, [pc, #48]	@ (800b3bc <tcpip_init+0x90>)
 800b38a:	f00c fe75 	bl	8018078 <sys_thread_new>
}
 800b38e:	bf00      	nop
 800b390:	3708      	adds	r7, #8
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20009310 	.word	0x20009310
 800b39c:	20009314 	.word	0x20009314
 800b3a0:	20009318 	.word	0x20009318
 800b3a4:	08019cc0 	.word	0x08019cc0
 800b3a8:	08019d48 	.word	0x08019d48
 800b3ac:	08019d10 	.word	0x08019d10
 800b3b0:	2000931c 	.word	0x2000931c
 800b3b4:	08019d6c 	.word	0x08019d6c
 800b3b8:	0800b0d1 	.word	0x0800b0d1
 800b3bc:	08019d90 	.word	0x08019d90

0800b3c0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800b3ca:	88fb      	ldrh	r3, [r7, #6]
 800b3cc:	021b      	lsls	r3, r3, #8
 800b3ce:	b21a      	sxth	r2, r3
 800b3d0:	88fb      	ldrh	r3, [r7, #6]
 800b3d2:	0a1b      	lsrs	r3, r3, #8
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	b21b      	sxth	r3, r3
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	b21b      	sxth	r3, r3
 800b3dc:	b29b      	uxth	r3, r3
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b083      	sub	sp, #12
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	061a      	lsls	r2, r3, #24
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b3fe:	431a      	orrs	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	0a1b      	lsrs	r3, r3, #8
 800b404:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b408:	431a      	orrs	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	0e1b      	lsrs	r3, r3, #24
 800b40e:	4313      	orrs	r3, r2
}
 800b410:	4618      	mov	r0, r3
 800b412:	370c      	adds	r7, #12
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800b41c:	b480      	push	{r7}
 800b41e:	b089      	sub	sp, #36	@ 0x24
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800b42a:	2300      	movs	r3, #0
 800b42c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800b42e:	2300      	movs	r3, #0
 800b430:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00d      	beq.n	800b45c <lwip_standard_chksum+0x40>
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	dd0a      	ble.n	800b45c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800b446:	69fa      	ldr	r2, [r7, #28]
 800b448:	1c53      	adds	r3, r2, #1
 800b44a:	61fb      	str	r3, [r7, #28]
 800b44c:	f107 030e 	add.w	r3, r7, #14
 800b450:	3301      	adds	r3, #1
 800b452:	7812      	ldrb	r2, [r2, #0]
 800b454:	701a      	strb	r2, [r3, #0]
    len--;
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	3b01      	subs	r3, #1
 800b45a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800b45c:	69fb      	ldr	r3, [r7, #28]
 800b45e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800b460:	e00a      	b.n	800b478 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	1c9a      	adds	r2, r3, #2
 800b466:	61ba      	str	r2, [r7, #24]
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	461a      	mov	r2, r3
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	4413      	add	r3, r2
 800b470:	617b      	str	r3, [r7, #20]
    len -= 2;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	3b02      	subs	r3, #2
 800b476:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	dcf1      	bgt.n	800b462 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	dd04      	ble.n	800b48e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800b484:	f107 030e 	add.w	r3, r7, #14
 800b488:	69ba      	ldr	r2, [r7, #24]
 800b48a:	7812      	ldrb	r2, [r2, #0]
 800b48c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800b48e:	89fb      	ldrh	r3, [r7, #14]
 800b490:	461a      	mov	r2, r3
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	4413      	add	r3, r2
 800b496:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800b498:	697b      	ldr	r3, [r7, #20]
 800b49a:	0c1a      	lsrs	r2, r3, #16
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	4413      	add	r3, r2
 800b4a2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	0c1a      	lsrs	r2, r3, #16
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	b29b      	uxth	r3, r3
 800b4ac:	4413      	add	r3, r2
 800b4ae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d007      	beq.n	800b4c6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	021b      	lsls	r3, r3, #8
 800b4ba:	b29a      	uxth	r2, r3
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	0a1b      	lsrs	r3, r3, #8
 800b4c0:	b2db      	uxtb	r3, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	b29b      	uxth	r3, r3
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3724      	adds	r7, #36	@ 0x24
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr

0800b4d6 <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b086      	sub	sp, #24
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	60f8      	str	r0, [r7, #12]
 800b4de:	607b      	str	r3, [r7, #4]
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	72fb      	strb	r3, [r7, #11]
 800b4e4:	4613      	mov	r3, r2
 800b4e6:	813b      	strh	r3, [r7, #8]
  struct pbuf *q;
  int swapped = 0;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	613b      	str	r3, [r7, #16]

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	617b      	str	r3, [r7, #20]
 800b4f0:	e02b      	b.n	800b54a <inet_cksum_pseudo_base+0x74>
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	685a      	ldr	r2, [r3, #4]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	895b      	ldrh	r3, [r3, #10]
 800b4fa:	4619      	mov	r1, r3
 800b4fc:	4610      	mov	r0, r2
 800b4fe:	f7ff ff8d 	bl	800b41c <lwip_standard_chksum>
 800b502:	4603      	mov	r3, r0
 800b504:	461a      	mov	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4413      	add	r3, r2
 800b50a:	607b      	str	r3, [r7, #4]
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	0c1a      	lsrs	r2, r3, #16
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	b29b      	uxth	r3, r3
 800b514:	4413      	add	r3, r2
 800b516:	607b      	str	r3, [r7, #4]
    if (q->len % 2 != 0) {
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	895b      	ldrh	r3, [r3, #10]
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	b29b      	uxth	r3, r3
 800b522:	2b00      	cmp	r3, #0
 800b524:	d00e      	beq.n	800b544 <inet_cksum_pseudo_base+0x6e>
      swapped = !swapped;
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	bf0c      	ite	eq
 800b52c:	2301      	moveq	r3, #1
 800b52e:	2300      	movne	r3, #0
 800b530:	b2db      	uxtb	r3, r3
 800b532:	613b      	str	r3, [r7, #16]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	021b      	lsls	r3, r3, #8
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	0a1b      	lsrs	r3, r3, #8
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	4313      	orrs	r3, r2
 800b542:	607b      	str	r3, [r7, #4]
  for (q = p; q != NULL; q = q->next) {
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1d0      	bne.n	800b4f2 <inet_cksum_pseudo_base+0x1c>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <inet_cksum_pseudo_base+0x90>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	021b      	lsls	r3, r3, #8
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	b2db      	uxtb	r3, r3
 800b562:	4313      	orrs	r3, r2
 800b564:	607b      	str	r3, [r7, #4]
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 800b566:	7afb      	ldrb	r3, [r7, #11]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff ff28 	bl	800b3c0 <lwip_htons>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	4413      	add	r3, r2
 800b578:	607b      	str	r3, [r7, #4]
  acc += (u32_t)lwip_htons(proto_len);
 800b57a:	893b      	ldrh	r3, [r7, #8]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f7ff ff1f 	bl	800b3c0 <lwip_htons>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	4413      	add	r3, r2
 800b58a:	607b      	str	r3, [r7, #4]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	0c1a      	lsrs	r2, r3, #16
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	b29b      	uxth	r3, r3
 800b594:	4413      	add	r3, r2
 800b596:	607b      	str	r3, [r7, #4]
  acc = FOLD_U32T(acc);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	0c1a      	lsrs	r2, r3, #16
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	b29b      	uxth	r3, r3
 800b5a0:	4413      	add	r3, r2
 800b5a2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	43db      	mvns	r3, r3
 800b5aa:	b29b      	uxth	r3, r3
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	607b      	str	r3, [r7, #4]
 800b5be:	460b      	mov	r3, r1
 800b5c0:	72fb      	strb	r3, [r7, #11]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	813b      	strh	r3, [r7, #8]
  u32_t acc;
  u32_t addr;

  addr = ip4_addr_get_u32(src);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	617b      	str	r3, [r7, #20]
  acc = (addr & 0xffffUL);
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	0c1b      	lsrs	r3, r3, #16
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	4413      	add	r3, r2
 800b5da:	613b      	str	r3, [r7, #16]
  addr = ip4_addr_get_u32(dest);
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	617b      	str	r3, [r7, #20]
  acc = (u32_t)(acc + (addr & 0xffffUL));
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	613b      	str	r3, [r7, #16]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	0c1b      	lsrs	r3, r3, #16
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	4413      	add	r3, r2
 800b5f4:	613b      	str	r3, [r7, #16]
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	0c1a      	lsrs	r2, r3, #16
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	b29b      	uxth	r3, r3
 800b5fe:	4413      	add	r3, r2
 800b600:	613b      	str	r3, [r7, #16]
  acc = FOLD_U32T(acc);
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	0c1a      	lsrs	r2, r3, #16
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	4413      	add	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 800b60e:	893a      	ldrh	r2, [r7, #8]
 800b610:	7af9      	ldrb	r1, [r7, #11]
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f7ff ff5e 	bl	800b4d6 <inet_cksum_pseudo_base>
 800b61a:	4603      	mov	r3, r0
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	3718      	adds	r7, #24
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b086      	sub	sp, #24
 800b628:	af02      	add	r7, sp, #8
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	607b      	str	r3, [r7, #4]
 800b62e:	460b      	mov	r3, r1
 800b630:	72fb      	strb	r3, [r7, #11]
 800b632:	4613      	mov	r3, r2
 800b634:	813b      	strh	r3, [r7, #8]
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 800b636:	893a      	ldrh	r2, [r7, #8]
 800b638:	7af9      	ldrb	r1, [r7, #11]
 800b63a:	69bb      	ldr	r3, [r7, #24]
 800b63c:	9300      	str	r3, [sp, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f7ff ffb7 	bl	800b5b4 <inet_chksum_pseudo>
 800b646:	4603      	mov	r3, r0
  }
#endif /* LWIP_IPV4 */
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3710      	adds	r7, #16
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800b65c:	887b      	ldrh	r3, [r7, #2]
 800b65e:	4619      	mov	r1, r3
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f7ff fedb 	bl	800b41c <lwip_standard_chksum>
 800b666:	4603      	mov	r3, r0
 800b668:	43db      	mvns	r3, r3
 800b66a:	b29b      	uxth	r3, r3
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	613b      	str	r3, [r7, #16]
 800b688:	e02b      	b.n	800b6e2 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	895b      	ldrh	r3, [r3, #10]
 800b692:	4619      	mov	r1, r3
 800b694:	4610      	mov	r0, r2
 800b696:	f7ff fec1 	bl	800b41c <lwip_standard_chksum>
 800b69a:	4603      	mov	r3, r0
 800b69c:	461a      	mov	r2, r3
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	0c1a      	lsrs	r2, r3, #16
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	4413      	add	r3, r2
 800b6ae:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	895b      	ldrh	r3, [r3, #10]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00e      	beq.n	800b6dc <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	bf0c      	ite	eq
 800b6c4:	2301      	moveq	r3, #1
 800b6c6:	2300      	movne	r3, #0
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	021b      	lsls	r3, r3, #8
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1d0      	bne.n	800b68a <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d007      	beq.n	800b6fe <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	021b      	lsls	r3, r3, #8
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	697b      	ldr	r3, [r7, #20]
 800b6f6:	0a1b      	lsrs	r3, r3, #8
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	b29b      	uxth	r3, r3
 800b702:	43db      	mvns	r3, r3
 800b704:	b29b      	uxth	r3, r3
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b082      	sub	sp, #8
 800b712:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800b714:	2300      	movs	r3, #0
 800b716:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800b718:	f00c fc68 	bl	8017fec <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800b71c:	f000 f8d4 	bl	800b8c8 <mem_init>
  memp_init();
 800b720:	f000 fc30 	bl	800bf84 <memp_init>
  pbuf_init();
  netif_init();
 800b724:	f000 fcf6 	bl	800c114 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800b728:	f007 fbd4 	bl	8012ed4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800b72c:	f001 fdc8 	bl	800d2c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800b730:	f007 fb16 	bl	8012d60 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b746:	4b05      	ldr	r3, [pc, #20]	@ (800b75c <ptr_to_mem+0x20>)
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	88fb      	ldrh	r3, [r7, #6]
 800b74c:	4413      	add	r3, r2
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	2001134c 	.word	0x2001134c

0800b760 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b768:	4b05      	ldr	r3, [pc, #20]	@ (800b780 <mem_to_ptr+0x20>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	b29b      	uxth	r3, r3
}
 800b772:	4618      	mov	r0, r3
 800b774:	370c      	adds	r7, #12
 800b776:	46bd      	mov	sp, r7
 800b778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	2001134c 	.word	0x2001134c

0800b784 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b784:	b590      	push	{r4, r7, lr}
 800b786:	b085      	sub	sp, #20
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b78c:	4b45      	ldr	r3, [pc, #276]	@ (800b8a4 <plug_holes+0x120>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	429a      	cmp	r2, r3
 800b794:	d206      	bcs.n	800b7a4 <plug_holes+0x20>
 800b796:	4b44      	ldr	r3, [pc, #272]	@ (800b8a8 <plug_holes+0x124>)
 800b798:	f240 12df 	movw	r2, #479	@ 0x1df
 800b79c:	4943      	ldr	r1, [pc, #268]	@ (800b8ac <plug_holes+0x128>)
 800b79e:	4844      	ldr	r0, [pc, #272]	@ (800b8b0 <plug_holes+0x12c>)
 800b7a0:	f00c fdae 	bl	8018300 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b7a4:	4b43      	ldr	r3, [pc, #268]	@ (800b8b4 <plug_holes+0x130>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d306      	bcc.n	800b7bc <plug_holes+0x38>
 800b7ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b8a8 <plug_holes+0x124>)
 800b7b0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b7b4:	4940      	ldr	r1, [pc, #256]	@ (800b8b8 <plug_holes+0x134>)
 800b7b6:	483e      	ldr	r0, [pc, #248]	@ (800b8b0 <plug_holes+0x12c>)
 800b7b8:	f00c fda2 	bl	8018300 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	791b      	ldrb	r3, [r3, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d006      	beq.n	800b7d2 <plug_holes+0x4e>
 800b7c4:	4b38      	ldr	r3, [pc, #224]	@ (800b8a8 <plug_holes+0x124>)
 800b7c6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b7ca:	493c      	ldr	r1, [pc, #240]	@ (800b8bc <plug_holes+0x138>)
 800b7cc:	4838      	ldr	r0, [pc, #224]	@ (800b8b0 <plug_holes+0x12c>)
 800b7ce:	f00c fd97 	bl	8018300 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	881b      	ldrh	r3, [r3, #0]
 800b7d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7da:	d906      	bls.n	800b7ea <plug_holes+0x66>
 800b7dc:	4b32      	ldr	r3, [pc, #200]	@ (800b8a8 <plug_holes+0x124>)
 800b7de:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b7e2:	4937      	ldr	r1, [pc, #220]	@ (800b8c0 <plug_holes+0x13c>)
 800b7e4:	4832      	ldr	r0, [pc, #200]	@ (800b8b0 <plug_holes+0x12c>)
 800b7e6:	f00c fd8b 	bl	8018300 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7ff ffa4 	bl	800b73c <ptr_to_mem>
 800b7f4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d024      	beq.n	800b848 <plug_holes+0xc4>
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	791b      	ldrb	r3, [r3, #4]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d120      	bne.n	800b848 <plug_holes+0xc4>
 800b806:	4b2b      	ldr	r3, [pc, #172]	@ (800b8b4 <plug_holes+0x130>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	429a      	cmp	r2, r3
 800b80e:	d01b      	beq.n	800b848 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b810:	4b2c      	ldr	r3, [pc, #176]	@ (800b8c4 <plug_holes+0x140>)
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	429a      	cmp	r2, r3
 800b818:	d102      	bne.n	800b820 <plug_holes+0x9c>
      lfree = mem;
 800b81a:	4a2a      	ldr	r2, [pc, #168]	@ (800b8c4 <plug_holes+0x140>)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	881a      	ldrh	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	881b      	ldrh	r3, [r3, #0]
 800b82c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b830:	d00a      	beq.n	800b848 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	881b      	ldrh	r3, [r3, #0]
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff ff80 	bl	800b73c <ptr_to_mem>
 800b83c:	4604      	mov	r4, r0
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f7ff ff8e 	bl	800b760 <mem_to_ptr>
 800b844:	4603      	mov	r3, r0
 800b846:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	885b      	ldrh	r3, [r3, #2]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff ff75 	bl	800b73c <ptr_to_mem>
 800b852:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b854:	68ba      	ldr	r2, [r7, #8]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d01f      	beq.n	800b89c <plug_holes+0x118>
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	791b      	ldrb	r3, [r3, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d11b      	bne.n	800b89c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b864:	4b17      	ldr	r3, [pc, #92]	@ (800b8c4 <plug_holes+0x140>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d102      	bne.n	800b874 <plug_holes+0xf0>
      lfree = pmem;
 800b86e:	4a15      	ldr	r2, [pc, #84]	@ (800b8c4 <plug_holes+0x140>)
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	881a      	ldrh	r2, [r3, #0]
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	881b      	ldrh	r3, [r3, #0]
 800b880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b884:	d00a      	beq.n	800b89c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	881b      	ldrh	r3, [r3, #0]
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7ff ff56 	bl	800b73c <ptr_to_mem>
 800b890:	4604      	mov	r4, r0
 800b892:	68b8      	ldr	r0, [r7, #8]
 800b894:	f7ff ff64 	bl	800b760 <mem_to_ptr>
 800b898:	4603      	mov	r3, r0
 800b89a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b89c:	bf00      	nop
 800b89e:	3714      	adds	r7, #20
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd90      	pop	{r4, r7, pc}
 800b8a4:	2001134c 	.word	0x2001134c
 800b8a8:	08019da4 	.word	0x08019da4
 800b8ac:	08019dd4 	.word	0x08019dd4
 800b8b0:	08019dec 	.word	0x08019dec
 800b8b4:	20011350 	.word	0x20011350
 800b8b8:	08019e14 	.word	0x08019e14
 800b8bc:	08019e30 	.word	0x08019e30
 800b8c0:	08019e4c 	.word	0x08019e4c
 800b8c4:	20011358 	.word	0x20011358

0800b8c8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b082      	sub	sp, #8
 800b8cc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b8ce:	4b1f      	ldr	r3, [pc, #124]	@ (800b94c <mem_init+0x84>)
 800b8d0:	3303      	adds	r3, #3
 800b8d2:	f023 0303 	bic.w	r3, r3, #3
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	4b1d      	ldr	r3, [pc, #116]	@ (800b950 <mem_init+0x88>)
 800b8da:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b8dc:	4b1c      	ldr	r3, [pc, #112]	@ (800b950 <mem_init+0x88>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b8e8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b8f6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800b8fa:	f7ff ff1f 	bl	800b73c <ptr_to_mem>
 800b8fe:	4603      	mov	r3, r0
 800b900:	4a14      	ldr	r2, [pc, #80]	@ (800b954 <mem_init+0x8c>)
 800b902:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b904:	4b13      	ldr	r3, [pc, #76]	@ (800b954 <mem_init+0x8c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2201      	movs	r2, #1
 800b90a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b90c:	4b11      	ldr	r3, [pc, #68]	@ (800b954 <mem_init+0x8c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b914:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b916:	4b0f      	ldr	r3, [pc, #60]	@ (800b954 <mem_init+0x8c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800b91e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b920:	4b0b      	ldr	r3, [pc, #44]	@ (800b950 <mem_init+0x88>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a0c      	ldr	r2, [pc, #48]	@ (800b958 <mem_init+0x90>)
 800b926:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b928:	480c      	ldr	r0, [pc, #48]	@ (800b95c <mem_init+0x94>)
 800b92a:	f00c fb6d 	bl	8018008 <sys_mutex_new>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d006      	beq.n	800b942 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b934:	4b0a      	ldr	r3, [pc, #40]	@ (800b960 <mem_init+0x98>)
 800b936:	f240 221f 	movw	r2, #543	@ 0x21f
 800b93a:	490a      	ldr	r1, [pc, #40]	@ (800b964 <mem_init+0x9c>)
 800b93c:	480a      	ldr	r0, [pc, #40]	@ (800b968 <mem_init+0xa0>)
 800b93e:	f00c fcdf 	bl	8018300 <iprintf>
  }
}
 800b942:	bf00      	nop
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	20009338 	.word	0x20009338
 800b950:	2001134c 	.word	0x2001134c
 800b954:	20011350 	.word	0x20011350
 800b958:	20011358 	.word	0x20011358
 800b95c:	20011354 	.word	0x20011354
 800b960:	08019da4 	.word	0x08019da4
 800b964:	08019e78 	.word	0x08019e78
 800b968:	08019dec 	.word	0x08019dec

0800b96c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b086      	sub	sp, #24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f7ff fef3 	bl	800b760 <mem_to_ptr>
 800b97a:	4603      	mov	r3, r0
 800b97c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f7ff feda 	bl	800b73c <ptr_to_mem>
 800b988:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	885b      	ldrh	r3, [r3, #2]
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fed4 	bl	800b73c <ptr_to_mem>
 800b994:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	881b      	ldrh	r3, [r3, #0]
 800b99a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b99e:	d818      	bhi.n	800b9d2 <mem_link_valid+0x66>
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	885b      	ldrh	r3, [r3, #2]
 800b9a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9a8:	d813      	bhi.n	800b9d2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800b9ae:	8afa      	ldrh	r2, [r7, #22]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d004      	beq.n	800b9be <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	8afa      	ldrh	r2, [r7, #22]
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d109      	bne.n	800b9d2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9be:	4b08      	ldr	r3, [pc, #32]	@ (800b9e0 <mem_link_valid+0x74>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800b9c2:	693a      	ldr	r2, [r7, #16]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d006      	beq.n	800b9d6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	885b      	ldrh	r3, [r3, #2]
 800b9cc:	8afa      	ldrh	r2, [r7, #22]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d001      	beq.n	800b9d6 <mem_link_valid+0x6a>
    return 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	e000      	b.n	800b9d8 <mem_link_valid+0x6c>
  }
  return 1;
 800b9d6:	2301      	movs	r3, #1
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	20011350 	.word	0x20011350

0800b9e4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b088      	sub	sp, #32
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d070      	beq.n	800bad4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f003 0303 	and.w	r3, r3, #3
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00d      	beq.n	800ba18 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800b9fc:	4b37      	ldr	r3, [pc, #220]	@ (800badc <mem_free+0xf8>)
 800b9fe:	f240 2273 	movw	r2, #627	@ 0x273
 800ba02:	4937      	ldr	r1, [pc, #220]	@ (800bae0 <mem_free+0xfc>)
 800ba04:	4837      	ldr	r0, [pc, #220]	@ (800bae4 <mem_free+0x100>)
 800ba06:	f00c fc7b 	bl	8018300 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba0a:	f00c fb5b 	bl	80180c4 <sys_arch_protect>
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	68f8      	ldr	r0, [r7, #12]
 800ba12:	f00c fb65 	bl	80180e0 <sys_arch_unprotect>
    return;
 800ba16:	e05e      	b.n	800bad6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	3b08      	subs	r3, #8
 800ba1c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ba1e:	4b32      	ldr	r3, [pc, #200]	@ (800bae8 <mem_free+0x104>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	69fa      	ldr	r2, [r7, #28]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d306      	bcc.n	800ba36 <mem_free+0x52>
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f103 020c 	add.w	r2, r3, #12
 800ba2e:	4b2f      	ldr	r3, [pc, #188]	@ (800baec <mem_free+0x108>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d90d      	bls.n	800ba52 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ba36:	4b29      	ldr	r3, [pc, #164]	@ (800badc <mem_free+0xf8>)
 800ba38:	f240 227f 	movw	r2, #639	@ 0x27f
 800ba3c:	492c      	ldr	r1, [pc, #176]	@ (800baf0 <mem_free+0x10c>)
 800ba3e:	4829      	ldr	r0, [pc, #164]	@ (800bae4 <mem_free+0x100>)
 800ba40:	f00c fc5e 	bl	8018300 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba44:	f00c fb3e 	bl	80180c4 <sys_arch_protect>
 800ba48:	6138      	str	r0, [r7, #16]
 800ba4a:	6938      	ldr	r0, [r7, #16]
 800ba4c:	f00c fb48 	bl	80180e0 <sys_arch_unprotect>
    return;
 800ba50:	e041      	b.n	800bad6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ba52:	4828      	ldr	r0, [pc, #160]	@ (800baf4 <mem_free+0x110>)
 800ba54:	f00c faf4 	bl	8018040 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	791b      	ldrb	r3, [r3, #4]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d110      	bne.n	800ba82 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ba60:	4b1e      	ldr	r3, [pc, #120]	@ (800badc <mem_free+0xf8>)
 800ba62:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800ba66:	4924      	ldr	r1, [pc, #144]	@ (800baf8 <mem_free+0x114>)
 800ba68:	481e      	ldr	r0, [pc, #120]	@ (800bae4 <mem_free+0x100>)
 800ba6a:	f00c fc49 	bl	8018300 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba6e:	4821      	ldr	r0, [pc, #132]	@ (800baf4 <mem_free+0x110>)
 800ba70:	f00c faf5 	bl	801805e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ba74:	f00c fb26 	bl	80180c4 <sys_arch_protect>
 800ba78:	6178      	str	r0, [r7, #20]
 800ba7a:	6978      	ldr	r0, [r7, #20]
 800ba7c:	f00c fb30 	bl	80180e0 <sys_arch_unprotect>
    return;
 800ba80:	e029      	b.n	800bad6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ba82:	69f8      	ldr	r0, [r7, #28]
 800ba84:	f7ff ff72 	bl	800b96c <mem_link_valid>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d110      	bne.n	800bab0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ba8e:	4b13      	ldr	r3, [pc, #76]	@ (800badc <mem_free+0xf8>)
 800ba90:	f240 2295 	movw	r2, #661	@ 0x295
 800ba94:	4919      	ldr	r1, [pc, #100]	@ (800bafc <mem_free+0x118>)
 800ba96:	4813      	ldr	r0, [pc, #76]	@ (800bae4 <mem_free+0x100>)
 800ba98:	f00c fc32 	bl	8018300 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ba9c:	4815      	ldr	r0, [pc, #84]	@ (800baf4 <mem_free+0x110>)
 800ba9e:	f00c fade 	bl	801805e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800baa2:	f00c fb0f 	bl	80180c4 <sys_arch_protect>
 800baa6:	61b8      	str	r0, [r7, #24]
 800baa8:	69b8      	ldr	r0, [r7, #24]
 800baaa:	f00c fb19 	bl	80180e0 <sys_arch_unprotect>
    return;
 800baae:	e012      	b.n	800bad6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	2200      	movs	r2, #0
 800bab4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bab6:	4b12      	ldr	r3, [pc, #72]	@ (800bb00 <mem_free+0x11c>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	429a      	cmp	r2, r3
 800babe:	d202      	bcs.n	800bac6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bac0:	4a0f      	ldr	r2, [pc, #60]	@ (800bb00 <mem_free+0x11c>)
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bac6:	69f8      	ldr	r0, [r7, #28]
 800bac8:	f7ff fe5c 	bl	800b784 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bacc:	4809      	ldr	r0, [pc, #36]	@ (800baf4 <mem_free+0x110>)
 800bace:	f00c fac6 	bl	801805e <sys_mutex_unlock>
 800bad2:	e000      	b.n	800bad6 <mem_free+0xf2>
    return;
 800bad4:	bf00      	nop
}
 800bad6:	3720      	adds	r7, #32
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	08019da4 	.word	0x08019da4
 800bae0:	08019e94 	.word	0x08019e94
 800bae4:	08019dec 	.word	0x08019dec
 800bae8:	2001134c 	.word	0x2001134c
 800baec:	20011350 	.word	0x20011350
 800baf0:	08019eb8 	.word	0x08019eb8
 800baf4:	20011354 	.word	0x20011354
 800baf8:	08019ed4 	.word	0x08019ed4
 800bafc:	08019efc 	.word	0x08019efc
 800bb00:	20011358 	.word	0x20011358

0800bb04 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b088      	sub	sp, #32
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bb10:	887b      	ldrh	r3, [r7, #2]
 800bb12:	3303      	adds	r3, #3
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	f023 0303 	bic.w	r3, r3, #3
 800bb1a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bb1c:	8bfb      	ldrh	r3, [r7, #30]
 800bb1e:	2b0b      	cmp	r3, #11
 800bb20:	d801      	bhi.n	800bb26 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bb22:	230c      	movs	r3, #12
 800bb24:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bb26:	8bfb      	ldrh	r3, [r7, #30]
 800bb28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bb2c:	d803      	bhi.n	800bb36 <mem_trim+0x32>
 800bb2e:	8bfa      	ldrh	r2, [r7, #30]
 800bb30:	887b      	ldrh	r3, [r7, #2]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d201      	bcs.n	800bb3a <mem_trim+0x36>
    return NULL;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e0d8      	b.n	800bcec <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bb3a:	4b6e      	ldr	r3, [pc, #440]	@ (800bcf4 <mem_trim+0x1f0>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d304      	bcc.n	800bb4e <mem_trim+0x4a>
 800bb44:	4b6c      	ldr	r3, [pc, #432]	@ (800bcf8 <mem_trim+0x1f4>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d306      	bcc.n	800bb5c <mem_trim+0x58>
 800bb4e:	4b6b      	ldr	r3, [pc, #428]	@ (800bcfc <mem_trim+0x1f8>)
 800bb50:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bb54:	496a      	ldr	r1, [pc, #424]	@ (800bd00 <mem_trim+0x1fc>)
 800bb56:	486b      	ldr	r0, [pc, #428]	@ (800bd04 <mem_trim+0x200>)
 800bb58:	f00c fbd2 	bl	8018300 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bb5c:	4b65      	ldr	r3, [pc, #404]	@ (800bcf4 <mem_trim+0x1f0>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	d304      	bcc.n	800bb70 <mem_trim+0x6c>
 800bb66:	4b64      	ldr	r3, [pc, #400]	@ (800bcf8 <mem_trim+0x1f4>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d307      	bcc.n	800bb80 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb70:	f00c faa8 	bl	80180c4 <sys_arch_protect>
 800bb74:	60b8      	str	r0, [r7, #8]
 800bb76:	68b8      	ldr	r0, [r7, #8]
 800bb78:	f00c fab2 	bl	80180e0 <sys_arch_unprotect>
    return rmem;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	e0b5      	b.n	800bcec <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3b08      	subs	r3, #8
 800bb84:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bb86:	69b8      	ldr	r0, [r7, #24]
 800bb88:	f7ff fdea 	bl	800b760 <mem_to_ptr>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	881a      	ldrh	r2, [r3, #0]
 800bb94:	8afb      	ldrh	r3, [r7, #22]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	b29b      	uxth	r3, r3
 800bb9a:	3b08      	subs	r3, #8
 800bb9c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bb9e:	8bfa      	ldrh	r2, [r7, #30]
 800bba0:	8abb      	ldrh	r3, [r7, #20]
 800bba2:	429a      	cmp	r2, r3
 800bba4:	d906      	bls.n	800bbb4 <mem_trim+0xb0>
 800bba6:	4b55      	ldr	r3, [pc, #340]	@ (800bcfc <mem_trim+0x1f8>)
 800bba8:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bbac:	4956      	ldr	r1, [pc, #344]	@ (800bd08 <mem_trim+0x204>)
 800bbae:	4855      	ldr	r0, [pc, #340]	@ (800bd04 <mem_trim+0x200>)
 800bbb0:	f00c fba6 	bl	8018300 <iprintf>
  if (newsize > size) {
 800bbb4:	8bfa      	ldrh	r2, [r7, #30]
 800bbb6:	8abb      	ldrh	r3, [r7, #20]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d901      	bls.n	800bbc0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bbbc:	2300      	movs	r3, #0
 800bbbe:	e095      	b.n	800bcec <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bbc0:	8bfa      	ldrh	r2, [r7, #30]
 800bbc2:	8abb      	ldrh	r3, [r7, #20]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d101      	bne.n	800bbcc <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	e08f      	b.n	800bcec <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bbcc:	484f      	ldr	r0, [pc, #316]	@ (800bd0c <mem_trim+0x208>)
 800bbce:	f00c fa37 	bl	8018040 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	881b      	ldrh	r3, [r3, #0]
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff fdb0 	bl	800b73c <ptr_to_mem>
 800bbdc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	791b      	ldrb	r3, [r3, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d13f      	bne.n	800bc66 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bbe6:	69bb      	ldr	r3, [r7, #24]
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bbee:	d106      	bne.n	800bbfe <mem_trim+0xfa>
 800bbf0:	4b42      	ldr	r3, [pc, #264]	@ (800bcfc <mem_trim+0x1f8>)
 800bbf2:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bbf6:	4946      	ldr	r1, [pc, #280]	@ (800bd10 <mem_trim+0x20c>)
 800bbf8:	4842      	ldr	r0, [pc, #264]	@ (800bd04 <mem_trim+0x200>)
 800bbfa:	f00c fb81 	bl	8018300 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	881b      	ldrh	r3, [r3, #0]
 800bc02:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc04:	8afa      	ldrh	r2, [r7, #22]
 800bc06:	8bfb      	ldrh	r3, [r7, #30]
 800bc08:	4413      	add	r3, r2
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	3308      	adds	r3, #8
 800bc0e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bc10:	4b40      	ldr	r3, [pc, #256]	@ (800bd14 <mem_trim+0x210>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	693a      	ldr	r2, [r7, #16]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d106      	bne.n	800bc28 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bc1a:	89fb      	ldrh	r3, [r7, #14]
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff fd8d 	bl	800b73c <ptr_to_mem>
 800bc22:	4603      	mov	r3, r0
 800bc24:	4a3b      	ldr	r2, [pc, #236]	@ (800bd14 <mem_trim+0x210>)
 800bc26:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bc28:	89fb      	ldrh	r3, [r7, #14]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f7ff fd86 	bl	800b73c <ptr_to_mem>
 800bc30:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	2200      	movs	r2, #0
 800bc36:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	89ba      	ldrh	r2, [r7, #12]
 800bc3c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	8afa      	ldrh	r2, [r7, #22]
 800bc42:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	89fa      	ldrh	r2, [r7, #14]
 800bc48:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bc4a:	693b      	ldr	r3, [r7, #16]
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc52:	d047      	beq.n	800bce4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	881b      	ldrh	r3, [r3, #0]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f7ff fd6f 	bl	800b73c <ptr_to_mem>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	89fb      	ldrh	r3, [r7, #14]
 800bc62:	8053      	strh	r3, [r2, #2]
 800bc64:	e03e      	b.n	800bce4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bc66:	8bfb      	ldrh	r3, [r7, #30]
 800bc68:	f103 0214 	add.w	r2, r3, #20
 800bc6c:	8abb      	ldrh	r3, [r7, #20]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d838      	bhi.n	800bce4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bc72:	8afa      	ldrh	r2, [r7, #22]
 800bc74:	8bfb      	ldrh	r3, [r7, #30]
 800bc76:	4413      	add	r3, r2
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	881b      	ldrh	r3, [r3, #0]
 800bc82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bc86:	d106      	bne.n	800bc96 <mem_trim+0x192>
 800bc88:	4b1c      	ldr	r3, [pc, #112]	@ (800bcfc <mem_trim+0x1f8>)
 800bc8a:	f240 3216 	movw	r2, #790	@ 0x316
 800bc8e:	4920      	ldr	r1, [pc, #128]	@ (800bd10 <mem_trim+0x20c>)
 800bc90:	481c      	ldr	r0, [pc, #112]	@ (800bd04 <mem_trim+0x200>)
 800bc92:	f00c fb35 	bl	8018300 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bc96:	89fb      	ldrh	r3, [r7, #14]
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f7ff fd4f 	bl	800b73c <ptr_to_mem>
 800bc9e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bca0:	4b1c      	ldr	r3, [pc, #112]	@ (800bd14 <mem_trim+0x210>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d202      	bcs.n	800bcb0 <mem_trim+0x1ac>
      lfree = mem2;
 800bcaa:	4a1a      	ldr	r2, [pc, #104]	@ (800bd14 <mem_trim+0x210>)
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	881a      	ldrh	r2, [r3, #0]
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	8afa      	ldrh	r2, [r7, #22]
 800bcc2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	89fa      	ldrh	r2, [r7, #14]
 800bcc8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bcd2:	d007      	beq.n	800bce4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	881b      	ldrh	r3, [r3, #0]
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff fd2f 	bl	800b73c <ptr_to_mem>
 800bcde:	4602      	mov	r2, r0
 800bce0:	89fb      	ldrh	r3, [r7, #14]
 800bce2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bce4:	4809      	ldr	r0, [pc, #36]	@ (800bd0c <mem_trim+0x208>)
 800bce6:	f00c f9ba 	bl	801805e <sys_mutex_unlock>
  return rmem;
 800bcea:	687b      	ldr	r3, [r7, #4]
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3720      	adds	r7, #32
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	2001134c 	.word	0x2001134c
 800bcf8:	20011350 	.word	0x20011350
 800bcfc:	08019da4 	.word	0x08019da4
 800bd00:	08019f30 	.word	0x08019f30
 800bd04:	08019dec 	.word	0x08019dec
 800bd08:	08019f48 	.word	0x08019f48
 800bd0c:	20011354 	.word	0x20011354
 800bd10:	08019f68 	.word	0x08019f68
 800bd14:	20011358 	.word	0x20011358

0800bd18 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b088      	sub	sp, #32
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	4603      	mov	r3, r0
 800bd20:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800bd22:	88fb      	ldrh	r3, [r7, #6]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d101      	bne.n	800bd2c <mem_malloc+0x14>
    return NULL;
 800bd28:	2300      	movs	r3, #0
 800bd2a:	e0e2      	b.n	800bef2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	3303      	adds	r3, #3
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f023 0303 	bic.w	r3, r3, #3
 800bd36:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800bd38:	8bbb      	ldrh	r3, [r7, #28]
 800bd3a:	2b0b      	cmp	r3, #11
 800bd3c:	d801      	bhi.n	800bd42 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800bd3e:	230c      	movs	r3, #12
 800bd40:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800bd42:	8bbb      	ldrh	r3, [r7, #28]
 800bd44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd48:	d803      	bhi.n	800bd52 <mem_malloc+0x3a>
 800bd4a:	8bba      	ldrh	r2, [r7, #28]
 800bd4c:	88fb      	ldrh	r3, [r7, #6]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d201      	bcs.n	800bd56 <mem_malloc+0x3e>
    return NULL;
 800bd52:	2300      	movs	r3, #0
 800bd54:	e0cd      	b.n	800bef2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800bd56:	4869      	ldr	r0, [pc, #420]	@ (800befc <mem_malloc+0x1e4>)
 800bd58:	f00c f972 	bl	8018040 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bd5c:	4b68      	ldr	r3, [pc, #416]	@ (800bf00 <mem_malloc+0x1e8>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4618      	mov	r0, r3
 800bd62:	f7ff fcfd 	bl	800b760 <mem_to_ptr>
 800bd66:	4603      	mov	r3, r0
 800bd68:	83fb      	strh	r3, [r7, #30]
 800bd6a:	e0b7      	b.n	800bedc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800bd6c:	8bfb      	ldrh	r3, [r7, #30]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fce4 	bl	800b73c <ptr_to_mem>
 800bd74:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	791b      	ldrb	r3, [r3, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	f040 80a7 	bne.w	800bece <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	881b      	ldrh	r3, [r3, #0]
 800bd84:	461a      	mov	r2, r3
 800bd86:	8bfb      	ldrh	r3, [r7, #30]
 800bd88:	1ad3      	subs	r3, r2, r3
 800bd8a:	f1a3 0208 	sub.w	r2, r3, #8
 800bd8e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800bd90:	429a      	cmp	r2, r3
 800bd92:	f0c0 809c 	bcc.w	800bece <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	881b      	ldrh	r3, [r3, #0]
 800bd9a:	461a      	mov	r2, r3
 800bd9c:	8bfb      	ldrh	r3, [r7, #30]
 800bd9e:	1ad3      	subs	r3, r2, r3
 800bda0:	f1a3 0208 	sub.w	r2, r3, #8
 800bda4:	8bbb      	ldrh	r3, [r7, #28]
 800bda6:	3314      	adds	r3, #20
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d333      	bcc.n	800be14 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800bdac:	8bfa      	ldrh	r2, [r7, #30]
 800bdae:	8bbb      	ldrh	r3, [r7, #28]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	3308      	adds	r3, #8
 800bdb6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bdb8:	8a7b      	ldrh	r3, [r7, #18]
 800bdba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdbe:	d106      	bne.n	800bdce <mem_malloc+0xb6>
 800bdc0:	4b50      	ldr	r3, [pc, #320]	@ (800bf04 <mem_malloc+0x1ec>)
 800bdc2:	f240 3287 	movw	r2, #903	@ 0x387
 800bdc6:	4950      	ldr	r1, [pc, #320]	@ (800bf08 <mem_malloc+0x1f0>)
 800bdc8:	4850      	ldr	r0, [pc, #320]	@ (800bf0c <mem_malloc+0x1f4>)
 800bdca:	f00c fa99 	bl	8018300 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800bdce:	8a7b      	ldrh	r3, [r7, #18]
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff fcb3 	bl	800b73c <ptr_to_mem>
 800bdd6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	881a      	ldrh	r2, [r3, #0]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	8bfa      	ldrh	r2, [r7, #30]
 800bdea:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	8a7a      	ldrh	r2, [r7, #18]
 800bdf0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	881b      	ldrh	r3, [r3, #0]
 800bdfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800be00:	d00b      	beq.n	800be1a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	881b      	ldrh	r3, [r3, #0]
 800be06:	4618      	mov	r0, r3
 800be08:	f7ff fc98 	bl	800b73c <ptr_to_mem>
 800be0c:	4602      	mov	r2, r0
 800be0e:	8a7b      	ldrh	r3, [r7, #18]
 800be10:	8053      	strh	r3, [r2, #2]
 800be12:	e002      	b.n	800be1a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	2201      	movs	r2, #1
 800be18:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800be1a:	4b39      	ldr	r3, [pc, #228]	@ (800bf00 <mem_malloc+0x1e8>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	429a      	cmp	r2, r3
 800be22:	d127      	bne.n	800be74 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800be24:	4b36      	ldr	r3, [pc, #216]	@ (800bf00 <mem_malloc+0x1e8>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800be2a:	e005      	b.n	800be38 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	881b      	ldrh	r3, [r3, #0]
 800be30:	4618      	mov	r0, r3
 800be32:	f7ff fc83 	bl	800b73c <ptr_to_mem>
 800be36:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	791b      	ldrb	r3, [r3, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d004      	beq.n	800be4a <mem_malloc+0x132>
 800be40:	4b33      	ldr	r3, [pc, #204]	@ (800bf10 <mem_malloc+0x1f8>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	69ba      	ldr	r2, [r7, #24]
 800be46:	429a      	cmp	r2, r3
 800be48:	d1f0      	bne.n	800be2c <mem_malloc+0x114>
          }
          lfree = cur;
 800be4a:	4a2d      	ldr	r2, [pc, #180]	@ (800bf00 <mem_malloc+0x1e8>)
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800be50:	4b2b      	ldr	r3, [pc, #172]	@ (800bf00 <mem_malloc+0x1e8>)
 800be52:	681a      	ldr	r2, [r3, #0]
 800be54:	4b2e      	ldr	r3, [pc, #184]	@ (800bf10 <mem_malloc+0x1f8>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	429a      	cmp	r2, r3
 800be5a:	d00b      	beq.n	800be74 <mem_malloc+0x15c>
 800be5c:	4b28      	ldr	r3, [pc, #160]	@ (800bf00 <mem_malloc+0x1e8>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	791b      	ldrb	r3, [r3, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d006      	beq.n	800be74 <mem_malloc+0x15c>
 800be66:	4b27      	ldr	r3, [pc, #156]	@ (800bf04 <mem_malloc+0x1ec>)
 800be68:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800be6c:	4929      	ldr	r1, [pc, #164]	@ (800bf14 <mem_malloc+0x1fc>)
 800be6e:	4827      	ldr	r0, [pc, #156]	@ (800bf0c <mem_malloc+0x1f4>)
 800be70:	f00c fa46 	bl	8018300 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800be74:	4821      	ldr	r0, [pc, #132]	@ (800befc <mem_malloc+0x1e4>)
 800be76:	f00c f8f2 	bl	801805e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800be7a:	8bba      	ldrh	r2, [r7, #28]
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	4413      	add	r3, r2
 800be80:	3308      	adds	r3, #8
 800be82:	4a23      	ldr	r2, [pc, #140]	@ (800bf10 <mem_malloc+0x1f8>)
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	4293      	cmp	r3, r2
 800be88:	d906      	bls.n	800be98 <mem_malloc+0x180>
 800be8a:	4b1e      	ldr	r3, [pc, #120]	@ (800bf04 <mem_malloc+0x1ec>)
 800be8c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800be90:	4921      	ldr	r1, [pc, #132]	@ (800bf18 <mem_malloc+0x200>)
 800be92:	481e      	ldr	r0, [pc, #120]	@ (800bf0c <mem_malloc+0x1f4>)
 800be94:	f00c fa34 	bl	8018300 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	f003 0303 	and.w	r3, r3, #3
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d006      	beq.n	800beb0 <mem_malloc+0x198>
 800bea2:	4b18      	ldr	r3, [pc, #96]	@ (800bf04 <mem_malloc+0x1ec>)
 800bea4:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bea8:	491c      	ldr	r1, [pc, #112]	@ (800bf1c <mem_malloc+0x204>)
 800beaa:	4818      	ldr	r0, [pc, #96]	@ (800bf0c <mem_malloc+0x1f4>)
 800beac:	f00c fa28 	bl	8018300 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800beb0:	697b      	ldr	r3, [r7, #20]
 800beb2:	f003 0303 	and.w	r3, r3, #3
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d006      	beq.n	800bec8 <mem_malloc+0x1b0>
 800beba:	4b12      	ldr	r3, [pc, #72]	@ (800bf04 <mem_malloc+0x1ec>)
 800bebc:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bec0:	4917      	ldr	r1, [pc, #92]	@ (800bf20 <mem_malloc+0x208>)
 800bec2:	4812      	ldr	r0, [pc, #72]	@ (800bf0c <mem_malloc+0x1f4>)
 800bec4:	f00c fa1c 	bl	8018300 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	3308      	adds	r3, #8
 800becc:	e011      	b.n	800bef2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bece:	8bfb      	ldrh	r3, [r7, #30]
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7ff fc33 	bl	800b73c <ptr_to_mem>
 800bed6:	4603      	mov	r3, r0
 800bed8:	881b      	ldrh	r3, [r3, #0]
 800beda:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bedc:	8bfa      	ldrh	r2, [r7, #30]
 800bede:	8bbb      	ldrh	r3, [r7, #28]
 800bee0:	f5c3 4300 	rsb	r3, r3, #32768	@ 0x8000
 800bee4:	429a      	cmp	r2, r3
 800bee6:	f4ff af41 	bcc.w	800bd6c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800beea:	4804      	ldr	r0, [pc, #16]	@ (800befc <mem_malloc+0x1e4>)
 800beec:	f00c f8b7 	bl	801805e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3720      	adds	r7, #32
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20011354 	.word	0x20011354
 800bf00:	20011358 	.word	0x20011358
 800bf04:	08019da4 	.word	0x08019da4
 800bf08:	08019f68 	.word	0x08019f68
 800bf0c:	08019dec 	.word	0x08019dec
 800bf10:	20011350 	.word	0x20011350
 800bf14:	08019f7c 	.word	0x08019f7c
 800bf18:	08019f98 	.word	0x08019f98
 800bf1c:	08019fc8 	.word	0x08019fc8
 800bf20:	08019ff8 	.word	0x08019ff8

0800bf24 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	3303      	adds	r3, #3
 800bf3a:	f023 0303 	bic.w	r3, r3, #3
 800bf3e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800bf40:	2300      	movs	r3, #0
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	e011      	b.n	800bf6a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	689b      	ldr	r3, [r3, #8]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	881b      	ldrh	r3, [r3, #0]
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	4413      	add	r3, r2
 800bf62:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3301      	adds	r3, #1
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4293      	cmp	r3, r2
 800bf74:	dbe7      	blt.n	800bf46 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800bf76:	bf00      	nop
 800bf78:	bf00      	nop
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	80fb      	strh	r3, [r7, #6]
 800bf8e:	e009      	b.n	800bfa4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800bf90:	88fb      	ldrh	r3, [r7, #6]
 800bf92:	4a08      	ldr	r2, [pc, #32]	@ (800bfb4 <memp_init+0x30>)
 800bf94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff ffc3 	bl	800bf24 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800bf9e:	88fb      	ldrh	r3, [r7, #6]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	80fb      	strh	r3, [r7, #6]
 800bfa4:	88fb      	ldrh	r3, [r7, #6]
 800bfa6:	2b0c      	cmp	r3, #12
 800bfa8:	d9f2      	bls.n	800bf90 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800bfaa:	bf00      	nop
 800bfac:	bf00      	nop
 800bfae:	3708      	adds	r7, #8
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	0801cb14 	.word	0x0801cb14

0800bfb8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800bfc0:	f00c f880 	bl	80180c4 <sys_arch_protect>
 800bfc4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	689b      	ldr	r3, [r3, #8]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d015      	beq.n	800c000 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	6812      	ldr	r2, [r2, #0]
 800bfdc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f003 0303 	and.w	r3, r3, #3
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d006      	beq.n	800bff6 <do_memp_malloc_pool+0x3e>
 800bfe8:	4b09      	ldr	r3, [pc, #36]	@ (800c010 <do_memp_malloc_pool+0x58>)
 800bfea:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800bfee:	4909      	ldr	r1, [pc, #36]	@ (800c014 <do_memp_malloc_pool+0x5c>)
 800bff0:	4809      	ldr	r0, [pc, #36]	@ (800c018 <do_memp_malloc_pool+0x60>)
 800bff2:	f00c f985 	bl	8018300 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800bff6:	68f8      	ldr	r0, [r7, #12]
 800bff8:	f00c f872 	bl	80180e0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	e003      	b.n	800c008 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f00c f86d 	bl	80180e0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	0801a01c 	.word	0x0801a01c
 800c014:	0801a04c 	.word	0x0801a04c
 800c018:	0801a070 	.word	0x0801a070

0800c01c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	4603      	mov	r3, r0
 800c024:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c026:	79fb      	ldrb	r3, [r7, #7]
 800c028:	2b0c      	cmp	r3, #12
 800c02a:	d908      	bls.n	800c03e <memp_malloc+0x22>
 800c02c:	4b0a      	ldr	r3, [pc, #40]	@ (800c058 <memp_malloc+0x3c>)
 800c02e:	f240 1257 	movw	r2, #343	@ 0x157
 800c032:	490a      	ldr	r1, [pc, #40]	@ (800c05c <memp_malloc+0x40>)
 800c034:	480a      	ldr	r0, [pc, #40]	@ (800c060 <memp_malloc+0x44>)
 800c036:	f00c f963 	bl	8018300 <iprintf>
 800c03a:	2300      	movs	r3, #0
 800c03c:	e008      	b.n	800c050 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c03e:	79fb      	ldrb	r3, [r7, #7]
 800c040:	4a08      	ldr	r2, [pc, #32]	@ (800c064 <memp_malloc+0x48>)
 800c042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c046:	4618      	mov	r0, r3
 800c048:	f7ff ffb6 	bl	800bfb8 <do_memp_malloc_pool>
 800c04c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c04e:	68fb      	ldr	r3, [r7, #12]
}
 800c050:	4618      	mov	r0, r3
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	0801a01c 	.word	0x0801a01c
 800c05c:	0801a0ac 	.word	0x0801a0ac
 800c060:	0801a070 	.word	0x0801a070
 800c064:	0801cb14 	.word	0x0801cb14

0800c068 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b084      	sub	sp, #16
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	f003 0303 	and.w	r3, r3, #3
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d006      	beq.n	800c08a <do_memp_free_pool+0x22>
 800c07c:	4b0d      	ldr	r3, [pc, #52]	@ (800c0b4 <do_memp_free_pool+0x4c>)
 800c07e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c082:	490d      	ldr	r1, [pc, #52]	@ (800c0b8 <do_memp_free_pool+0x50>)
 800c084:	480d      	ldr	r0, [pc, #52]	@ (800c0bc <do_memp_free_pool+0x54>)
 800c086:	f00c f93b 	bl	8018300 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c08e:	f00c f819 	bl	80180c4 <sys_arch_protect>
 800c092:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	681a      	ldr	r2, [r3, #0]
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c0a6:	68b8      	ldr	r0, [r7, #8]
 800c0a8:	f00c f81a 	bl	80180e0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c0ac:	bf00      	nop
 800c0ae:	3710      	adds	r7, #16
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	0801a01c 	.word	0x0801a01c
 800c0b8:	0801a0cc 	.word	0x0801a0cc
 800c0bc:	0801a070 	.word	0x0801a070

0800c0c0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	6039      	str	r1, [r7, #0]
 800c0ca:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c0cc:	79fb      	ldrb	r3, [r7, #7]
 800c0ce:	2b0c      	cmp	r3, #12
 800c0d0:	d907      	bls.n	800c0e2 <memp_free+0x22>
 800c0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c104 <memp_free+0x44>)
 800c0d4:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c0d8:	490b      	ldr	r1, [pc, #44]	@ (800c108 <memp_free+0x48>)
 800c0da:	480c      	ldr	r0, [pc, #48]	@ (800c10c <memp_free+0x4c>)
 800c0dc:	f00c f910 	bl	8018300 <iprintf>
 800c0e0:	e00c      	b.n	800c0fc <memp_free+0x3c>

  if (mem == NULL) {
 800c0e2:	683b      	ldr	r3, [r7, #0]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d008      	beq.n	800c0fa <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	4a09      	ldr	r2, [pc, #36]	@ (800c110 <memp_free+0x50>)
 800c0ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f7ff ffb8 	bl	800c068 <do_memp_free_pool>
 800c0f8:	e000      	b.n	800c0fc <memp_free+0x3c>
    return;
 800c0fa:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	0801a01c 	.word	0x0801a01c
 800c108:	0801a0ec 	.word	0x0801a0ec
 800c10c:	0801a070 	.word	0x0801a070
 800c110:	0801cb14 	.word	0x0801cb14

0800c114 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c118:	bf00      	nop
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
	...

0800c124 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
 800c130:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d108      	bne.n	800c14a <netif_add+0x26>
 800c138:	4b5b      	ldr	r3, [pc, #364]	@ (800c2a8 <netif_add+0x184>)
 800c13a:	f240 1227 	movw	r2, #295	@ 0x127
 800c13e:	495b      	ldr	r1, [pc, #364]	@ (800c2ac <netif_add+0x188>)
 800c140:	485b      	ldr	r0, [pc, #364]	@ (800c2b0 <netif_add+0x18c>)
 800c142:	f00c f8dd 	bl	8018300 <iprintf>
 800c146:	2300      	movs	r3, #0
 800c148:	e0a9      	b.n	800c29e <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c14a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d108      	bne.n	800c162 <netif_add+0x3e>
 800c150:	4b55      	ldr	r3, [pc, #340]	@ (800c2a8 <netif_add+0x184>)
 800c152:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c156:	4957      	ldr	r1, [pc, #348]	@ (800c2b4 <netif_add+0x190>)
 800c158:	4855      	ldr	r0, [pc, #340]	@ (800c2b0 <netif_add+0x18c>)
 800c15a:	f00c f8d1 	bl	8018300 <iprintf>
 800c15e:	2300      	movs	r3, #0
 800c160:	e09d      	b.n	800c29e <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c168:	4b53      	ldr	r3, [pc, #332]	@ (800c2b8 <netif_add+0x194>)
 800c16a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d101      	bne.n	800c176 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c172:	4b51      	ldr	r3, [pc, #324]	@ (800c2b8 <netif_add+0x194>)
 800c174:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c17c:	4b4e      	ldr	r3, [pc, #312]	@ (800c2b8 <netif_add+0x194>)
 800c17e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2200      	movs	r2, #0
 800c184:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2200      	movs	r2, #0
 800c18a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	4a49      	ldr	r2, [pc, #292]	@ (800c2bc <netif_add+0x198>)
 800c196:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3324      	adds	r3, #36	@ 0x24
 800c1aa:	2204      	movs	r2, #4
 800c1ac:	2100      	movs	r1, #0
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f00c f90b 	bl	80183ca <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	6a3a      	ldr	r2, [r7, #32]
 800c1be:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c1c0:	4b3f      	ldr	r3, [pc, #252]	@ (800c2c0 <netif_add+0x19c>)
 800c1c2:	781a      	ldrb	r2, [r3, #0]
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c1ce:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	68b9      	ldr	r1, [r7, #8]
 800c1d6:	68f8      	ldr	r0, [r7, #12]
 800c1d8:	f000 f914 	bl	800c404 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	4798      	blx	r3
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <netif_add+0xc8>
    return NULL;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	e058      	b.n	800c29e <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c1f2:	2bff      	cmp	r3, #255	@ 0xff
 800c1f4:	d103      	bne.n	800c1fe <netif_add+0xda>
        netif->num = 0;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c202:	4b30      	ldr	r3, [pc, #192]	@ (800c2c4 <netif_add+0x1a0>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	617b      	str	r3, [r7, #20]
 800c208:	e02b      	b.n	800c262 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	429a      	cmp	r2, r3
 800c210:	d106      	bne.n	800c220 <netif_add+0xfc>
 800c212:	4b25      	ldr	r3, [pc, #148]	@ (800c2a8 <netif_add+0x184>)
 800c214:	f240 128b 	movw	r2, #395	@ 0x18b
 800c218:	492b      	ldr	r1, [pc, #172]	@ (800c2c8 <netif_add+0x1a4>)
 800c21a:	4825      	ldr	r0, [pc, #148]	@ (800c2b0 <netif_add+0x18c>)
 800c21c:	f00c f870 	bl	8018300 <iprintf>
        num_netifs++;
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	3301      	adds	r3, #1
 800c224:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	2bff      	cmp	r3, #255	@ 0xff
 800c22a:	dd06      	ble.n	800c23a <netif_add+0x116>
 800c22c:	4b1e      	ldr	r3, [pc, #120]	@ (800c2a8 <netif_add+0x184>)
 800c22e:	f240 128d 	movw	r2, #397	@ 0x18d
 800c232:	4926      	ldr	r1, [pc, #152]	@ (800c2cc <netif_add+0x1a8>)
 800c234:	481e      	ldr	r0, [pc, #120]	@ (800c2b0 <netif_add+0x18c>)
 800c236:	f00c f863 	bl	8018300 <iprintf>
        if (netif2->num == netif->num) {
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c246:	429a      	cmp	r2, r3
 800c248:	d108      	bne.n	800c25c <netif_add+0x138>
          netif->num++;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c250:	3301      	adds	r3, #1
 800c252:	b2da      	uxtb	r2, r3
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800c25a:	e005      	b.n	800c268 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	617b      	str	r3, [r7, #20]
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d1d0      	bne.n	800c20a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c268:	697b      	ldr	r3, [r7, #20]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d1be      	bne.n	800c1ec <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c274:	2bfe      	cmp	r3, #254	@ 0xfe
 800c276:	d103      	bne.n	800c280 <netif_add+0x15c>
    netif_num = 0;
 800c278:	4b11      	ldr	r3, [pc, #68]	@ (800c2c0 <netif_add+0x19c>)
 800c27a:	2200      	movs	r2, #0
 800c27c:	701a      	strb	r2, [r3, #0]
 800c27e:	e006      	b.n	800c28e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c286:	3301      	adds	r3, #1
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c0 <netif_add+0x19c>)
 800c28c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c28e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <netif_add+0x1a0>)
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c296:	4a0b      	ldr	r2, [pc, #44]	@ (800c2c4 <netif_add+0x1a0>)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c29c:	68fb      	ldr	r3, [r7, #12]
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	0801a108 	.word	0x0801a108
 800c2ac:	0801a19c 	.word	0x0801a19c
 800c2b0:	0801a158 	.word	0x0801a158
 800c2b4:	0801a1b8 	.word	0x0801a1b8
 800c2b8:	0801cb98 	.word	0x0801cb98
 800c2bc:	0800c6e7 	.word	0x0800c6e7
 800c2c0:	200150a0 	.word	0x200150a0
 800c2c4:	20015098 	.word	0x20015098
 800c2c8:	0801a1dc 	.word	0x0801a1dc
 800c2cc:	0801a1f0 	.word	0x0801a1f0

0800c2d0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f002 fdad 	bl	800ee3c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c2e2:	6839      	ldr	r1, [r7, #0]
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f007 fabf 	bl	8013868 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c2ea:	bf00      	nop
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d106      	bne.n	800c314 <netif_do_set_ipaddr+0x20>
 800c306:	4b1d      	ldr	r3, [pc, #116]	@ (800c37c <netif_do_set_ipaddr+0x88>)
 800c308:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c30c:	491c      	ldr	r1, [pc, #112]	@ (800c380 <netif_do_set_ipaddr+0x8c>)
 800c30e:	481d      	ldr	r0, [pc, #116]	@ (800c384 <netif_do_set_ipaddr+0x90>)
 800c310:	f00b fff6 	bl	8018300 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d106      	bne.n	800c328 <netif_do_set_ipaddr+0x34>
 800c31a:	4b18      	ldr	r3, [pc, #96]	@ (800c37c <netif_do_set_ipaddr+0x88>)
 800c31c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c320:	4917      	ldr	r1, [pc, #92]	@ (800c380 <netif_do_set_ipaddr+0x8c>)
 800c322:	4818      	ldr	r0, [pc, #96]	@ (800c384 <netif_do_set_ipaddr+0x90>)
 800c324:	f00b ffec 	bl	8018300 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	3304      	adds	r3, #4
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	429a      	cmp	r2, r3
 800c334:	d01c      	beq.n	800c370 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3304      	adds	r3, #4
 800c340:	681a      	ldr	r2, [r3, #0]
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c346:	f107 0314 	add.w	r3, r7, #20
 800c34a:	4619      	mov	r1, r3
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f7ff ffbf 	bl	800c2d0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <netif_do_set_ipaddr+0x6a>
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	e000      	b.n	800c360 <netif_do_set_ipaddr+0x6c>
 800c35e:	2300      	movs	r3, #0
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c364:	2101      	movs	r1, #1
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f000 f8d2 	bl	800c510 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c36c:	2301      	movs	r3, #1
 800c36e:	e000      	b.n	800c372 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	0801a108 	.word	0x0801a108
 800c380:	0801a220 	.word	0x0801a220
 800c384:	0801a158 	.word	0x0801a158

0800c388 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c388:	b480      	push	{r7}
 800c38a:	b085      	sub	sp, #20
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	681a      	ldr	r2, [r3, #0]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	3308      	adds	r3, #8
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d00a      	beq.n	800c3b8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d002      	beq.n	800c3ae <netif_do_set_netmask+0x26>
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	e000      	b.n	800c3b0 <netif_do_set_netmask+0x28>
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e000      	b.n	800c3ba <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c3b8:	2300      	movs	r3, #0
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3714      	adds	r7, #20
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c3c6:	b480      	push	{r7}
 800c3c8:	b085      	sub	sp, #20
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	330c      	adds	r3, #12
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	429a      	cmp	r2, r3
 800c3de:	d00a      	beq.n	800c3f6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <netif_do_set_gw+0x26>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	e000      	b.n	800c3ee <netif_do_set_gw+0x28>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	e000      	b.n	800c3f8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c3f6:	2300      	movs	r3, #0
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c404:	b580      	push	{r7, lr}
 800c406:	b088      	sub	sp, #32
 800c408:	af00      	add	r7, sp, #0
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	607a      	str	r2, [r7, #4]
 800c410:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d101      	bne.n	800c424 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c420:	4b1c      	ldr	r3, [pc, #112]	@ (800c494 <netif_set_addr+0x90>)
 800c422:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d101      	bne.n	800c42e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c42a:	4b1a      	ldr	r3, [pc, #104]	@ (800c494 <netif_set_addr+0x90>)
 800c42c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d101      	bne.n	800c438 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c434:	4b17      	ldr	r3, [pc, #92]	@ (800c494 <netif_set_addr+0x90>)
 800c436:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d003      	beq.n	800c446 <netif_set_addr+0x42>
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <netif_set_addr+0x46>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <netif_set_addr+0x48>
 800c44a:	2300      	movs	r3, #0
 800c44c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d006      	beq.n	800c462 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c454:	f107 0310 	add.w	r3, r7, #16
 800c458:	461a      	mov	r2, r3
 800c45a:	68b9      	ldr	r1, [r7, #8]
 800c45c:	68f8      	ldr	r0, [r7, #12]
 800c45e:	f7ff ff49 	bl	800c2f4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c462:	69fa      	ldr	r2, [r7, #28]
 800c464:	6879      	ldr	r1, [r7, #4]
 800c466:	68f8      	ldr	r0, [r7, #12]
 800c468:	f7ff ff8e 	bl	800c388 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	6839      	ldr	r1, [r7, #0]
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f7ff ffa8 	bl	800c3c6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d106      	bne.n	800c48a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c47c:	f107 0310 	add.w	r3, r7, #16
 800c480:	461a      	mov	r2, r3
 800c482:	68b9      	ldr	r1, [r7, #8]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f7ff ff35 	bl	800c2f4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c48a:	bf00      	nop
 800c48c:	3720      	adds	r7, #32
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0801cb98 	.word	0x0801cb98

0800c498 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c498:	b480      	push	{r7}
 800c49a:	b083      	sub	sp, #12
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c4a0:	4a04      	ldr	r2, [pc, #16]	@ (800c4b4 <netif_set_default+0x1c>)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c4a6:	bf00      	nop
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	2001509c 	.word	0x2001509c

0800c4b8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d107      	bne.n	800c4d6 <netif_set_up+0x1e>
 800c4c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c504 <netif_set_up+0x4c>)
 800c4c8:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c4cc:	490e      	ldr	r1, [pc, #56]	@ (800c508 <netif_set_up+0x50>)
 800c4ce:	480f      	ldr	r0, [pc, #60]	@ (800c50c <netif_set_up+0x54>)
 800c4d0:	f00b ff16 	bl	8018300 <iprintf>
 800c4d4:	e013      	b.n	800c4fe <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c4dc:	f003 0301 	and.w	r3, r3, #1
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10c      	bne.n	800c4fe <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c4ea:	f043 0301 	orr.w	r3, r3, #1
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c4f6:	2103      	movs	r1, #3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 f809 	bl	800c510 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c4fe:	3708      	adds	r7, #8
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	0801a108 	.word	0x0801a108
 800c508:	0801a290 	.word	0x0801a290
 800c50c:	0801a158 	.word	0x0801a158

0800c510 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
 800c518:	460b      	mov	r3, r1
 800c51a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d106      	bne.n	800c530 <netif_issue_reports+0x20>
 800c522:	4b18      	ldr	r3, [pc, #96]	@ (800c584 <netif_issue_reports+0x74>)
 800c524:	f240 326d 	movw	r2, #877	@ 0x36d
 800c528:	4917      	ldr	r1, [pc, #92]	@ (800c588 <netif_issue_reports+0x78>)
 800c52a:	4818      	ldr	r0, [pc, #96]	@ (800c58c <netif_issue_reports+0x7c>)
 800c52c:	f00b fee8 	bl	8018300 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c536:	f003 0304 	and.w	r3, r3, #4
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d01e      	beq.n	800c57c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c544:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d017      	beq.n	800c57c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c54c:	78fb      	ldrb	r3, [r7, #3]
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d013      	beq.n	800c57e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	3304      	adds	r3, #4
 800c55a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00e      	beq.n	800c57e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c566:	f003 0308 	and.w	r3, r3, #8
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d007      	beq.n	800c57e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	3304      	adds	r3, #4
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f009 ff71 	bl	801645c <etharp_request>
 800c57a:	e000      	b.n	800c57e <netif_issue_reports+0x6e>
    return;
 800c57c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}
 800c584:	0801a108 	.word	0x0801a108
 800c588:	0801a2ac 	.word	0x0801a2ac
 800c58c:	0801a158 	.word	0x0801a158

0800c590 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b082      	sub	sp, #8
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d107      	bne.n	800c5ae <netif_set_down+0x1e>
 800c59e:	4b12      	ldr	r3, [pc, #72]	@ (800c5e8 <netif_set_down+0x58>)
 800c5a0:	f240 329b 	movw	r2, #923	@ 0x39b
 800c5a4:	4911      	ldr	r1, [pc, #68]	@ (800c5ec <netif_set_down+0x5c>)
 800c5a6:	4812      	ldr	r0, [pc, #72]	@ (800c5f0 <netif_set_down+0x60>)
 800c5a8:	f00b feaa 	bl	8018300 <iprintf>
 800c5ac:	e019      	b.n	800c5e2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5b4:	f003 0301 	and.w	r3, r3, #1
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d012      	beq.n	800c5e2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5c2:	f023 0301 	bic.w	r3, r3, #1
 800c5c6:	b2da      	uxtb	r2, r3
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c5d4:	f003 0308 	and.w	r3, r3, #8
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f009 faf7 	bl	8015bd0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	0801a108 	.word	0x0801a108
 800c5ec:	0801a2d0 	.word	0x0801a2d0
 800c5f0:	0801a158 	.word	0x0801a158

0800c5f4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d107      	bne.n	800c612 <netif_set_link_up+0x1e>
 800c602:	4b15      	ldr	r3, [pc, #84]	@ (800c658 <netif_set_link_up+0x64>)
 800c604:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c608:	4914      	ldr	r1, [pc, #80]	@ (800c65c <netif_set_link_up+0x68>)
 800c60a:	4815      	ldr	r0, [pc, #84]	@ (800c660 <netif_set_link_up+0x6c>)
 800c60c:	f00b fe78 	bl	8018300 <iprintf>
 800c610:	e01e      	b.n	800c650 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c618:	f003 0304 	and.w	r3, r3, #4
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d117      	bne.n	800c650 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c626:	f043 0304 	orr.w	r3, r3, #4
 800c62a:	b2da      	uxtb	r2, r3
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f007 fd42 	bl	80140bc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c638:	2103      	movs	r1, #3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7ff ff68 	bl	800c510 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	69db      	ldr	r3, [r3, #28]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <netif_set_link_up+0x5c>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	69db      	ldr	r3, [r3, #28]
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}
 800c656:	bf00      	nop
 800c658:	0801a108 	.word	0x0801a108
 800c65c:	0801a2f0 	.word	0x0801a2f0
 800c660:	0801a158 	.word	0x0801a158

0800c664 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d107      	bne.n	800c682 <netif_set_link_down+0x1e>
 800c672:	4b11      	ldr	r3, [pc, #68]	@ (800c6b8 <netif_set_link_down+0x54>)
 800c674:	f240 4206 	movw	r2, #1030	@ 0x406
 800c678:	4910      	ldr	r1, [pc, #64]	@ (800c6bc <netif_set_link_down+0x58>)
 800c67a:	4811      	ldr	r0, [pc, #68]	@ (800c6c0 <netif_set_link_down+0x5c>)
 800c67c:	f00b fe40 	bl	8018300 <iprintf>
 800c680:	e017      	b.n	800c6b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c688:	f003 0304 	and.w	r3, r3, #4
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d010      	beq.n	800c6b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c696:	f023 0304 	bic.w	r3, r3, #4
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d003      	beq.n	800c6b2 <netif_set_link_down+0x4e>
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	69db      	ldr	r3, [r3, #28]
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}
 800c6b8:	0801a108 	.word	0x0801a108
 800c6bc:	0801a314 	.word	0x0801a314
 800c6c0:	0801a158 	.word	0x0801a158

0800c6c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b083      	sub	sp, #12
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d002      	beq.n	800c6da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	683a      	ldr	r2, [r7, #0]
 800c6d8:	61da      	str	r2, [r3, #28]
  }
}
 800c6da:	bf00      	nop
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b085      	sub	sp, #20
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	60b9      	str	r1, [r7, #8]
 800c6f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c6f2:	f06f 030b 	mvn.w	r3, #11
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3714      	adds	r7, #20
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
	...

0800c704 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	4603      	mov	r3, r0
 800c70c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c70e:	79fb      	ldrb	r3, [r7, #7]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d013      	beq.n	800c73c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c714:	4b0d      	ldr	r3, [pc, #52]	@ (800c74c <netif_get_by_index+0x48>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	60fb      	str	r3, [r7, #12]
 800c71a:	e00c      	b.n	800c736 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c722:	3301      	adds	r3, #1
 800c724:	b2db      	uxtb	r3, r3
 800c726:	79fa      	ldrb	r2, [r7, #7]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d101      	bne.n	800c730 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	e006      	b.n	800c73e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d1ef      	bne.n	800c71c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3714      	adds	r7, #20
 800c742:	46bd      	mov	sp, r7
 800c744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c748:	4770      	bx	lr
 800c74a:	bf00      	nop
 800c74c:	20015098 	.word	0x20015098

0800c750 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c750:	b480      	push	{r7}
 800c752:	b085      	sub	sp, #20
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	4611      	mov	r1, r2
 800c75c:	461a      	mov	r2, r3
 800c75e:	460b      	mov	r3, r1
 800c760:	80fb      	strh	r3, [r7, #6]
 800c762:	4613      	mov	r3, r2
 800c764:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	88fa      	ldrh	r2, [r7, #6]
 800c776:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	88ba      	ldrh	r2, [r7, #4]
 800c77c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c77e:	8b3b      	ldrh	r3, [r7, #24]
 800c780:	b2da      	uxtb	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	7f3a      	ldrb	r2, [r7, #28]
 800c78a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2201      	movs	r2, #1
 800c790:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2200      	movs	r2, #0
 800c796:	73da      	strb	r2, [r3, #15]
}
 800c798:	bf00      	nop
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08c      	sub	sp, #48	@ 0x30
 800c7a8:	af02      	add	r7, sp, #8
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	71fb      	strb	r3, [r7, #7]
 800c7ae:	460b      	mov	r3, r1
 800c7b0:	80bb      	strh	r3, [r7, #4]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c7ba:	887b      	ldrh	r3, [r7, #2]
 800c7bc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c7c0:	d07f      	beq.n	800c8c2 <pbuf_alloc+0x11e>
 800c7c2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c7c6:	f300 80c8 	bgt.w	800c95a <pbuf_alloc+0x1b6>
 800c7ca:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c7ce:	d010      	beq.n	800c7f2 <pbuf_alloc+0x4e>
 800c7d0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c7d4:	f300 80c1 	bgt.w	800c95a <pbuf_alloc+0x1b6>
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	d002      	beq.n	800c7e2 <pbuf_alloc+0x3e>
 800c7dc:	2b41      	cmp	r3, #65	@ 0x41
 800c7de:	f040 80bc 	bne.w	800c95a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c7e2:	887a      	ldrh	r2, [r7, #2]
 800c7e4:	88bb      	ldrh	r3, [r7, #4]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	f000 f8d1 	bl	800c990 <pbuf_alloc_reference>
 800c7ee:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c7f0:	e0bd      	b.n	800c96e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c7fa:	88bb      	ldrh	r3, [r7, #4]
 800c7fc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c7fe:	200c      	movs	r0, #12
 800c800:	f7ff fc0c 	bl	800c01c <memp_malloc>
 800c804:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d107      	bne.n	800c81c <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <pbuf_alloc+0x74>
            pbuf_free(p);
 800c812:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c814:	f000 faaa 	bl	800cd6c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c818:	2300      	movs	r3, #0
 800c81a:	e0a9      	b.n	800c970 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c81c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c81e:	3303      	adds	r3, #3
 800c820:	b29b      	uxth	r3, r3
 800c822:	f023 0303 	bic.w	r3, r3, #3
 800c826:	b29b      	uxth	r3, r3
 800c828:	f5c3 63be 	rsb	r3, r3, #1520	@ 0x5f0
 800c82c:	3304      	adds	r3, #4
 800c82e:	b29b      	uxth	r3, r3
 800c830:	8b7a      	ldrh	r2, [r7, #26]
 800c832:	4293      	cmp	r3, r2
 800c834:	bf28      	it	cs
 800c836:	4613      	movcs	r3, r2
 800c838:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c83a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c83c:	3310      	adds	r3, #16
 800c83e:	693a      	ldr	r2, [r7, #16]
 800c840:	4413      	add	r3, r2
 800c842:	3303      	adds	r3, #3
 800c844:	f023 0303 	bic.w	r3, r3, #3
 800c848:	4618      	mov	r0, r3
 800c84a:	89f9      	ldrh	r1, [r7, #14]
 800c84c:	8b7a      	ldrh	r2, [r7, #26]
 800c84e:	2300      	movs	r3, #0
 800c850:	9301      	str	r3, [sp, #4]
 800c852:	887b      	ldrh	r3, [r7, #2]
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	460b      	mov	r3, r1
 800c858:	4601      	mov	r1, r0
 800c85a:	6938      	ldr	r0, [r7, #16]
 800c85c:	f7ff ff78 	bl	800c750 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	f003 0303 	and.w	r3, r3, #3
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d006      	beq.n	800c87a <pbuf_alloc+0xd6>
 800c86c:	4b42      	ldr	r3, [pc, #264]	@ (800c978 <pbuf_alloc+0x1d4>)
 800c86e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c872:	4942      	ldr	r1, [pc, #264]	@ (800c97c <pbuf_alloc+0x1d8>)
 800c874:	4842      	ldr	r0, [pc, #264]	@ (800c980 <pbuf_alloc+0x1dc>)
 800c876:	f00b fd43 	bl	8018300 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c87a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c87c:	3303      	adds	r3, #3
 800c87e:	f023 0303 	bic.w	r3, r3, #3
 800c882:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800c886:	4293      	cmp	r3, r2
 800c888:	d106      	bne.n	800c898 <pbuf_alloc+0xf4>
 800c88a:	4b3b      	ldr	r3, [pc, #236]	@ (800c978 <pbuf_alloc+0x1d4>)
 800c88c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c890:	493c      	ldr	r1, [pc, #240]	@ (800c984 <pbuf_alloc+0x1e0>)
 800c892:	483b      	ldr	r0, [pc, #236]	@ (800c980 <pbuf_alloc+0x1dc>)
 800c894:	f00b fd34 	bl	8018300 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8a2:	e002      	b.n	800c8aa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	693a      	ldr	r2, [r7, #16]
 800c8a8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c8ae:	8b7a      	ldrh	r2, [r7, #26]
 800c8b0:	89fb      	ldrh	r3, [r7, #14]
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c8ba:	8b7b      	ldrh	r3, [r7, #26]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d19e      	bne.n	800c7fe <pbuf_alloc+0x5a>
      break;
 800c8c0:	e055      	b.n	800c96e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c8c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	f023 0303 	bic.w	r3, r3, #3
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	88bb      	ldrh	r3, [r7, #4]
 800c8d0:	3303      	adds	r3, #3
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	f023 0303 	bic.w	r3, r3, #3
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4413      	add	r3, r2
 800c8dc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c8de:	8b3b      	ldrh	r3, [r7, #24]
 800c8e0:	3310      	adds	r3, #16
 800c8e2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c8e4:	8b3a      	ldrh	r2, [r7, #24]
 800c8e6:	88bb      	ldrh	r3, [r7, #4]
 800c8e8:	3303      	adds	r3, #3
 800c8ea:	f023 0303 	bic.w	r3, r3, #3
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d306      	bcc.n	800c900 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c8f2:	8afa      	ldrh	r2, [r7, #22]
 800c8f4:	88bb      	ldrh	r3, [r7, #4]
 800c8f6:	3303      	adds	r3, #3
 800c8f8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d201      	bcs.n	800c904 <pbuf_alloc+0x160>
        return NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	e035      	b.n	800c970 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c904:	8afb      	ldrh	r3, [r7, #22]
 800c906:	4618      	mov	r0, r3
 800c908:	f7ff fa06 	bl	800bd18 <mem_malloc>
 800c90c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	d101      	bne.n	800c918 <pbuf_alloc+0x174>
        return NULL;
 800c914:	2300      	movs	r3, #0
 800c916:	e02b      	b.n	800c970 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c918:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c91a:	3310      	adds	r3, #16
 800c91c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c91e:	4413      	add	r3, r2
 800c920:	3303      	adds	r3, #3
 800c922:	f023 0303 	bic.w	r3, r3, #3
 800c926:	4618      	mov	r0, r3
 800c928:	88b9      	ldrh	r1, [r7, #4]
 800c92a:	88ba      	ldrh	r2, [r7, #4]
 800c92c:	2300      	movs	r3, #0
 800c92e:	9301      	str	r3, [sp, #4]
 800c930:	887b      	ldrh	r3, [r7, #2]
 800c932:	9300      	str	r3, [sp, #0]
 800c934:	460b      	mov	r3, r1
 800c936:	4601      	mov	r1, r0
 800c938:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c93a:	f7ff ff09 	bl	800c750 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	685b      	ldr	r3, [r3, #4]
 800c942:	f003 0303 	and.w	r3, r3, #3
 800c946:	2b00      	cmp	r3, #0
 800c948:	d010      	beq.n	800c96c <pbuf_alloc+0x1c8>
 800c94a:	4b0b      	ldr	r3, [pc, #44]	@ (800c978 <pbuf_alloc+0x1d4>)
 800c94c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c950:	490d      	ldr	r1, [pc, #52]	@ (800c988 <pbuf_alloc+0x1e4>)
 800c952:	480b      	ldr	r0, [pc, #44]	@ (800c980 <pbuf_alloc+0x1dc>)
 800c954:	f00b fcd4 	bl	8018300 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c958:	e008      	b.n	800c96c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c95a:	4b07      	ldr	r3, [pc, #28]	@ (800c978 <pbuf_alloc+0x1d4>)
 800c95c:	f240 1227 	movw	r2, #295	@ 0x127
 800c960:	490a      	ldr	r1, [pc, #40]	@ (800c98c <pbuf_alloc+0x1e8>)
 800c962:	4807      	ldr	r0, [pc, #28]	@ (800c980 <pbuf_alloc+0x1dc>)
 800c964:	f00b fccc 	bl	8018300 <iprintf>
      return NULL;
 800c968:	2300      	movs	r3, #0
 800c96a:	e001      	b.n	800c970 <pbuf_alloc+0x1cc>
      break;
 800c96c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c970:	4618      	mov	r0, r3
 800c972:	3728      	adds	r7, #40	@ 0x28
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}
 800c978:	0801a338 	.word	0x0801a338
 800c97c:	0801a368 	.word	0x0801a368
 800c980:	0801a398 	.word	0x0801a398
 800c984:	0801a3c0 	.word	0x0801a3c0
 800c988:	0801a3f4 	.word	0x0801a3f4
 800c98c:	0801a420 	.word	0x0801a420

0800c990 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b086      	sub	sp, #24
 800c994:	af02      	add	r7, sp, #8
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	460b      	mov	r3, r1
 800c99a:	807b      	strh	r3, [r7, #2]
 800c99c:	4613      	mov	r3, r2
 800c99e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c9a0:	883b      	ldrh	r3, [r7, #0]
 800c9a2:	2b41      	cmp	r3, #65	@ 0x41
 800c9a4:	d009      	beq.n	800c9ba <pbuf_alloc_reference+0x2a>
 800c9a6:	883b      	ldrh	r3, [r7, #0]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d006      	beq.n	800c9ba <pbuf_alloc_reference+0x2a>
 800c9ac:	4b0f      	ldr	r3, [pc, #60]	@ (800c9ec <pbuf_alloc_reference+0x5c>)
 800c9ae:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c9b2:	490f      	ldr	r1, [pc, #60]	@ (800c9f0 <pbuf_alloc_reference+0x60>)
 800c9b4:	480f      	ldr	r0, [pc, #60]	@ (800c9f4 <pbuf_alloc_reference+0x64>)
 800c9b6:	f00b fca3 	bl	8018300 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c9ba:	200b      	movs	r0, #11
 800c9bc:	f7ff fb2e 	bl	800c01c <memp_malloc>
 800c9c0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	e00b      	b.n	800c9e4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c9cc:	8879      	ldrh	r1, [r7, #2]
 800c9ce:	887a      	ldrh	r2, [r7, #2]
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9301      	str	r3, [sp, #4]
 800c9d4:	883b      	ldrh	r3, [r7, #0]
 800c9d6:	9300      	str	r3, [sp, #0]
 800c9d8:	460b      	mov	r3, r1
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f7ff feb7 	bl	800c750 <pbuf_init_alloced_pbuf>
  return p;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	0801a338 	.word	0x0801a338
 800c9f0:	0801a43c 	.word	0x0801a43c
 800c9f4:	0801a398 	.word	0x0801a398

0800c9f8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b088      	sub	sp, #32
 800c9fc:	af02      	add	r7, sp, #8
 800c9fe:	607b      	str	r3, [r7, #4]
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]
 800ca04:	460b      	mov	r3, r1
 800ca06:	81bb      	strh	r3, [r7, #12]
 800ca08:	4613      	mov	r3, r2
 800ca0a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ca10:	8a7b      	ldrh	r3, [r7, #18]
 800ca12:	3303      	adds	r3, #3
 800ca14:	f023 0203 	bic.w	r2, r3, #3
 800ca18:	89bb      	ldrh	r3, [r7, #12]
 800ca1a:	441a      	add	r2, r3
 800ca1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d901      	bls.n	800ca26 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ca22:	2300      	movs	r3, #0
 800ca24:	e018      	b.n	800ca58 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ca26:	6a3b      	ldr	r3, [r7, #32]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d007      	beq.n	800ca3c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ca2c:	8a7b      	ldrh	r3, [r7, #18]
 800ca2e:	3303      	adds	r3, #3
 800ca30:	f023 0303 	bic.w	r3, r3, #3
 800ca34:	6a3a      	ldr	r2, [r7, #32]
 800ca36:	4413      	add	r3, r2
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	e001      	b.n	800ca40 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ca40:	6878      	ldr	r0, [r7, #4]
 800ca42:	89b9      	ldrh	r1, [r7, #12]
 800ca44:	89ba      	ldrh	r2, [r7, #12]
 800ca46:	2302      	movs	r3, #2
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	897b      	ldrh	r3, [r7, #10]
 800ca4c:	9300      	str	r3, [sp, #0]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	6979      	ldr	r1, [r7, #20]
 800ca52:	f7ff fe7d 	bl	800c750 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ca56:	687b      	ldr	r3, [r7, #4]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3718      	adds	r7, #24
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d106      	bne.n	800ca80 <pbuf_realloc+0x20>
 800ca72:	4b3a      	ldr	r3, [pc, #232]	@ (800cb5c <pbuf_realloc+0xfc>)
 800ca74:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800ca78:	4939      	ldr	r1, [pc, #228]	@ (800cb60 <pbuf_realloc+0x100>)
 800ca7a:	483a      	ldr	r0, [pc, #232]	@ (800cb64 <pbuf_realloc+0x104>)
 800ca7c:	f00b fc40 	bl	8018300 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	891b      	ldrh	r3, [r3, #8]
 800ca84:	887a      	ldrh	r2, [r7, #2]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d263      	bcs.n	800cb52 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	891a      	ldrh	r2, [r3, #8]
 800ca8e:	887b      	ldrh	r3, [r7, #2]
 800ca90:	1ad3      	subs	r3, r2, r3
 800ca92:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ca94:	887b      	ldrh	r3, [r7, #2]
 800ca96:	817b      	strh	r3, [r7, #10]
  q = p;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ca9c:	e018      	b.n	800cad0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	895b      	ldrh	r3, [r3, #10]
 800caa2:	897a      	ldrh	r2, [r7, #10]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	891a      	ldrh	r2, [r3, #8]
 800caac:	893b      	ldrh	r3, [r7, #8]
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	b29a      	uxth	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <pbuf_realloc+0x70>
 800cac2:	4b26      	ldr	r3, [pc, #152]	@ (800cb5c <pbuf_realloc+0xfc>)
 800cac4:	f240 12af 	movw	r2, #431	@ 0x1af
 800cac8:	4927      	ldr	r1, [pc, #156]	@ (800cb68 <pbuf_realloc+0x108>)
 800caca:	4826      	ldr	r0, [pc, #152]	@ (800cb64 <pbuf_realloc+0x104>)
 800cacc:	f00b fc18 	bl	8018300 <iprintf>
  while (rem_len > q->len) {
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	895b      	ldrh	r3, [r3, #10]
 800cad4:	897a      	ldrh	r2, [r7, #10]
 800cad6:	429a      	cmp	r2, r3
 800cad8:	d8e1      	bhi.n	800ca9e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	7b1b      	ldrb	r3, [r3, #12]
 800cade:	f003 030f 	and.w	r3, r3, #15
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d121      	bne.n	800cb2a <pbuf_realloc+0xca>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	895b      	ldrh	r3, [r3, #10]
 800caea:	897a      	ldrh	r2, [r7, #10]
 800caec:	429a      	cmp	r2, r3
 800caee:	d01c      	beq.n	800cb2a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	7b5b      	ldrb	r3, [r3, #13]
 800caf4:	f003 0302 	and.w	r3, r3, #2
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d116      	bne.n	800cb2a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	685a      	ldr	r2, [r3, #4]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	1ad3      	subs	r3, r2, r3
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	897b      	ldrh	r3, [r7, #10]
 800cb08:	4413      	add	r3, r2
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f7fe fff8 	bl	800bb04 <mem_trim>
 800cb14:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d106      	bne.n	800cb2a <pbuf_realloc+0xca>
 800cb1c:	4b0f      	ldr	r3, [pc, #60]	@ (800cb5c <pbuf_realloc+0xfc>)
 800cb1e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cb22:	4912      	ldr	r1, [pc, #72]	@ (800cb6c <pbuf_realloc+0x10c>)
 800cb24:	480f      	ldr	r0, [pc, #60]	@ (800cb64 <pbuf_realloc+0x104>)
 800cb26:	f00b fbeb 	bl	8018300 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	897a      	ldrh	r2, [r7, #10]
 800cb2e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	895a      	ldrh	r2, [r3, #10]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d004      	beq.n	800cb4a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f000 f911 	bl	800cd6c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	601a      	str	r2, [r3, #0]
 800cb50:	e000      	b.n	800cb54 <pbuf_realloc+0xf4>
    return;
 800cb52:	bf00      	nop

}
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	0801a338 	.word	0x0801a338
 800cb60:	0801a450 	.word	0x0801a450
 800cb64:	0801a398 	.word	0x0801a398
 800cb68:	0801a468 	.word	0x0801a468
 800cb6c:	0801a480 	.word	0x0801a480

0800cb70 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b086      	sub	sp, #24
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60f8      	str	r0, [r7, #12]
 800cb78:	60b9      	str	r1, [r7, #8]
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <pbuf_add_header_impl+0x22>
 800cb84:	4b2b      	ldr	r3, [pc, #172]	@ (800cc34 <pbuf_add_header_impl+0xc4>)
 800cb86:	f240 12df 	movw	r2, #479	@ 0x1df
 800cb8a:	492b      	ldr	r1, [pc, #172]	@ (800cc38 <pbuf_add_header_impl+0xc8>)
 800cb8c:	482b      	ldr	r0, [pc, #172]	@ (800cc3c <pbuf_add_header_impl+0xcc>)
 800cb8e:	f00b fbb7 	bl	8018300 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d003      	beq.n	800cba0 <pbuf_add_header_impl+0x30>
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cb9e:	d301      	bcc.n	800cba4 <pbuf_add_header_impl+0x34>
    return 1;
 800cba0:	2301      	movs	r3, #1
 800cba2:	e043      	b.n	800cc2c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d101      	bne.n	800cbae <pbuf_add_header_impl+0x3e>
    return 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	e03e      	b.n	800cc2c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	891a      	ldrh	r2, [r3, #8]
 800cbb6:	8a7b      	ldrh	r3, [r7, #18]
 800cbb8:	4413      	add	r3, r2
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	8a7a      	ldrh	r2, [r7, #18]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d901      	bls.n	800cbc6 <pbuf_add_header_impl+0x56>
    return 1;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	e032      	b.n	800cc2c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	7b1b      	ldrb	r3, [r3, #12]
 800cbca:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cbcc:	8a3b      	ldrh	r3, [r7, #16]
 800cbce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00c      	beq.n	800cbf0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	685a      	ldr	r2, [r3, #4]
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	425b      	negs	r3, r3
 800cbde:	4413      	add	r3, r2
 800cbe0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	3310      	adds	r3, #16
 800cbe6:	697a      	ldr	r2, [r7, #20]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d20d      	bcs.n	800cc08 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e01d      	b.n	800cc2c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800cbf0:	79fb      	ldrb	r3, [r7, #7]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d006      	beq.n	800cc04 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	685a      	ldr	r2, [r3, #4]
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	425b      	negs	r3, r3
 800cbfe:	4413      	add	r3, r2
 800cc00:	617b      	str	r3, [r7, #20]
 800cc02:	e001      	b.n	800cc08 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e011      	b.n	800cc2c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	697a      	ldr	r2, [r7, #20]
 800cc0c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	895a      	ldrh	r2, [r3, #10]
 800cc12:	8a7b      	ldrh	r3, [r7, #18]
 800cc14:	4413      	add	r3, r2
 800cc16:	b29a      	uxth	r2, r3
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	891a      	ldrh	r2, [r3, #8]
 800cc20:	8a7b      	ldrh	r3, [r7, #18]
 800cc22:	4413      	add	r3, r2
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	811a      	strh	r2, [r3, #8]


  return 0;
 800cc2a:	2300      	movs	r3, #0
}
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	3718      	adds	r7, #24
 800cc30:	46bd      	mov	sp, r7
 800cc32:	bd80      	pop	{r7, pc}
 800cc34:	0801a338 	.word	0x0801a338
 800cc38:	0801a49c 	.word	0x0801a49c
 800cc3c:	0801a398 	.word	0x0801a398

0800cc40 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b082      	sub	sp, #8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f7ff ff8e 	bl	800cb70 <pbuf_add_header_impl>
 800cc54:	4603      	mov	r3, r0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3708      	adds	r7, #8
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}
	...

0800cc60 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <pbuf_remove_header+0x1e>
 800cc70:	4b20      	ldr	r3, [pc, #128]	@ (800ccf4 <pbuf_remove_header+0x94>)
 800cc72:	f240 224b 	movw	r2, #587	@ 0x24b
 800cc76:	4920      	ldr	r1, [pc, #128]	@ (800ccf8 <pbuf_remove_header+0x98>)
 800cc78:	4820      	ldr	r0, [pc, #128]	@ (800ccfc <pbuf_remove_header+0x9c>)
 800cc7a:	f00b fb41 	bl	8018300 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <pbuf_remove_header+0x2c>
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc8a:	d301      	bcc.n	800cc90 <pbuf_remove_header+0x30>
    return 1;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	e02c      	b.n	800ccea <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d101      	bne.n	800cc9a <pbuf_remove_header+0x3a>
    return 0;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e027      	b.n	800ccea <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	895b      	ldrh	r3, [r3, #10]
 800cca2:	89fa      	ldrh	r2, [r7, #14]
 800cca4:	429a      	cmp	r2, r3
 800cca6:	d908      	bls.n	800ccba <pbuf_remove_header+0x5a>
 800cca8:	4b12      	ldr	r3, [pc, #72]	@ (800ccf4 <pbuf_remove_header+0x94>)
 800ccaa:	f240 2255 	movw	r2, #597	@ 0x255
 800ccae:	4914      	ldr	r1, [pc, #80]	@ (800cd00 <pbuf_remove_header+0xa0>)
 800ccb0:	4812      	ldr	r0, [pc, #72]	@ (800ccfc <pbuf_remove_header+0x9c>)
 800ccb2:	f00b fb25 	bl	8018300 <iprintf>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e017      	b.n	800ccea <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	685a      	ldr	r2, [r3, #4]
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	441a      	add	r2, r3
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	895a      	ldrh	r2, [r3, #10]
 800ccd0:	89fb      	ldrh	r3, [r7, #14]
 800ccd2:	1ad3      	subs	r3, r2, r3
 800ccd4:	b29a      	uxth	r2, r3
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	891a      	ldrh	r2, [r3, #8]
 800ccde:	89fb      	ldrh	r3, [r7, #14]
 800cce0:	1ad3      	subs	r3, r2, r3
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0801a338 	.word	0x0801a338
 800ccf8:	0801a49c 	.word	0x0801a49c
 800ccfc:	0801a398 	.word	0x0801a398
 800cd00:	0801a4a8 	.word	0x0801a4a8

0800cd04 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b082      	sub	sp, #8
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	807b      	strh	r3, [r7, #2]
 800cd10:	4613      	mov	r3, r2
 800cd12:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cd14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	da08      	bge.n	800cd2e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cd1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd20:	425b      	negs	r3, r3
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f7ff ff9b 	bl	800cc60 <pbuf_remove_header>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	e007      	b.n	800cd3e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cd2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd32:	787a      	ldrb	r2, [r7, #1]
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f7ff ff1a 	bl	800cb70 <pbuf_add_header_impl>
 800cd3c:	4603      	mov	r3, r0
  }
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cd52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cd56:	2201      	movs	r2, #1
 800cd58:	4619      	mov	r1, r3
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff ffd2 	bl	800cd04 <pbuf_header_impl>
 800cd60:	4603      	mov	r3, r0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
	...

0800cd6c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d10b      	bne.n	800cd92 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d106      	bne.n	800cd8e <pbuf_free+0x22>
 800cd80:	4b3b      	ldr	r3, [pc, #236]	@ (800ce70 <pbuf_free+0x104>)
 800cd82:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800cd86:	493b      	ldr	r1, [pc, #236]	@ (800ce74 <pbuf_free+0x108>)
 800cd88:	483b      	ldr	r0, [pc, #236]	@ (800ce78 <pbuf_free+0x10c>)
 800cd8a:	f00b fab9 	bl	8018300 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e069      	b.n	800ce66 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cd92:	2300      	movs	r3, #0
 800cd94:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cd96:	e062      	b.n	800ce5e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cd98:	f00b f994 	bl	80180c4 <sys_arch_protect>
 800cd9c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	7b9b      	ldrb	r3, [r3, #14]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d106      	bne.n	800cdb4 <pbuf_free+0x48>
 800cda6:	4b32      	ldr	r3, [pc, #200]	@ (800ce70 <pbuf_free+0x104>)
 800cda8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cdac:	4933      	ldr	r1, [pc, #204]	@ (800ce7c <pbuf_free+0x110>)
 800cdae:	4832      	ldr	r0, [pc, #200]	@ (800ce78 <pbuf_free+0x10c>)
 800cdb0:	f00b faa6 	bl	8018300 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	7b9b      	ldrb	r3, [r3, #14]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	b2da      	uxtb	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	739a      	strb	r2, [r3, #14]
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	7b9b      	ldrb	r3, [r3, #14]
 800cdc4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cdc6:	69b8      	ldr	r0, [r7, #24]
 800cdc8:	f00b f98a 	bl	80180e0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d143      	bne.n	800ce5a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	7b1b      	ldrb	r3, [r3, #12]
 800cddc:	f003 030f 	and.w	r3, r3, #15
 800cde0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	7b5b      	ldrb	r3, [r3, #13]
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d011      	beq.n	800ce12 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <pbuf_free+0x9c>
 800cdfa:	4b1d      	ldr	r3, [pc, #116]	@ (800ce70 <pbuf_free+0x104>)
 800cdfc:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800ce00:	491f      	ldr	r1, [pc, #124]	@ (800ce80 <pbuf_free+0x114>)
 800ce02:	481d      	ldr	r0, [pc, #116]	@ (800ce78 <pbuf_free+0x10c>)
 800ce04:	f00b fa7c 	bl	8018300 <iprintf>
        pc->custom_free_function(p);
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	4798      	blx	r3
 800ce10:	e01d      	b.n	800ce4e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d104      	bne.n	800ce22 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	200c      	movs	r0, #12
 800ce1c:	f7ff f950 	bl	800c0c0 <memp_free>
 800ce20:	e015      	b.n	800ce4e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ce22:	7bfb      	ldrb	r3, [r7, #15]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d104      	bne.n	800ce32 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ce28:	6879      	ldr	r1, [r7, #4]
 800ce2a:	200b      	movs	r0, #11
 800ce2c:	f7ff f948 	bl	800c0c0 <memp_free>
 800ce30:	e00d      	b.n	800ce4e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d103      	bne.n	800ce40 <pbuf_free+0xd4>
          mem_free(p);
 800ce38:	6878      	ldr	r0, [r7, #4]
 800ce3a:	f7fe fdd3 	bl	800b9e4 <mem_free>
 800ce3e:	e006      	b.n	800ce4e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ce40:	4b0b      	ldr	r3, [pc, #44]	@ (800ce70 <pbuf_free+0x104>)
 800ce42:	f240 320f 	movw	r2, #783	@ 0x30f
 800ce46:	490f      	ldr	r1, [pc, #60]	@ (800ce84 <pbuf_free+0x118>)
 800ce48:	480b      	ldr	r0, [pc, #44]	@ (800ce78 <pbuf_free+0x10c>)
 800ce4a:	f00b fa59 	bl	8018300 <iprintf>
        }
      }
      count++;
 800ce4e:	7ffb      	ldrb	r3, [r7, #31]
 800ce50:	3301      	adds	r3, #1
 800ce52:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	607b      	str	r3, [r7, #4]
 800ce58:	e001      	b.n	800ce5e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d199      	bne.n	800cd98 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ce64:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3720      	adds	r7, #32
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop
 800ce70:	0801a338 	.word	0x0801a338
 800ce74:	0801a49c 	.word	0x0801a49c
 800ce78:	0801a398 	.word	0x0801a398
 800ce7c:	0801a4c8 	.word	0x0801a4c8
 800ce80:	0801a4e0 	.word	0x0801a4e0
 800ce84:	0801a504 	.word	0x0801a504

0800ce88 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ce90:	2300      	movs	r3, #0
 800ce92:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ce94:	e005      	b.n	800cea2 <pbuf_clen+0x1a>
    ++len;
 800ce96:	89fb      	ldrh	r3, [r7, #14]
 800ce98:	3301      	adds	r3, #1
 800ce9a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1f6      	bne.n	800ce96 <pbuf_clen+0xe>
  }
  return len;
 800cea8:	89fb      	ldrh	r3, [r7, #14]
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3714      	adds	r7, #20
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb4:	4770      	bx	lr
	...

0800ceb8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d016      	beq.n	800cef4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cec6:	f00b f8fd 	bl	80180c4 <sys_arch_protect>
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7b9b      	ldrb	r3, [r3, #14]
 800ced0:	3301      	adds	r3, #1
 800ced2:	b2da      	uxtb	r2, r3
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	739a      	strb	r2, [r3, #14]
 800ced8:	68f8      	ldr	r0, [r7, #12]
 800ceda:	f00b f901 	bl	80180e0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	7b9b      	ldrb	r3, [r3, #14]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d106      	bne.n	800cef4 <pbuf_ref+0x3c>
 800cee6:	4b05      	ldr	r3, [pc, #20]	@ (800cefc <pbuf_ref+0x44>)
 800cee8:	f240 3242 	movw	r2, #834	@ 0x342
 800ceec:	4904      	ldr	r1, [pc, #16]	@ (800cf00 <pbuf_ref+0x48>)
 800ceee:	4805      	ldr	r0, [pc, #20]	@ (800cf04 <pbuf_ref+0x4c>)
 800cef0:	f00b fa06 	bl	8018300 <iprintf>
  }
}
 800cef4:	bf00      	nop
 800cef6:	3710      	adds	r7, #16
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	0801a338 	.word	0x0801a338
 800cf00:	0801a518 	.word	0x0801a518
 800cf04:	0801a398 	.word	0x0801a398

0800cf08 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <pbuf_cat+0x16>
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d107      	bne.n	800cf2e <pbuf_cat+0x26>
 800cf1e:	4b20      	ldr	r3, [pc, #128]	@ (800cfa0 <pbuf_cat+0x98>)
 800cf20:	f240 3259 	movw	r2, #857	@ 0x359
 800cf24:	491f      	ldr	r1, [pc, #124]	@ (800cfa4 <pbuf_cat+0x9c>)
 800cf26:	4820      	ldr	r0, [pc, #128]	@ (800cfa8 <pbuf_cat+0xa0>)
 800cf28:	f00b f9ea 	bl	8018300 <iprintf>
 800cf2c:	e034      	b.n	800cf98 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	60fb      	str	r3, [r7, #12]
 800cf32:	e00a      	b.n	800cf4a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	891a      	ldrh	r2, [r3, #8]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	891b      	ldrh	r3, [r3, #8]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	60fb      	str	r3, [r7, #12]
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1f0      	bne.n	800cf34 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	891a      	ldrh	r2, [r3, #8]
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	895b      	ldrh	r3, [r3, #10]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d006      	beq.n	800cf6c <pbuf_cat+0x64>
 800cf5e:	4b10      	ldr	r3, [pc, #64]	@ (800cfa0 <pbuf_cat+0x98>)
 800cf60:	f240 3262 	movw	r2, #866	@ 0x362
 800cf64:	4911      	ldr	r1, [pc, #68]	@ (800cfac <pbuf_cat+0xa4>)
 800cf66:	4810      	ldr	r0, [pc, #64]	@ (800cfa8 <pbuf_cat+0xa0>)
 800cf68:	f00b f9ca 	bl	8018300 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d006      	beq.n	800cf82 <pbuf_cat+0x7a>
 800cf74:	4b0a      	ldr	r3, [pc, #40]	@ (800cfa0 <pbuf_cat+0x98>)
 800cf76:	f240 3263 	movw	r2, #867	@ 0x363
 800cf7a:	490d      	ldr	r1, [pc, #52]	@ (800cfb0 <pbuf_cat+0xa8>)
 800cf7c:	480a      	ldr	r0, [pc, #40]	@ (800cfa8 <pbuf_cat+0xa0>)
 800cf7e:	f00b f9bf 	bl	8018300 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	891a      	ldrh	r2, [r3, #8]
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	891b      	ldrh	r3, [r3, #8]
 800cf8a:	4413      	add	r3, r2
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	683a      	ldr	r2, [r7, #0]
 800cf96:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cf98:	3710      	adds	r7, #16
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	0801a338 	.word	0x0801a338
 800cfa4:	0801a52c 	.word	0x0801a52c
 800cfa8:	0801a398 	.word	0x0801a398
 800cfac:	0801a564 	.word	0x0801a564
 800cfb0:	0801a594 	.word	0x0801a594

0800cfb4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
 800cfbc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cfbe:	6839      	ldr	r1, [r7, #0]
 800cfc0:	6878      	ldr	r0, [r7, #4]
 800cfc2:	f7ff ffa1 	bl	800cf08 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cfc6:	6838      	ldr	r0, [r7, #0]
 800cfc8:	f7ff ff76 	bl	800ceb8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800cfcc:	bf00      	nop
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d008      	beq.n	800cffe <pbuf_copy+0x2a>
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d005      	beq.n	800cffe <pbuf_copy+0x2a>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	891a      	ldrh	r2, [r3, #8]
 800cff6:	683b      	ldr	r3, [r7, #0]
 800cff8:	891b      	ldrh	r3, [r3, #8]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d209      	bcs.n	800d012 <pbuf_copy+0x3e>
 800cffe:	4b57      	ldr	r3, [pc, #348]	@ (800d15c <pbuf_copy+0x188>)
 800d000:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d004:	4956      	ldr	r1, [pc, #344]	@ (800d160 <pbuf_copy+0x18c>)
 800d006:	4857      	ldr	r0, [pc, #348]	@ (800d164 <pbuf_copy+0x190>)
 800d008:	f00b f97a 	bl	8018300 <iprintf>
 800d00c:	f06f 030f 	mvn.w	r3, #15
 800d010:	e09f      	b.n	800d152 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	895b      	ldrh	r3, [r3, #10]
 800d016:	461a      	mov	r2, r3
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	1ad2      	subs	r2, r2, r3
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	895b      	ldrh	r3, [r3, #10]
 800d020:	4619      	mov	r1, r3
 800d022:	693b      	ldr	r3, [r7, #16]
 800d024:	1acb      	subs	r3, r1, r3
 800d026:	429a      	cmp	r2, r3
 800d028:	d306      	bcc.n	800d038 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	895b      	ldrh	r3, [r3, #10]
 800d02e:	461a      	mov	r2, r3
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	1ad3      	subs	r3, r2, r3
 800d034:	60fb      	str	r3, [r7, #12]
 800d036:	e005      	b.n	800d044 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	895b      	ldrh	r3, [r3, #10]
 800d03c:	461a      	mov	r2, r3
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	1ad3      	subs	r3, r2, r3
 800d042:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685a      	ldr	r2, [r3, #4]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	18d0      	adds	r0, r2, r3
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	685a      	ldr	r2, [r3, #4]
 800d050:	693b      	ldr	r3, [r7, #16]
 800d052:	4413      	add	r3, r2
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	4619      	mov	r1, r3
 800d058:	f00b fa2d 	bl	80184b6 <memcpy>
    offset_to += len;
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	4413      	add	r3, r2
 800d062:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d064:	693a      	ldr	r2, [r7, #16]
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	4413      	add	r3, r2
 800d06a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	895b      	ldrh	r3, [r3, #10]
 800d070:	461a      	mov	r2, r3
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	4293      	cmp	r3, r2
 800d076:	d906      	bls.n	800d086 <pbuf_copy+0xb2>
 800d078:	4b38      	ldr	r3, [pc, #224]	@ (800d15c <pbuf_copy+0x188>)
 800d07a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d07e:	493a      	ldr	r1, [pc, #232]	@ (800d168 <pbuf_copy+0x194>)
 800d080:	4838      	ldr	r0, [pc, #224]	@ (800d164 <pbuf_copy+0x190>)
 800d082:	f00b f93d 	bl	8018300 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	895b      	ldrh	r3, [r3, #10]
 800d08a:	461a      	mov	r2, r3
 800d08c:	693b      	ldr	r3, [r7, #16]
 800d08e:	4293      	cmp	r3, r2
 800d090:	d906      	bls.n	800d0a0 <pbuf_copy+0xcc>
 800d092:	4b32      	ldr	r3, [pc, #200]	@ (800d15c <pbuf_copy+0x188>)
 800d094:	f240 32da 	movw	r2, #986	@ 0x3da
 800d098:	4934      	ldr	r1, [pc, #208]	@ (800d16c <pbuf_copy+0x198>)
 800d09a:	4832      	ldr	r0, [pc, #200]	@ (800d164 <pbuf_copy+0x190>)
 800d09c:	f00b f930 	bl	8018300 <iprintf>
    if (offset_from >= p_from->len) {
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	895b      	ldrh	r3, [r3, #10]
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d304      	bcc.n	800d0b6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	895b      	ldrh	r3, [r3, #10]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d114      	bne.n	800d0ec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10c      	bne.n	800d0ec <pbuf_copy+0x118>
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d009      	beq.n	800d0ec <pbuf_copy+0x118>
 800d0d8:	4b20      	ldr	r3, [pc, #128]	@ (800d15c <pbuf_copy+0x188>)
 800d0da:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d0de:	4924      	ldr	r1, [pc, #144]	@ (800d170 <pbuf_copy+0x19c>)
 800d0e0:	4820      	ldr	r0, [pc, #128]	@ (800d164 <pbuf_copy+0x190>)
 800d0e2:	f00b f90d 	bl	8018300 <iprintf>
 800d0e6:	f06f 030f 	mvn.w	r3, #15
 800d0ea:	e032      	b.n	800d152 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d013      	beq.n	800d11a <pbuf_copy+0x146>
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	895a      	ldrh	r2, [r3, #10]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	891b      	ldrh	r3, [r3, #8]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d10d      	bne.n	800d11a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d009      	beq.n	800d11a <pbuf_copy+0x146>
 800d106:	4b15      	ldr	r3, [pc, #84]	@ (800d15c <pbuf_copy+0x188>)
 800d108:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d10c:	4919      	ldr	r1, [pc, #100]	@ (800d174 <pbuf_copy+0x1a0>)
 800d10e:	4815      	ldr	r0, [pc, #84]	@ (800d164 <pbuf_copy+0x190>)
 800d110:	f00b f8f6 	bl	8018300 <iprintf>
 800d114:	f06f 0305 	mvn.w	r3, #5
 800d118:	e01b      	b.n	800d152 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d013      	beq.n	800d148 <pbuf_copy+0x174>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	895a      	ldrh	r2, [r3, #10]
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	891b      	ldrh	r3, [r3, #8]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d10d      	bne.n	800d148 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d009      	beq.n	800d148 <pbuf_copy+0x174>
 800d134:	4b09      	ldr	r3, [pc, #36]	@ (800d15c <pbuf_copy+0x188>)
 800d136:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d13a:	490e      	ldr	r1, [pc, #56]	@ (800d174 <pbuf_copy+0x1a0>)
 800d13c:	4809      	ldr	r0, [pc, #36]	@ (800d164 <pbuf_copy+0x190>)
 800d13e:	f00b f8df 	bl	8018300 <iprintf>
 800d142:	f06f 0305 	mvn.w	r3, #5
 800d146:	e004      	b.n	800d152 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f47f af61 	bne.w	800d012 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3718      	adds	r7, #24
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	0801a338 	.word	0x0801a338
 800d160:	0801a5e0 	.word	0x0801a5e0
 800d164:	0801a398 	.word	0x0801a398
 800d168:	0801a610 	.word	0x0801a610
 800d16c:	0801a628 	.word	0x0801a628
 800d170:	0801a644 	.word	0x0801a644
 800d174:	0801a654 	.word	0x0801a654

0800d178 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b088      	sub	sp, #32
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	4611      	mov	r1, r2
 800d184:	461a      	mov	r2, r3
 800d186:	460b      	mov	r3, r1
 800d188:	80fb      	strh	r3, [r7, #6]
 800d18a:	4613      	mov	r3, r2
 800d18c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d18e:	2300      	movs	r3, #0
 800d190:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d192:	2300      	movs	r3, #0
 800d194:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d108      	bne.n	800d1ae <pbuf_copy_partial+0x36>
 800d19c:	4b2b      	ldr	r3, [pc, #172]	@ (800d24c <pbuf_copy_partial+0xd4>)
 800d19e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d1a2:	492b      	ldr	r1, [pc, #172]	@ (800d250 <pbuf_copy_partial+0xd8>)
 800d1a4:	482b      	ldr	r0, [pc, #172]	@ (800d254 <pbuf_copy_partial+0xdc>)
 800d1a6:	f00b f8ab 	bl	8018300 <iprintf>
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e04a      	b.n	800d244 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d108      	bne.n	800d1c6 <pbuf_copy_partial+0x4e>
 800d1b4:	4b25      	ldr	r3, [pc, #148]	@ (800d24c <pbuf_copy_partial+0xd4>)
 800d1b6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d1ba:	4927      	ldr	r1, [pc, #156]	@ (800d258 <pbuf_copy_partial+0xe0>)
 800d1bc:	4825      	ldr	r0, [pc, #148]	@ (800d254 <pbuf_copy_partial+0xdc>)
 800d1be:	f00b f89f 	bl	8018300 <iprintf>
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	e03e      	b.n	800d244 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	61fb      	str	r3, [r7, #28]
 800d1ca:	e034      	b.n	800d236 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d1cc:	88bb      	ldrh	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00a      	beq.n	800d1e8 <pbuf_copy_partial+0x70>
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	895b      	ldrh	r3, [r3, #10]
 800d1d6:	88ba      	ldrh	r2, [r7, #4]
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d305      	bcc.n	800d1e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	895b      	ldrh	r3, [r3, #10]
 800d1e0:	88ba      	ldrh	r2, [r7, #4]
 800d1e2:	1ad3      	subs	r3, r2, r3
 800d1e4:	80bb      	strh	r3, [r7, #4]
 800d1e6:	e023      	b.n	800d230 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	895a      	ldrh	r2, [r3, #10]
 800d1ec:	88bb      	ldrh	r3, [r7, #4]
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d1f2:	8b3a      	ldrh	r2, [r7, #24]
 800d1f4:	88fb      	ldrh	r3, [r7, #6]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d901      	bls.n	800d1fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d1fa:	88fb      	ldrh	r3, [r7, #6]
 800d1fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d1fe:	8b7b      	ldrh	r3, [r7, #26]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	18d0      	adds	r0, r2, r3
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	685a      	ldr	r2, [r3, #4]
 800d208:	88bb      	ldrh	r3, [r7, #4]
 800d20a:	4413      	add	r3, r2
 800d20c:	8b3a      	ldrh	r2, [r7, #24]
 800d20e:	4619      	mov	r1, r3
 800d210:	f00b f951 	bl	80184b6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d214:	8afa      	ldrh	r2, [r7, #22]
 800d216:	8b3b      	ldrh	r3, [r7, #24]
 800d218:	4413      	add	r3, r2
 800d21a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d21c:	8b7a      	ldrh	r2, [r7, #26]
 800d21e:	8b3b      	ldrh	r3, [r7, #24]
 800d220:	4413      	add	r3, r2
 800d222:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d224:	88fa      	ldrh	r2, [r7, #6]
 800d226:	8b3b      	ldrh	r3, [r7, #24]
 800d228:	1ad3      	subs	r3, r2, r3
 800d22a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d22c:	2300      	movs	r3, #0
 800d22e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d230:	69fb      	ldr	r3, [r7, #28]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	61fb      	str	r3, [r7, #28]
 800d236:	88fb      	ldrh	r3, [r7, #6]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d002      	beq.n	800d242 <pbuf_copy_partial+0xca>
 800d23c:	69fb      	ldr	r3, [r7, #28]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1c4      	bne.n	800d1cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d242:	8afb      	ldrh	r3, [r7, #22]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3720      	adds	r7, #32
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	0801a338 	.word	0x0801a338
 800d250:	0801a680 	.word	0x0801a680
 800d254:	0801a398 	.word	0x0801a398
 800d258:	0801a6a0 	.word	0x0801a6a0

0800d25c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	4603      	mov	r3, r0
 800d264:	603a      	str	r2, [r7, #0]
 800d266:	71fb      	strb	r3, [r7, #7]
 800d268:	460b      	mov	r3, r1
 800d26a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	8919      	ldrh	r1, [r3, #8]
 800d270:	88ba      	ldrh	r2, [r7, #4]
 800d272:	79fb      	ldrb	r3, [r7, #7]
 800d274:	4618      	mov	r0, r3
 800d276:	f7ff fa95 	bl	800c7a4 <pbuf_alloc>
 800d27a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d101      	bne.n	800d286 <pbuf_clone+0x2a>
    return NULL;
 800d282:	2300      	movs	r3, #0
 800d284:	e011      	b.n	800d2aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	68f8      	ldr	r0, [r7, #12]
 800d28a:	f7ff fea3 	bl	800cfd4 <pbuf_copy>
 800d28e:	4603      	mov	r3, r0
 800d290:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d292:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d006      	beq.n	800d2a8 <pbuf_clone+0x4c>
 800d29a:	4b06      	ldr	r3, [pc, #24]	@ (800d2b4 <pbuf_clone+0x58>)
 800d29c:	f240 5224 	movw	r2, #1316	@ 0x524
 800d2a0:	4905      	ldr	r1, [pc, #20]	@ (800d2b8 <pbuf_clone+0x5c>)
 800d2a2:	4806      	ldr	r0, [pc, #24]	@ (800d2bc <pbuf_clone+0x60>)
 800d2a4:	f00b f82c 	bl	8018300 <iprintf>
  return q;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	0801a338 	.word	0x0801a338
 800d2b8:	0801a7ac 	.word	0x0801a7ac
 800d2bc:	0801a398 	.word	0x0801a398

0800d2c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d2c4:	f00a ff1c 	bl	8018100 <rand>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d2d0:	b29b      	uxth	r3, r3
 800d2d2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	4b01      	ldr	r3, [pc, #4]	@ (800d2e0 <tcp_init+0x20>)
 800d2da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d2dc:	bf00      	nop
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20000014 	.word	0x20000014

0800d2e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b082      	sub	sp, #8
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	7d1b      	ldrb	r3, [r3, #20]
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	d105      	bne.n	800d300 <tcp_free+0x1c>
 800d2f4:	4b06      	ldr	r3, [pc, #24]	@ (800d310 <tcp_free+0x2c>)
 800d2f6:	22d4      	movs	r2, #212	@ 0xd4
 800d2f8:	4906      	ldr	r1, [pc, #24]	@ (800d314 <tcp_free+0x30>)
 800d2fa:	4807      	ldr	r0, [pc, #28]	@ (800d318 <tcp_free+0x34>)
 800d2fc:	f00b f800 	bl	8018300 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d300:	6879      	ldr	r1, [r7, #4]
 800d302:	2001      	movs	r0, #1
 800d304:	f7fe fedc 	bl	800c0c0 <memp_free>
}
 800d308:	bf00      	nop
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	0801a838 	.word	0x0801a838
 800d314:	0801a868 	.word	0x0801a868
 800d318:	0801a87c 	.word	0x0801a87c

0800d31c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	7d1b      	ldrb	r3, [r3, #20]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d105      	bne.n	800d338 <tcp_free_listen+0x1c>
 800d32c:	4b06      	ldr	r3, [pc, #24]	@ (800d348 <tcp_free_listen+0x2c>)
 800d32e:	22df      	movs	r2, #223	@ 0xdf
 800d330:	4906      	ldr	r1, [pc, #24]	@ (800d34c <tcp_free_listen+0x30>)
 800d332:	4807      	ldr	r0, [pc, #28]	@ (800d350 <tcp_free_listen+0x34>)
 800d334:	f00a ffe4 	bl	8018300 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d338:	6879      	ldr	r1, [r7, #4]
 800d33a:	2002      	movs	r0, #2
 800d33c:	f7fe fec0 	bl	800c0c0 <memp_free>
}
 800d340:	bf00      	nop
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	0801a838 	.word	0x0801a838
 800d34c:	0801a8a4 	.word	0x0801a8a4
 800d350:	0801a87c 	.word	0x0801a87c

0800d354 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d358:	f001 f88a 	bl	800e470 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d35c:	4b07      	ldr	r3, [pc, #28]	@ (800d37c <tcp_tmr+0x28>)
 800d35e:	781b      	ldrb	r3, [r3, #0]
 800d360:	3301      	adds	r3, #1
 800d362:	b2da      	uxtb	r2, r3
 800d364:	4b05      	ldr	r3, [pc, #20]	@ (800d37c <tcp_tmr+0x28>)
 800d366:	701a      	strb	r2, [r3, #0]
 800d368:	4b04      	ldr	r3, [pc, #16]	@ (800d37c <tcp_tmr+0x28>)
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	f003 0301 	and.w	r3, r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d374:	f000 fd50 	bl	800de18 <tcp_slowtmr>
  }
}
 800d378:	bf00      	nop
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200150b9 	.word	0x200150b9

0800d380 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d380:	b580      	push	{r7, lr}
 800d382:	b084      	sub	sp, #16
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d105      	bne.n	800d39c <tcp_remove_listener+0x1c>
 800d390:	4b0d      	ldr	r3, [pc, #52]	@ (800d3c8 <tcp_remove_listener+0x48>)
 800d392:	22ff      	movs	r2, #255	@ 0xff
 800d394:	490d      	ldr	r1, [pc, #52]	@ (800d3cc <tcp_remove_listener+0x4c>)
 800d396:	480e      	ldr	r0, [pc, #56]	@ (800d3d0 <tcp_remove_listener+0x50>)
 800d398:	f00a ffb2 	bl	8018300 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	60fb      	str	r3, [r7, #12]
 800d3a0:	e00a      	b.n	800d3b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d3a6:	683a      	ldr	r2, [r7, #0]
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d102      	bne.n	800d3b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	679a      	str	r2, [r3, #120]	@ 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	68db      	ldr	r3, [r3, #12]
 800d3b6:	60fb      	str	r3, [r7, #12]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d1f1      	bne.n	800d3a2 <tcp_remove_listener+0x22>
    }
  }
}
 800d3be:	bf00      	nop
 800d3c0:	bf00      	nop
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	0801a838 	.word	0x0801a838
 800d3cc:	0801a8c0 	.word	0x0801a8c0
 800d3d0:	0801a87c 	.word	0x0801a87c

0800d3d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d106      	bne.n	800d3f0 <tcp_listen_closed+0x1c>
 800d3e2:	4b14      	ldr	r3, [pc, #80]	@ (800d434 <tcp_listen_closed+0x60>)
 800d3e4:	f240 1211 	movw	r2, #273	@ 0x111
 800d3e8:	4913      	ldr	r1, [pc, #76]	@ (800d438 <tcp_listen_closed+0x64>)
 800d3ea:	4814      	ldr	r0, [pc, #80]	@ (800d43c <tcp_listen_closed+0x68>)
 800d3ec:	f00a ff88 	bl	8018300 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7d1b      	ldrb	r3, [r3, #20]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d006      	beq.n	800d406 <tcp_listen_closed+0x32>
 800d3f8:	4b0e      	ldr	r3, [pc, #56]	@ (800d434 <tcp_listen_closed+0x60>)
 800d3fa:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d3fe:	4910      	ldr	r1, [pc, #64]	@ (800d440 <tcp_listen_closed+0x6c>)
 800d400:	480e      	ldr	r0, [pc, #56]	@ (800d43c <tcp_listen_closed+0x68>)
 800d402:	f00a ff7d 	bl	8018300 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d406:	2301      	movs	r3, #1
 800d408:	60fb      	str	r3, [r7, #12]
 800d40a:	e00b      	b.n	800d424 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d40c:	4a0d      	ldr	r2, [pc, #52]	@ (800d444 <tcp_listen_closed+0x70>)
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	6879      	ldr	r1, [r7, #4]
 800d418:	4618      	mov	r0, r3
 800d41a:	f7ff ffb1 	bl	800d380 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3301      	adds	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b03      	cmp	r3, #3
 800d428:	d9f0      	bls.n	800d40c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d42a:	bf00      	nop
 800d42c:	bf00      	nop
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	0801a838 	.word	0x0801a838
 800d438:	0801a8e8 	.word	0x0801a8e8
 800d43c:	0801a87c 	.word	0x0801a87c
 800d440:	0801a8f4 	.word	0x0801a8f4
 800d444:	0801cb60 	.word	0x0801cb60

0800d448 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d448:	b5b0      	push	{r4, r5, r7, lr}
 800d44a:	b088      	sub	sp, #32
 800d44c:	af04      	add	r7, sp, #16
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d106      	bne.n	800d468 <tcp_close_shutdown+0x20>
 800d45a:	4b63      	ldr	r3, [pc, #396]	@ (800d5e8 <tcp_close_shutdown+0x1a0>)
 800d45c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d460:	4962      	ldr	r1, [pc, #392]	@ (800d5ec <tcp_close_shutdown+0x1a4>)
 800d462:	4863      	ldr	r0, [pc, #396]	@ (800d5f0 <tcp_close_shutdown+0x1a8>)
 800d464:	f00a ff4c 	bl	8018300 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d468:	78fb      	ldrb	r3, [r7, #3]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d067      	beq.n	800d53e <tcp_close_shutdown+0xf6>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	7d1b      	ldrb	r3, [r3, #20]
 800d472:	2b04      	cmp	r3, #4
 800d474:	d003      	beq.n	800d47e <tcp_close_shutdown+0x36>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7d1b      	ldrb	r3, [r3, #20]
 800d47a:	2b07      	cmp	r3, #7
 800d47c:	d15f      	bne.n	800d53e <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d482:	2b00      	cmp	r3, #0
 800d484:	d105      	bne.n	800d492 <tcp_close_shutdown+0x4a>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d48a:	f640 3268 	movw	r2, #2920	@ 0xb68
 800d48e:	4293      	cmp	r3, r2
 800d490:	d055      	beq.n	800d53e <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	8b5b      	ldrh	r3, [r3, #26]
 800d496:	f003 0310 	and.w	r3, r3, #16
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d106      	bne.n	800d4ac <tcp_close_shutdown+0x64>
 800d49e:	4b52      	ldr	r3, [pc, #328]	@ (800d5e8 <tcp_close_shutdown+0x1a0>)
 800d4a0:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d4a4:	4953      	ldr	r1, [pc, #332]	@ (800d5f4 <tcp_close_shutdown+0x1ac>)
 800d4a6:	4852      	ldr	r0, [pc, #328]	@ (800d5f0 <tcp_close_shutdown+0x1a8>)
 800d4a8:	f00a ff2a 	bl	8018300 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d4b4:	687d      	ldr	r5, [r7, #4]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	8ad2      	ldrh	r2, [r2, #22]
 800d4be:	6879      	ldr	r1, [r7, #4]
 800d4c0:	8b09      	ldrh	r1, [r1, #24]
 800d4c2:	9102      	str	r1, [sp, #8]
 800d4c4:	9201      	str	r2, [sp, #4]
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	462b      	mov	r3, r5
 800d4ca:	4622      	mov	r2, r4
 800d4cc:	4601      	mov	r1, r0
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f005 f9c4 	bl	801285c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f001 fb4f 	bl	800eb78 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d4da:	4b47      	ldr	r3, [pc, #284]	@ (800d5f8 <tcp_close_shutdown+0x1b0>)
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	429a      	cmp	r2, r3
 800d4e2:	d105      	bne.n	800d4f0 <tcp_close_shutdown+0xa8>
 800d4e4:	4b44      	ldr	r3, [pc, #272]	@ (800d5f8 <tcp_close_shutdown+0x1b0>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	4a43      	ldr	r2, [pc, #268]	@ (800d5f8 <tcp_close_shutdown+0x1b0>)
 800d4ec:	6013      	str	r3, [r2, #0]
 800d4ee:	e013      	b.n	800d518 <tcp_close_shutdown+0xd0>
 800d4f0:	4b41      	ldr	r3, [pc, #260]	@ (800d5f8 <tcp_close_shutdown+0x1b0>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	e00c      	b.n	800d512 <tcp_close_shutdown+0xca>
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d104      	bne.n	800d50c <tcp_close_shutdown+0xc4>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	68da      	ldr	r2, [r3, #12]
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	60da      	str	r2, [r3, #12]
 800d50a:	e005      	b.n	800d518 <tcp_close_shutdown+0xd0>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	60fb      	str	r3, [r7, #12]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d1ef      	bne.n	800d4f8 <tcp_close_shutdown+0xb0>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2200      	movs	r2, #0
 800d51c:	60da      	str	r2, [r3, #12]
 800d51e:	4b37      	ldr	r3, [pc, #220]	@ (800d5fc <tcp_close_shutdown+0x1b4>)
 800d520:	2201      	movs	r2, #1
 800d522:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d524:	4b36      	ldr	r3, [pc, #216]	@ (800d600 <tcp_close_shutdown+0x1b8>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d102      	bne.n	800d534 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d52e:	f003 fc19 	bl	8010d64 <tcp_trigger_input_pcb_close>
 800d532:	e002      	b.n	800d53a <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f7ff fed5 	bl	800d2e4 <tcp_free>
      }
      return ERR_OK;
 800d53a:	2300      	movs	r3, #0
 800d53c:	e050      	b.n	800d5e0 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	7d1b      	ldrb	r3, [r3, #20]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d03b      	beq.n	800d5be <tcp_close_shutdown+0x176>
 800d546:	2b02      	cmp	r3, #2
 800d548:	dc44      	bgt.n	800d5d4 <tcp_close_shutdown+0x18c>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <tcp_close_shutdown+0x10c>
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d02a      	beq.n	800d5a8 <tcp_close_shutdown+0x160>
 800d552:	e03f      	b.n	800d5d4 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	8adb      	ldrh	r3, [r3, #22]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d021      	beq.n	800d5a0 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d55c:	4b29      	ldr	r3, [pc, #164]	@ (800d604 <tcp_close_shutdown+0x1bc>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	429a      	cmp	r2, r3
 800d564:	d105      	bne.n	800d572 <tcp_close_shutdown+0x12a>
 800d566:	4b27      	ldr	r3, [pc, #156]	@ (800d604 <tcp_close_shutdown+0x1bc>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	4a25      	ldr	r2, [pc, #148]	@ (800d604 <tcp_close_shutdown+0x1bc>)
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	e013      	b.n	800d59a <tcp_close_shutdown+0x152>
 800d572:	4b24      	ldr	r3, [pc, #144]	@ (800d604 <tcp_close_shutdown+0x1bc>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	60bb      	str	r3, [r7, #8]
 800d578:	e00c      	b.n	800d594 <tcp_close_shutdown+0x14c>
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	68db      	ldr	r3, [r3, #12]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d104      	bne.n	800d58e <tcp_close_shutdown+0x146>
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	68da      	ldr	r2, [r3, #12]
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	60da      	str	r2, [r3, #12]
 800d58c:	e005      	b.n	800d59a <tcp_close_shutdown+0x152>
 800d58e:	68bb      	ldr	r3, [r7, #8]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	60bb      	str	r3, [r7, #8]
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d1ef      	bne.n	800d57a <tcp_close_shutdown+0x132>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2200      	movs	r2, #0
 800d59e:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f7ff fe9f 	bl	800d2e4 <tcp_free>
      break;
 800d5a6:	e01a      	b.n	800d5de <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7ff ff13 	bl	800d3d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	4815      	ldr	r0, [pc, #84]	@ (800d608 <tcp_close_shutdown+0x1c0>)
 800d5b2:	f001 fb2b 	bl	800ec0c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff feb0 	bl	800d31c <tcp_free_listen>
      break;
 800d5bc:	e00f      	b.n	800d5de <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d5be:	6879      	ldr	r1, [r7, #4]
 800d5c0:	480d      	ldr	r0, [pc, #52]	@ (800d5f8 <tcp_close_shutdown+0x1b0>)
 800d5c2:	f001 fb23 	bl	800ec0c <tcp_pcb_remove>
 800d5c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d5fc <tcp_close_shutdown+0x1b4>)
 800d5c8:	2201      	movs	r2, #1
 800d5ca:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f7ff fe89 	bl	800d2e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d5d2:	e004      	b.n	800d5de <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f819 	bl	800d60c <tcp_close_shutdown_fin>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	e000      	b.n	800d5e0 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800d5de:	2300      	movs	r3, #0
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3710      	adds	r7, #16
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bdb0      	pop	{r4, r5, r7, pc}
 800d5e8:	0801a838 	.word	0x0801a838
 800d5ec:	0801a90c 	.word	0x0801a90c
 800d5f0:	0801a87c 	.word	0x0801a87c
 800d5f4:	0801a92c 	.word	0x0801a92c
 800d5f8:	200150b0 	.word	0x200150b0
 800d5fc:	200150b8 	.word	0x200150b8
 800d600:	200150f0 	.word	0x200150f0
 800d604:	200150a8 	.word	0x200150a8
 800d608:	200150ac 	.word	0x200150ac

0800d60c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d60c:	b580      	push	{r7, lr}
 800d60e:	b084      	sub	sp, #16
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d106      	bne.n	800d628 <tcp_close_shutdown_fin+0x1c>
 800d61a:	4b2e      	ldr	r3, [pc, #184]	@ (800d6d4 <tcp_close_shutdown_fin+0xc8>)
 800d61c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d620:	492d      	ldr	r1, [pc, #180]	@ (800d6d8 <tcp_close_shutdown_fin+0xcc>)
 800d622:	482e      	ldr	r0, [pc, #184]	@ (800d6dc <tcp_close_shutdown_fin+0xd0>)
 800d624:	f00a fe6c 	bl	8018300 <iprintf>

  switch (pcb->state) {
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	7d1b      	ldrb	r3, [r3, #20]
 800d62c:	2b07      	cmp	r3, #7
 800d62e:	d020      	beq.n	800d672 <tcp_close_shutdown_fin+0x66>
 800d630:	2b07      	cmp	r3, #7
 800d632:	dc2b      	bgt.n	800d68c <tcp_close_shutdown_fin+0x80>
 800d634:	2b03      	cmp	r3, #3
 800d636:	d002      	beq.n	800d63e <tcp_close_shutdown_fin+0x32>
 800d638:	2b04      	cmp	r3, #4
 800d63a:	d00d      	beq.n	800d658 <tcp_close_shutdown_fin+0x4c>
 800d63c:	e026      	b.n	800d68c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f004 f9f8 	bl	8011a34 <tcp_send_fin>
 800d644:	4603      	mov	r3, r0
 800d646:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d11f      	bne.n	800d690 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2205      	movs	r2, #5
 800d654:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d656:	e01b      	b.n	800d690 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f004 f9eb 	bl	8011a34 <tcp_send_fin>
 800d65e:	4603      	mov	r3, r0
 800d660:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d114      	bne.n	800d694 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2205      	movs	r2, #5
 800d66e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d670:	e010      	b.n	800d694 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f004 f9de 	bl	8011a34 <tcp_send_fin>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d67c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d109      	bne.n	800d698 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2209      	movs	r2, #9
 800d688:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d68a:	e005      	b.n	800d698 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d68c:	2300      	movs	r3, #0
 800d68e:	e01c      	b.n	800d6ca <tcp_close_shutdown_fin+0xbe>
      break;
 800d690:	bf00      	nop
 800d692:	e002      	b.n	800d69a <tcp_close_shutdown_fin+0x8e>
      break;
 800d694:	bf00      	nop
 800d696:	e000      	b.n	800d69a <tcp_close_shutdown_fin+0x8e>
      break;
 800d698:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d69a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d103      	bne.n	800d6aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f004 fb04 	bl	8011cb0 <tcp_output>
 800d6a8:	e00d      	b.n	800d6c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800d6aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d6ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6b2:	d108      	bne.n	800d6c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	8b5b      	ldrh	r3, [r3, #26]
 800d6b8:	f043 0308 	orr.w	r3, r3, #8
 800d6bc:	b29a      	uxth	r2, r3
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	e001      	b.n	800d6ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800d6c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	0801a838 	.word	0x0801a838
 800d6d8:	0801a8e8 	.word	0x0801a8e8
 800d6dc:	0801a87c 	.word	0x0801a87c

0800d6e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b082      	sub	sp, #8
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d109      	bne.n	800d702 <tcp_close+0x22>
 800d6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d72c <tcp_close+0x4c>)
 800d6f0:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d6f4:	490e      	ldr	r1, [pc, #56]	@ (800d730 <tcp_close+0x50>)
 800d6f6:	480f      	ldr	r0, [pc, #60]	@ (800d734 <tcp_close+0x54>)
 800d6f8:	f00a fe02 	bl	8018300 <iprintf>
 800d6fc:	f06f 030f 	mvn.w	r3, #15
 800d700:	e00f      	b.n	800d722 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	7d1b      	ldrb	r3, [r3, #20]
 800d706:	2b01      	cmp	r3, #1
 800d708:	d006      	beq.n	800d718 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	8b5b      	ldrh	r3, [r3, #26]
 800d70e:	f043 0310 	orr.w	r3, r3, #16
 800d712:	b29a      	uxth	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d718:	2101      	movs	r1, #1
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	f7ff fe94 	bl	800d448 <tcp_close_shutdown>
 800d720:	4603      	mov	r3, r0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}
 800d72a:	bf00      	nop
 800d72c:	0801a838 	.word	0x0801a838
 800d730:	0801a948 	.word	0x0801a948
 800d734:	0801a87c 	.word	0x0801a87c

0800d738 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b084      	sub	sp, #16
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	60f8      	str	r0, [r7, #12]
 800d740:	60b9      	str	r1, [r7, #8]
 800d742:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d109      	bne.n	800d75e <tcp_shutdown+0x26>
 800d74a:	4b26      	ldr	r3, [pc, #152]	@ (800d7e4 <tcp_shutdown+0xac>)
 800d74c:	f240 2207 	movw	r2, #519	@ 0x207
 800d750:	4925      	ldr	r1, [pc, #148]	@ (800d7e8 <tcp_shutdown+0xb0>)
 800d752:	4826      	ldr	r0, [pc, #152]	@ (800d7ec <tcp_shutdown+0xb4>)
 800d754:	f00a fdd4 	bl	8018300 <iprintf>
 800d758:	f06f 030f 	mvn.w	r3, #15
 800d75c:	e03d      	b.n	800d7da <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	7d1b      	ldrb	r3, [r3, #20]
 800d762:	2b01      	cmp	r3, #1
 800d764:	d102      	bne.n	800d76c <tcp_shutdown+0x34>
    return ERR_CONN;
 800d766:	f06f 030a 	mvn.w	r3, #10
 800d76a:	e036      	b.n	800d7da <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d01b      	beq.n	800d7aa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	8b5b      	ldrh	r3, [r3, #26]
 800d776:	f043 0310 	orr.w	r3, r3, #16
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d005      	beq.n	800d792 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d786:	2101      	movs	r1, #1
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fe5d 	bl	800d448 <tcp_close_shutdown>
 800d78e:	4603      	mov	r3, r0
 800d790:	e023      	b.n	800d7da <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d796:	2b00      	cmp	r3, #0
 800d798:	d007      	beq.n	800d7aa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff fae4 	bl	800cd6c <pbuf_free>
      pcb->refused_data = NULL;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }
  if (shut_tx) {
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d013      	beq.n	800d7d8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	7d1b      	ldrb	r3, [r3, #20]
 800d7b4:	2b04      	cmp	r3, #4
 800d7b6:	dc02      	bgt.n	800d7be <tcp_shutdown+0x86>
 800d7b8:	2b03      	cmp	r3, #3
 800d7ba:	da02      	bge.n	800d7c2 <tcp_shutdown+0x8a>
 800d7bc:	e009      	b.n	800d7d2 <tcp_shutdown+0x9a>
 800d7be:	2b07      	cmp	r3, #7
 800d7c0:	d107      	bne.n	800d7d2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	f7ff fe3d 	bl	800d448 <tcp_close_shutdown>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	e003      	b.n	800d7da <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d7d2:	f06f 030a 	mvn.w	r3, #10
 800d7d6:	e000      	b.n	800d7da <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800d7d8:	2300      	movs	r3, #0
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3710      	adds	r7, #16
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	0801a838 	.word	0x0801a838
 800d7e8:	0801a960 	.word	0x0801a960
 800d7ec:	0801a87c 	.word	0x0801a87c

0800d7f0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b08e      	sub	sp, #56	@ 0x38
 800d7f4:	af04      	add	r7, sp, #16
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d107      	bne.n	800d810 <tcp_abandon+0x20>
 800d800:	4b4d      	ldr	r3, [pc, #308]	@ (800d938 <tcp_abandon+0x148>)
 800d802:	f240 223d 	movw	r2, #573	@ 0x23d
 800d806:	494d      	ldr	r1, [pc, #308]	@ (800d93c <tcp_abandon+0x14c>)
 800d808:	484d      	ldr	r0, [pc, #308]	@ (800d940 <tcp_abandon+0x150>)
 800d80a:	f00a fd79 	bl	8018300 <iprintf>
 800d80e:	e090      	b.n	800d932 <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7d1b      	ldrb	r3, [r3, #20]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d106      	bne.n	800d826 <tcp_abandon+0x36>
 800d818:	4b47      	ldr	r3, [pc, #284]	@ (800d938 <tcp_abandon+0x148>)
 800d81a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d81e:	4949      	ldr	r1, [pc, #292]	@ (800d944 <tcp_abandon+0x154>)
 800d820:	4847      	ldr	r0, [pc, #284]	@ (800d940 <tcp_abandon+0x150>)
 800d822:	f00a fd6d 	bl	8018300 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	2b0a      	cmp	r3, #10
 800d82c:	d107      	bne.n	800d83e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	4845      	ldr	r0, [pc, #276]	@ (800d948 <tcp_abandon+0x158>)
 800d832:	f001 f9eb 	bl	800ec0c <tcp_pcb_remove>
    tcp_free(pcb);
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f7ff fd54 	bl	800d2e4 <tcp_free>
 800d83c:	e079      	b.n	800d932 <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800d83e:	2300      	movs	r3, #0
 800d840:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d84a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d850:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d858:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	691b      	ldr	r3, [r3, #16]
 800d85e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	7d1b      	ldrb	r3, [r3, #20]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d126      	bne.n	800d8b6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	8adb      	ldrh	r3, [r3, #22]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d02e      	beq.n	800d8ce <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d870:	4b36      	ldr	r3, [pc, #216]	@ (800d94c <tcp_abandon+0x15c>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	429a      	cmp	r2, r3
 800d878:	d105      	bne.n	800d886 <tcp_abandon+0x96>
 800d87a:	4b34      	ldr	r3, [pc, #208]	@ (800d94c <tcp_abandon+0x15c>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68db      	ldr	r3, [r3, #12]
 800d880:	4a32      	ldr	r2, [pc, #200]	@ (800d94c <tcp_abandon+0x15c>)
 800d882:	6013      	str	r3, [r2, #0]
 800d884:	e013      	b.n	800d8ae <tcp_abandon+0xbe>
 800d886:	4b31      	ldr	r3, [pc, #196]	@ (800d94c <tcp_abandon+0x15c>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	61fb      	str	r3, [r7, #28]
 800d88c:	e00c      	b.n	800d8a8 <tcp_abandon+0xb8>
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	68db      	ldr	r3, [r3, #12]
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	429a      	cmp	r2, r3
 800d896:	d104      	bne.n	800d8a2 <tcp_abandon+0xb2>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	68da      	ldr	r2, [r3, #12]
 800d89c:	69fb      	ldr	r3, [r7, #28]
 800d89e:	60da      	str	r2, [r3, #12]
 800d8a0:	e005      	b.n	800d8ae <tcp_abandon+0xbe>
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	61fb      	str	r3, [r7, #28]
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1ef      	bne.n	800d88e <tcp_abandon+0x9e>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	60da      	str	r2, [r3, #12]
 800d8b4:	e00b      	b.n	800d8ce <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	8adb      	ldrh	r3, [r3, #22]
 800d8be:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d8c0:	6879      	ldr	r1, [r7, #4]
 800d8c2:	4823      	ldr	r0, [pc, #140]	@ (800d950 <tcp_abandon+0x160>)
 800d8c4:	f001 f9a2 	bl	800ec0c <tcp_pcb_remove>
 800d8c8:	4b22      	ldr	r3, [pc, #136]	@ (800d954 <tcp_abandon+0x164>)
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d004      	beq.n	800d8e0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f000 feaa 	bl	800e634 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d004      	beq.n	800d8f2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	f000 fea1 	bl	800e634 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d8f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d00e      	beq.n	800d916 <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d8f8:	6879      	ldr	r1, [r7, #4]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	3304      	adds	r3, #4
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	8b12      	ldrh	r2, [r2, #24]
 800d902:	9202      	str	r2, [sp, #8]
 800d904:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d906:	9201      	str	r2, [sp, #4]
 800d908:	9300      	str	r3, [sp, #0]
 800d90a:	460b      	mov	r3, r1
 800d90c:	697a      	ldr	r2, [r7, #20]
 800d90e:	69b9      	ldr	r1, [r7, #24]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f004 ffa3 	bl	801285c <tcp_rst>
    }
    last_state = pcb->state;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	7d1b      	ldrb	r3, [r3, #20]
 800d91a:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff fce1 	bl	800d2e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d004      	beq.n	800d932 <tcp_abandon+0x142>
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	f06f 010c 	mvn.w	r1, #12
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	4798      	blx	r3
  }
}
 800d932:	3728      	adds	r7, #40	@ 0x28
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	0801a838 	.word	0x0801a838
 800d93c:	0801a97c 	.word	0x0801a97c
 800d940:	0801a87c 	.word	0x0801a87c
 800d944:	0801a998 	.word	0x0801a998
 800d948:	200150b4 	.word	0x200150b4
 800d94c:	200150a8 	.word	0x200150a8
 800d950:	200150b0 	.word	0x200150b0
 800d954:	200150b8 	.word	0x200150b8

0800d958 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b082      	sub	sp, #8
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d960:	2101      	movs	r1, #1
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff ff44 	bl	800d7f0 <tcp_abandon>
}
 800d968:	bf00      	nop
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}

0800d970 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b088      	sub	sp, #32
 800d974:	af00      	add	r7, sp, #0
 800d976:	60f8      	str	r0, [r7, #12]
 800d978:	60b9      	str	r1, [r7, #8]
 800d97a:	4613      	mov	r3, r2
 800d97c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d97e:	2304      	movs	r3, #4
 800d980:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d988:	4b3e      	ldr	r3, [pc, #248]	@ (800da84 <tcp_bind+0x114>)
 800d98a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d109      	bne.n	800d9a6 <tcp_bind+0x36>
 800d992:	4b3d      	ldr	r3, [pc, #244]	@ (800da88 <tcp_bind+0x118>)
 800d994:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800d998:	493c      	ldr	r1, [pc, #240]	@ (800da8c <tcp_bind+0x11c>)
 800d99a:	483d      	ldr	r0, [pc, #244]	@ (800da90 <tcp_bind+0x120>)
 800d99c:	f00a fcb0 	bl	8018300 <iprintf>
 800d9a0:	f06f 030f 	mvn.w	r3, #15
 800d9a4:	e06a      	b.n	800da7c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	7d1b      	ldrb	r3, [r3, #20]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d009      	beq.n	800d9c2 <tcp_bind+0x52>
 800d9ae:	4b36      	ldr	r3, [pc, #216]	@ (800da88 <tcp_bind+0x118>)
 800d9b0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d9b4:	4937      	ldr	r1, [pc, #220]	@ (800da94 <tcp_bind+0x124>)
 800d9b6:	4836      	ldr	r0, [pc, #216]	@ (800da90 <tcp_bind+0x120>)
 800d9b8:	f00a fca2 	bl	8018300 <iprintf>
 800d9bc:	f06f 0305 	mvn.w	r3, #5
 800d9c0:	e05c      	b.n	800da7c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d9c2:	88fb      	ldrh	r3, [r7, #6]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d109      	bne.n	800d9dc <tcp_bind+0x6c>
    port = tcp_new_port();
 800d9c8:	f000 f9e0 	bl	800dd8c <tcp_new_port>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d9d0:	88fb      	ldrh	r3, [r7, #6]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d135      	bne.n	800da42 <tcp_bind+0xd2>
      return ERR_BUF;
 800d9d6:	f06f 0301 	mvn.w	r3, #1
 800d9da:	e04f      	b.n	800da7c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d9dc:	2300      	movs	r3, #0
 800d9de:	61fb      	str	r3, [r7, #28]
 800d9e0:	e02b      	b.n	800da3a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d9e2:	4a2d      	ldr	r2, [pc, #180]	@ (800da98 <tcp_bind+0x128>)
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	61bb      	str	r3, [r7, #24]
 800d9ee:	e01e      	b.n	800da2e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d9f0:	69bb      	ldr	r3, [r7, #24]
 800d9f2:	8adb      	ldrh	r3, [r3, #22]
 800d9f4:	88fa      	ldrh	r2, [r7, #6]
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d116      	bne.n	800da28 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d9fa:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d010      	beq.n	800da22 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d00c      	beq.n	800da22 <tcp_bind+0xb2>
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d009      	beq.n	800da22 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800da16:	69bb      	ldr	r3, [r7, #24]
 800da18:	681a      	ldr	r2, [r3, #0]
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800da1e:	429a      	cmp	r2, r3
 800da20:	d102      	bne.n	800da28 <tcp_bind+0xb8>
              return ERR_USE;
 800da22:	f06f 0307 	mvn.w	r3, #7
 800da26:	e029      	b.n	800da7c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800da28:	69bb      	ldr	r3, [r7, #24]
 800da2a:	68db      	ldr	r3, [r3, #12]
 800da2c:	61bb      	str	r3, [r7, #24]
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1dd      	bne.n	800d9f0 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	3301      	adds	r3, #1
 800da38:	61fb      	str	r3, [r7, #28]
 800da3a:	69fa      	ldr	r2, [r7, #28]
 800da3c:	697b      	ldr	r3, [r7, #20]
 800da3e:	429a      	cmp	r2, r3
 800da40:	dbcf      	blt.n	800d9e2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00c      	beq.n	800da62 <tcp_bind+0xf2>
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d008      	beq.n	800da62 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <tcp_bind+0xec>
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	e000      	b.n	800da5e <tcp_bind+0xee>
 800da5c:	2300      	movs	r3, #0
 800da5e:	68fa      	ldr	r2, [r7, #12]
 800da60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	88fa      	ldrh	r2, [r7, #6]
 800da66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800da68:	4b0c      	ldr	r3, [pc, #48]	@ (800da9c <tcp_bind+0x12c>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	60da      	str	r2, [r3, #12]
 800da70:	4a0a      	ldr	r2, [pc, #40]	@ (800da9c <tcp_bind+0x12c>)
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	6013      	str	r3, [r2, #0]
 800da76:	f005 f8b3 	bl	8012be0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800da7a:	2300      	movs	r3, #0
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	0801cb98 	.word	0x0801cb98
 800da88:	0801a838 	.word	0x0801a838
 800da8c:	0801a9cc 	.word	0x0801a9cc
 800da90:	0801a87c 	.word	0x0801a87c
 800da94:	0801a9e4 	.word	0x0801a9e4
 800da98:	0801cb60 	.word	0x0801cb60
 800da9c:	200150a8 	.word	0x200150a8

0800daa0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	60f8      	str	r0, [r7, #12]
 800daa8:	60b9      	str	r1, [r7, #8]
 800daaa:	4613      	mov	r3, r2
 800daac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d106      	bne.n	800dac2 <tcp_accept_null+0x22>
 800dab4:	4b07      	ldr	r3, [pc, #28]	@ (800dad4 <tcp_accept_null+0x34>)
 800dab6:	f240 320f 	movw	r2, #783	@ 0x30f
 800daba:	4907      	ldr	r1, [pc, #28]	@ (800dad8 <tcp_accept_null+0x38>)
 800dabc:	4807      	ldr	r0, [pc, #28]	@ (800dadc <tcp_accept_null+0x3c>)
 800dabe:	f00a fc1f 	bl	8018300 <iprintf>

  tcp_abort(pcb);
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	f7ff ff48 	bl	800d958 <tcp_abort>

  return ERR_ABRT;
 800dac8:	f06f 030c 	mvn.w	r3, #12
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3710      	adds	r7, #16
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}
 800dad4:	0801a838 	.word	0x0801a838
 800dad8:	0801aa0c 	.word	0x0801aa0c
 800dadc:	0801a87c 	.word	0x0801a87c

0800dae0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	460b      	mov	r3, r1
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800daee:	2300      	movs	r3, #0
 800daf0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d109      	bne.n	800db0c <tcp_listen_with_backlog_and_err+0x2c>
 800daf8:	4b47      	ldr	r3, [pc, #284]	@ (800dc18 <tcp_listen_with_backlog_and_err+0x138>)
 800dafa:	f240 3259 	movw	r2, #857	@ 0x359
 800dafe:	4947      	ldr	r1, [pc, #284]	@ (800dc1c <tcp_listen_with_backlog_and_err+0x13c>)
 800db00:	4847      	ldr	r0, [pc, #284]	@ (800dc20 <tcp_listen_with_backlog_and_err+0x140>)
 800db02:	f00a fbfd 	bl	8018300 <iprintf>
 800db06:	23f0      	movs	r3, #240	@ 0xf0
 800db08:	76fb      	strb	r3, [r7, #27]
 800db0a:	e079      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	7d1b      	ldrb	r3, [r3, #20]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d009      	beq.n	800db28 <tcp_listen_with_backlog_and_err+0x48>
 800db14:	4b40      	ldr	r3, [pc, #256]	@ (800dc18 <tcp_listen_with_backlog_and_err+0x138>)
 800db16:	f240 325a 	movw	r2, #858	@ 0x35a
 800db1a:	4942      	ldr	r1, [pc, #264]	@ (800dc24 <tcp_listen_with_backlog_and_err+0x144>)
 800db1c:	4840      	ldr	r0, [pc, #256]	@ (800dc20 <tcp_listen_with_backlog_and_err+0x140>)
 800db1e:	f00a fbef 	bl	8018300 <iprintf>
 800db22:	23f1      	movs	r3, #241	@ 0xf1
 800db24:	76fb      	strb	r3, [r7, #27]
 800db26:	e06b      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d104      	bne.n	800db3a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800db34:	23f7      	movs	r3, #247	@ 0xf7
 800db36:	76fb      	strb	r3, [r7, #27]
    goto done;
 800db38:	e062      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800db3a:	2002      	movs	r0, #2
 800db3c:	f7fe fa6e 	bl	800c01c <memp_malloc>
 800db40:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800db48:	23ff      	movs	r3, #255	@ 0xff
 800db4a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800db4c:	e058      	b.n	800dc00 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	691a      	ldr	r2, [r3, #16]
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	8ada      	ldrh	r2, [r3, #22]
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800db5e:	69fb      	ldr	r3, [r7, #28]
 800db60:	2201      	movs	r2, #1
 800db62:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	7d5a      	ldrb	r2, [r3, #21]
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	7a5a      	ldrb	r2, [r3, #9]
 800db70:	69fb      	ldr	r3, [r7, #28]
 800db72:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800db74:	69fb      	ldr	r3, [r7, #28]
 800db76:	2200      	movs	r2, #0
 800db78:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	7ada      	ldrb	r2, [r3, #11]
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	7a9a      	ldrb	r2, [r3, #10]
 800db86:	69fb      	ldr	r3, [r7, #28]
 800db88:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	8adb      	ldrh	r3, [r3, #22]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d021      	beq.n	800dbde <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800db9a:	4b23      	ldr	r3, [pc, #140]	@ (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d105      	bne.n	800dbb0 <tcp_listen_with_backlog_and_err+0xd0>
 800dba4:	4b20      	ldr	r3, [pc, #128]	@ (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	68db      	ldr	r3, [r3, #12]
 800dbaa:	4a1f      	ldr	r2, [pc, #124]	@ (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800dbac:	6013      	str	r3, [r2, #0]
 800dbae:	e013      	b.n	800dbd8 <tcp_listen_with_backlog_and_err+0xf8>
 800dbb0:	4b1d      	ldr	r3, [pc, #116]	@ (800dc28 <tcp_listen_with_backlog_and_err+0x148>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	617b      	str	r3, [r7, #20]
 800dbb6:	e00c      	b.n	800dbd2 <tcp_listen_with_backlog_and_err+0xf2>
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	68db      	ldr	r3, [r3, #12]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d104      	bne.n	800dbcc <tcp_listen_with_backlog_and_err+0xec>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	68da      	ldr	r2, [r3, #12]
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	60da      	str	r2, [r3, #12]
 800dbca:	e005      	b.n	800dbd8 <tcp_listen_with_backlog_and_err+0xf8>
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	617b      	str	r3, [r7, #20]
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d1ef      	bne.n	800dbb8 <tcp_listen_with_backlog_and_err+0xd8>
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800dbde:	68f8      	ldr	r0, [r7, #12]
 800dbe0:	f7ff fb80 	bl	800d2e4 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	4a11      	ldr	r2, [pc, #68]	@ (800dc2c <tcp_listen_with_backlog_and_err+0x14c>)
 800dbe8:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dbea:	4b11      	ldr	r3, [pc, #68]	@ (800dc30 <tcp_listen_with_backlog_and_err+0x150>)
 800dbec:	681a      	ldr	r2, [r3, #0]
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	60da      	str	r2, [r3, #12]
 800dbf2:	4a0f      	ldr	r2, [pc, #60]	@ (800dc30 <tcp_listen_with_backlog_and_err+0x150>)
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	6013      	str	r3, [r2, #0]
 800dbf8:	f004 fff2 	bl	8012be0 <tcp_timer_needed>
  res = ERR_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d002      	beq.n	800dc0c <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	7efa      	ldrb	r2, [r7, #27]
 800dc0a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dc0c:	69fb      	ldr	r3, [r7, #28]
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3720      	adds	r7, #32
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	0801a838 	.word	0x0801a838
 800dc1c:	0801aa2c 	.word	0x0801aa2c
 800dc20:	0801a87c 	.word	0x0801a87c
 800dc24:	0801aa5c 	.word	0x0801aa5c
 800dc28:	200150a8 	.word	0x200150a8
 800dc2c:	0800daa1 	.word	0x0800daa1
 800dc30:	200150ac 	.word	0x200150ac

0800dc34 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d106      	bne.n	800dc50 <tcp_update_rcv_ann_wnd+0x1c>
 800dc42:	4b25      	ldr	r3, [pc, #148]	@ (800dcd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dc44:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800dc48:	4924      	ldr	r1, [pc, #144]	@ (800dcdc <tcp_update_rcv_ann_wnd+0xa8>)
 800dc4a:	4825      	ldr	r0, [pc, #148]	@ (800dce0 <tcp_update_rcv_ann_wnd+0xac>)
 800dc4c:	f00a fb58 	bl	8018300 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc54:	687a      	ldr	r2, [r7, #4]
 800dc56:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800dc58:	4413      	add	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc60:	687a      	ldr	r2, [r7, #4]
 800dc62:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800dc64:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800dc68:	428a      	cmp	r2, r1
 800dc6a:	bf28      	it	cs
 800dc6c:	460a      	movcs	r2, r1
 800dc6e:	b292      	uxth	r2, r2
 800dc70:	4413      	add	r3, r2
 800dc72:	68fa      	ldr	r2, [r7, #12]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	db08      	blt.n	800dc8c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc86:	68fa      	ldr	r2, [r7, #12]
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	e020      	b.n	800dcce <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc94:	1ad3      	subs	r3, r2, r3
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	dd03      	ble.n	800dca2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dca0:	e014      	b.n	800dccc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcb4:	d306      	bcc.n	800dcc4 <tcp_update_rcv_ann_wnd+0x90>
 800dcb6:	4b08      	ldr	r3, [pc, #32]	@ (800dcd8 <tcp_update_rcv_ann_wnd+0xa4>)
 800dcb8:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800dcbc:	4909      	ldr	r1, [pc, #36]	@ (800dce4 <tcp_update_rcv_ann_wnd+0xb0>)
 800dcbe:	4808      	ldr	r0, [pc, #32]	@ (800dce0 <tcp_update_rcv_ann_wnd+0xac>)
 800dcc0:	f00a fb1e 	bl	8018300 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800dccc:	2300      	movs	r3, #0
  }
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	0801a838 	.word	0x0801a838
 800dcdc:	0801aa94 	.word	0x0801aa94
 800dce0:	0801a87c 	.word	0x0801a87c
 800dce4:	0801aab8 	.word	0x0801aab8

0800dce8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	460b      	mov	r3, r1
 800dcf2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <tcp_recved+0x22>
 800dcfa:	4b20      	ldr	r3, [pc, #128]	@ (800dd7c <tcp_recved+0x94>)
 800dcfc:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800dd00:	491f      	ldr	r1, [pc, #124]	@ (800dd80 <tcp_recved+0x98>)
 800dd02:	4820      	ldr	r0, [pc, #128]	@ (800dd84 <tcp_recved+0x9c>)
 800dd04:	f00a fafc 	bl	8018300 <iprintf>
 800dd08:	e034      	b.n	800dd74 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7d1b      	ldrb	r3, [r3, #20]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d106      	bne.n	800dd20 <tcp_recved+0x38>
 800dd12:	4b1a      	ldr	r3, [pc, #104]	@ (800dd7c <tcp_recved+0x94>)
 800dd14:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800dd18:	491b      	ldr	r1, [pc, #108]	@ (800dd88 <tcp_recved+0xa0>)
 800dd1a:	481a      	ldr	r0, [pc, #104]	@ (800dd84 <tcp_recved+0x9c>)
 800dd1c:	f00a faf0 	bl	8018300 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dd24:	887b      	ldrh	r3, [r7, #2]
 800dd26:	4413      	add	r3, r2
 800dd28:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dd2a:	89fb      	ldrh	r3, [r7, #14]
 800dd2c:	f640 3268 	movw	r2, #2920	@ 0xb68
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d804      	bhi.n	800dd3e <tcp_recved+0x56>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dd38:	89fa      	ldrh	r2, [r7, #14]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d204      	bcs.n	800dd48 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f640 3268 	movw	r2, #2920	@ 0xb68
 800dd44:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dd46:	e002      	b.n	800dd4e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	89fa      	ldrh	r2, [r7, #14]
 800dd4c:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f7ff ff70 	bl	800dc34 <tcp_update_rcv_ann_wnd>
 800dd54:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	f240 22d9 	movw	r2, #729	@ 0x2d9
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d909      	bls.n	800dd74 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	8b5b      	ldrh	r3, [r3, #26]
 800dd64:	f043 0302 	orr.w	r3, r3, #2
 800dd68:	b29a      	uxth	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f003 ff9e 	bl	8011cb0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0801a838 	.word	0x0801a838
 800dd80:	0801aad4 	.word	0x0801aad4
 800dd84:	0801a87c 	.word	0x0801a87c
 800dd88:	0801aaec 	.word	0x0801aaec

0800dd8c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800dd92:	2300      	movs	r3, #0
 800dd94:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800dd96:	4b1e      	ldr	r3, [pc, #120]	@ (800de10 <tcp_new_port+0x84>)
 800dd98:	881b      	ldrh	r3, [r3, #0]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	4b1c      	ldr	r3, [pc, #112]	@ (800de10 <tcp_new_port+0x84>)
 800dda0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800dda2:	4b1b      	ldr	r3, [pc, #108]	@ (800de10 <tcp_new_port+0x84>)
 800dda4:	881b      	ldrh	r3, [r3, #0]
 800dda6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d103      	bne.n	800ddb6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800ddae:	4b18      	ldr	r3, [pc, #96]	@ (800de10 <tcp_new_port+0x84>)
 800ddb0:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800ddb4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	71fb      	strb	r3, [r7, #7]
 800ddba:	e01e      	b.n	800ddfa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800ddbc:	79fb      	ldrb	r3, [r7, #7]
 800ddbe:	4a15      	ldr	r2, [pc, #84]	@ (800de14 <tcp_new_port+0x88>)
 800ddc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	603b      	str	r3, [r7, #0]
 800ddc8:	e011      	b.n	800ddee <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	8ada      	ldrh	r2, [r3, #22]
 800ddce:	4b10      	ldr	r3, [pc, #64]	@ (800de10 <tcp_new_port+0x84>)
 800ddd0:	881b      	ldrh	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d108      	bne.n	800dde8 <tcp_new_port+0x5c>
        n++;
 800ddd6:	88bb      	ldrh	r3, [r7, #4]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800dddc:	88bb      	ldrh	r3, [r7, #4]
 800ddde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800dde2:	d3d8      	bcc.n	800dd96 <tcp_new_port+0xa>
          return 0;
 800dde4:	2300      	movs	r3, #0
 800dde6:	e00d      	b.n	800de04 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	68db      	ldr	r3, [r3, #12]
 800ddec:	603b      	str	r3, [r7, #0]
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d1ea      	bne.n	800ddca <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800ddf4:	79fb      	ldrb	r3, [r7, #7]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	71fb      	strb	r3, [r7, #7]
 800ddfa:	79fb      	ldrb	r3, [r7, #7]
 800ddfc:	2b03      	cmp	r3, #3
 800ddfe:	d9dd      	bls.n	800ddbc <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800de00:	4b03      	ldr	r3, [pc, #12]	@ (800de10 <tcp_new_port+0x84>)
 800de02:	881b      	ldrh	r3, [r3, #0]
}
 800de04:	4618      	mov	r0, r3
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr
 800de10:	20000014 	.word	0x20000014
 800de14:	0801cb60 	.word	0x0801cb60

0800de18 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800de18:	b5b0      	push	{r4, r5, r7, lr}
 800de1a:	b090      	sub	sp, #64	@ 0x40
 800de1c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800de1e:	2300      	movs	r3, #0
 800de20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800de24:	4b95      	ldr	r3, [pc, #596]	@ (800e07c <tcp_slowtmr+0x264>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	3301      	adds	r3, #1
 800de2a:	4a94      	ldr	r2, [pc, #592]	@ (800e07c <tcp_slowtmr+0x264>)
 800de2c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800de2e:	4b94      	ldr	r3, [pc, #592]	@ (800e080 <tcp_slowtmr+0x268>)
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	3301      	adds	r3, #1
 800de34:	b2da      	uxtb	r2, r3
 800de36:	4b92      	ldr	r3, [pc, #584]	@ (800e080 <tcp_slowtmr+0x268>)
 800de38:	701a      	strb	r2, [r3, #0]
 800de3a:	e000      	b.n	800de3e <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800de3c:	bf00      	nop
  prev = NULL;
 800de3e:	2300      	movs	r3, #0
 800de40:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800de42:	4b90      	ldr	r3, [pc, #576]	@ (800e084 <tcp_slowtmr+0x26c>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800de48:	e289      	b.n	800e35e <tcp_slowtmr+0x546>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800de4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de4c:	7d1b      	ldrb	r3, [r3, #20]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d106      	bne.n	800de60 <tcp_slowtmr+0x48>
 800de52:	4b8d      	ldr	r3, [pc, #564]	@ (800e088 <tcp_slowtmr+0x270>)
 800de54:	f240 42be 	movw	r2, #1214	@ 0x4be
 800de58:	498c      	ldr	r1, [pc, #560]	@ (800e08c <tcp_slowtmr+0x274>)
 800de5a:	488d      	ldr	r0, [pc, #564]	@ (800e090 <tcp_slowtmr+0x278>)
 800de5c:	f00a fa50 	bl	8018300 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800de60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de62:	7d1b      	ldrb	r3, [r3, #20]
 800de64:	2b01      	cmp	r3, #1
 800de66:	d106      	bne.n	800de76 <tcp_slowtmr+0x5e>
 800de68:	4b87      	ldr	r3, [pc, #540]	@ (800e088 <tcp_slowtmr+0x270>)
 800de6a:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800de6e:	4989      	ldr	r1, [pc, #548]	@ (800e094 <tcp_slowtmr+0x27c>)
 800de70:	4887      	ldr	r0, [pc, #540]	@ (800e090 <tcp_slowtmr+0x278>)
 800de72:	f00a fa45 	bl	8018300 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800de76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de78:	7d1b      	ldrb	r3, [r3, #20]
 800de7a:	2b0a      	cmp	r3, #10
 800de7c:	d106      	bne.n	800de8c <tcp_slowtmr+0x74>
 800de7e:	4b82      	ldr	r3, [pc, #520]	@ (800e088 <tcp_slowtmr+0x270>)
 800de80:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800de84:	4984      	ldr	r1, [pc, #528]	@ (800e098 <tcp_slowtmr+0x280>)
 800de86:	4882      	ldr	r0, [pc, #520]	@ (800e090 <tcp_slowtmr+0x278>)
 800de88:	f00a fa3a 	bl	8018300 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800de8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de8e:	7f9a      	ldrb	r2, [r3, #30]
 800de90:	4b7b      	ldr	r3, [pc, #492]	@ (800e080 <tcp_slowtmr+0x268>)
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	429a      	cmp	r2, r3
 800de96:	d105      	bne.n	800dea4 <tcp_slowtmr+0x8c>
      prev = pcb;
 800de98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800de9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9e:	68db      	ldr	r3, [r3, #12]
 800dea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800dea2:	e25c      	b.n	800e35e <tcp_slowtmr+0x546>
    pcb->last_timer = tcp_timer_ctr;
 800dea4:	4b76      	ldr	r3, [pc, #472]	@ (800e080 <tcp_slowtmr+0x268>)
 800dea6:	781a      	ldrb	r2, [r3, #0]
 800dea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deaa:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800deb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deba:	7d1b      	ldrb	r3, [r3, #20]
 800debc:	2b02      	cmp	r3, #2
 800debe:	d10a      	bne.n	800ded6 <tcp_slowtmr+0xbe>
 800dec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dec6:	2b05      	cmp	r3, #5
 800dec8:	d905      	bls.n	800ded6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800deca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dece:	3301      	adds	r3, #1
 800ded0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ded4:	e11e      	b.n	800e114 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dedc:	2b0b      	cmp	r3, #11
 800dede:	d905      	bls.n	800deec <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800dee0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dee4:	3301      	adds	r3, #1
 800dee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800deea:	e113      	b.n	800e114 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800deec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deee:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800def2:	2b00      	cmp	r3, #0
 800def4:	d075      	beq.n	800dfe2 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800def6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800defa:	2b00      	cmp	r3, #0
 800defc:	d006      	beq.n	800df0c <tcp_slowtmr+0xf4>
 800defe:	4b62      	ldr	r3, [pc, #392]	@ (800e088 <tcp_slowtmr+0x270>)
 800df00:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800df04:	4965      	ldr	r1, [pc, #404]	@ (800e09c <tcp_slowtmr+0x284>)
 800df06:	4862      	ldr	r0, [pc, #392]	@ (800e090 <tcp_slowtmr+0x278>)
 800df08:	f00a f9fa 	bl	8018300 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800df0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df10:	2b00      	cmp	r3, #0
 800df12:	d106      	bne.n	800df22 <tcp_slowtmr+0x10a>
 800df14:	4b5c      	ldr	r3, [pc, #368]	@ (800e088 <tcp_slowtmr+0x270>)
 800df16:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800df1a:	4961      	ldr	r1, [pc, #388]	@ (800e0a0 <tcp_slowtmr+0x288>)
 800df1c:	485c      	ldr	r0, [pc, #368]	@ (800e090 <tcp_slowtmr+0x278>)
 800df1e:	f00a f9ef 	bl	8018300 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800df22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df24:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 800df28:	2b0b      	cmp	r3, #11
 800df2a:	d905      	bls.n	800df38 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800df2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df30:	3301      	adds	r3, #1
 800df32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df36:	e0ed      	b.n	800e114 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800df38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3a:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800df3e:	3b01      	subs	r3, #1
 800df40:	4a58      	ldr	r2, [pc, #352]	@ (800e0a4 <tcp_slowtmr+0x28c>)
 800df42:	5cd3      	ldrb	r3, [r2, r3]
 800df44:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800df4c:	7c7a      	ldrb	r2, [r7, #17]
 800df4e:	429a      	cmp	r2, r3
 800df50:	d907      	bls.n	800df62 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800df52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df54:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800df58:	3301      	adds	r3, #1
 800df5a:	b2da      	uxtb	r2, r3
 800df5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df5e:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 800df62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df64:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 800df68:	7c7a      	ldrb	r2, [r7, #17]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	f200 80d2 	bhi.w	800e114 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800df70:	2301      	movs	r3, #1
 800df72:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800df74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d108      	bne.n	800df90 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800df7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df80:	f004 fd60 	bl	8012a44 <tcp_zero_window_probe>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d014      	beq.n	800dfb4 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800df8a:	2300      	movs	r3, #0
 800df8c:	623b      	str	r3, [r7, #32]
 800df8e:	e011      	b.n	800dfb4 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800df90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df96:	4619      	mov	r1, r3
 800df98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df9a:	f003 fc03 	bl	80117a4 <tcp_split_unsent_seg>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d107      	bne.n	800dfb4 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800dfa4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dfa6:	f003 fe83 	bl	8011cb0 <tcp_output>
 800dfaa:	4603      	mov	r3, r0
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d101      	bne.n	800dfb4 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800dfb4:	6a3b      	ldr	r3, [r7, #32]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 80ac 	beq.w	800e114 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800dfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc6:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800dfca:	2b06      	cmp	r3, #6
 800dfcc:	f200 80a2 	bhi.w	800e114 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800dfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd2:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 800dfd6:	3301      	adds	r3, #1
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfdc:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
 800dfe0:	e098      	b.n	800e114 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dfe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	db0f      	blt.n	800e00c <tcp_slowtmr+0x1f4>
 800dfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dff2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d008      	beq.n	800e00c <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800dffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dffc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e000:	b29b      	uxth	r3, r3
 800e002:	3301      	adds	r3, #1
 800e004:	b29b      	uxth	r3, r3
 800e006:	b21a      	sxth	r2, r3
 800e008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00a:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800e012:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e014:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e018:	429a      	cmp	r2, r3
 800e01a:	db7b      	blt.n	800e114 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e01c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e01e:	f004 f94d 	bl	80122bc <tcp_rexmit_rto_prepare>
 800e022:	4603      	mov	r3, r0
 800e024:	2b00      	cmp	r3, #0
 800e026:	d007      	beq.n	800e038 <tcp_slowtmr+0x220>
 800e028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d171      	bne.n	800e114 <tcp_slowtmr+0x2fc>
 800e030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e034:	2b00      	cmp	r3, #0
 800e036:	d06d      	beq.n	800e114 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	d03a      	beq.n	800e0b6 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e042:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e046:	2b0c      	cmp	r3, #12
 800e048:	bf28      	it	cs
 800e04a:	230c      	movcs	r3, #12
 800e04c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e054:	10db      	asrs	r3, r3, #3
 800e056:	b21b      	sxth	r3, r3
 800e058:	461a      	mov	r2, r3
 800e05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e05c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e060:	4413      	add	r3, r2
 800e062:	7efa      	ldrb	r2, [r7, #27]
 800e064:	4910      	ldr	r1, [pc, #64]	@ (800e0a8 <tcp_slowtmr+0x290>)
 800e066:	5c8a      	ldrb	r2, [r1, r2]
 800e068:	4093      	lsls	r3, r2
 800e06a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e072:	4293      	cmp	r3, r2
 800e074:	dc1a      	bgt.n	800e0ac <tcp_slowtmr+0x294>
 800e076:	697b      	ldr	r3, [r7, #20]
 800e078:	b21a      	sxth	r2, r3
 800e07a:	e019      	b.n	800e0b0 <tcp_slowtmr+0x298>
 800e07c:	200150a4 	.word	0x200150a4
 800e080:	200150ba 	.word	0x200150ba
 800e084:	200150b0 	.word	0x200150b0
 800e088:	0801a838 	.word	0x0801a838
 800e08c:	0801ab7c 	.word	0x0801ab7c
 800e090:	0801a87c 	.word	0x0801a87c
 800e094:	0801aba8 	.word	0x0801aba8
 800e098:	0801abd4 	.word	0x0801abd4
 800e09c:	0801ac04 	.word	0x0801ac04
 800e0a0:	0801ac38 	.word	0x0801ac38
 800e0a4:	0801cb58 	.word	0x0801cb58
 800e0a8:	0801cb48 	.word	0x0801cb48
 800e0ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e0b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e0c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e0c8:	4293      	cmp	r3, r2
 800e0ca:	bf28      	it	cs
 800e0cc:	4613      	movcs	r3, r2
 800e0ce:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e0d0:	8a7b      	ldrh	r3, [r7, #18]
 800e0d2:	085b      	lsrs	r3, r3, #1
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0de:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0e6:	005b      	lsls	r3, r3, #1
 800e0e8:	b29b      	uxth	r3, r3
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d206      	bcs.n	800e0fc <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0f2:	005b      	lsls	r3, r3, #1
 800e0f4:	b29a      	uxth	r2, r3
 800e0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fe:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e102:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e108:	2200      	movs	r2, #0
 800e10a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e10e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e110:	f004 f944 	bl	801239c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e116:	7d1b      	ldrb	r3, [r3, #20]
 800e118:	2b06      	cmp	r3, #6
 800e11a:	d111      	bne.n	800e140 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11e:	8b5b      	ldrh	r3, [r3, #26]
 800e120:	f003 0310 	and.w	r3, r3, #16
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00b      	beq.n	800e140 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e128:	4b92      	ldr	r3, [pc, #584]	@ (800e374 <tcp_slowtmr+0x55c>)
 800e12a:	681a      	ldr	r2, [r3, #0]
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	6a1b      	ldr	r3, [r3, #32]
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	2b28      	cmp	r3, #40	@ 0x28
 800e134:	d904      	bls.n	800e140 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e136:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e13a:	3301      	adds	r3, #1
 800e13c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e142:	7a5b      	ldrb	r3, [r3, #9]
 800e144:	f003 0308 	and.w	r3, r3, #8
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d04c      	beq.n	800e1e6 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800e14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e14e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e150:	2b04      	cmp	r3, #4
 800e152:	d003      	beq.n	800e15c <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e156:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e158:	2b07      	cmp	r3, #7
 800e15a:	d144      	bne.n	800e1e6 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e15c:	4b85      	ldr	r3, [pc, #532]	@ (800e374 <tcp_slowtmr+0x55c>)
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e162:	6a1b      	ldr	r3, [r3, #32]
 800e164:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e16c:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800e170:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800e174:	4980      	ldr	r1, [pc, #512]	@ (800e378 <tcp_slowtmr+0x560>)
 800e176:	fba1 1303 	umull	r1, r3, r1, r3
 800e17a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d90a      	bls.n	800e196 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800e180:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e184:	3301      	adds	r3, #1
 800e186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e18a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e18e:	3301      	adds	r3, #1
 800e190:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e194:	e027      	b.n	800e1e6 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e196:	4b77      	ldr	r3, [pc, #476]	@ (800e374 <tcp_slowtmr+0x55c>)
 800e198:	681a      	ldr	r2, [r3, #0]
 800e19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19c:	6a1b      	ldr	r3, [r3, #32]
 800e19e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a2:	f8d3 1090 	ldr.w	r1, [r3, #144]	@ 0x90
 800e1a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a8:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	4b73      	ldr	r3, [pc, #460]	@ (800e37c <tcp_slowtmr+0x564>)
 800e1b0:	fb00 f303 	mul.w	r3, r0, r3
 800e1b4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e1b6:	4970      	ldr	r1, [pc, #448]	@ (800e378 <tcp_slowtmr+0x560>)
 800e1b8:	fba1 1303 	umull	r1, r3, r1, r3
 800e1bc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d911      	bls.n	800e1e6 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800e1c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1c4:	f004 fbfe 	bl	80129c4 <tcp_keepalive>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e1ce:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d107      	bne.n	800e1e6 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800e1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d8:	f893 3097 	ldrb.w	r3, [r3, #151]	@ 0x97
 800e1dc:	3301      	adds	r3, #1
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e2:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
    if (pcb->state == SYN_RCVD) {
 800e1e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1e8:	7d1b      	ldrb	r3, [r3, #20]
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d10b      	bne.n	800e206 <tcp_slowtmr+0x3ee>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1ee:	4b61      	ldr	r3, [pc, #388]	@ (800e374 <tcp_slowtmr+0x55c>)
 800e1f0:	681a      	ldr	r2, [r3, #0]
 800e1f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f4:	6a1b      	ldr	r3, [r3, #32]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	2b28      	cmp	r3, #40	@ 0x28
 800e1fa:	d904      	bls.n	800e206 <tcp_slowtmr+0x3ee>
        ++pcb_remove;
 800e1fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e200:	3301      	adds	r3, #1
 800e202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e208:	7d1b      	ldrb	r3, [r3, #20]
 800e20a:	2b09      	cmp	r3, #9
 800e20c:	d10b      	bne.n	800e226 <tcp_slowtmr+0x40e>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e20e:	4b59      	ldr	r3, [pc, #356]	@ (800e374 <tcp_slowtmr+0x55c>)
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e214:	6a1b      	ldr	r3, [r3, #32]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	2bf0      	cmp	r3, #240	@ 0xf0
 800e21a:	d904      	bls.n	800e226 <tcp_slowtmr+0x40e>
        ++pcb_remove;
 800e21c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e220:	3301      	adds	r3, #1
 800e222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e226:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d060      	beq.n	800e2f0 <tcp_slowtmr+0x4d8>
      tcp_err_fn err_fn = pcb->errf;
 800e22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e230:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e234:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e236:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e238:	f000 fc9e 	bl	800eb78 <tcp_pcb_purge>
      if (prev != NULL) {
 800e23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d010      	beq.n	800e264 <tcp_slowtmr+0x44c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e242:	4b4f      	ldr	r3, [pc, #316]	@ (800e380 <tcp_slowtmr+0x568>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e248:	429a      	cmp	r2, r3
 800e24a:	d106      	bne.n	800e25a <tcp_slowtmr+0x442>
 800e24c:	4b4d      	ldr	r3, [pc, #308]	@ (800e384 <tcp_slowtmr+0x56c>)
 800e24e:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e252:	494d      	ldr	r1, [pc, #308]	@ (800e388 <tcp_slowtmr+0x570>)
 800e254:	484d      	ldr	r0, [pc, #308]	@ (800e38c <tcp_slowtmr+0x574>)
 800e256:	f00a f853 	bl	8018300 <iprintf>
        prev->next = pcb->next;
 800e25a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e25c:	68da      	ldr	r2, [r3, #12]
 800e25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e260:	60da      	str	r2, [r3, #12]
 800e262:	e00f      	b.n	800e284 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e264:	4b46      	ldr	r3, [pc, #280]	@ (800e380 <tcp_slowtmr+0x568>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d006      	beq.n	800e27c <tcp_slowtmr+0x464>
 800e26e:	4b45      	ldr	r3, [pc, #276]	@ (800e384 <tcp_slowtmr+0x56c>)
 800e270:	f240 5271 	movw	r2, #1393	@ 0x571
 800e274:	4946      	ldr	r1, [pc, #280]	@ (800e390 <tcp_slowtmr+0x578>)
 800e276:	4845      	ldr	r0, [pc, #276]	@ (800e38c <tcp_slowtmr+0x574>)
 800e278:	f00a f842 	bl	8018300 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e27e:	68db      	ldr	r3, [r3, #12]
 800e280:	4a3f      	ldr	r2, [pc, #252]	@ (800e380 <tcp_slowtmr+0x568>)
 800e282:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e284:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d013      	beq.n	800e2b4 <tcp_slowtmr+0x49c>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e28e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e292:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e294:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e298:	3304      	adds	r3, #4
 800e29a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e29c:	8ad2      	ldrh	r2, [r2, #22]
 800e29e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2a0:	8b09      	ldrh	r1, [r1, #24]
 800e2a2:	9102      	str	r1, [sp, #8]
 800e2a4:	9201      	str	r2, [sp, #4]
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	462b      	mov	r3, r5
 800e2aa:	4622      	mov	r2, r4
 800e2ac:	4601      	mov	r1, r0
 800e2ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2b0:	f004 fad4 	bl	801285c <tcp_rst>
      err_arg = pcb->callback_arg;
 800e2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b6:	691b      	ldr	r3, [r3, #16]
 800e2b8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2bc:	7d1b      	ldrb	r3, [r3, #20]
 800e2be:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e2ca:	6838      	ldr	r0, [r7, #0]
 800e2cc:	f7ff f80a 	bl	800d2e4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e2d0:	4b30      	ldr	r3, [pc, #192]	@ (800e394 <tcp_slowtmr+0x57c>)
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d004      	beq.n	800e2e6 <tcp_slowtmr+0x4ce>
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f06f 010c 	mvn.w	r1, #12
 800e2e2:	68b8      	ldr	r0, [r7, #8]
 800e2e4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e2e6:	4b2b      	ldr	r3, [pc, #172]	@ (800e394 <tcp_slowtmr+0x57c>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d037      	beq.n	800e35e <tcp_slowtmr+0x546>
        goto tcp_slowtmr_start;
 800e2ee:	e5a6      	b.n	800de3e <tcp_slowtmr+0x26>
      prev = pcb;
 800e2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2fc:	7f1b      	ldrb	r3, [r3, #28]
 800e2fe:	3301      	adds	r3, #1
 800e300:	b2da      	uxtb	r2, r3
 800e302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e304:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e308:	7f1a      	ldrb	r2, [r3, #28]
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	7f5b      	ldrb	r3, [r3, #29]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d325      	bcc.n	800e35e <tcp_slowtmr+0x546>
        prev->polltmr = 0;
 800e312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e314:	2200      	movs	r2, #0
 800e316:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e318:	4b1e      	ldr	r3, [pc, #120]	@ (800e394 <tcp_slowtmr+0x57c>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00b      	beq.n	800e340 <tcp_slowtmr+0x528>
 800e328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e32e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e330:	6912      	ldr	r2, [r2, #16]
 800e332:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e334:	4610      	mov	r0, r2
 800e336:	4798      	blx	r3
 800e338:	4603      	mov	r3, r0
 800e33a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e33e:	e002      	b.n	800e346 <tcp_slowtmr+0x52e>
 800e340:	2300      	movs	r3, #0
 800e342:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e346:	4b13      	ldr	r3, [pc, #76]	@ (800e394 <tcp_slowtmr+0x57c>)
 800e348:	781b      	ldrb	r3, [r3, #0]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f47f ad76 	bne.w	800de3c <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e350:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e354:	2b00      	cmp	r3, #0
 800e356:	d102      	bne.n	800e35e <tcp_slowtmr+0x546>
          tcp_output(prev);
 800e358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e35a:	f003 fca9 	bl	8011cb0 <tcp_output>
  while (pcb != NULL) {
 800e35e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e360:	2b00      	cmp	r3, #0
 800e362:	f47f ad72 	bne.w	800de4a <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e366:	2300      	movs	r3, #0
 800e368:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e36a:	4b0b      	ldr	r3, [pc, #44]	@ (800e398 <tcp_slowtmr+0x580>)
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e370:	e067      	b.n	800e442 <tcp_slowtmr+0x62a>
 800e372:	bf00      	nop
 800e374:	200150a4 	.word	0x200150a4
 800e378:	10624dd3 	.word	0x10624dd3
 800e37c:	000124f8 	.word	0x000124f8
 800e380:	200150b0 	.word	0x200150b0
 800e384:	0801a838 	.word	0x0801a838
 800e388:	0801ac70 	.word	0x0801ac70
 800e38c:	0801a87c 	.word	0x0801a87c
 800e390:	0801ac9c 	.word	0x0801ac9c
 800e394:	200150b8 	.word	0x200150b8
 800e398:	200150b4 	.word	0x200150b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39e:	7d1b      	ldrb	r3, [r3, #20]
 800e3a0:	2b0a      	cmp	r3, #10
 800e3a2:	d006      	beq.n	800e3b2 <tcp_slowtmr+0x59a>
 800e3a4:	4b2b      	ldr	r3, [pc, #172]	@ (800e454 <tcp_slowtmr+0x63c>)
 800e3a6:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e3aa:	492b      	ldr	r1, [pc, #172]	@ (800e458 <tcp_slowtmr+0x640>)
 800e3ac:	482b      	ldr	r0, [pc, #172]	@ (800e45c <tcp_slowtmr+0x644>)
 800e3ae:	f009 ffa7 	bl	8018300 <iprintf>
    pcb_remove = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e3b8:	4b29      	ldr	r3, [pc, #164]	@ (800e460 <tcp_slowtmr+0x648>)
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	1ad3      	subs	r3, r2, r3
 800e3c2:	2bf0      	cmp	r3, #240	@ 0xf0
 800e3c4:	d904      	bls.n	800e3d0 <tcp_slowtmr+0x5b8>
      ++pcb_remove;
 800e3c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3ca:	3301      	adds	r3, #1
 800e3cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e3d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d02f      	beq.n	800e438 <tcp_slowtmr+0x620>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e3d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3da:	f000 fbcd 	bl	800eb78 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d010      	beq.n	800e406 <tcp_slowtmr+0x5ee>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e3e4:	4b1f      	ldr	r3, [pc, #124]	@ (800e464 <tcp_slowtmr+0x64c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d106      	bne.n	800e3fc <tcp_slowtmr+0x5e4>
 800e3ee:	4b19      	ldr	r3, [pc, #100]	@ (800e454 <tcp_slowtmr+0x63c>)
 800e3f0:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e3f4:	491c      	ldr	r1, [pc, #112]	@ (800e468 <tcp_slowtmr+0x650>)
 800e3f6:	4819      	ldr	r0, [pc, #100]	@ (800e45c <tcp_slowtmr+0x644>)
 800e3f8:	f009 ff82 	bl	8018300 <iprintf>
        prev->next = pcb->next;
 800e3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3fe:	68da      	ldr	r2, [r3, #12]
 800e400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e402:	60da      	str	r2, [r3, #12]
 800e404:	e00f      	b.n	800e426 <tcp_slowtmr+0x60e>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e406:	4b17      	ldr	r3, [pc, #92]	@ (800e464 <tcp_slowtmr+0x64c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d006      	beq.n	800e41e <tcp_slowtmr+0x606>
 800e410:	4b10      	ldr	r3, [pc, #64]	@ (800e454 <tcp_slowtmr+0x63c>)
 800e412:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e416:	4915      	ldr	r1, [pc, #84]	@ (800e46c <tcp_slowtmr+0x654>)
 800e418:	4810      	ldr	r0, [pc, #64]	@ (800e45c <tcp_slowtmr+0x644>)
 800e41a:	f009 ff71 	bl	8018300 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e420:	68db      	ldr	r3, [r3, #12]
 800e422:	4a10      	ldr	r2, [pc, #64]	@ (800e464 <tcp_slowtmr+0x64c>)
 800e424:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e428:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e430:	69f8      	ldr	r0, [r7, #28]
 800e432:	f7fe ff57 	bl	800d2e4 <tcp_free>
 800e436:	e004      	b.n	800e442 <tcp_slowtmr+0x62a>
    } else {
      prev = pcb;
 800e438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e444:	2b00      	cmp	r3, #0
 800e446:	d1a9      	bne.n	800e39c <tcp_slowtmr+0x584>
    }
  }
}
 800e448:	bf00      	nop
 800e44a:	bf00      	nop
 800e44c:	3730      	adds	r7, #48	@ 0x30
 800e44e:	46bd      	mov	sp, r7
 800e450:	bdb0      	pop	{r4, r5, r7, pc}
 800e452:	bf00      	nop
 800e454:	0801a838 	.word	0x0801a838
 800e458:	0801acc8 	.word	0x0801acc8
 800e45c:	0801a87c 	.word	0x0801a87c
 800e460:	200150a4 	.word	0x200150a4
 800e464:	200150b4 	.word	0x200150b4
 800e468:	0801acf8 	.word	0x0801acf8
 800e46c:	0801ad20 	.word	0x0801ad20

0800e470 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e476:	4b2d      	ldr	r3, [pc, #180]	@ (800e52c <tcp_fasttmr+0xbc>)
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	3301      	adds	r3, #1
 800e47c:	b2da      	uxtb	r2, r3
 800e47e:	4b2b      	ldr	r3, [pc, #172]	@ (800e52c <tcp_fasttmr+0xbc>)
 800e480:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e482:	4b2b      	ldr	r3, [pc, #172]	@ (800e530 <tcp_fasttmr+0xc0>)
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e488:	e048      	b.n	800e51c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	7f9a      	ldrb	r2, [r3, #30]
 800e48e:	4b27      	ldr	r3, [pc, #156]	@ (800e52c <tcp_fasttmr+0xbc>)
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	429a      	cmp	r2, r3
 800e494:	d03f      	beq.n	800e516 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e496:	4b25      	ldr	r3, [pc, #148]	@ (800e52c <tcp_fasttmr+0xbc>)
 800e498:	781a      	ldrb	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	8b5b      	ldrh	r3, [r3, #26]
 800e4a2:	f003 0301 	and.w	r3, r3, #1
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d010      	beq.n	800e4cc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	8b5b      	ldrh	r3, [r3, #26]
 800e4ae:	f043 0302 	orr.w	r3, r3, #2
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f003 fbf9 	bl	8011cb0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	8b5b      	ldrh	r3, [r3, #26]
 800e4c2:	f023 0303 	bic.w	r3, r3, #3
 800e4c6:	b29a      	uxth	r2, r3
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	8b5b      	ldrh	r3, [r3, #26]
 800e4d0:	f003 0308 	and.w	r3, r3, #8
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d009      	beq.n	800e4ec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	8b5b      	ldrh	r3, [r3, #26]
 800e4dc:	f023 0308 	bic.w	r3, r3, #8
 800e4e0:	b29a      	uxth	r2, r3
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff f890 	bl	800d60c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	68db      	ldr	r3, [r3, #12]
 800e4f0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d00a      	beq.n	800e510 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e534 <tcp_fasttmr+0xc4>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e500:	6878      	ldr	r0, [r7, #4]
 800e502:	f000 f819 	bl	800e538 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e506:	4b0b      	ldr	r3, [pc, #44]	@ (800e534 <tcp_fasttmr+0xc4>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d000      	beq.n	800e510 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e50e:	e7b8      	b.n	800e482 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	607b      	str	r3, [r7, #4]
 800e514:	e002      	b.n	800e51c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	68db      	ldr	r3, [r3, #12]
 800e51a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d1b3      	bne.n	800e48a <tcp_fasttmr+0x1a>
    }
  }
}
 800e522:	bf00      	nop
 800e524:	bf00      	nop
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	200150ba 	.word	0x200150ba
 800e530:	200150b0 	.word	0x200150b0
 800e534:	200150b8 	.word	0x200150b8

0800e538 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e538:	b590      	push	{r4, r7, lr}
 800e53a:	b085      	sub	sp, #20
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d109      	bne.n	800e55a <tcp_process_refused_data+0x22>
 800e546:	4b38      	ldr	r3, [pc, #224]	@ (800e628 <tcp_process_refused_data+0xf0>)
 800e548:	f240 6209 	movw	r2, #1545	@ 0x609
 800e54c:	4937      	ldr	r1, [pc, #220]	@ (800e62c <tcp_process_refused_data+0xf4>)
 800e54e:	4838      	ldr	r0, [pc, #224]	@ (800e630 <tcp_process_refused_data+0xf8>)
 800e550:	f009 fed6 	bl	8018300 <iprintf>
 800e554:	f06f 030f 	mvn.w	r3, #15
 800e558:	e061      	b.n	800e61e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e55e:	7b5b      	ldrb	r3, [r3, #13]
 800e560:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e566:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	675a      	str	r2, [r3, #116]	@ 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e574:	2b00      	cmp	r3, #0
 800e576:	d00b      	beq.n	800e590 <tcp_process_refused_data+0x58>
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6918      	ldr	r0, [r3, #16]
 800e582:	2300      	movs	r3, #0
 800e584:	68ba      	ldr	r2, [r7, #8]
 800e586:	6879      	ldr	r1, [r7, #4]
 800e588:	47a0      	blx	r4
 800e58a:	4603      	mov	r3, r0
 800e58c:	73fb      	strb	r3, [r7, #15]
 800e58e:	e007      	b.n	800e5a0 <tcp_process_refused_data+0x68>
 800e590:	2300      	movs	r3, #0
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	6879      	ldr	r1, [r7, #4]
 800e596:	2000      	movs	r0, #0
 800e598:	f000 f87a 	bl	800e690 <tcp_recv_null>
 800e59c:	4603      	mov	r3, r0
 800e59e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e5a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d12b      	bne.n	800e600 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e5a8:	7bbb      	ldrb	r3, [r7, #14]
 800e5aa:	f003 0320 	and.w	r3, r3, #32
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d034      	beq.n	800e61c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5b6:	f640 3268 	movw	r2, #2920	@ 0xb68
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d005      	beq.n	800e5ca <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	b29a      	uxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d00b      	beq.n	800e5ec <tcp_process_refused_data+0xb4>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6918      	ldr	r0, [r3, #16]
 800e5de:	2300      	movs	r3, #0
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	6879      	ldr	r1, [r7, #4]
 800e5e4:	47a0      	blx	r4
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	73fb      	strb	r3, [r7, #15]
 800e5ea:	e001      	b.n	800e5f0 <tcp_process_refused_data+0xb8>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5f4:	f113 0f0d 	cmn.w	r3, #13
 800e5f8:	d110      	bne.n	800e61c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 800e5fa:	f06f 030c 	mvn.w	r3, #12
 800e5fe:	e00e      	b.n	800e61e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 800e600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e604:	f113 0f0d 	cmn.w	r3, #13
 800e608:	d102      	bne.n	800e610 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e60a:	f06f 030c 	mvn.w	r3, #12
 800e60e:	e006      	b.n	800e61e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	675a      	str	r2, [r3, #116]	@ 0x74
      return ERR_INPROGRESS;
 800e616:	f06f 0304 	mvn.w	r3, #4
 800e61a:	e000      	b.n	800e61e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 800e61c:	2300      	movs	r3, #0
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3714      	adds	r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	bd90      	pop	{r4, r7, pc}
 800e626:	bf00      	nop
 800e628:	0801a838 	.word	0x0801a838
 800e62c:	0801ad48 	.word	0x0801ad48
 800e630:	0801a87c 	.word	0x0801a87c

0800e634 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e63c:	e007      	b.n	800e64e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f000 f80a 	bl	800e65e <tcp_seg_free>
    seg = next;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d1f4      	bne.n	800e63e <tcp_segs_free+0xa>
  }
}
 800e654:	bf00      	nop
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e65e:	b580      	push	{r7, lr}
 800e660:	b082      	sub	sp, #8
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d00c      	beq.n	800e686 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	4618      	mov	r0, r3
 800e67a:	f7fe fb77 	bl	800cd6c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e67e:	6879      	ldr	r1, [r7, #4]
 800e680:	2003      	movs	r0, #3
 800e682:	f7fd fd1d 	bl	800c0c0 <memp_free>
  }
}
 800e686:	bf00      	nop
 800e688:	3708      	adds	r7, #8
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}
	...

0800e690 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d109      	bne.n	800e6b8 <tcp_recv_null+0x28>
 800e6a4:	4b12      	ldr	r3, [pc, #72]	@ (800e6f0 <tcp_recv_null+0x60>)
 800e6a6:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e6aa:	4912      	ldr	r1, [pc, #72]	@ (800e6f4 <tcp_recv_null+0x64>)
 800e6ac:	4812      	ldr	r0, [pc, #72]	@ (800e6f8 <tcp_recv_null+0x68>)
 800e6ae:	f009 fe27 	bl	8018300 <iprintf>
 800e6b2:	f06f 030f 	mvn.w	r3, #15
 800e6b6:	e016      	b.n	800e6e6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d009      	beq.n	800e6d2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	891b      	ldrh	r3, [r3, #8]
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68b8      	ldr	r0, [r7, #8]
 800e6c6:	f7ff fb0f 	bl	800dce8 <tcp_recved>
    pbuf_free(p);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f7fe fb4e 	bl	800cd6c <pbuf_free>
 800e6d0:	e008      	b.n	800e6e4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e6d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d104      	bne.n	800e6e4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e6da:	68b8      	ldr	r0, [r7, #8]
 800e6dc:	f7ff f800 	bl	800d6e0 <tcp_close>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	e000      	b.n	800e6e6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801a838 	.word	0x0801a838
 800e6f4:	0801ad8c 	.word	0x0801ad8c
 800e6f8:	0801a87c 	.word	0x0801a87c

0800e6fc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b086      	sub	sp, #24
 800e700:	af00      	add	r7, sp, #0
 800e702:	4603      	mov	r3, r0
 800e704:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	db01      	blt.n	800e712 <tcp_kill_prio+0x16>
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	e000      	b.n	800e714 <tcp_kill_prio+0x18>
 800e712:	237f      	movs	r3, #127	@ 0x7f
 800e714:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e716:	7afb      	ldrb	r3, [r7, #11]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d034      	beq.n	800e786 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e71c:	7afb      	ldrb	r3, [r7, #11]
 800e71e:	3b01      	subs	r3, #1
 800e720:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e722:	2300      	movs	r3, #0
 800e724:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e726:	2300      	movs	r3, #0
 800e728:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e72a:	4b19      	ldr	r3, [pc, #100]	@ (800e790 <tcp_kill_prio+0x94>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	617b      	str	r3, [r7, #20]
 800e730:	e01f      	b.n	800e772 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	7d5b      	ldrb	r3, [r3, #21]
 800e736:	7afa      	ldrb	r2, [r7, #11]
 800e738:	429a      	cmp	r2, r3
 800e73a:	d80c      	bhi.n	800e756 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e740:	7afa      	ldrb	r2, [r7, #11]
 800e742:	429a      	cmp	r2, r3
 800e744:	d112      	bne.n	800e76c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e746:	4b13      	ldr	r3, [pc, #76]	@ (800e794 <tcp_kill_prio+0x98>)
 800e748:	681a      	ldr	r2, [r3, #0]
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	1ad3      	subs	r3, r2, r3
 800e750:	68fa      	ldr	r2, [r7, #12]
 800e752:	429a      	cmp	r2, r3
 800e754:	d80a      	bhi.n	800e76c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e756:	4b0f      	ldr	r3, [pc, #60]	@ (800e794 <tcp_kill_prio+0x98>)
 800e758:	681a      	ldr	r2, [r3, #0]
 800e75a:	697b      	ldr	r3, [r7, #20]
 800e75c:	6a1b      	ldr	r3, [r3, #32]
 800e75e:	1ad3      	subs	r3, r2, r3
 800e760:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	7d5b      	ldrb	r3, [r3, #21]
 800e76a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	617b      	str	r3, [r7, #20]
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1dc      	bne.n	800e732 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d004      	beq.n	800e788 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e77e:	6938      	ldr	r0, [r7, #16]
 800e780:	f7ff f8ea 	bl	800d958 <tcp_abort>
 800e784:	e000      	b.n	800e788 <tcp_kill_prio+0x8c>
    return;
 800e786:	bf00      	nop
  }
}
 800e788:	3718      	adds	r7, #24
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}
 800e78e:	bf00      	nop
 800e790:	200150b0 	.word	0x200150b0
 800e794:	200150a4 	.word	0x200150a4

0800e798 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e7a2:	79fb      	ldrb	r3, [r7, #7]
 800e7a4:	2b08      	cmp	r3, #8
 800e7a6:	d009      	beq.n	800e7bc <tcp_kill_state+0x24>
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	2b09      	cmp	r3, #9
 800e7ac:	d006      	beq.n	800e7bc <tcp_kill_state+0x24>
 800e7ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e818 <tcp_kill_state+0x80>)
 800e7b0:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e7b4:	4919      	ldr	r1, [pc, #100]	@ (800e81c <tcp_kill_state+0x84>)
 800e7b6:	481a      	ldr	r0, [pc, #104]	@ (800e820 <tcp_kill_state+0x88>)
 800e7b8:	f009 fda2 	bl	8018300 <iprintf>

  inactivity = 0;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e7c0:	2300      	movs	r3, #0
 800e7c2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7c4:	4b17      	ldr	r3, [pc, #92]	@ (800e824 <tcp_kill_state+0x8c>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	617b      	str	r3, [r7, #20]
 800e7ca:	e017      	b.n	800e7fc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	7d1b      	ldrb	r3, [r3, #20]
 800e7d0:	79fa      	ldrb	r2, [r7, #7]
 800e7d2:	429a      	cmp	r2, r3
 800e7d4:	d10f      	bne.n	800e7f6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e7d6:	4b14      	ldr	r3, [pc, #80]	@ (800e828 <tcp_kill_state+0x90>)
 800e7d8:	681a      	ldr	r2, [r3, #0]
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d807      	bhi.n	800e7f6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e7e6:	4b10      	ldr	r3, [pc, #64]	@ (800e828 <tcp_kill_state+0x90>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	6a1b      	ldr	r3, [r3, #32]
 800e7ee:	1ad3      	subs	r3, r2, r3
 800e7f0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e7f2:	697b      	ldr	r3, [r7, #20]
 800e7f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	617b      	str	r3, [r7, #20]
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1e4      	bne.n	800e7cc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d003      	beq.n	800e810 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e808:	2100      	movs	r1, #0
 800e80a:	6938      	ldr	r0, [r7, #16]
 800e80c:	f7fe fff0 	bl	800d7f0 <tcp_abandon>
  }
}
 800e810:	bf00      	nop
 800e812:	3718      	adds	r7, #24
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	0801a838 	.word	0x0801a838
 800e81c:	0801ada8 	.word	0x0801ada8
 800e820:	0801a87c 	.word	0x0801a87c
 800e824:	200150b0 	.word	0x200150b0
 800e828:	200150a4 	.word	0x200150a4

0800e82c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e836:	2300      	movs	r3, #0
 800e838:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e83a:	4b12      	ldr	r3, [pc, #72]	@ (800e884 <tcp_kill_timewait+0x58>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	60fb      	str	r3, [r7, #12]
 800e840:	e012      	b.n	800e868 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e842:	4b11      	ldr	r3, [pc, #68]	@ (800e888 <tcp_kill_timewait+0x5c>)
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	6a1b      	ldr	r3, [r3, #32]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	687a      	ldr	r2, [r7, #4]
 800e84e:	429a      	cmp	r2, r3
 800e850:	d807      	bhi.n	800e862 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e852:	4b0d      	ldr	r3, [pc, #52]	@ (800e888 <tcp_kill_timewait+0x5c>)
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	6a1b      	ldr	r3, [r3, #32]
 800e85a:	1ad3      	subs	r3, r2, r3
 800e85c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	68db      	ldr	r3, [r3, #12]
 800e866:	60fb      	str	r3, [r7, #12]
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1e9      	bne.n	800e842 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e86e:	68bb      	ldr	r3, [r7, #8]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d002      	beq.n	800e87a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e874:	68b8      	ldr	r0, [r7, #8]
 800e876:	f7ff f86f 	bl	800d958 <tcp_abort>
  }
}
 800e87a:	bf00      	nop
 800e87c:	3710      	adds	r7, #16
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
 800e882:	bf00      	nop
 800e884:	200150b4 	.word	0x200150b4
 800e888:	200150a4 	.word	0x200150a4

0800e88c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e88c:	b580      	push	{r7, lr}
 800e88e:	b082      	sub	sp, #8
 800e890:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e892:	4b10      	ldr	r3, [pc, #64]	@ (800e8d4 <tcp_handle_closepend+0x48>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e898:	e014      	b.n	800e8c4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	68db      	ldr	r3, [r3, #12]
 800e89e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	8b5b      	ldrh	r3, [r3, #26]
 800e8a4:	f003 0308 	and.w	r3, r3, #8
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d009      	beq.n	800e8c0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	8b5b      	ldrh	r3, [r3, #26]
 800e8b0:	f023 0308 	bic.w	r3, r3, #8
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f7fe fea6 	bl	800d60c <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1e7      	bne.n	800e89a <tcp_handle_closepend+0xe>
  }
}
 800e8ca:	bf00      	nop
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}
 800e8d4:	200150b0 	.word	0x200150b0

0800e8d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b084      	sub	sp, #16
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	4603      	mov	r3, r0
 800e8e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8e2:	2001      	movs	r0, #1
 800e8e4:	f7fd fb9a 	bl	800c01c <memp_malloc>
 800e8e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d126      	bne.n	800e93e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e8f0:	f7ff ffcc 	bl	800e88c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e8f4:	f7ff ff9a 	bl	800e82c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e8f8:	2001      	movs	r0, #1
 800e8fa:	f7fd fb8f 	bl	800c01c <memp_malloc>
 800e8fe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d11b      	bne.n	800e93e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e906:	2009      	movs	r0, #9
 800e908:	f7ff ff46 	bl	800e798 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e90c:	2001      	movs	r0, #1
 800e90e:	f7fd fb85 	bl	800c01c <memp_malloc>
 800e912:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d111      	bne.n	800e93e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e91a:	2008      	movs	r0, #8
 800e91c:	f7ff ff3c 	bl	800e798 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e920:	2001      	movs	r0, #1
 800e922:	f7fd fb7b 	bl	800c01c <memp_malloc>
 800e926:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d107      	bne.n	800e93e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e92e:	79fb      	ldrb	r3, [r7, #7]
 800e930:	4618      	mov	r0, r3
 800e932:	f7ff fee3 	bl	800e6fc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e936:	2001      	movs	r0, #1
 800e938:	f7fd fb70 	bl	800c01c <memp_malloc>
 800e93c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d03f      	beq.n	800e9c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e944:	2298      	movs	r2, #152	@ 0x98
 800e946:	2100      	movs	r1, #0
 800e948:	68f8      	ldr	r0, [r7, #12]
 800e94a:	f009 fd3e 	bl	80183ca <memset>
    pcb->prio = prio;
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	79fa      	ldrb	r2, [r7, #7]
 800e952:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e95a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	f640 3268 	movw	r2, #2920	@ 0xb68
 800e964:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	22ff      	movs	r2, #255	@ 0xff
 800e972:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e97a:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2206      	movs	r2, #6
 800e980:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2206      	movs	r2, #6
 800e988:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e990:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2201      	movs	r2, #1
 800e996:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e99a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d0 <tcp_alloc+0xf8>)
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800e9d4 <tcp_alloc+0xfc>)
 800e9a4:	781a      	ldrb	r2, [r3, #0]
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 800e9b0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	4a08      	ldr	r2, [pc, #32]	@ (800e9d8 <tcp_alloc+0x100>)
 800e9b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4a07      	ldr	r2, [pc, #28]	@ (800e9dc <tcp_alloc+0x104>)
 800e9c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
}
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}
 800e9ce:	bf00      	nop
 800e9d0:	200150a4 	.word	0x200150a4
 800e9d4:	200150ba 	.word	0x200150ba
 800e9d8:	0800e691 	.word	0x0800e691
 800e9dc:	006ddd00 	.word	0x006ddd00

0800e9e0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b084      	sub	sp, #16
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e9ea:	2040      	movs	r0, #64	@ 0x40
 800e9ec:	f7ff ff74 	bl	800e8d8 <tcp_alloc>
 800e9f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3710      	adds	r7, #16
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	bd80      	pop	{r7, pc}

0800e9fc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e9fc:	b480      	push	{r7}
 800e9fe:	b083      	sub	sp, #12
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d002      	beq.n	800ea12 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	683a      	ldr	r2, [r7, #0]
 800ea10:	611a      	str	r2, [r3, #16]
  }
}
 800ea12:	bf00      	nop
 800ea14:	370c      	adds	r7, #12
 800ea16:	46bd      	mov	sp, r7
 800ea18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1c:	4770      	bx	lr
	...

0800ea20 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b082      	sub	sp, #8
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d00e      	beq.n	800ea4e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	7d1b      	ldrb	r3, [r3, #20]
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d106      	bne.n	800ea46 <tcp_recv+0x26>
 800ea38:	4b07      	ldr	r3, [pc, #28]	@ (800ea58 <tcp_recv+0x38>)
 800ea3a:	f240 72df 	movw	r2, #2015	@ 0x7df
 800ea3e:	4907      	ldr	r1, [pc, #28]	@ (800ea5c <tcp_recv+0x3c>)
 800ea40:	4807      	ldr	r0, [pc, #28]	@ (800ea60 <tcp_recv+0x40>)
 800ea42:	f009 fc5d 	bl	8018300 <iprintf>
    pcb->recv = recv;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	683a      	ldr	r2, [r7, #0]
 800ea4a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800ea4e:	bf00      	nop
 800ea50:	3708      	adds	r7, #8
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
 800ea56:	bf00      	nop
 800ea58:	0801a838 	.word	0x0801a838
 800ea5c:	0801adb8 	.word	0x0801adb8
 800ea60:	0801a87c 	.word	0x0801a87c

0800ea64 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b082      	sub	sp, #8
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00d      	beq.n	800ea90 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	7d1b      	ldrb	r3, [r3, #20]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d106      	bne.n	800ea8a <tcp_sent+0x26>
 800ea7c:	4b06      	ldr	r3, [pc, #24]	@ (800ea98 <tcp_sent+0x34>)
 800ea7e:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800ea82:	4906      	ldr	r1, [pc, #24]	@ (800ea9c <tcp_sent+0x38>)
 800ea84:	4806      	ldr	r0, [pc, #24]	@ (800eaa0 <tcp_sent+0x3c>)
 800ea86:	f009 fc3b 	bl	8018300 <iprintf>
    pcb->sent = sent;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	683a      	ldr	r2, [r7, #0]
 800ea8e:	67da      	str	r2, [r3, #124]	@ 0x7c
  }
}
 800ea90:	bf00      	nop
 800ea92:	3708      	adds	r7, #8
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}
 800ea98:	0801a838 	.word	0x0801a838
 800ea9c:	0801ade0 	.word	0x0801ade0
 800eaa0:	0801a87c 	.word	0x0801a87c

0800eaa4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d00e      	beq.n	800ead2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	7d1b      	ldrb	r3, [r3, #20]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d106      	bne.n	800eaca <tcp_err+0x26>
 800eabc:	4b07      	ldr	r3, [pc, #28]	@ (800eadc <tcp_err+0x38>)
 800eabe:	f640 020d 	movw	r2, #2061	@ 0x80d
 800eac2:	4907      	ldr	r1, [pc, #28]	@ (800eae0 <tcp_err+0x3c>)
 800eac4:	4807      	ldr	r0, [pc, #28]	@ (800eae4 <tcp_err+0x40>)
 800eac6:	f009 fc1b 	bl	8018300 <iprintf>
    pcb->errf = err;
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	683a      	ldr	r2, [r7, #0]
 800eace:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }
}
 800ead2:	bf00      	nop
 800ead4:	3708      	adds	r7, #8
 800ead6:	46bd      	mov	sp, r7
 800ead8:	bd80      	pop	{r7, pc}
 800eada:	bf00      	nop
 800eadc:	0801a838 	.word	0x0801a838
 800eae0:	0801ae08 	.word	0x0801ae08
 800eae4:	0801a87c 	.word	0x0801a87c

0800eae8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b085      	sub	sp, #20
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d008      	beq.n	800eb0a <tcp_accept+0x22>
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	7d1b      	ldrb	r3, [r3, #20]
 800eafc:	2b01      	cmp	r3, #1
 800eafe:	d104      	bne.n	800eb0a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	683a      	ldr	r2, [r7, #0]
 800eb08:	619a      	str	r2, [r3, #24]
  }
}
 800eb0a:	bf00      	nop
 800eb0c:	3714      	adds	r7, #20
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
	...

0800eb18 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	4613      	mov	r3, r2
 800eb24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d107      	bne.n	800eb3c <tcp_poll+0x24>
 800eb2c:	4b0e      	ldr	r3, [pc, #56]	@ (800eb68 <tcp_poll+0x50>)
 800eb2e:	f640 023d 	movw	r2, #2109	@ 0x83d
 800eb32:	490e      	ldr	r1, [pc, #56]	@ (800eb6c <tcp_poll+0x54>)
 800eb34:	480e      	ldr	r0, [pc, #56]	@ (800eb70 <tcp_poll+0x58>)
 800eb36:	f009 fbe3 	bl	8018300 <iprintf>
 800eb3a:	e011      	b.n	800eb60 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	7d1b      	ldrb	r3, [r3, #20]
 800eb40:	2b01      	cmp	r3, #1
 800eb42:	d106      	bne.n	800eb52 <tcp_poll+0x3a>
 800eb44:	4b08      	ldr	r3, [pc, #32]	@ (800eb68 <tcp_poll+0x50>)
 800eb46:	f640 023e 	movw	r2, #2110	@ 0x83e
 800eb4a:	490a      	ldr	r1, [pc, #40]	@ (800eb74 <tcp_poll+0x5c>)
 800eb4c:	4808      	ldr	r0, [pc, #32]	@ (800eb70 <tcp_poll+0x58>)
 800eb4e:	f009 fbd7 	bl	8018300 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	79fa      	ldrb	r2, [r7, #7]
 800eb5e:	775a      	strb	r2, [r3, #29]
}
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	0801a838 	.word	0x0801a838
 800eb6c:	0801ae30 	.word	0x0801ae30
 800eb70:	0801a87c 	.word	0x0801a87c
 800eb74:	0801ae48 	.word	0x0801ae48

0800eb78 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d107      	bne.n	800eb96 <tcp_pcb_purge+0x1e>
 800eb86:	4b1e      	ldr	r3, [pc, #120]	@ (800ec00 <tcp_pcb_purge+0x88>)
 800eb88:	f640 0251 	movw	r2, #2129	@ 0x851
 800eb8c:	491d      	ldr	r1, [pc, #116]	@ (800ec04 <tcp_pcb_purge+0x8c>)
 800eb8e:	481e      	ldr	r0, [pc, #120]	@ (800ec08 <tcp_pcb_purge+0x90>)
 800eb90:	f009 fbb6 	bl	8018300 <iprintf>
 800eb94:	e030      	b.n	800ebf8 <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7d1b      	ldrb	r3, [r3, #20]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d02c      	beq.n	800ebf8 <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800eba2:	2b0a      	cmp	r3, #10
 800eba4:	d028      	beq.n	800ebf8 <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d024      	beq.n	800ebf8 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d007      	beq.n	800ebc6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f7fe f8d6 	bl	800cd6c <pbuf_free>
      pcb->refused_data = NULL;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ebcc:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7ff fd2e 	bl	800e634 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebdc:	4618      	mov	r0, r3
 800ebde:	f7ff fd29 	bl	800e634 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ebf8:	3708      	adds	r7, #8
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	0801a838 	.word	0x0801a838
 800ec04:	0801ae68 	.word	0x0801ae68
 800ec08:	0801a87c 	.word	0x0801a87c

0800ec0c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
 800ec14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ec16:	683b      	ldr	r3, [r7, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d106      	bne.n	800ec2a <tcp_pcb_remove+0x1e>
 800ec1c:	4b38      	ldr	r3, [pc, #224]	@ (800ed00 <tcp_pcb_remove+0xf4>)
 800ec1e:	f640 0283 	movw	r2, #2179	@ 0x883
 800ec22:	4938      	ldr	r1, [pc, #224]	@ (800ed04 <tcp_pcb_remove+0xf8>)
 800ec24:	4838      	ldr	r0, [pc, #224]	@ (800ed08 <tcp_pcb_remove+0xfc>)
 800ec26:	f009 fb6b 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d106      	bne.n	800ec3e <tcp_pcb_remove+0x32>
 800ec30:	4b33      	ldr	r3, [pc, #204]	@ (800ed00 <tcp_pcb_remove+0xf4>)
 800ec32:	f640 0284 	movw	r2, #2180	@ 0x884
 800ec36:	4935      	ldr	r1, [pc, #212]	@ (800ed0c <tcp_pcb_remove+0x100>)
 800ec38:	4833      	ldr	r0, [pc, #204]	@ (800ed08 <tcp_pcb_remove+0xfc>)
 800ec3a:	f009 fb61 	bl	8018300 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	683a      	ldr	r2, [r7, #0]
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d105      	bne.n	800ec54 <tcp_pcb_remove+0x48>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	68da      	ldr	r2, [r3, #12]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	601a      	str	r2, [r3, #0]
 800ec52:	e013      	b.n	800ec7c <tcp_pcb_remove+0x70>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	60fb      	str	r3, [r7, #12]
 800ec5a:	e00c      	b.n	800ec76 <tcp_pcb_remove+0x6a>
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	683a      	ldr	r2, [r7, #0]
 800ec62:	429a      	cmp	r2, r3
 800ec64:	d104      	bne.n	800ec70 <tcp_pcb_remove+0x64>
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	68da      	ldr	r2, [r3, #12]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	60da      	str	r2, [r3, #12]
 800ec6e:	e005      	b.n	800ec7c <tcp_pcb_remove+0x70>
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	60fb      	str	r3, [r7, #12]
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d1ef      	bne.n	800ec5c <tcp_pcb_remove+0x50>
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ec82:	6838      	ldr	r0, [r7, #0]
 800ec84:	f7ff ff78 	bl	800eb78 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	7d1b      	ldrb	r3, [r3, #20]
 800ec8c:	2b0a      	cmp	r3, #10
 800ec8e:	d013      	beq.n	800ecb8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d00f      	beq.n	800ecb8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	8b5b      	ldrh	r3, [r3, #26]
 800ec9c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d009      	beq.n	800ecb8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	8b5b      	ldrh	r3, [r3, #26]
 800eca8:	f043 0302 	orr.w	r3, r3, #2
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ecb2:	6838      	ldr	r0, [r7, #0]
 800ecb4:	f002 fffc 	bl	8011cb0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	7d1b      	ldrb	r3, [r3, #20]
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d015      	beq.n	800ecec <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d006      	beq.n	800ecd6 <tcp_pcb_remove+0xca>
 800ecc8:	4b0d      	ldr	r3, [pc, #52]	@ (800ed00 <tcp_pcb_remove+0xf4>)
 800ecca:	f640 0293 	movw	r2, #2195	@ 0x893
 800ecce:	4910      	ldr	r1, [pc, #64]	@ (800ed10 <tcp_pcb_remove+0x104>)
 800ecd0:	480d      	ldr	r0, [pc, #52]	@ (800ed08 <tcp_pcb_remove+0xfc>)
 800ecd2:	f009 fb15 	bl	8018300 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d006      	beq.n	800ecec <tcp_pcb_remove+0xe0>
 800ecde:	4b08      	ldr	r3, [pc, #32]	@ (800ed00 <tcp_pcb_remove+0xf4>)
 800ece0:	f640 0294 	movw	r2, #2196	@ 0x894
 800ece4:	490b      	ldr	r1, [pc, #44]	@ (800ed14 <tcp_pcb_remove+0x108>)
 800ece6:	4808      	ldr	r0, [pc, #32]	@ (800ed08 <tcp_pcb_remove+0xfc>)
 800ece8:	f009 fb0a 	bl	8018300 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ecf8:	bf00      	nop
 800ecfa:	3710      	adds	r7, #16
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}
 800ed00:	0801a838 	.word	0x0801a838
 800ed04:	0801ae84 	.word	0x0801ae84
 800ed08:	0801a87c 	.word	0x0801a87c
 800ed0c:	0801aea0 	.word	0x0801aea0
 800ed10:	0801aec0 	.word	0x0801aec0
 800ed14:	0801aed8 	.word	0x0801aed8

0800ed18 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d106      	bne.n	800ed34 <tcp_next_iss+0x1c>
 800ed26:	4b0a      	ldr	r3, [pc, #40]	@ (800ed50 <tcp_next_iss+0x38>)
 800ed28:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ed2c:	4909      	ldr	r1, [pc, #36]	@ (800ed54 <tcp_next_iss+0x3c>)
 800ed2e:	480a      	ldr	r0, [pc, #40]	@ (800ed58 <tcp_next_iss+0x40>)
 800ed30:	f009 fae6 	bl	8018300 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ed34:	4b09      	ldr	r3, [pc, #36]	@ (800ed5c <tcp_next_iss+0x44>)
 800ed36:	681a      	ldr	r2, [r3, #0]
 800ed38:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <tcp_next_iss+0x48>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4413      	add	r3, r2
 800ed3e:	4a07      	ldr	r2, [pc, #28]	@ (800ed5c <tcp_next_iss+0x44>)
 800ed40:	6013      	str	r3, [r2, #0]
  return iss;
 800ed42:	4b06      	ldr	r3, [pc, #24]	@ (800ed5c <tcp_next_iss+0x44>)
 800ed44:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	0801a838 	.word	0x0801a838
 800ed54:	0801aef4 	.word	0x0801aef4
 800ed58:	0801a87c 	.word	0x0801a87c
 800ed5c:	20000018 	.word	0x20000018
 800ed60:	200150a4 	.word	0x200150a4

0800ed64 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	60b9      	str	r1, [r7, #8]
 800ed6e:	607a      	str	r2, [r7, #4]
 800ed70:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d106      	bne.n	800ed86 <tcp_eff_send_mss_netif+0x22>
 800ed78:	4b14      	ldr	r3, [pc, #80]	@ (800edcc <tcp_eff_send_mss_netif+0x68>)
 800ed7a:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ed7e:	4914      	ldr	r1, [pc, #80]	@ (800edd0 <tcp_eff_send_mss_netif+0x6c>)
 800ed80:	4814      	ldr	r0, [pc, #80]	@ (800edd4 <tcp_eff_send_mss_netif+0x70>)
 800ed82:	f009 fabd 	bl	8018300 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ed86:	68bb      	ldr	r3, [r7, #8]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d101      	bne.n	800ed90 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ed8c:	89fb      	ldrh	r3, [r7, #14]
 800ed8e:	e019      	b.n	800edc4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ed94:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ed96:	8afb      	ldrh	r3, [r7, #22]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d012      	beq.n	800edc2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ed9c:	2328      	movs	r3, #40	@ 0x28
 800ed9e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800eda0:	8afa      	ldrh	r2, [r7, #22]
 800eda2:	8abb      	ldrh	r3, [r7, #20]
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d904      	bls.n	800edb2 <tcp_eff_send_mss_netif+0x4e>
 800eda8:	8afa      	ldrh	r2, [r7, #22]
 800edaa:	8abb      	ldrh	r3, [r7, #20]
 800edac:	1ad3      	subs	r3, r2, r3
 800edae:	b29b      	uxth	r3, r3
 800edb0:	e000      	b.n	800edb4 <tcp_eff_send_mss_netif+0x50>
 800edb2:	2300      	movs	r3, #0
 800edb4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800edb6:	8a7a      	ldrh	r2, [r7, #18]
 800edb8:	89fb      	ldrh	r3, [r7, #14]
 800edba:	4293      	cmp	r3, r2
 800edbc:	bf28      	it	cs
 800edbe:	4613      	movcs	r3, r2
 800edc0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800edc2:	89fb      	ldrh	r3, [r7, #14]
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3718      	adds	r7, #24
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	0801a838 	.word	0x0801a838
 800edd0:	0801af10 	.word	0x0801af10
 800edd4:	0801a87c 	.word	0x0801a87c

0800edd8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d119      	bne.n	800ee20 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800edec:	4b10      	ldr	r3, [pc, #64]	@ (800ee30 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800edee:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800edf2:	4910      	ldr	r1, [pc, #64]	@ (800ee34 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800edf4:	4810      	ldr	r0, [pc, #64]	@ (800ee38 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800edf6:	f009 fa83 	bl	8018300 <iprintf>

  while (pcb != NULL) {
 800edfa:	e011      	b.n	800ee20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	681a      	ldr	r2, [r3, #0]
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d108      	bne.n	800ee1a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	68db      	ldr	r3, [r3, #12]
 800ee0c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f7fe fda2 	bl	800d958 <tcp_abort>
      pcb = next;
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	60fb      	str	r3, [r7, #12]
 800ee18:	e002      	b.n	800ee20 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	68db      	ldr	r3, [r3, #12]
 800ee1e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d1ea      	bne.n	800edfc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ee26:	bf00      	nop
 800ee28:	bf00      	nop
 800ee2a:	3710      	adds	r7, #16
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	0801a838 	.word	0x0801a838
 800ee34:	0801af38 	.word	0x0801af38
 800ee38:	0801a87c 	.word	0x0801a87c

0800ee3c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b084      	sub	sp, #16
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
 800ee44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d02a      	beq.n	800eea2 <tcp_netif_ip_addr_changed+0x66>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d026      	beq.n	800eea2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ee54:	4b15      	ldr	r3, [pc, #84]	@ (800eeac <tcp_netif_ip_addr_changed+0x70>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4619      	mov	r1, r3
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f7ff ffbc 	bl	800edd8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ee60:	4b13      	ldr	r3, [pc, #76]	@ (800eeb0 <tcp_netif_ip_addr_changed+0x74>)
 800ee62:	681b      	ldr	r3, [r3, #0]
 800ee64:	4619      	mov	r1, r3
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff ffb6 	bl	800edd8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d017      	beq.n	800eea2 <tcp_netif_ip_addr_changed+0x66>
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d013      	beq.n	800eea2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee7a:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb4 <tcp_netif_ip_addr_changed+0x78>)
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	60fb      	str	r3, [r7, #12]
 800ee80:	e00c      	b.n	800ee9c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681a      	ldr	r2, [r3, #0]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d103      	bne.n	800ee96 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	681a      	ldr	r2, [r3, #0]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	60fb      	str	r3, [r7, #12]
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d1ef      	bne.n	800ee82 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800eea2:	bf00      	nop
 800eea4:	3710      	adds	r7, #16
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	200150b0 	.word	0x200150b0
 800eeb0:	200150a8 	.word	0x200150a8
 800eeb4:	200150ac 	.word	0x200150ac

0800eeb8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800eeb8:	b590      	push	{r4, r7, lr}
 800eeba:	b08d      	sub	sp, #52	@ 0x34
 800eebc:	af04      	add	r7, sp, #16
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d105      	bne.n	800eed4 <tcp_input+0x1c>
 800eec8:	4b8b      	ldr	r3, [pc, #556]	@ (800f0f8 <tcp_input+0x240>)
 800eeca:	2283      	movs	r2, #131	@ 0x83
 800eecc:	498b      	ldr	r1, [pc, #556]	@ (800f0fc <tcp_input+0x244>)
 800eece:	488c      	ldr	r0, [pc, #560]	@ (800f100 <tcp_input+0x248>)
 800eed0:	f009 fa16 	bl	8018300 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	685b      	ldr	r3, [r3, #4]
 800eed8:	4a8a      	ldr	r2, [pc, #552]	@ (800f104 <tcp_input+0x24c>)
 800eeda:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	895b      	ldrh	r3, [r3, #10]
 800eee0:	2b13      	cmp	r3, #19
 800eee2:	f240 83e1 	bls.w	800f6a8 <tcp_input+0x7f0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800eee6:	4b88      	ldr	r3, [pc, #544]	@ (800f108 <tcp_input+0x250>)
 800eee8:	695b      	ldr	r3, [r3, #20]
 800eeea:	4a87      	ldr	r2, [pc, #540]	@ (800f108 <tcp_input+0x250>)
 800eeec:	6812      	ldr	r2, [r2, #0]
 800eeee:	4611      	mov	r1, r2
 800eef0:	4618      	mov	r0, r3
 800eef2:	f007 ffa7 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	f040 83d7 	bne.w	800f6ac <tcp_input+0x7f4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800eefe:	4b82      	ldr	r3, [pc, #520]	@ (800f108 <tcp_input+0x250>)
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ef06:	2be0      	cmp	r3, #224	@ 0xe0
 800ef08:	f000 83d0 	beq.w	800f6ac <tcp_input+0x7f4>
  }

#if CHECKSUM_CHECK_TCP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_TCP) {
    /* Verify TCP checksum. */
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	891a      	ldrh	r2, [r3, #8]
 800ef10:	4b7e      	ldr	r3, [pc, #504]	@ (800f10c <tcp_input+0x254>)
 800ef12:	9300      	str	r3, [sp, #0]
 800ef14:	4b7e      	ldr	r3, [pc, #504]	@ (800f110 <tcp_input+0x258>)
 800ef16:	2106      	movs	r1, #6
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f7fc fb83 	bl	800b624 <ip_chksum_pseudo>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	823b      	strh	r3, [r7, #16]
                                    ip_current_src_addr(), ip_current_dest_addr());
    if (chksum != 0) {
 800ef22:	8a3b      	ldrh	r3, [r7, #16]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f040 83c3 	bne.w	800f6b0 <tcp_input+0x7f8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ef2a:	4b76      	ldr	r3, [pc, #472]	@ (800f104 <tcp_input+0x24c>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	899b      	ldrh	r3, [r3, #12]
 800ef30:	b29b      	uxth	r3, r3
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fc fa44 	bl	800b3c0 <lwip_htons>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	0b1b      	lsrs	r3, r3, #12
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	009b      	lsls	r3, r3, #2
 800ef42:	73fb      	strb	r3, [r7, #15]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	2b13      	cmp	r3, #19
 800ef48:	f240 83b4 	bls.w	800f6b4 <tcp_input+0x7fc>
 800ef4c:	7bfb      	ldrb	r3, [r7, #15]
 800ef4e:	b29a      	uxth	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	f200 83ad 	bhi.w	800f6b4 <tcp_input+0x7fc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ef5a:	7bfb      	ldrb	r3, [r7, #15]
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	3b14      	subs	r3, #20
 800ef60:	b29a      	uxth	r2, r3
 800ef62:	4b6c      	ldr	r3, [pc, #432]	@ (800f114 <tcp_input+0x25c>)
 800ef64:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ef66:	4b6c      	ldr	r3, [pc, #432]	@ (800f118 <tcp_input+0x260>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	895a      	ldrh	r2, [r3, #10]
 800ef70:	7bfb      	ldrb	r3, [r7, #15]
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d309      	bcc.n	800ef8c <tcp_input+0xd4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ef78:	4b66      	ldr	r3, [pc, #408]	@ (800f114 <tcp_input+0x25c>)
 800ef7a:	881a      	ldrh	r2, [r3, #0]
 800ef7c:	4b67      	ldr	r3, [pc, #412]	@ (800f11c <tcp_input+0x264>)
 800ef7e:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
 800ef82:	4619      	mov	r1, r3
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f7fd fe6b 	bl	800cc60 <pbuf_remove_header>
 800ef8a:	e04e      	b.n	800f02a <tcp_input+0x172>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d105      	bne.n	800efa0 <tcp_input+0xe8>
 800ef94:	4b58      	ldr	r3, [pc, #352]	@ (800f0f8 <tcp_input+0x240>)
 800ef96:	22c2      	movs	r2, #194	@ 0xc2
 800ef98:	4961      	ldr	r1, [pc, #388]	@ (800f120 <tcp_input+0x268>)
 800ef9a:	4859      	ldr	r0, [pc, #356]	@ (800f100 <tcp_input+0x248>)
 800ef9c:	f009 f9b0 	bl	8018300 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800efa0:	2114      	movs	r1, #20
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7fd fe5c 	bl	800cc60 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	895a      	ldrh	r2, [r3, #10]
 800efac:	4b5b      	ldr	r3, [pc, #364]	@ (800f11c <tcp_input+0x264>)
 800efae:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800efb0:	4b58      	ldr	r3, [pc, #352]	@ (800f114 <tcp_input+0x25c>)
 800efb2:	881a      	ldrh	r2, [r3, #0]
 800efb4:	4b59      	ldr	r3, [pc, #356]	@ (800f11c <tcp_input+0x264>)
 800efb6:	881b      	ldrh	r3, [r3, #0]
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	81bb      	strh	r3, [r7, #12]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800efbc:	4b57      	ldr	r3, [pc, #348]	@ (800f11c <tcp_input+0x264>)
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7fd fe4c 	bl	800cc60 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	895b      	ldrh	r3, [r3, #10]
 800efce:	89ba      	ldrh	r2, [r7, #12]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	f200 8371 	bhi.w	800f6b8 <tcp_input+0x800>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	685b      	ldr	r3, [r3, #4]
 800efdc:	4a4e      	ldr	r2, [pc, #312]	@ (800f118 <tcp_input+0x260>)
 800efde:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	89ba      	ldrh	r2, [r7, #12]
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fd fe39 	bl	800cc60 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	891a      	ldrh	r2, [r3, #8]
 800eff2:	89bb      	ldrh	r3, [r7, #12]
 800eff4:	1ad3      	subs	r3, r2, r3
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	895b      	ldrh	r3, [r3, #10]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d005      	beq.n	800f010 <tcp_input+0x158>
 800f004:	4b3c      	ldr	r3, [pc, #240]	@ (800f0f8 <tcp_input+0x240>)
 800f006:	22df      	movs	r2, #223	@ 0xdf
 800f008:	4946      	ldr	r1, [pc, #280]	@ (800f124 <tcp_input+0x26c>)
 800f00a:	483d      	ldr	r0, [pc, #244]	@ (800f100 <tcp_input+0x248>)
 800f00c:	f009 f978 	bl	8018300 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	891a      	ldrh	r2, [r3, #8]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	891b      	ldrh	r3, [r3, #8]
 800f01a:	429a      	cmp	r2, r3
 800f01c:	d005      	beq.n	800f02a <tcp_input+0x172>
 800f01e:	4b36      	ldr	r3, [pc, #216]	@ (800f0f8 <tcp_input+0x240>)
 800f020:	22e0      	movs	r2, #224	@ 0xe0
 800f022:	4941      	ldr	r1, [pc, #260]	@ (800f128 <tcp_input+0x270>)
 800f024:	4836      	ldr	r0, [pc, #216]	@ (800f100 <tcp_input+0x248>)
 800f026:	f009 f96b 	bl	8018300 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f02a:	4b36      	ldr	r3, [pc, #216]	@ (800f104 <tcp_input+0x24c>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	881b      	ldrh	r3, [r3, #0]
 800f030:	b29b      	uxth	r3, r3
 800f032:	4a34      	ldr	r2, [pc, #208]	@ (800f104 <tcp_input+0x24c>)
 800f034:	6814      	ldr	r4, [r2, #0]
 800f036:	4618      	mov	r0, r3
 800f038:	f7fc f9c2 	bl	800b3c0 <lwip_htons>
 800f03c:	4603      	mov	r3, r0
 800f03e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f040:	4b30      	ldr	r3, [pc, #192]	@ (800f104 <tcp_input+0x24c>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	885b      	ldrh	r3, [r3, #2]
 800f046:	b29b      	uxth	r3, r3
 800f048:	4a2e      	ldr	r2, [pc, #184]	@ (800f104 <tcp_input+0x24c>)
 800f04a:	6814      	ldr	r4, [r2, #0]
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fc f9b7 	bl	800b3c0 <lwip_htons>
 800f052:	4603      	mov	r3, r0
 800f054:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f056:	4b2b      	ldr	r3, [pc, #172]	@ (800f104 <tcp_input+0x24c>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	4a29      	ldr	r2, [pc, #164]	@ (800f104 <tcp_input+0x24c>)
 800f05e:	6814      	ldr	r4, [r2, #0]
 800f060:	4618      	mov	r0, r3
 800f062:	f7fc f9c2 	bl	800b3ea <lwip_htonl>
 800f066:	4603      	mov	r3, r0
 800f068:	6063      	str	r3, [r4, #4]
 800f06a:	6863      	ldr	r3, [r4, #4]
 800f06c:	4a2f      	ldr	r2, [pc, #188]	@ (800f12c <tcp_input+0x274>)
 800f06e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f070:	4b24      	ldr	r3, [pc, #144]	@ (800f104 <tcp_input+0x24c>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	689b      	ldr	r3, [r3, #8]
 800f076:	4a23      	ldr	r2, [pc, #140]	@ (800f104 <tcp_input+0x24c>)
 800f078:	6814      	ldr	r4, [r2, #0]
 800f07a:	4618      	mov	r0, r3
 800f07c:	f7fc f9b5 	bl	800b3ea <lwip_htonl>
 800f080:	4603      	mov	r3, r0
 800f082:	60a3      	str	r3, [r4, #8]
 800f084:	68a3      	ldr	r3, [r4, #8]
 800f086:	4a2a      	ldr	r2, [pc, #168]	@ (800f130 <tcp_input+0x278>)
 800f088:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f08a:	4b1e      	ldr	r3, [pc, #120]	@ (800f104 <tcp_input+0x24c>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	89db      	ldrh	r3, [r3, #14]
 800f090:	b29b      	uxth	r3, r3
 800f092:	4a1c      	ldr	r2, [pc, #112]	@ (800f104 <tcp_input+0x24c>)
 800f094:	6814      	ldr	r4, [r2, #0]
 800f096:	4618      	mov	r0, r3
 800f098:	f7fc f992 	bl	800b3c0 <lwip_htons>
 800f09c:	4603      	mov	r3, r0
 800f09e:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f0a0:	4b18      	ldr	r3, [pc, #96]	@ (800f104 <tcp_input+0x24c>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	899b      	ldrh	r3, [r3, #12]
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7fc f989 	bl	800b3c0 <lwip_htons>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f0b6:	b2da      	uxtb	r2, r3
 800f0b8:	4b1e      	ldr	r3, [pc, #120]	@ (800f134 <tcp_input+0x27c>)
 800f0ba:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	891a      	ldrh	r2, [r3, #8]
 800f0c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f138 <tcp_input+0x280>)
 800f0c2:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f0c4:	4b1b      	ldr	r3, [pc, #108]	@ (800f134 <tcp_input+0x27c>)
 800f0c6:	781b      	ldrb	r3, [r3, #0]
 800f0c8:	f003 0303 	and.w	r3, r3, #3
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00c      	beq.n	800f0ea <tcp_input+0x232>
    tcplen++;
 800f0d0:	4b19      	ldr	r3, [pc, #100]	@ (800f138 <tcp_input+0x280>)
 800f0d2:	881b      	ldrh	r3, [r3, #0]
 800f0d4:	3301      	adds	r3, #1
 800f0d6:	b29a      	uxth	r2, r3
 800f0d8:	4b17      	ldr	r3, [pc, #92]	@ (800f138 <tcp_input+0x280>)
 800f0da:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	891a      	ldrh	r2, [r3, #8]
 800f0e0:	4b15      	ldr	r3, [pc, #84]	@ (800f138 <tcp_input+0x280>)
 800f0e2:	881b      	ldrh	r3, [r3, #0]
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	f200 82e9 	bhi.w	800f6bc <tcp_input+0x804>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f0ea:	2300      	movs	r3, #0
 800f0ec:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f0ee:	4b13      	ldr	r3, [pc, #76]	@ (800f13c <tcp_input+0x284>)
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	61fb      	str	r3, [r7, #28]
 800f0f4:	e09b      	b.n	800f22e <tcp_input+0x376>
 800f0f6:	bf00      	nop
 800f0f8:	0801af6c 	.word	0x0801af6c
 800f0fc:	0801afa0 	.word	0x0801afa0
 800f100:	0801afb8 	.word	0x0801afb8
 800f104:	200150cc 	.word	0x200150cc
 800f108:	20009320 	.word	0x20009320
 800f10c:	20009334 	.word	0x20009334
 800f110:	20009330 	.word	0x20009330
 800f114:	200150d0 	.word	0x200150d0
 800f118:	200150d4 	.word	0x200150d4
 800f11c:	200150d2 	.word	0x200150d2
 800f120:	0801afe0 	.word	0x0801afe0
 800f124:	0801aff0 	.word	0x0801aff0
 800f128:	0801affc 	.word	0x0801affc
 800f12c:	200150dc 	.word	0x200150dc
 800f130:	200150e0 	.word	0x200150e0
 800f134:	200150e8 	.word	0x200150e8
 800f138:	200150e6 	.word	0x200150e6
 800f13c:	200150b0 	.word	0x200150b0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f140:	69fb      	ldr	r3, [r7, #28]
 800f142:	7d1b      	ldrb	r3, [r3, #20]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d105      	bne.n	800f154 <tcp_input+0x29c>
 800f148:	4b88      	ldr	r3, [pc, #544]	@ (800f36c <tcp_input+0x4b4>)
 800f14a:	22fb      	movs	r2, #251	@ 0xfb
 800f14c:	4988      	ldr	r1, [pc, #544]	@ (800f370 <tcp_input+0x4b8>)
 800f14e:	4889      	ldr	r0, [pc, #548]	@ (800f374 <tcp_input+0x4bc>)
 800f150:	f009 f8d6 	bl	8018300 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f154:	69fb      	ldr	r3, [r7, #28]
 800f156:	7d1b      	ldrb	r3, [r3, #20]
 800f158:	2b0a      	cmp	r3, #10
 800f15a:	d105      	bne.n	800f168 <tcp_input+0x2b0>
 800f15c:	4b83      	ldr	r3, [pc, #524]	@ (800f36c <tcp_input+0x4b4>)
 800f15e:	22fc      	movs	r2, #252	@ 0xfc
 800f160:	4985      	ldr	r1, [pc, #532]	@ (800f378 <tcp_input+0x4c0>)
 800f162:	4884      	ldr	r0, [pc, #528]	@ (800f374 <tcp_input+0x4bc>)
 800f164:	f009 f8cc 	bl	8018300 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f168:	69fb      	ldr	r3, [r7, #28]
 800f16a:	7d1b      	ldrb	r3, [r3, #20]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d105      	bne.n	800f17c <tcp_input+0x2c4>
 800f170:	4b7e      	ldr	r3, [pc, #504]	@ (800f36c <tcp_input+0x4b4>)
 800f172:	22fd      	movs	r2, #253	@ 0xfd
 800f174:	4981      	ldr	r1, [pc, #516]	@ (800f37c <tcp_input+0x4c4>)
 800f176:	487f      	ldr	r0, [pc, #508]	@ (800f374 <tcp_input+0x4bc>)
 800f178:	f009 f8c2 	bl	8018300 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f17c:	69fb      	ldr	r3, [r7, #28]
 800f17e:	7a1b      	ldrb	r3, [r3, #8]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d00c      	beq.n	800f19e <tcp_input+0x2e6>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	7a1a      	ldrb	r2, [r3, #8]
 800f188:	4b7d      	ldr	r3, [pc, #500]	@ (800f380 <tcp_input+0x4c8>)
 800f18a:	685b      	ldr	r3, [r3, #4]
 800f18c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f190:	3301      	adds	r3, #1
 800f192:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f194:	429a      	cmp	r2, r3
 800f196:	d002      	beq.n	800f19e <tcp_input+0x2e6>
      prev = pcb;
 800f198:	69fb      	ldr	r3, [r7, #28]
 800f19a:	61bb      	str	r3, [r7, #24]
      continue;
 800f19c:	e044      	b.n	800f228 <tcp_input+0x370>
    }

    if (pcb->remote_port == tcphdr->src &&
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	8b1a      	ldrh	r2, [r3, #24]
 800f1a2:	4b78      	ldr	r3, [pc, #480]	@ (800f384 <tcp_input+0x4cc>)
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	881b      	ldrh	r3, [r3, #0]
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d13a      	bne.n	800f224 <tcp_input+0x36c>
        pcb->local_port == tcphdr->dest &&
 800f1ae:	69fb      	ldr	r3, [r7, #28]
 800f1b0:	8ada      	ldrh	r2, [r3, #22]
 800f1b2:	4b74      	ldr	r3, [pc, #464]	@ (800f384 <tcp_input+0x4cc>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	885b      	ldrh	r3, [r3, #2]
 800f1b8:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f1ba:	429a      	cmp	r2, r3
 800f1bc:	d132      	bne.n	800f224 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	685a      	ldr	r2, [r3, #4]
 800f1c2:	4b6f      	ldr	r3, [pc, #444]	@ (800f380 <tcp_input+0x4c8>)
 800f1c4:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f1c6:	429a      	cmp	r2, r3
 800f1c8:	d12c      	bne.n	800f224 <tcp_input+0x36c>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	4b6c      	ldr	r3, [pc, #432]	@ (800f380 <tcp_input+0x4c8>)
 800f1d0:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d126      	bne.n	800f224 <tcp_input+0x36c>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f1d6:	69fb      	ldr	r3, [r7, #28]
 800f1d8:	68db      	ldr	r3, [r3, #12]
 800f1da:	69fa      	ldr	r2, [r7, #28]
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d106      	bne.n	800f1ee <tcp_input+0x336>
 800f1e0:	4b62      	ldr	r3, [pc, #392]	@ (800f36c <tcp_input+0x4b4>)
 800f1e2:	f240 120d 	movw	r2, #269	@ 0x10d
 800f1e6:	4968      	ldr	r1, [pc, #416]	@ (800f388 <tcp_input+0x4d0>)
 800f1e8:	4862      	ldr	r0, [pc, #392]	@ (800f374 <tcp_input+0x4bc>)
 800f1ea:	f009 f889 	bl	8018300 <iprintf>
      if (prev != NULL) {
 800f1ee:	69bb      	ldr	r3, [r7, #24]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d00a      	beq.n	800f20a <tcp_input+0x352>
        prev->next = pcb->next;
 800f1f4:	69fb      	ldr	r3, [r7, #28]
 800f1f6:	68da      	ldr	r2, [r3, #12]
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f1fc:	4b63      	ldr	r3, [pc, #396]	@ (800f38c <tcp_input+0x4d4>)
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	69fb      	ldr	r3, [r7, #28]
 800f202:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f204:	4a61      	ldr	r2, [pc, #388]	@ (800f38c <tcp_input+0x4d4>)
 800f206:	69fb      	ldr	r3, [r7, #28]
 800f208:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f20a:	69fb      	ldr	r3, [r7, #28]
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	69fa      	ldr	r2, [r7, #28]
 800f210:	429a      	cmp	r2, r3
 800f212:	d110      	bne.n	800f236 <tcp_input+0x37e>
 800f214:	4b55      	ldr	r3, [pc, #340]	@ (800f36c <tcp_input+0x4b4>)
 800f216:	f240 1215 	movw	r2, #277	@ 0x115
 800f21a:	495d      	ldr	r1, [pc, #372]	@ (800f390 <tcp_input+0x4d8>)
 800f21c:	4855      	ldr	r0, [pc, #340]	@ (800f374 <tcp_input+0x4bc>)
 800f21e:	f009 f86f 	bl	8018300 <iprintf>
      break;
 800f222:	e008      	b.n	800f236 <tcp_input+0x37e>
    }
    prev = pcb;
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	61fb      	str	r3, [r7, #28]
 800f22e:	69fb      	ldr	r3, [r7, #28]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d185      	bne.n	800f140 <tcp_input+0x288>
 800f234:	e000      	b.n	800f238 <tcp_input+0x380>
      break;
 800f236:	bf00      	nop
  }

  if (pcb == NULL) {
 800f238:	69fb      	ldr	r3, [r7, #28]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 80b0 	bne.w	800f3a0 <tcp_input+0x4e8>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f240:	4b54      	ldr	r3, [pc, #336]	@ (800f394 <tcp_input+0x4dc>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	61fb      	str	r3, [r7, #28]
 800f246:	e03f      	b.n	800f2c8 <tcp_input+0x410>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	7d1b      	ldrb	r3, [r3, #20]
 800f24c:	2b0a      	cmp	r3, #10
 800f24e:	d006      	beq.n	800f25e <tcp_input+0x3a6>
 800f250:	4b46      	ldr	r3, [pc, #280]	@ (800f36c <tcp_input+0x4b4>)
 800f252:	f240 121f 	movw	r2, #287	@ 0x11f
 800f256:	4950      	ldr	r1, [pc, #320]	@ (800f398 <tcp_input+0x4e0>)
 800f258:	4846      	ldr	r0, [pc, #280]	@ (800f374 <tcp_input+0x4bc>)
 800f25a:	f009 f851 	bl	8018300 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	7a1b      	ldrb	r3, [r3, #8]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d009      	beq.n	800f27a <tcp_input+0x3c2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	7a1a      	ldrb	r2, [r3, #8]
 800f26a:	4b45      	ldr	r3, [pc, #276]	@ (800f380 <tcp_input+0x4c8>)
 800f26c:	685b      	ldr	r3, [r3, #4]
 800f26e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f272:	3301      	adds	r3, #1
 800f274:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f276:	429a      	cmp	r2, r3
 800f278:	d122      	bne.n	800f2c0 <tcp_input+0x408>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	8b1a      	ldrh	r2, [r3, #24]
 800f27e:	4b41      	ldr	r3, [pc, #260]	@ (800f384 <tcp_input+0x4cc>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	881b      	ldrh	r3, [r3, #0]
 800f284:	b29b      	uxth	r3, r3
 800f286:	429a      	cmp	r2, r3
 800f288:	d11b      	bne.n	800f2c2 <tcp_input+0x40a>
          pcb->local_port == tcphdr->dest &&
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	8ada      	ldrh	r2, [r3, #22]
 800f28e:	4b3d      	ldr	r3, [pc, #244]	@ (800f384 <tcp_input+0x4cc>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	885b      	ldrh	r3, [r3, #2]
 800f294:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f296:	429a      	cmp	r2, r3
 800f298:	d113      	bne.n	800f2c2 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	685a      	ldr	r2, [r3, #4]
 800f29e:	4b38      	ldr	r3, [pc, #224]	@ (800f380 <tcp_input+0x4c8>)
 800f2a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d10d      	bne.n	800f2c2 <tcp_input+0x40a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	4b35      	ldr	r3, [pc, #212]	@ (800f380 <tcp_input+0x4c8>)
 800f2ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2ae:	429a      	cmp	r2, r3
 800f2b0:	d107      	bne.n	800f2c2 <tcp_input+0x40a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f2b2:	69f8      	ldr	r0, [r7, #28]
 800f2b4:	f000 fb5c 	bl	800f970 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f7fd fd57 	bl	800cd6c <pbuf_free>
        return;
 800f2be:	e203      	b.n	800f6c8 <tcp_input+0x810>
        continue;
 800f2c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2c2:	69fb      	ldr	r3, [r7, #28]
 800f2c4:	68db      	ldr	r3, [r3, #12]
 800f2c6:	61fb      	str	r3, [r7, #28]
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d1bc      	bne.n	800f248 <tcp_input+0x390>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f2d2:	4b32      	ldr	r3, [pc, #200]	@ (800f39c <tcp_input+0x4e4>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	617b      	str	r3, [r7, #20]
 800f2d8:	e02a      	b.n	800f330 <tcp_input+0x478>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	7a1b      	ldrb	r3, [r3, #8]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00c      	beq.n	800f2fc <tcp_input+0x444>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f2e2:	697b      	ldr	r3, [r7, #20]
 800f2e4:	7a1a      	ldrb	r2, [r3, #8]
 800f2e6:	4b26      	ldr	r3, [pc, #152]	@ (800f380 <tcp_input+0x4c8>)
 800f2e8:	685b      	ldr	r3, [r3, #4]
 800f2ea:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f2f2:	429a      	cmp	r2, r3
 800f2f4:	d002      	beq.n	800f2fc <tcp_input+0x444>
        prev = (struct tcp_pcb *)lpcb;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	61bb      	str	r3, [r7, #24]
        continue;
 800f2fa:	e016      	b.n	800f32a <tcp_input+0x472>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	8ada      	ldrh	r2, [r3, #22]
 800f300:	4b20      	ldr	r3, [pc, #128]	@ (800f384 <tcp_input+0x4cc>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	885b      	ldrh	r3, [r3, #2]
 800f306:	b29b      	uxth	r3, r3
 800f308:	429a      	cmp	r2, r3
 800f30a:	d10c      	bne.n	800f326 <tcp_input+0x46e>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f30c:	697b      	ldr	r3, [r7, #20]
 800f30e:	681a      	ldr	r2, [r3, #0]
 800f310:	4b1b      	ldr	r3, [pc, #108]	@ (800f380 <tcp_input+0x4c8>)
 800f312:	695b      	ldr	r3, [r3, #20]
 800f314:	429a      	cmp	r2, r3
 800f316:	d00f      	beq.n	800f338 <tcp_input+0x480>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f318:	697b      	ldr	r3, [r7, #20]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d00d      	beq.n	800f33a <tcp_input+0x482>
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d009      	beq.n	800f33a <tcp_input+0x482>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f32a:	697b      	ldr	r3, [r7, #20]
 800f32c:	68db      	ldr	r3, [r3, #12]
 800f32e:	617b      	str	r3, [r7, #20]
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d1d1      	bne.n	800f2da <tcp_input+0x422>
 800f336:	e000      	b.n	800f33a <tcp_input+0x482>
            break;
 800f338:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f33a:	697b      	ldr	r3, [r7, #20]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d02f      	beq.n	800f3a0 <tcp_input+0x4e8>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d00a      	beq.n	800f35c <tcp_input+0x4a4>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	68da      	ldr	r2, [r3, #12]
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f34e:	4b13      	ldr	r3, [pc, #76]	@ (800f39c <tcp_input+0x4e4>)
 800f350:	681a      	ldr	r2, [r3, #0]
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f356:	4a11      	ldr	r2, [pc, #68]	@ (800f39c <tcp_input+0x4e4>)
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f35c:	6978      	ldr	r0, [r7, #20]
 800f35e:	f000 fa09 	bl	800f774 <tcp_listen_input>
      }
      pbuf_free(p);
 800f362:	6878      	ldr	r0, [r7, #4]
 800f364:	f7fd fd02 	bl	800cd6c <pbuf_free>
      return;
 800f368:	e1ae      	b.n	800f6c8 <tcp_input+0x810>
 800f36a:	bf00      	nop
 800f36c:	0801af6c 	.word	0x0801af6c
 800f370:	0801b01c 	.word	0x0801b01c
 800f374:	0801afb8 	.word	0x0801afb8
 800f378:	0801b044 	.word	0x0801b044
 800f37c:	0801b070 	.word	0x0801b070
 800f380:	20009320 	.word	0x20009320
 800f384:	200150cc 	.word	0x200150cc
 800f388:	0801b098 	.word	0x0801b098
 800f38c:	200150b0 	.word	0x200150b0
 800f390:	0801b0c4 	.word	0x0801b0c4
 800f394:	200150b4 	.word	0x200150b4
 800f398:	0801b0f0 	.word	0x0801b0f0
 800f39c:	200150ac 	.word	0x200150ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	f000 8156 	beq.w	800f654 <tcp_input+0x79c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f3a8:	4b94      	ldr	r3, [pc, #592]	@ (800f5fc <tcp_input+0x744>)
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	891a      	ldrh	r2, [r3, #8]
 800f3b2:	4b92      	ldr	r3, [pc, #584]	@ (800f5fc <tcp_input+0x744>)
 800f3b4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f3b6:	4a91      	ldr	r2, [pc, #580]	@ (800f5fc <tcp_input+0x744>)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f3bc:	4b90      	ldr	r3, [pc, #576]	@ (800f600 <tcp_input+0x748>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	4a8e      	ldr	r2, [pc, #568]	@ (800f5fc <tcp_input+0x744>)
 800f3c2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f3c4:	4b8f      	ldr	r3, [pc, #572]	@ (800f604 <tcp_input+0x74c>)
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f3ca:	4b8f      	ldr	r3, [pc, #572]	@ (800f608 <tcp_input+0x750>)
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f3d0:	4b8e      	ldr	r3, [pc, #568]	@ (800f60c <tcp_input+0x754>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f3d6:	4b8e      	ldr	r3, [pc, #568]	@ (800f610 <tcp_input+0x758>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	f003 0308 	and.w	r3, r3, #8
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d006      	beq.n	800f3f0 <tcp_input+0x538>
      p->flags |= PBUF_FLAG_PUSH;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	7b5b      	ldrb	r3, [r3, #13]
 800f3e6:	f043 0301 	orr.w	r3, r3, #1
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d017      	beq.n	800f428 <tcp_input+0x570>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f3f8:	69f8      	ldr	r0, [r7, #28]
 800f3fa:	f7ff f89d 	bl	800e538 <tcp_process_refused_data>
 800f3fe:	4603      	mov	r3, r0
 800f400:	f113 0f0d 	cmn.w	r3, #13
 800f404:	d007      	beq.n	800f416 <tcp_input+0x55e>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f406:	69fb      	ldr	r3, [r7, #28]
 800f408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00c      	beq.n	800f428 <tcp_input+0x570>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f40e:	4b81      	ldr	r3, [pc, #516]	@ (800f614 <tcp_input+0x75c>)
 800f410:	881b      	ldrh	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d008      	beq.n	800f428 <tcp_input+0x570>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f416:	69fb      	ldr	r3, [r7, #28]
 800f418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	f040 80e2 	bne.w	800f5e4 <tcp_input+0x72c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f420:	69f8      	ldr	r0, [r7, #28]
 800f422:	f003 fa6d 	bl	8012900 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f426:	e0dd      	b.n	800f5e4 <tcp_input+0x72c>
      }
    }
    tcp_input_pcb = pcb;
 800f428:	4a7b      	ldr	r2, [pc, #492]	@ (800f618 <tcp_input+0x760>)
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f42e:	69f8      	ldr	r0, [r7, #28]
 800f430:	f000 fb18 	bl	800fa64 <tcp_process>
 800f434:	4603      	mov	r3, r0
 800f436:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f43c:	f113 0f0d 	cmn.w	r3, #13
 800f440:	f000 80d2 	beq.w	800f5e8 <tcp_input+0x730>
      if (recv_flags & TF_RESET) {
 800f444:	4b70      	ldr	r3, [pc, #448]	@ (800f608 <tcp_input+0x750>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 0308 	and.w	r3, r3, #8
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d015      	beq.n	800f47c <tcp_input+0x5c4>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f456:	2b00      	cmp	r3, #0
 800f458:	d008      	beq.n	800f46c <tcp_input+0x5b4>
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f460:	69fa      	ldr	r2, [r7, #28]
 800f462:	6912      	ldr	r2, [r2, #16]
 800f464:	f06f 010d 	mvn.w	r1, #13
 800f468:	4610      	mov	r0, r2
 800f46a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f46c:	69f9      	ldr	r1, [r7, #28]
 800f46e:	486b      	ldr	r0, [pc, #428]	@ (800f61c <tcp_input+0x764>)
 800f470:	f7ff fbcc 	bl	800ec0c <tcp_pcb_remove>
        tcp_free(pcb);
 800f474:	69f8      	ldr	r0, [r7, #28]
 800f476:	f7fd ff35 	bl	800d2e4 <tcp_free>
 800f47a:	e0d8      	b.n	800f62e <tcp_input+0x776>
      } else {
        err = ERR_OK;
 800f47c:	2300      	movs	r3, #0
 800f47e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f480:	4b62      	ldr	r3, [pc, #392]	@ (800f60c <tcp_input+0x754>)
 800f482:	881b      	ldrh	r3, [r3, #0]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d01b      	beq.n	800f4c0 <tcp_input+0x608>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f488:	4b60      	ldr	r3, [pc, #384]	@ (800f60c <tcp_input+0x754>)
 800f48a:	881b      	ldrh	r3, [r3, #0]
 800f48c:	817b      	strh	r3, [r7, #10]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f48e:	69fb      	ldr	r3, [r7, #28]
 800f490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f492:	2b00      	cmp	r3, #0
 800f494:	d009      	beq.n	800f4aa <tcp_input+0x5f2>
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f49a:	69fa      	ldr	r2, [r7, #28]
 800f49c:	6910      	ldr	r0, [r2, #16]
 800f49e:	897a      	ldrh	r2, [r7, #10]
 800f4a0:	69f9      	ldr	r1, [r7, #28]
 800f4a2:	4798      	blx	r3
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	74fb      	strb	r3, [r7, #19]
 800f4a8:	e001      	b.n	800f4ae <tcp_input+0x5f6>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f4ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4b2:	f113 0f0d 	cmn.w	r3, #13
 800f4b6:	f000 8099 	beq.w	800f5ec <tcp_input+0x734>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f4ba:	4b54      	ldr	r3, [pc, #336]	@ (800f60c <tcp_input+0x754>)
 800f4bc:	2200      	movs	r2, #0
 800f4be:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f4c0:	69f8      	ldr	r0, [r7, #28]
 800f4c2:	f000 f917 	bl	800f6f4 <tcp_input_delayed_close>
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f040 8091 	bne.w	800f5f0 <tcp_input+0x738>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f4ce:	4b4d      	ldr	r3, [pc, #308]	@ (800f604 <tcp_input+0x74c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d041      	beq.n	800f55a <tcp_input+0x6a2>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f4d6:	69fb      	ldr	r3, [r7, #28]
 800f4d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d006      	beq.n	800f4ec <tcp_input+0x634>
 800f4de:	4b50      	ldr	r3, [pc, #320]	@ (800f620 <tcp_input+0x768>)
 800f4e0:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f4e4:	494f      	ldr	r1, [pc, #316]	@ (800f624 <tcp_input+0x76c>)
 800f4e6:	4850      	ldr	r0, [pc, #320]	@ (800f628 <tcp_input+0x770>)
 800f4e8:	f008 ff0a 	bl	8018300 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f4ec:	69fb      	ldr	r3, [r7, #28]
 800f4ee:	8b5b      	ldrh	r3, [r3, #26]
 800f4f0:	f003 0310 	and.w	r3, r3, #16
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d008      	beq.n	800f50a <tcp_input+0x652>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f4f8:	4b42      	ldr	r3, [pc, #264]	@ (800f604 <tcp_input+0x74c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7fd fc35 	bl	800cd6c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f502:	69f8      	ldr	r0, [r7, #28]
 800f504:	f7fe fa28 	bl	800d958 <tcp_abort>
            goto aborted;
 800f508:	e091      	b.n	800f62e <tcp_input+0x776>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f50a:	69fb      	ldr	r3, [r7, #28]
 800f50c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f510:	2b00      	cmp	r3, #0
 800f512:	d00c      	beq.n	800f52e <tcp_input+0x676>
 800f514:	69fb      	ldr	r3, [r7, #28]
 800f516:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	6918      	ldr	r0, [r3, #16]
 800f51e:	4b39      	ldr	r3, [pc, #228]	@ (800f604 <tcp_input+0x74c>)
 800f520:	681a      	ldr	r2, [r3, #0]
 800f522:	2300      	movs	r3, #0
 800f524:	69f9      	ldr	r1, [r7, #28]
 800f526:	47a0      	blx	r4
 800f528:	4603      	mov	r3, r0
 800f52a:	74fb      	strb	r3, [r7, #19]
 800f52c:	e008      	b.n	800f540 <tcp_input+0x688>
 800f52e:	4b35      	ldr	r3, [pc, #212]	@ (800f604 <tcp_input+0x74c>)
 800f530:	681a      	ldr	r2, [r3, #0]
 800f532:	2300      	movs	r3, #0
 800f534:	69f9      	ldr	r1, [r7, #28]
 800f536:	2000      	movs	r0, #0
 800f538:	f7ff f8aa 	bl	800e690 <tcp_recv_null>
 800f53c:	4603      	mov	r3, r0
 800f53e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f540:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f544:	f113 0f0d 	cmn.w	r3, #13
 800f548:	d054      	beq.n	800f5f4 <tcp_input+0x73c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f54a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d003      	beq.n	800f55a <tcp_input+0x6a2>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f552:	4b2c      	ldr	r3, [pc, #176]	@ (800f604 <tcp_input+0x74c>)
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f55a:	4b2b      	ldr	r3, [pc, #172]	@ (800f608 <tcp_input+0x750>)
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	f003 0320 	and.w	r3, r3, #32
 800f562:	2b00      	cmp	r3, #0
 800f564:	d031      	beq.n	800f5ca <tcp_input+0x712>
          if (pcb->refused_data != NULL) {
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d009      	beq.n	800f582 <tcp_input+0x6ca>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f572:	7b5a      	ldrb	r2, [r3, #13]
 800f574:	69fb      	ldr	r3, [r7, #28]
 800f576:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f578:	f042 0220 	orr.w	r2, r2, #32
 800f57c:	b2d2      	uxtb	r2, r2
 800f57e:	735a      	strb	r2, [r3, #13]
 800f580:	e023      	b.n	800f5ca <tcp_input+0x712>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f582:	69fb      	ldr	r3, [r7, #28]
 800f584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f586:	f640 3268 	movw	r2, #2920	@ 0xb68
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d005      	beq.n	800f59a <tcp_input+0x6e2>
              pcb->rcv_wnd++;
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f592:	3301      	adds	r3, #1
 800f594:	b29a      	uxth	r2, r3
 800f596:	69fb      	ldr	r3, [r7, #28]
 800f598:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f59a:	69fb      	ldr	r3, [r7, #28]
 800f59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00b      	beq.n	800f5bc <tcp_input+0x704>
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800f5aa:	69fb      	ldr	r3, [r7, #28]
 800f5ac:	6918      	ldr	r0, [r3, #16]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	69f9      	ldr	r1, [r7, #28]
 800f5b4:	47a0      	blx	r4
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	74fb      	strb	r3, [r7, #19]
 800f5ba:	e001      	b.n	800f5c0 <tcp_input+0x708>
 800f5bc:	2300      	movs	r3, #0
 800f5be:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f5c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5c4:	f113 0f0d 	cmn.w	r3, #13
 800f5c8:	d016      	beq.n	800f5f8 <tcp_input+0x740>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f5ca:	4b13      	ldr	r3, [pc, #76]	@ (800f618 <tcp_input+0x760>)
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f5d0:	69f8      	ldr	r0, [r7, #28]
 800f5d2:	f000 f88f 	bl	800f6f4 <tcp_input_delayed_close>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d127      	bne.n	800f62c <tcp_input+0x774>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f5dc:	69f8      	ldr	r0, [r7, #28]
 800f5de:	f002 fb67 	bl	8011cb0 <tcp_output>
 800f5e2:	e024      	b.n	800f62e <tcp_input+0x776>
        goto aborted;
 800f5e4:	bf00      	nop
 800f5e6:	e022      	b.n	800f62e <tcp_input+0x776>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f5e8:	bf00      	nop
 800f5ea:	e020      	b.n	800f62e <tcp_input+0x776>
              goto aborted;
 800f5ec:	bf00      	nop
 800f5ee:	e01e      	b.n	800f62e <tcp_input+0x776>
          goto aborted;
 800f5f0:	bf00      	nop
 800f5f2:	e01c      	b.n	800f62e <tcp_input+0x776>
            goto aborted;
 800f5f4:	bf00      	nop
 800f5f6:	e01a      	b.n	800f62e <tcp_input+0x776>
              goto aborted;
 800f5f8:	bf00      	nop
 800f5fa:	e018      	b.n	800f62e <tcp_input+0x776>
 800f5fc:	200150bc 	.word	0x200150bc
 800f600:	200150cc 	.word	0x200150cc
 800f604:	200150ec 	.word	0x200150ec
 800f608:	200150e9 	.word	0x200150e9
 800f60c:	200150e4 	.word	0x200150e4
 800f610:	200150e8 	.word	0x200150e8
 800f614:	200150e6 	.word	0x200150e6
 800f618:	200150f0 	.word	0x200150f0
 800f61c:	200150b0 	.word	0x200150b0
 800f620:	0801af6c 	.word	0x0801af6c
 800f624:	0801b120 	.word	0x0801b120
 800f628:	0801afb8 	.word	0x0801afb8
          goto aborted;
 800f62c:	bf00      	nop
    tcp_input_pcb = NULL;
 800f62e:	4b28      	ldr	r3, [pc, #160]	@ (800f6d0 <tcp_input+0x818>)
 800f630:	2200      	movs	r2, #0
 800f632:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f634:	4b27      	ldr	r3, [pc, #156]	@ (800f6d4 <tcp_input+0x81c>)
 800f636:	2200      	movs	r2, #0
 800f638:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f63a:	4b27      	ldr	r3, [pc, #156]	@ (800f6d8 <tcp_input+0x820>)
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d041      	beq.n	800f6c6 <tcp_input+0x80e>
      pbuf_free(inseg.p);
 800f642:	4b25      	ldr	r3, [pc, #148]	@ (800f6d8 <tcp_input+0x820>)
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	4618      	mov	r0, r3
 800f648:	f7fd fb90 	bl	800cd6c <pbuf_free>
      inseg.p = NULL;
 800f64c:	4b22      	ldr	r3, [pc, #136]	@ (800f6d8 <tcp_input+0x820>)
 800f64e:	2200      	movs	r2, #0
 800f650:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f652:	e038      	b.n	800f6c6 <tcp_input+0x80e>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f654:	4b21      	ldr	r3, [pc, #132]	@ (800f6dc <tcp_input+0x824>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	899b      	ldrh	r3, [r3, #12]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fb feaf 	bl	800b3c0 <lwip_htons>
 800f662:	4603      	mov	r3, r0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	f003 0304 	and.w	r3, r3, #4
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d118      	bne.n	800f6a0 <tcp_input+0x7e8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f66e:	4b1c      	ldr	r3, [pc, #112]	@ (800f6e0 <tcp_input+0x828>)
 800f670:	6819      	ldr	r1, [r3, #0]
 800f672:	4b1c      	ldr	r3, [pc, #112]	@ (800f6e4 <tcp_input+0x82c>)
 800f674:	881b      	ldrh	r3, [r3, #0]
 800f676:	461a      	mov	r2, r3
 800f678:	4b1b      	ldr	r3, [pc, #108]	@ (800f6e8 <tcp_input+0x830>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f67e:	4b17      	ldr	r3, [pc, #92]	@ (800f6dc <tcp_input+0x824>)
 800f680:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f682:	885b      	ldrh	r3, [r3, #2]
 800f684:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f686:	4a15      	ldr	r2, [pc, #84]	@ (800f6dc <tcp_input+0x824>)
 800f688:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f68a:	8812      	ldrh	r2, [r2, #0]
 800f68c:	b292      	uxth	r2, r2
 800f68e:	9202      	str	r2, [sp, #8]
 800f690:	9301      	str	r3, [sp, #4]
 800f692:	4b16      	ldr	r3, [pc, #88]	@ (800f6ec <tcp_input+0x834>)
 800f694:	9300      	str	r3, [sp, #0]
 800f696:	4b16      	ldr	r3, [pc, #88]	@ (800f6f0 <tcp_input+0x838>)
 800f698:	4602      	mov	r2, r0
 800f69a:	2000      	movs	r0, #0
 800f69c:	f003 f8de 	bl	801285c <tcp_rst>
    pbuf_free(p);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7fd fb63 	bl	800cd6c <pbuf_free>
  return;
 800f6a6:	e00e      	b.n	800f6c6 <tcp_input+0x80e>
    goto dropped;
 800f6a8:	bf00      	nop
 800f6aa:	e008      	b.n	800f6be <tcp_input+0x806>
    goto dropped;
 800f6ac:	bf00      	nop
 800f6ae:	e006      	b.n	800f6be <tcp_input+0x806>
      goto dropped;
 800f6b0:	bf00      	nop
 800f6b2:	e004      	b.n	800f6be <tcp_input+0x806>
    goto dropped;
 800f6b4:	bf00      	nop
 800f6b6:	e002      	b.n	800f6be <tcp_input+0x806>
      goto dropped;
 800f6b8:	bf00      	nop
 800f6ba:	e000      	b.n	800f6be <tcp_input+0x806>
      goto dropped;
 800f6bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7fd fb54 	bl	800cd6c <pbuf_free>
 800f6c4:	e000      	b.n	800f6c8 <tcp_input+0x810>
  return;
 800f6c6:	bf00      	nop
}
 800f6c8:	3724      	adds	r7, #36	@ 0x24
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd90      	pop	{r4, r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	200150f0 	.word	0x200150f0
 800f6d4:	200150ec 	.word	0x200150ec
 800f6d8:	200150bc 	.word	0x200150bc
 800f6dc:	200150cc 	.word	0x200150cc
 800f6e0:	200150e0 	.word	0x200150e0
 800f6e4:	200150e6 	.word	0x200150e6
 800f6e8:	200150dc 	.word	0x200150dc
 800f6ec:	20009330 	.word	0x20009330
 800f6f0:	20009334 	.word	0x20009334

0800f6f4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b082      	sub	sp, #8
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d106      	bne.n	800f710 <tcp_input_delayed_close+0x1c>
 800f702:	4b17      	ldr	r3, [pc, #92]	@ (800f760 <tcp_input_delayed_close+0x6c>)
 800f704:	f240 225a 	movw	r2, #602	@ 0x25a
 800f708:	4916      	ldr	r1, [pc, #88]	@ (800f764 <tcp_input_delayed_close+0x70>)
 800f70a:	4817      	ldr	r0, [pc, #92]	@ (800f768 <tcp_input_delayed_close+0x74>)
 800f70c:	f008 fdf8 	bl	8018300 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f710:	4b16      	ldr	r3, [pc, #88]	@ (800f76c <tcp_input_delayed_close+0x78>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f003 0310 	and.w	r3, r3, #16
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d01c      	beq.n	800f756 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	8b5b      	ldrh	r3, [r3, #26]
 800f720:	f003 0310 	and.w	r3, r3, #16
 800f724:	2b00      	cmp	r3, #0
 800f726:	d10d      	bne.n	800f744 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d008      	beq.n	800f744 <tcp_input_delayed_close+0x50>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	6912      	ldr	r2, [r2, #16]
 800f73c:	f06f 010e 	mvn.w	r1, #14
 800f740:	4610      	mov	r0, r2
 800f742:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f744:	6879      	ldr	r1, [r7, #4]
 800f746:	480a      	ldr	r0, [pc, #40]	@ (800f770 <tcp_input_delayed_close+0x7c>)
 800f748:	f7ff fa60 	bl	800ec0c <tcp_pcb_remove>
    tcp_free(pcb);
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f7fd fdc9 	bl	800d2e4 <tcp_free>
    return 1;
 800f752:	2301      	movs	r3, #1
 800f754:	e000      	b.n	800f758 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f756:	2300      	movs	r3, #0
}
 800f758:	4618      	mov	r0, r3
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	0801af6c 	.word	0x0801af6c
 800f764:	0801b13c 	.word	0x0801b13c
 800f768:	0801afb8 	.word	0x0801afb8
 800f76c:	200150e9 	.word	0x200150e9
 800f770:	200150b0 	.word	0x200150b0

0800f774 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f774:	b590      	push	{r4, r7, lr}
 800f776:	b08b      	sub	sp, #44	@ 0x2c
 800f778:	af04      	add	r7, sp, #16
 800f77a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f77c:	4b6f      	ldr	r3, [pc, #444]	@ (800f93c <tcp_listen_input+0x1c8>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	f003 0304 	and.w	r3, r3, #4
 800f784:	2b00      	cmp	r3, #0
 800f786:	f040 80d2 	bne.w	800f92e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d106      	bne.n	800f79e <tcp_listen_input+0x2a>
 800f790:	4b6b      	ldr	r3, [pc, #428]	@ (800f940 <tcp_listen_input+0x1cc>)
 800f792:	f240 2281 	movw	r2, #641	@ 0x281
 800f796:	496b      	ldr	r1, [pc, #428]	@ (800f944 <tcp_listen_input+0x1d0>)
 800f798:	486b      	ldr	r0, [pc, #428]	@ (800f948 <tcp_listen_input+0x1d4>)
 800f79a:	f008 fdb1 	bl	8018300 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f79e:	4b67      	ldr	r3, [pc, #412]	@ (800f93c <tcp_listen_input+0x1c8>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	f003 0310 	and.w	r3, r3, #16
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d019      	beq.n	800f7de <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7aa:	4b68      	ldr	r3, [pc, #416]	@ (800f94c <tcp_listen_input+0x1d8>)
 800f7ac:	6819      	ldr	r1, [r3, #0]
 800f7ae:	4b68      	ldr	r3, [pc, #416]	@ (800f950 <tcp_listen_input+0x1dc>)
 800f7b0:	881b      	ldrh	r3, [r3, #0]
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	4b67      	ldr	r3, [pc, #412]	@ (800f954 <tcp_listen_input+0x1e0>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7ba:	4b67      	ldr	r3, [pc, #412]	@ (800f958 <tcp_listen_input+0x1e4>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7be:	885b      	ldrh	r3, [r3, #2]
 800f7c0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7c2:	4a65      	ldr	r2, [pc, #404]	@ (800f958 <tcp_listen_input+0x1e4>)
 800f7c4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7c6:	8812      	ldrh	r2, [r2, #0]
 800f7c8:	b292      	uxth	r2, r2
 800f7ca:	9202      	str	r2, [sp, #8]
 800f7cc:	9301      	str	r3, [sp, #4]
 800f7ce:	4b63      	ldr	r3, [pc, #396]	@ (800f95c <tcp_listen_input+0x1e8>)
 800f7d0:	9300      	str	r3, [sp, #0]
 800f7d2:	4b63      	ldr	r3, [pc, #396]	@ (800f960 <tcp_listen_input+0x1ec>)
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f003 f840 	bl	801285c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f7dc:	e0a9      	b.n	800f932 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f7de:	4b57      	ldr	r3, [pc, #348]	@ (800f93c <tcp_listen_input+0x1c8>)
 800f7e0:	781b      	ldrb	r3, [r3, #0]
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	f000 80a3 	beq.w	800f932 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	7d5b      	ldrb	r3, [r3, #21]
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff f871 	bl	800e8d8 <tcp_alloc>
 800f7f6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d111      	bne.n	800f822 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	699b      	ldr	r3, [r3, #24]
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00a      	beq.n	800f81c <tcp_listen_input+0xa8>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	699b      	ldr	r3, [r3, #24]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	6910      	ldr	r0, [r2, #16]
 800f80e:	f04f 32ff 	mov.w	r2, #4294967295
 800f812:	2100      	movs	r1, #0
 800f814:	4798      	blx	r3
 800f816:	4603      	mov	r3, r0
 800f818:	73bb      	strb	r3, [r7, #14]
      return;
 800f81a:	e08b      	b.n	800f934 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f81c:	23f0      	movs	r3, #240	@ 0xf0
 800f81e:	73bb      	strb	r3, [r7, #14]
      return;
 800f820:	e088      	b.n	800f934 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f822:	4b50      	ldr	r3, [pc, #320]	@ (800f964 <tcp_listen_input+0x1f0>)
 800f824:	695a      	ldr	r2, [r3, #20]
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f82a:	4b4e      	ldr	r3, [pc, #312]	@ (800f964 <tcp_listen_input+0x1f0>)
 800f82c:	691a      	ldr	r2, [r3, #16]
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	8ada      	ldrh	r2, [r3, #22]
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f83a:	4b47      	ldr	r3, [pc, #284]	@ (800f958 <tcp_listen_input+0x1e4>)
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	881b      	ldrh	r3, [r3, #0]
 800f840:	b29a      	uxth	r2, r3
 800f842:	697b      	ldr	r3, [r7, #20]
 800f844:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	2203      	movs	r2, #3
 800f84a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f84c:	4b41      	ldr	r3, [pc, #260]	@ (800f954 <tcp_listen_input+0x1e0>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	1c5a      	adds	r2, r3, #1
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f85e:	6978      	ldr	r0, [r7, #20]
 800f860:	f7ff fa5a 	bl	800ed18 <tcp_next_iss>
 800f864:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f866:	697b      	ldr	r3, [r7, #20]
 800f868:	693a      	ldr	r2, [r7, #16]
 800f86a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	693a      	ldr	r2, [r7, #16]
 800f870:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	693a      	ldr	r2, [r7, #16]
 800f876:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	693a      	ldr	r2, [r7, #16]
 800f87c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f87e:	4b35      	ldr	r3, [pc, #212]	@ (800f954 <tcp_listen_input+0x1e0>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	1e5a      	subs	r2, r3, #1
 800f884:	697b      	ldr	r3, [r7, #20]
 800f886:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	691a      	ldr	r2, [r3, #16]
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	687a      	ldr	r2, [r7, #4]
 800f894:	679a      	str	r2, [r3, #120]	@ 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	7a5b      	ldrb	r3, [r3, #9]
 800f89a:	f003 030c 	and.w	r3, r3, #12
 800f89e:	b2da      	uxtb	r2, r3
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	7a1a      	ldrb	r2, [r3, #8]
 800f8a8:	697b      	ldr	r3, [r7, #20]
 800f8aa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f8ac:	4b2e      	ldr	r3, [pc, #184]	@ (800f968 <tcp_listen_input+0x1f4>)
 800f8ae:	681a      	ldr	r2, [r3, #0]
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	60da      	str	r2, [r3, #12]
 800f8b4:	4a2c      	ldr	r2, [pc, #176]	@ (800f968 <tcp_listen_input+0x1f4>)
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	6013      	str	r3, [r2, #0]
 800f8ba:	f003 f991 	bl	8012be0 <tcp_timer_needed>
 800f8be:	4b2b      	ldr	r3, [pc, #172]	@ (800f96c <tcp_listen_input+0x1f8>)
 800f8c0:	2201      	movs	r2, #1
 800f8c2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f8c4:	6978      	ldr	r0, [r7, #20]
 800f8c6:	f001 f9d5 	bl	8010c74 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f8ca:	4b23      	ldr	r3, [pc, #140]	@ (800f958 <tcp_listen_input+0x1e4>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	89db      	ldrh	r3, [r3, #14]
 800f8d0:	b29a      	uxth	r2, r3
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	3304      	adds	r3, #4
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f006 ff83 	bl	80167f8 <ip4_route>
 800f8f2:	4601      	mov	r1, r0
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	461a      	mov	r2, r3
 800f8fa:	4620      	mov	r0, r4
 800f8fc:	f7ff fa32 	bl	800ed64 <tcp_eff_send_mss_netif>
 800f900:	4603      	mov	r3, r0
 800f902:	461a      	mov	r2, r3
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f908:	2112      	movs	r1, #18
 800f90a:	6978      	ldr	r0, [r7, #20]
 800f90c:	f002 f8e2 	bl	8011ad4 <tcp_enqueue_flags>
 800f910:	4603      	mov	r3, r0
 800f912:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d004      	beq.n	800f926 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f91c:	2100      	movs	r1, #0
 800f91e:	6978      	ldr	r0, [r7, #20]
 800f920:	f7fd ff66 	bl	800d7f0 <tcp_abandon>
      return;
 800f924:	e006      	b.n	800f934 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f926:	6978      	ldr	r0, [r7, #20]
 800f928:	f002 f9c2 	bl	8011cb0 <tcp_output>
  return;
 800f92c:	e001      	b.n	800f932 <tcp_listen_input+0x1be>
    return;
 800f92e:	bf00      	nop
 800f930:	e000      	b.n	800f934 <tcp_listen_input+0x1c0>
  return;
 800f932:	bf00      	nop
}
 800f934:	371c      	adds	r7, #28
 800f936:	46bd      	mov	sp, r7
 800f938:	bd90      	pop	{r4, r7, pc}
 800f93a:	bf00      	nop
 800f93c:	200150e8 	.word	0x200150e8
 800f940:	0801af6c 	.word	0x0801af6c
 800f944:	0801b164 	.word	0x0801b164
 800f948:	0801afb8 	.word	0x0801afb8
 800f94c:	200150e0 	.word	0x200150e0
 800f950:	200150e6 	.word	0x200150e6
 800f954:	200150dc 	.word	0x200150dc
 800f958:	200150cc 	.word	0x200150cc
 800f95c:	20009330 	.word	0x20009330
 800f960:	20009334 	.word	0x20009334
 800f964:	20009320 	.word	0x20009320
 800f968:	200150b0 	.word	0x200150b0
 800f96c:	200150b8 	.word	0x200150b8

0800f970 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af04      	add	r7, sp, #16
 800f976:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f978:	4b2f      	ldr	r3, [pc, #188]	@ (800fa38 <tcp_timewait_input+0xc8>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	f003 0304 	and.w	r3, r3, #4
 800f980:	2b00      	cmp	r3, #0
 800f982:	d153      	bne.n	800fa2c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d106      	bne.n	800f998 <tcp_timewait_input+0x28>
 800f98a:	4b2c      	ldr	r3, [pc, #176]	@ (800fa3c <tcp_timewait_input+0xcc>)
 800f98c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f990:	492b      	ldr	r1, [pc, #172]	@ (800fa40 <tcp_timewait_input+0xd0>)
 800f992:	482c      	ldr	r0, [pc, #176]	@ (800fa44 <tcp_timewait_input+0xd4>)
 800f994:	f008 fcb4 	bl	8018300 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f998:	4b27      	ldr	r3, [pc, #156]	@ (800fa38 <tcp_timewait_input+0xc8>)
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	f003 0302 	and.w	r3, r3, #2
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d02a      	beq.n	800f9fa <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f9a4:	4b28      	ldr	r3, [pc, #160]	@ (800fa48 <tcp_timewait_input+0xd8>)
 800f9a6:	681a      	ldr	r2, [r3, #0]
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ac:	1ad3      	subs	r3, r2, r3
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	db2d      	blt.n	800fa0e <tcp_timewait_input+0x9e>
 800f9b2:	4b25      	ldr	r3, [pc, #148]	@ (800fa48 <tcp_timewait_input+0xd8>)
 800f9b4:	681a      	ldr	r2, [r3, #0]
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9ba:	6879      	ldr	r1, [r7, #4]
 800f9bc:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f9be:	440b      	add	r3, r1
 800f9c0:	1ad3      	subs	r3, r2, r3
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	dc23      	bgt.n	800fa0e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9c6:	4b21      	ldr	r3, [pc, #132]	@ (800fa4c <tcp_timewait_input+0xdc>)
 800f9c8:	6819      	ldr	r1, [r3, #0]
 800f9ca:	4b21      	ldr	r3, [pc, #132]	@ (800fa50 <tcp_timewait_input+0xe0>)
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800fa48 <tcp_timewait_input+0xd8>)
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9d6:	4b1f      	ldr	r3, [pc, #124]	@ (800fa54 <tcp_timewait_input+0xe4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9da:	885b      	ldrh	r3, [r3, #2]
 800f9dc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f9de:	4a1d      	ldr	r2, [pc, #116]	@ (800fa54 <tcp_timewait_input+0xe4>)
 800f9e0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f9e2:	8812      	ldrh	r2, [r2, #0]
 800f9e4:	b292      	uxth	r2, r2
 800f9e6:	9202      	str	r2, [sp, #8]
 800f9e8:	9301      	str	r3, [sp, #4]
 800f9ea:	4b1b      	ldr	r3, [pc, #108]	@ (800fa58 <tcp_timewait_input+0xe8>)
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	4b1b      	ldr	r3, [pc, #108]	@ (800fa5c <tcp_timewait_input+0xec>)
 800f9f0:	4602      	mov	r2, r0
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f002 ff32 	bl	801285c <tcp_rst>
      return;
 800f9f8:	e01b      	b.n	800fa32 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800fa38 <tcp_timewait_input+0xc8>)
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	f003 0301 	and.w	r3, r3, #1
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d003      	beq.n	800fa0e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fa06:	4b16      	ldr	r3, [pc, #88]	@ (800fa60 <tcp_timewait_input+0xf0>)
 800fa08:	681a      	ldr	r2, [r3, #0]
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fa0e:	4b10      	ldr	r3, [pc, #64]	@ (800fa50 <tcp_timewait_input+0xe0>)
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00c      	beq.n	800fa30 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	8b5b      	ldrh	r3, [r3, #26]
 800fa1a:	f043 0302 	orr.w	r3, r3, #2
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	f002 f943 	bl	8011cb0 <tcp_output>
  }
  return;
 800fa2a:	e001      	b.n	800fa30 <tcp_timewait_input+0xc0>
    return;
 800fa2c:	bf00      	nop
 800fa2e:	e000      	b.n	800fa32 <tcp_timewait_input+0xc2>
  return;
 800fa30:	bf00      	nop
}
 800fa32:	3708      	adds	r7, #8
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	200150e8 	.word	0x200150e8
 800fa3c:	0801af6c 	.word	0x0801af6c
 800fa40:	0801b184 	.word	0x0801b184
 800fa44:	0801afb8 	.word	0x0801afb8
 800fa48:	200150dc 	.word	0x200150dc
 800fa4c:	200150e0 	.word	0x200150e0
 800fa50:	200150e6 	.word	0x200150e6
 800fa54:	200150cc 	.word	0x200150cc
 800fa58:	20009330 	.word	0x20009330
 800fa5c:	20009334 	.word	0x20009334
 800fa60:	200150a4 	.word	0x200150a4

0800fa64 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fa64:	b590      	push	{r4, r7, lr}
 800fa66:	b08d      	sub	sp, #52	@ 0x34
 800fa68:	af04      	add	r7, sp, #16
 800fa6a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fa70:	2300      	movs	r3, #0
 800fa72:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d106      	bne.n	800fa88 <tcp_process+0x24>
 800fa7a:	4b9d      	ldr	r3, [pc, #628]	@ (800fcf0 <tcp_process+0x28c>)
 800fa7c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800fa80:	499c      	ldr	r1, [pc, #624]	@ (800fcf4 <tcp_process+0x290>)
 800fa82:	489d      	ldr	r0, [pc, #628]	@ (800fcf8 <tcp_process+0x294>)
 800fa84:	f008 fc3c 	bl	8018300 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fa88:	4b9c      	ldr	r3, [pc, #624]	@ (800fcfc <tcp_process+0x298>)
 800fa8a:	781b      	ldrb	r3, [r3, #0]
 800fa8c:	f003 0304 	and.w	r3, r3, #4
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d04e      	beq.n	800fb32 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	7d1b      	ldrb	r3, [r3, #20]
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d108      	bne.n	800faae <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800faa0:	4b97      	ldr	r3, [pc, #604]	@ (800fd00 <tcp_process+0x29c>)
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d123      	bne.n	800faf0 <tcp_process+0x8c>
        acceptable = 1;
 800faa8:	2301      	movs	r3, #1
 800faaa:	76fb      	strb	r3, [r7, #27]
 800faac:	e020      	b.n	800faf0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fab2:	4b94      	ldr	r3, [pc, #592]	@ (800fd04 <tcp_process+0x2a0>)
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	d102      	bne.n	800fac0 <tcp_process+0x5c>
        acceptable = 1;
 800faba:	2301      	movs	r3, #1
 800fabc:	76fb      	strb	r3, [r7, #27]
 800fabe:	e017      	b.n	800faf0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fac0:	4b90      	ldr	r3, [pc, #576]	@ (800fd04 <tcp_process+0x2a0>)
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fac8:	1ad3      	subs	r3, r2, r3
 800faca:	2b00      	cmp	r3, #0
 800facc:	db10      	blt.n	800faf0 <tcp_process+0x8c>
 800face:	4b8d      	ldr	r3, [pc, #564]	@ (800fd04 <tcp_process+0x2a0>)
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fad6:	6879      	ldr	r1, [r7, #4]
 800fad8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800fada:	440b      	add	r3, r1
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	2b00      	cmp	r3, #0
 800fae0:	dc06      	bgt.n	800faf0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	8b5b      	ldrh	r3, [r3, #26]
 800fae6:	f043 0302 	orr.w	r3, r3, #2
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800faf0:	7efb      	ldrb	r3, [r7, #27]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d01b      	beq.n	800fb2e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	7d1b      	ldrb	r3, [r3, #20]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d106      	bne.n	800fb0c <tcp_process+0xa8>
 800fafe:	4b7c      	ldr	r3, [pc, #496]	@ (800fcf0 <tcp_process+0x28c>)
 800fb00:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800fb04:	4980      	ldr	r1, [pc, #512]	@ (800fd08 <tcp_process+0x2a4>)
 800fb06:	487c      	ldr	r0, [pc, #496]	@ (800fcf8 <tcp_process+0x294>)
 800fb08:	f008 fbfa 	bl	8018300 <iprintf>
      recv_flags |= TF_RESET;
 800fb0c:	4b7f      	ldr	r3, [pc, #508]	@ (800fd0c <tcp_process+0x2a8>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	f043 0308 	orr.w	r3, r3, #8
 800fb14:	b2da      	uxtb	r2, r3
 800fb16:	4b7d      	ldr	r3, [pc, #500]	@ (800fd0c <tcp_process+0x2a8>)
 800fb18:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	8b5b      	ldrh	r3, [r3, #26]
 800fb1e:	f023 0301 	bic.w	r3, r3, #1
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fb28:	f06f 030d 	mvn.w	r3, #13
 800fb2c:	e37a      	b.n	8010224 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	e378      	b.n	8010224 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fb32:	4b72      	ldr	r3, [pc, #456]	@ (800fcfc <tcp_process+0x298>)
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	f003 0302 	and.w	r3, r3, #2
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d010      	beq.n	800fb60 <tcp_process+0xfc>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	7d1b      	ldrb	r3, [r3, #20]
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	d00c      	beq.n	800fb60 <tcp_process+0xfc>
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	7d1b      	ldrb	r3, [r3, #20]
 800fb4a:	2b03      	cmp	r3, #3
 800fb4c:	d008      	beq.n	800fb60 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	8b5b      	ldrh	r3, [r3, #26]
 800fb52:	f043 0302 	orr.w	r3, r3, #2
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	e361      	b.n	8010224 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	8b5b      	ldrh	r3, [r3, #26]
 800fb64:	f003 0310 	and.w	r3, r3, #16
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d103      	bne.n	800fb74 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fb6c:	4b68      	ldr	r3, [pc, #416]	@ (800fd10 <tcp_process+0x2ac>)
 800fb6e:	681a      	ldr	r2, [r3, #0]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f883 2097 	strb.w	r2, [r3, #151]	@ 0x97
  pcb->persist_probe = 0;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96

  tcp_parseopt(pcb);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f001 f875 	bl	8010c74 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	7d1b      	ldrb	r3, [r3, #20]
 800fb8e:	3b02      	subs	r3, #2
 800fb90:	2b07      	cmp	r3, #7
 800fb92:	f200 8337 	bhi.w	8010204 <tcp_process+0x7a0>
 800fb96:	a201      	add	r2, pc, #4	@ (adr r2, 800fb9c <tcp_process+0x138>)
 800fb98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb9c:	0800fbbd 	.word	0x0800fbbd
 800fba0:	0800fded 	.word	0x0800fded
 800fba4:	0800ff65 	.word	0x0800ff65
 800fba8:	0800ff8f 	.word	0x0800ff8f
 800fbac:	080100b3 	.word	0x080100b3
 800fbb0:	0800ff65 	.word	0x0800ff65
 800fbb4:	0801013f 	.word	0x0801013f
 800fbb8:	080101cf 	.word	0x080101cf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fbbc:	4b4f      	ldr	r3, [pc, #316]	@ (800fcfc <tcp_process+0x298>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f003 0310 	and.w	r3, r3, #16
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 80e4 	beq.w	800fd92 <tcp_process+0x32e>
 800fbca:	4b4c      	ldr	r3, [pc, #304]	@ (800fcfc <tcp_process+0x298>)
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	f003 0302 	and.w	r3, r3, #2
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 80dd 	beq.w	800fd92 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fbdc:	1c5a      	adds	r2, r3, #1
 800fbde:	4b48      	ldr	r3, [pc, #288]	@ (800fd00 <tcp_process+0x29c>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	f040 80d5 	bne.w	800fd92 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fbe8:	4b46      	ldr	r3, [pc, #280]	@ (800fd04 <tcp_process+0x2a0>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	1c5a      	adds	r2, r3, #1
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800fbfa:	4b41      	ldr	r3, [pc, #260]	@ (800fd00 <tcp_process+0x29c>)
 800fbfc:	681a      	ldr	r2, [r3, #0]
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800fc02:	4b44      	ldr	r3, [pc, #272]	@ (800fd14 <tcp_process+0x2b0>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	89db      	ldrh	r3, [r3, #14]
 800fc08:	b29a      	uxth	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fc1c:	4b39      	ldr	r3, [pc, #228]	@ (800fd04 <tcp_process+0x2a0>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	1e5a      	subs	r2, r3, #1
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	2204      	movs	r2, #4
 800fc2a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	3304      	adds	r3, #4
 800fc34:	4618      	mov	r0, r3
 800fc36:	f006 fddf 	bl	80167f8 <ip4_route>
 800fc3a:	4601      	mov	r1, r0
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	3304      	adds	r3, #4
 800fc40:	461a      	mov	r2, r3
 800fc42:	4620      	mov	r0, r4
 800fc44:	f7ff f88e 	bl	800ed64 <tcp_eff_send_mss_netif>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc54:	009a      	lsls	r2, r3, #2
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc5a:	005b      	lsls	r3, r3, #1
 800fc5c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fc60:	428b      	cmp	r3, r1
 800fc62:	bf38      	it	cc
 800fc64:	460b      	movcc	r3, r1
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d204      	bcs.n	800fc74 <tcp_process+0x210>
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	b29b      	uxth	r3, r3
 800fc72:	e00d      	b.n	800fc90 <tcp_process+0x22c>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc78:	005b      	lsls	r3, r3, #1
 800fc7a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d904      	bls.n	800fc8c <tcp_process+0x228>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	b29b      	uxth	r3, r3
 800fc8a:	e001      	b.n	800fc90 <tcp_process+0x22c>
 800fc8c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fc90:	687a      	ldr	r2, [r7, #4]
 800fc92:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d106      	bne.n	800fcae <tcp_process+0x24a>
 800fca0:	4b13      	ldr	r3, [pc, #76]	@ (800fcf0 <tcp_process+0x28c>)
 800fca2:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fca6:	491c      	ldr	r1, [pc, #112]	@ (800fd18 <tcp_process+0x2b4>)
 800fca8:	4813      	ldr	r0, [pc, #76]	@ (800fcf8 <tcp_process+0x294>)
 800fcaa:	f008 fb29 	bl	8018300 <iprintf>
        --pcb->snd_queuelen;
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fcb4:	3b01      	subs	r3, #1
 800fcb6:	b29a      	uxth	r2, r3
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fcc2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d12a      	bne.n	800fd20 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcce:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcd0:	69fb      	ldr	r3, [r7, #28]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d106      	bne.n	800fce4 <tcp_process+0x280>
 800fcd6:	4b06      	ldr	r3, [pc, #24]	@ (800fcf0 <tcp_process+0x28c>)
 800fcd8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fcdc:	490f      	ldr	r1, [pc, #60]	@ (800fd1c <tcp_process+0x2b8>)
 800fcde:	4806      	ldr	r0, [pc, #24]	@ (800fcf8 <tcp_process+0x294>)
 800fce0:	f008 fb0e 	bl	8018300 <iprintf>
          pcb->unsent = rseg->next;
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	681a      	ldr	r2, [r3, #0]
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fcec:	e01c      	b.n	800fd28 <tcp_process+0x2c4>
 800fcee:	bf00      	nop
 800fcf0:	0801af6c 	.word	0x0801af6c
 800fcf4:	0801b1a4 	.word	0x0801b1a4
 800fcf8:	0801afb8 	.word	0x0801afb8
 800fcfc:	200150e8 	.word	0x200150e8
 800fd00:	200150e0 	.word	0x200150e0
 800fd04:	200150dc 	.word	0x200150dc
 800fd08:	0801b1c0 	.word	0x0801b1c0
 800fd0c:	200150e9 	.word	0x200150e9
 800fd10:	200150a4 	.word	0x200150a4
 800fd14:	200150cc 	.word	0x200150cc
 800fd18:	0801b1e0 	.word	0x0801b1e0
 800fd1c:	0801b1f8 	.word	0x0801b1f8
        } else {
          pcb->unacked = rseg->next;
 800fd20:	69fb      	ldr	r3, [r7, #28]
 800fd22:	681a      	ldr	r2, [r3, #0]
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fd28:	69f8      	ldr	r0, [r7, #28]
 800fd2a:	f7fe fc98 	bl	800e65e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d104      	bne.n	800fd40 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fd3c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fd3e:	e006      	b.n	800fd4e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00a      	beq.n	800fd6e <tcp_process+0x30a>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fd5e:	687a      	ldr	r2, [r7, #4]
 800fd60:	6910      	ldr	r0, [r2, #16]
 800fd62:	2200      	movs	r2, #0
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	4798      	blx	r3
 800fd68:	4603      	mov	r3, r0
 800fd6a:	76bb      	strb	r3, [r7, #26]
 800fd6c:	e001      	b.n	800fd72 <tcp_process+0x30e>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fd72:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd76:	f113 0f0d 	cmn.w	r3, #13
 800fd7a:	d102      	bne.n	800fd82 <tcp_process+0x31e>
          return ERR_ABRT;
 800fd7c:	f06f 030c 	mvn.w	r3, #12
 800fd80:	e250      	b.n	8010224 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	8b5b      	ldrh	r3, [r3, #26]
 800fd86:	f043 0302 	orr.w	r3, r3, #2
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fd90:	e23a      	b.n	8010208 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fd92:	4b98      	ldr	r3, [pc, #608]	@ (800fff4 <tcp_process+0x590>)
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	f003 0310 	and.w	r3, r3, #16
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	f000 8234 	beq.w	8010208 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda0:	4b95      	ldr	r3, [pc, #596]	@ (800fff8 <tcp_process+0x594>)
 800fda2:	6819      	ldr	r1, [r3, #0]
 800fda4:	4b95      	ldr	r3, [pc, #596]	@ (800fffc <tcp_process+0x598>)
 800fda6:	881b      	ldrh	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	4b95      	ldr	r3, [pc, #596]	@ (8010000 <tcp_process+0x59c>)
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdb0:	4b94      	ldr	r3, [pc, #592]	@ (8010004 <tcp_process+0x5a0>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdb4:	885b      	ldrh	r3, [r3, #2]
 800fdb6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdb8:	4a92      	ldr	r2, [pc, #584]	@ (8010004 <tcp_process+0x5a0>)
 800fdba:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdbc:	8812      	ldrh	r2, [r2, #0]
 800fdbe:	b292      	uxth	r2, r2
 800fdc0:	9202      	str	r2, [sp, #8]
 800fdc2:	9301      	str	r3, [sp, #4]
 800fdc4:	4b90      	ldr	r3, [pc, #576]	@ (8010008 <tcp_process+0x5a4>)
 800fdc6:	9300      	str	r3, [sp, #0]
 800fdc8:	4b90      	ldr	r3, [pc, #576]	@ (801000c <tcp_process+0x5a8>)
 800fdca:	4602      	mov	r2, r0
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f002 fd45 	bl	801285c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdd8:	2b05      	cmp	r3, #5
 800fdda:	f200 8215 	bhi.w	8010208 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2200      	movs	r2, #0
 800fde2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	f002 fb01 	bl	80123ec <tcp_rexmit_rto>
      break;
 800fdea:	e20d      	b.n	8010208 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fdec:	4b81      	ldr	r3, [pc, #516]	@ (800fff4 <tcp_process+0x590>)
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	f003 0310 	and.w	r3, r3, #16
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	f000 80a1 	beq.w	800ff3c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fdfa:	4b7f      	ldr	r3, [pc, #508]	@ (800fff8 <tcp_process+0x594>)
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe02:	1ad3      	subs	r3, r2, r3
 800fe04:	3b01      	subs	r3, #1
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	db7e      	blt.n	800ff08 <tcp_process+0x4a4>
 800fe0a:	4b7b      	ldr	r3, [pc, #492]	@ (800fff8 <tcp_process+0x594>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	dc77      	bgt.n	800ff08 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2204      	movs	r2, #4
 800fe1c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d102      	bne.n	800fe2c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fe26:	23fa      	movs	r3, #250	@ 0xfa
 800fe28:	76bb      	strb	r3, [r7, #26]
 800fe2a:	e01d      	b.n	800fe68 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d106      	bne.n	800fe44 <tcp_process+0x3e0>
 800fe36:	4b76      	ldr	r3, [pc, #472]	@ (8010010 <tcp_process+0x5ac>)
 800fe38:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fe3c:	4975      	ldr	r1, [pc, #468]	@ (8010014 <tcp_process+0x5b0>)
 800fe3e:	4876      	ldr	r0, [pc, #472]	@ (8010018 <tcp_process+0x5b4>)
 800fe40:	f008 fa5e 	bl	8018300 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe48:	699b      	ldr	r3, [r3, #24]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00a      	beq.n	800fe64 <tcp_process+0x400>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe52:	699b      	ldr	r3, [r3, #24]
 800fe54:	687a      	ldr	r2, [r7, #4]
 800fe56:	6910      	ldr	r0, [r2, #16]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	6879      	ldr	r1, [r7, #4]
 800fe5c:	4798      	blx	r3
 800fe5e:	4603      	mov	r3, r0
 800fe60:	76bb      	strb	r3, [r7, #26]
 800fe62:	e001      	b.n	800fe68 <tcp_process+0x404>
 800fe64:	23f0      	movs	r3, #240	@ 0xf0
 800fe66:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fe68:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d00a      	beq.n	800fe86 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fe70:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe74:	f113 0f0d 	cmn.w	r3, #13
 800fe78:	d002      	beq.n	800fe80 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f7fd fd6c 	bl	800d958 <tcp_abort>
            }
            return ERR_ABRT;
 800fe80:	f06f 030c 	mvn.w	r3, #12
 800fe84:	e1ce      	b.n	8010224 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f000 fa58 	bl	801033c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fe8c:	4b63      	ldr	r3, [pc, #396]	@ (801001c <tcp_process+0x5b8>)
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d005      	beq.n	800fea0 <tcp_process+0x43c>
            recv_acked--;
 800fe94:	4b61      	ldr	r3, [pc, #388]	@ (801001c <tcp_process+0x5b8>)
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	3b01      	subs	r3, #1
 800fe9a:	b29a      	uxth	r2, r3
 800fe9c:	4b5f      	ldr	r3, [pc, #380]	@ (801001c <tcp_process+0x5b8>)
 800fe9e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fea4:	009a      	lsls	r2, r3, #2
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800feaa:	005b      	lsls	r3, r3, #1
 800feac:	f241 111c 	movw	r1, #4380	@ 0x111c
 800feb0:	428b      	cmp	r3, r1
 800feb2:	bf38      	it	cc
 800feb4:	460b      	movcc	r3, r1
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d204      	bcs.n	800fec4 <tcp_process+0x460>
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800febe:	009b      	lsls	r3, r3, #2
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	e00d      	b.n	800fee0 <tcp_process+0x47c>
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fec8:	005b      	lsls	r3, r3, #1
 800feca:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fece:	4293      	cmp	r3, r2
 800fed0:	d904      	bls.n	800fedc <tcp_process+0x478>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fed6:	005b      	lsls	r3, r3, #1
 800fed8:	b29b      	uxth	r3, r3
 800feda:	e001      	b.n	800fee0 <tcp_process+0x47c>
 800fedc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fee0:	687a      	ldr	r2, [r7, #4]
 800fee2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fee6:	4b4e      	ldr	r3, [pc, #312]	@ (8010020 <tcp_process+0x5bc>)
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	f003 0320 	and.w	r3, r3, #32
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d037      	beq.n	800ff62 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	8b5b      	ldrh	r3, [r3, #26]
 800fef6:	f043 0302 	orr.w	r3, r3, #2
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	2207      	movs	r2, #7
 800ff04:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800ff06:	e02c      	b.n	800ff62 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff08:	4b3b      	ldr	r3, [pc, #236]	@ (800fff8 <tcp_process+0x594>)
 800ff0a:	6819      	ldr	r1, [r3, #0]
 800ff0c:	4b3b      	ldr	r3, [pc, #236]	@ (800fffc <tcp_process+0x598>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	461a      	mov	r2, r3
 800ff12:	4b3b      	ldr	r3, [pc, #236]	@ (8010000 <tcp_process+0x59c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff18:	4b3a      	ldr	r3, [pc, #232]	@ (8010004 <tcp_process+0x5a0>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff1c:	885b      	ldrh	r3, [r3, #2]
 800ff1e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff20:	4a38      	ldr	r2, [pc, #224]	@ (8010004 <tcp_process+0x5a0>)
 800ff22:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff24:	8812      	ldrh	r2, [r2, #0]
 800ff26:	b292      	uxth	r2, r2
 800ff28:	9202      	str	r2, [sp, #8]
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	4b36      	ldr	r3, [pc, #216]	@ (8010008 <tcp_process+0x5a4>)
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	4b36      	ldr	r3, [pc, #216]	@ (801000c <tcp_process+0x5a8>)
 800ff32:	4602      	mov	r2, r0
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f002 fc91 	bl	801285c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800ff3a:	e167      	b.n	801020c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff3c:	4b2d      	ldr	r3, [pc, #180]	@ (800fff4 <tcp_process+0x590>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	f003 0302 	and.w	r3, r3, #2
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f000 8161 	beq.w	801020c <tcp_process+0x7a8>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ff4e:	1e5a      	subs	r2, r3, #1
 800ff50:	4b2b      	ldr	r3, [pc, #172]	@ (8010000 <tcp_process+0x59c>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	f040 8159 	bne.w	801020c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f002 fa68 	bl	8012430 <tcp_rexmit>
      break;
 800ff60:	e154      	b.n	801020c <tcp_process+0x7a8>
 800ff62:	e153      	b.n	801020c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 f9e9 	bl	801033c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff6a:	4b2d      	ldr	r3, [pc, #180]	@ (8010020 <tcp_process+0x5bc>)
 800ff6c:	781b      	ldrb	r3, [r3, #0]
 800ff6e:	f003 0320 	and.w	r3, r3, #32
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 814c 	beq.w	8010210 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	8b5b      	ldrh	r3, [r3, #26]
 800ff7c:	f043 0302 	orr.w	r3, r3, #2
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2207      	movs	r2, #7
 800ff8a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ff8c:	e140      	b.n	8010210 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f000 f9d4 	bl	801033c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ff94:	4b22      	ldr	r3, [pc, #136]	@ (8010020 <tcp_process+0x5bc>)
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	f003 0320 	and.w	r3, r3, #32
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d071      	beq.n	8010084 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffa0:	4b14      	ldr	r3, [pc, #80]	@ (800fff4 <tcp_process+0x590>)
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	f003 0310 	and.w	r3, r3, #16
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d060      	beq.n	801006e <tcp_process+0x60a>
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ffb0:	4b11      	ldr	r3, [pc, #68]	@ (800fff8 <tcp_process+0x594>)
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d15a      	bne.n	801006e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d156      	bne.n	801006e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	8b5b      	ldrh	r3, [r3, #26]
 800ffc4:	f043 0302 	orr.w	r3, r3, #2
 800ffc8:	b29a      	uxth	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ffce:	6878      	ldr	r0, [r7, #4]
 800ffd0:	f7fe fdd2 	bl	800eb78 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ffd4:	4b13      	ldr	r3, [pc, #76]	@ (8010024 <tcp_process+0x5c0>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	429a      	cmp	r2, r3
 800ffdc:	d105      	bne.n	800ffea <tcp_process+0x586>
 800ffde:	4b11      	ldr	r3, [pc, #68]	@ (8010024 <tcp_process+0x5c0>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	4a0f      	ldr	r2, [pc, #60]	@ (8010024 <tcp_process+0x5c0>)
 800ffe6:	6013      	str	r3, [r2, #0]
 800ffe8:	e02e      	b.n	8010048 <tcp_process+0x5e4>
 800ffea:	4b0e      	ldr	r3, [pc, #56]	@ (8010024 <tcp_process+0x5c0>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	617b      	str	r3, [r7, #20]
 800fff0:	e027      	b.n	8010042 <tcp_process+0x5de>
 800fff2:	bf00      	nop
 800fff4:	200150e8 	.word	0x200150e8
 800fff8:	200150e0 	.word	0x200150e0
 800fffc:	200150e6 	.word	0x200150e6
 8010000:	200150dc 	.word	0x200150dc
 8010004:	200150cc 	.word	0x200150cc
 8010008:	20009330 	.word	0x20009330
 801000c:	20009334 	.word	0x20009334
 8010010:	0801af6c 	.word	0x0801af6c
 8010014:	0801b20c 	.word	0x0801b20c
 8010018:	0801afb8 	.word	0x0801afb8
 801001c:	200150e4 	.word	0x200150e4
 8010020:	200150e9 	.word	0x200150e9
 8010024:	200150b0 	.word	0x200150b0
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	68db      	ldr	r3, [r3, #12]
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	429a      	cmp	r2, r3
 8010030:	d104      	bne.n	801003c <tcp_process+0x5d8>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	68da      	ldr	r2, [r3, #12]
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	60da      	str	r2, [r3, #12]
 801003a:	e005      	b.n	8010048 <tcp_process+0x5e4>
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	68db      	ldr	r3, [r3, #12]
 8010040:	617b      	str	r3, [r7, #20]
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d1ef      	bne.n	8010028 <tcp_process+0x5c4>
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	60da      	str	r2, [r3, #12]
 801004e:	4b77      	ldr	r3, [pc, #476]	@ (801022c <tcp_process+0x7c8>)
 8010050:	2201      	movs	r2, #1
 8010052:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	220a      	movs	r2, #10
 8010058:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801005a:	4b75      	ldr	r3, [pc, #468]	@ (8010230 <tcp_process+0x7cc>)
 801005c:	681a      	ldr	r2, [r3, #0]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	60da      	str	r2, [r3, #12]
 8010062:	4a73      	ldr	r2, [pc, #460]	@ (8010230 <tcp_process+0x7cc>)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6013      	str	r3, [r2, #0]
 8010068:	f002 fdba 	bl	8012be0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801006c:	e0d2      	b.n	8010214 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	8b5b      	ldrh	r3, [r3, #26]
 8010072:	f043 0302 	orr.w	r3, r3, #2
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	2208      	movs	r2, #8
 8010080:	751a      	strb	r2, [r3, #20]
      break;
 8010082:	e0c7      	b.n	8010214 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010084:	4b6b      	ldr	r3, [pc, #428]	@ (8010234 <tcp_process+0x7d0>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	f003 0310 	and.w	r3, r3, #16
 801008c:	2b00      	cmp	r3, #0
 801008e:	f000 80c1 	beq.w	8010214 <tcp_process+0x7b0>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010096:	4b68      	ldr	r3, [pc, #416]	@ (8010238 <tcp_process+0x7d4>)
 8010098:	681b      	ldr	r3, [r3, #0]
 801009a:	429a      	cmp	r2, r3
 801009c:	f040 80ba 	bne.w	8010214 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	f040 80b5 	bne.w	8010214 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2206      	movs	r2, #6
 80100ae:	751a      	strb	r2, [r3, #20]
      break;
 80100b0:	e0b0      	b.n	8010214 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f942 	bl	801033c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80100b8:	4b60      	ldr	r3, [pc, #384]	@ (801023c <tcp_process+0x7d8>)
 80100ba:	781b      	ldrb	r3, [r3, #0]
 80100bc:	f003 0320 	and.w	r3, r3, #32
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f000 80a9 	beq.w	8010218 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	8b5b      	ldrh	r3, [r3, #26]
 80100ca:	f043 0302 	orr.w	r3, r3, #2
 80100ce:	b29a      	uxth	r2, r3
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f7fe fd4f 	bl	800eb78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80100da:	4b59      	ldr	r3, [pc, #356]	@ (8010240 <tcp_process+0x7dc>)
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d105      	bne.n	80100f0 <tcp_process+0x68c>
 80100e4:	4b56      	ldr	r3, [pc, #344]	@ (8010240 <tcp_process+0x7dc>)
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	68db      	ldr	r3, [r3, #12]
 80100ea:	4a55      	ldr	r2, [pc, #340]	@ (8010240 <tcp_process+0x7dc>)
 80100ec:	6013      	str	r3, [r2, #0]
 80100ee:	e013      	b.n	8010118 <tcp_process+0x6b4>
 80100f0:	4b53      	ldr	r3, [pc, #332]	@ (8010240 <tcp_process+0x7dc>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	613b      	str	r3, [r7, #16]
 80100f6:	e00c      	b.n	8010112 <tcp_process+0x6ae>
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	68db      	ldr	r3, [r3, #12]
 80100fc:	687a      	ldr	r2, [r7, #4]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d104      	bne.n	801010c <tcp_process+0x6a8>
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	68da      	ldr	r2, [r3, #12]
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	60da      	str	r2, [r3, #12]
 801010a:	e005      	b.n	8010118 <tcp_process+0x6b4>
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	613b      	str	r3, [r7, #16]
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	2b00      	cmp	r3, #0
 8010116:	d1ef      	bne.n	80100f8 <tcp_process+0x694>
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	60da      	str	r2, [r3, #12]
 801011e:	4b43      	ldr	r3, [pc, #268]	@ (801022c <tcp_process+0x7c8>)
 8010120:	2201      	movs	r2, #1
 8010122:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	220a      	movs	r2, #10
 8010128:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801012a:	4b41      	ldr	r3, [pc, #260]	@ (8010230 <tcp_process+0x7cc>)
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	60da      	str	r2, [r3, #12]
 8010132:	4a3f      	ldr	r2, [pc, #252]	@ (8010230 <tcp_process+0x7cc>)
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6013      	str	r3, [r2, #0]
 8010138:	f002 fd52 	bl	8012be0 <tcp_timer_needed>
      }
      break;
 801013c:	e06c      	b.n	8010218 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 f8fc 	bl	801033c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010144:	4b3b      	ldr	r3, [pc, #236]	@ (8010234 <tcp_process+0x7d0>)
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	f003 0310 	and.w	r3, r3, #16
 801014c:	2b00      	cmp	r3, #0
 801014e:	d065      	beq.n	801021c <tcp_process+0x7b8>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010154:	4b38      	ldr	r3, [pc, #224]	@ (8010238 <tcp_process+0x7d4>)
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	429a      	cmp	r2, r3
 801015a:	d15f      	bne.n	801021c <tcp_process+0x7b8>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010160:	2b00      	cmp	r3, #0
 8010162:	d15b      	bne.n	801021c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7fe fd07 	bl	800eb78 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801016a:	4b35      	ldr	r3, [pc, #212]	@ (8010240 <tcp_process+0x7dc>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	687a      	ldr	r2, [r7, #4]
 8010170:	429a      	cmp	r2, r3
 8010172:	d105      	bne.n	8010180 <tcp_process+0x71c>
 8010174:	4b32      	ldr	r3, [pc, #200]	@ (8010240 <tcp_process+0x7dc>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	4a31      	ldr	r2, [pc, #196]	@ (8010240 <tcp_process+0x7dc>)
 801017c:	6013      	str	r3, [r2, #0]
 801017e:	e013      	b.n	80101a8 <tcp_process+0x744>
 8010180:	4b2f      	ldr	r3, [pc, #188]	@ (8010240 <tcp_process+0x7dc>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	e00c      	b.n	80101a2 <tcp_process+0x73e>
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	687a      	ldr	r2, [r7, #4]
 801018e:	429a      	cmp	r2, r3
 8010190:	d104      	bne.n	801019c <tcp_process+0x738>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	68da      	ldr	r2, [r3, #12]
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	60da      	str	r2, [r3, #12]
 801019a:	e005      	b.n	80101a8 <tcp_process+0x744>
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	68db      	ldr	r3, [r3, #12]
 80101a0:	60fb      	str	r3, [r7, #12]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1ef      	bne.n	8010188 <tcp_process+0x724>
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2200      	movs	r2, #0
 80101ac:	60da      	str	r2, [r3, #12]
 80101ae:	4b1f      	ldr	r3, [pc, #124]	@ (801022c <tcp_process+0x7c8>)
 80101b0:	2201      	movs	r2, #1
 80101b2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	220a      	movs	r2, #10
 80101b8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80101ba:	4b1d      	ldr	r3, [pc, #116]	@ (8010230 <tcp_process+0x7cc>)
 80101bc:	681a      	ldr	r2, [r3, #0]
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	60da      	str	r2, [r3, #12]
 80101c2:	4a1b      	ldr	r2, [pc, #108]	@ (8010230 <tcp_process+0x7cc>)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6013      	str	r3, [r2, #0]
 80101c8:	f002 fd0a 	bl	8012be0 <tcp_timer_needed>
      }
      break;
 80101cc:	e026      	b.n	801021c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 f8b4 	bl	801033c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80101d4:	4b17      	ldr	r3, [pc, #92]	@ (8010234 <tcp_process+0x7d0>)
 80101d6:	781b      	ldrb	r3, [r3, #0]
 80101d8:	f003 0310 	and.w	r3, r3, #16
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d01f      	beq.n	8010220 <tcp_process+0x7bc>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101e4:	4b14      	ldr	r3, [pc, #80]	@ (8010238 <tcp_process+0x7d4>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d119      	bne.n	8010220 <tcp_process+0x7bc>
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d115      	bne.n	8010220 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80101f4:	4b11      	ldr	r3, [pc, #68]	@ (801023c <tcp_process+0x7d8>)
 80101f6:	781b      	ldrb	r3, [r3, #0]
 80101f8:	f043 0310 	orr.w	r3, r3, #16
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	4b0f      	ldr	r3, [pc, #60]	@ (801023c <tcp_process+0x7d8>)
 8010200:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010202:	e00d      	b.n	8010220 <tcp_process+0x7bc>
    default:
      break;
 8010204:	bf00      	nop
 8010206:	e00c      	b.n	8010222 <tcp_process+0x7be>
      break;
 8010208:	bf00      	nop
 801020a:	e00a      	b.n	8010222 <tcp_process+0x7be>
      break;
 801020c:	bf00      	nop
 801020e:	e008      	b.n	8010222 <tcp_process+0x7be>
      break;
 8010210:	bf00      	nop
 8010212:	e006      	b.n	8010222 <tcp_process+0x7be>
      break;
 8010214:	bf00      	nop
 8010216:	e004      	b.n	8010222 <tcp_process+0x7be>
      break;
 8010218:	bf00      	nop
 801021a:	e002      	b.n	8010222 <tcp_process+0x7be>
      break;
 801021c:	bf00      	nop
 801021e:	e000      	b.n	8010222 <tcp_process+0x7be>
      break;
 8010220:	bf00      	nop
  }
  return ERR_OK;
 8010222:	2300      	movs	r3, #0
}
 8010224:	4618      	mov	r0, r3
 8010226:	3724      	adds	r7, #36	@ 0x24
 8010228:	46bd      	mov	sp, r7
 801022a:	bd90      	pop	{r4, r7, pc}
 801022c:	200150b8 	.word	0x200150b8
 8010230:	200150b4 	.word	0x200150b4
 8010234:	200150e8 	.word	0x200150e8
 8010238:	200150e0 	.word	0x200150e0
 801023c:	200150e9 	.word	0x200150e9
 8010240:	200150b0 	.word	0x200150b0

08010244 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010244:	b5b0      	push	{r4, r5, r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010252:	e03e      	b.n	80102d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	4618      	mov	r0, r3
 8010264:	f7fc fe10 	bl	800ce88 <pbuf_clen>
 8010268:	4603      	mov	r3, r0
 801026a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010272:	8a7a      	ldrh	r2, [r7, #18]
 8010274:	429a      	cmp	r2, r3
 8010276:	d906      	bls.n	8010286 <tcp_free_acked_segments+0x42>
 8010278:	4b2a      	ldr	r3, [pc, #168]	@ (8010324 <tcp_free_acked_segments+0xe0>)
 801027a:	f240 4257 	movw	r2, #1111	@ 0x457
 801027e:	492a      	ldr	r1, [pc, #168]	@ (8010328 <tcp_free_acked_segments+0xe4>)
 8010280:	482a      	ldr	r0, [pc, #168]	@ (801032c <tcp_free_acked_segments+0xe8>)
 8010282:	f008 f83d 	bl	8018300 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801028c:	8a7b      	ldrh	r3, [r7, #18]
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	b29a      	uxth	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	891a      	ldrh	r2, [r3, #8]
 801029c:	4b24      	ldr	r3, [pc, #144]	@ (8010330 <tcp_free_acked_segments+0xec>)
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	4413      	add	r3, r2
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	4b22      	ldr	r3, [pc, #136]	@ (8010330 <tcp_free_acked_segments+0xec>)
 80102a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80102a8:	6978      	ldr	r0, [r7, #20]
 80102aa:	f7fe f9d8 	bl	800e65e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00c      	beq.n	80102d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d109      	bne.n	80102d2 <tcp_free_acked_segments+0x8e>
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d106      	bne.n	80102d2 <tcp_free_acked_segments+0x8e>
 80102c4:	4b17      	ldr	r3, [pc, #92]	@ (8010324 <tcp_free_acked_segments+0xe0>)
 80102c6:	f240 4261 	movw	r2, #1121	@ 0x461
 80102ca:	491a      	ldr	r1, [pc, #104]	@ (8010334 <tcp_free_acked_segments+0xf0>)
 80102cc:	4817      	ldr	r0, [pc, #92]	@ (801032c <tcp_free_acked_segments+0xe8>)
 80102ce:	f008 f817 	bl	8018300 <iprintf>
  while (seg_list != NULL &&
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d020      	beq.n	801031a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fb f883 	bl	800b3ea <lwip_htonl>
 80102e4:	4604      	mov	r4, r0
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	891b      	ldrh	r3, [r3, #8]
 80102ea:	461d      	mov	r5, r3
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	899b      	ldrh	r3, [r3, #12]
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7fb f863 	bl	800b3c0 <lwip_htons>
 80102fa:	4603      	mov	r3, r0
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	f003 0303 	and.w	r3, r3, #3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d001      	beq.n	801030a <tcp_free_acked_segments+0xc6>
 8010306:	2301      	movs	r3, #1
 8010308:	e000      	b.n	801030c <tcp_free_acked_segments+0xc8>
 801030a:	2300      	movs	r3, #0
 801030c:	442b      	add	r3, r5
 801030e:	18e2      	adds	r2, r4, r3
 8010310:	4b09      	ldr	r3, [pc, #36]	@ (8010338 <tcp_free_acked_segments+0xf4>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010316:	2b00      	cmp	r3, #0
 8010318:	dd9c      	ble.n	8010254 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801031a:	68bb      	ldr	r3, [r7, #8]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3718      	adds	r7, #24
 8010320:	46bd      	mov	sp, r7
 8010322:	bdb0      	pop	{r4, r5, r7, pc}
 8010324:	0801af6c 	.word	0x0801af6c
 8010328:	0801b22c 	.word	0x0801b22c
 801032c:	0801afb8 	.word	0x0801afb8
 8010330:	200150e4 	.word	0x200150e4
 8010334:	0801b254 	.word	0x0801b254
 8010338:	200150e0 	.word	0x200150e0

0801033c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b08d      	sub	sp, #52	@ 0x34
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010344:	2300      	movs	r3, #0
 8010346:	62bb      	str	r3, [r7, #40]	@ 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <tcp_receive+0x20>
 801034e:	4b91      	ldr	r3, [pc, #580]	@ (8010594 <tcp_receive+0x258>)
 8010350:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010354:	4990      	ldr	r1, [pc, #576]	@ (8010598 <tcp_receive+0x25c>)
 8010356:	4891      	ldr	r0, [pc, #580]	@ (801059c <tcp_receive+0x260>)
 8010358:	f007 ffd2 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7d1b      	ldrb	r3, [r3, #20]
 8010360:	2b03      	cmp	r3, #3
 8010362:	d806      	bhi.n	8010372 <tcp_receive+0x36>
 8010364:	4b8b      	ldr	r3, [pc, #556]	@ (8010594 <tcp_receive+0x258>)
 8010366:	f240 427c 	movw	r2, #1148	@ 0x47c
 801036a:	498d      	ldr	r1, [pc, #564]	@ (80105a0 <tcp_receive+0x264>)
 801036c:	488b      	ldr	r0, [pc, #556]	@ (801059c <tcp_receive+0x260>)
 801036e:	f007 ffc7 	bl	8018300 <iprintf>

  if (flags & TCP_ACK) {
 8010372:	4b8c      	ldr	r3, [pc, #560]	@ (80105a4 <tcp_receive+0x268>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	f003 0310 	and.w	r3, r3, #16
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 8259 	beq.w	8010832 <tcp_receive+0x4f6>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010386:	461a      	mov	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801038c:	4413      	add	r3, r2
 801038e:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010394:	4b84      	ldr	r3, [pc, #528]	@ (80105a8 <tcp_receive+0x26c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	1ad3      	subs	r3, r2, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	db1b      	blt.n	80103d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80103a2:	4b81      	ldr	r3, [pc, #516]	@ (80105a8 <tcp_receive+0x26c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d106      	bne.n	80103b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80103ae:	4b7f      	ldr	r3, [pc, #508]	@ (80105ac <tcp_receive+0x270>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	db0e      	blt.n	80103d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80103bc:	4b7b      	ldr	r3, [pc, #492]	@ (80105ac <tcp_receive+0x270>)
 80103be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d125      	bne.n	8010410 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103c4:	4b7a      	ldr	r3, [pc, #488]	@ (80105b0 <tcp_receive+0x274>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	89db      	ldrh	r3, [r3, #14]
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d91c      	bls.n	8010410 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80103d6:	4b76      	ldr	r3, [pc, #472]	@ (80105b0 <tcp_receive+0x274>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	89db      	ldrh	r3, [r3, #14]
 80103dc:	b29a      	uxth	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d205      	bcs.n	8010400 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010400:	4b69      	ldr	r3, [pc, #420]	@ (80105a8 <tcp_receive+0x26c>)
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010408:	4b68      	ldr	r3, [pc, #416]	@ (80105ac <tcp_receive+0x270>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010410:	4b66      	ldr	r3, [pc, #408]	@ (80105ac <tcp_receive+0x270>)
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	dc58      	bgt.n	80104d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801041e:	4b65      	ldr	r3, [pc, #404]	@ (80105b4 <tcp_receive+0x278>)
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d14b      	bne.n	80104be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010430:	4413      	add	r3, r2
 8010432:	69fa      	ldr	r2, [r7, #28]
 8010434:	429a      	cmp	r2, r3
 8010436:	d142      	bne.n	80104be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801043e:	2b00      	cmp	r3, #0
 8010440:	db3d      	blt.n	80104be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010446:	4b59      	ldr	r3, [pc, #356]	@ (80105ac <tcp_receive+0x270>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	d137      	bne.n	80104be <tcp_receive+0x182>
              found_dupack = 1;
 801044e:	2301      	movs	r3, #1
 8010450:	62bb      	str	r3, [r7, #40]	@ 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010458:	2bff      	cmp	r3, #255	@ 0xff
 801045a:	d007      	beq.n	801046c <tcp_receive+0x130>
                ++pcb->dupacks;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010462:	3301      	adds	r3, #1
 8010464:	b2da      	uxtb	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010472:	2b03      	cmp	r3, #3
 8010474:	d91b      	bls.n	80104ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010480:	4413      	add	r3, r2
 8010482:	b29a      	uxth	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801048a:	429a      	cmp	r2, r3
 801048c:	d30a      	bcc.n	80104a4 <tcp_receive+0x168>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010498:	4413      	add	r3, r2
 801049a:	b29a      	uxth	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104a2:	e004      	b.n	80104ae <tcp_receive+0x172>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80104b4:	2b02      	cmp	r3, #2
 80104b6:	d902      	bls.n	80104be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f002 f825 	bl	8012508 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80104be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f040 815f 	bne.w	8010784 <tcp_receive+0x448>
        pcb->dupacks = 0;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80104ce:	e159      	b.n	8010784 <tcp_receive+0x448>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104d0:	4b36      	ldr	r3, [pc, #216]	@ (80105ac <tcp_receive+0x270>)
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	3b01      	subs	r3, #1
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f2c0 814c 	blt.w	801077a <tcp_receive+0x43e>
 80104e2:	4b32      	ldr	r3, [pc, #200]	@ (80105ac <tcp_receive+0x270>)
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f300 8144 	bgt.w	801077a <tcp_receive+0x43e>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8b5b      	ldrh	r3, [r3, #26]
 80104f6:	f003 0304 	and.w	r3, r3, #4
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d010      	beq.n	8010520 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8b5b      	ldrh	r3, [r3, #26]
 8010502:	f023 0304 	bic.w	r3, r3, #4
 8010506:	b29a      	uxth	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801052e:	10db      	asrs	r3, r3, #3
 8010530:	b21b      	sxth	r3, r3
 8010532:	b29a      	uxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801053a:	b29b      	uxth	r3, r3
 801053c:	4413      	add	r3, r2
 801053e:	b29b      	uxth	r3, r3
 8010540:	b21a      	sxth	r2, r3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010548:	4b18      	ldr	r3, [pc, #96]	@ (80105ac <tcp_receive+0x270>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	b29a      	uxth	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010552:	b29b      	uxth	r3, r3
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010560:	4b12      	ldr	r3, [pc, #72]	@ (80105ac <tcp_receive+0x270>)
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7d1b      	ldrb	r3, [r3, #20]
 801056c:	2b03      	cmp	r3, #3
 801056e:	f240 8095 	bls.w	801069c <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801057e:	429a      	cmp	r2, r3
 8010580:	d243      	bcs.n	801060a <tcp_receive+0x2ce>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8b5b      	ldrh	r3, [r3, #26]
 8010586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801058a:	2b00      	cmp	r3, #0
 801058c:	d014      	beq.n	80105b8 <tcp_receive+0x27c>
 801058e:	2301      	movs	r3, #1
 8010590:	e013      	b.n	80105ba <tcp_receive+0x27e>
 8010592:	bf00      	nop
 8010594:	0801af6c 	.word	0x0801af6c
 8010598:	0801b274 	.word	0x0801b274
 801059c:	0801afb8 	.word	0x0801afb8
 80105a0:	0801b290 	.word	0x0801b290
 80105a4:	200150e8 	.word	0x200150e8
 80105a8:	200150dc 	.word	0x200150dc
 80105ac:	200150e0 	.word	0x200150e0
 80105b0:	200150cc 	.word	0x200150cc
 80105b4:	200150e6 	.word	0x200150e6
 80105b8:	2302      	movs	r3, #2
 80105ba:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80105bc:	7e7b      	ldrb	r3, [r7, #25]
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105c4:	fb12 f303 	smulbb	r3, r2, r3
 80105c8:	b29b      	uxth	r3, r3
 80105ca:	8b7a      	ldrh	r2, [r7, #26]
 80105cc:	4293      	cmp	r3, r2
 80105ce:	bf28      	it	cs
 80105d0:	4613      	movcs	r3, r2
 80105d2:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105da:	8afb      	ldrh	r3, [r7, #22]
 80105dc:	4413      	add	r3, r2
 80105de:	b29a      	uxth	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d309      	bcc.n	80105fe <tcp_receive+0x2c2>
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105f0:	8afb      	ldrh	r3, [r7, #22]
 80105f2:	4413      	add	r3, r2
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80105fc:	e04e      	b.n	801069c <tcp_receive+0x360>
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010604:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010608:	e048      	b.n	801069c <tcp_receive+0x360>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010610:	8b7b      	ldrh	r3, [r7, #26]
 8010612:	4413      	add	r3, r2
 8010614:	b29a      	uxth	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801061c:	429a      	cmp	r2, r3
 801061e:	d309      	bcc.n	8010634 <tcp_receive+0x2f8>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010626:	8b7b      	ldrh	r3, [r7, #26]
 8010628:	4413      	add	r3, r2
 801062a:	b29a      	uxth	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010632:	e004      	b.n	801063e <tcp_receive+0x302>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801063a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801064a:	429a      	cmp	r2, r3
 801064c:	d326      	bcc.n	801069c <tcp_receive+0x360>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801065a:	1ad3      	subs	r3, r2, r3
 801065c:	b29a      	uxth	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801066e:	4413      	add	r3, r2
 8010670:	b29a      	uxth	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010678:	429a      	cmp	r2, r3
 801067a:	d30a      	bcc.n	8010692 <tcp_receive+0x356>
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010686:	4413      	add	r3, r2
 8010688:	b29a      	uxth	r2, r3
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010690:	e004      	b.n	801069c <tcp_receive+0x360>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010698:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106a4:	4a91      	ldr	r2, [pc, #580]	@ (80108ec <tcp_receive+0x5b0>)
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7ff fdcc 	bl	8010244 <tcp_free_acked_segments>
 80106ac:	4602      	mov	r2, r0
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106ba:	4a8d      	ldr	r2, [pc, #564]	@ (80108f0 <tcp_receive+0x5b4>)
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f7ff fdc1 	bl	8010244 <tcp_free_acked_segments>
 80106c2:	4602      	mov	r2, r0
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d104      	bne.n	80106da <tcp_receive+0x39e>
        pcb->rtime = -1;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106d6:	861a      	strh	r2, [r3, #48]	@ 0x30
 80106d8:	e002      	b.n	80106e0 <tcp_receive+0x3a4>
      } else {
        pcb->rtime = 0;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	2200      	movs	r2, #0
 80106de:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d103      	bne.n	80106f6 <tcp_receive+0x3ba>
        pcb->unsent_oversize = 0;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	2200      	movs	r2, #0
 80106f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80106fc:	4b7d      	ldr	r3, [pc, #500]	@ (80108f4 <tcp_receive+0x5b8>)
 80106fe:	881b      	ldrh	r3, [r3, #0]
 8010700:	4413      	add	r3, r2
 8010702:	b29a      	uxth	r2, r3
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	8b5b      	ldrh	r3, [r3, #26]
 801070e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010712:	2b00      	cmp	r3, #0
 8010714:	d035      	beq.n	8010782 <tcp_receive+0x446>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801071a:	2b00      	cmp	r3, #0
 801071c:	d118      	bne.n	8010750 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010722:	2b00      	cmp	r3, #0
 8010724:	d00c      	beq.n	8010740 <tcp_receive+0x404>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801072e:	68db      	ldr	r3, [r3, #12]
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	4618      	mov	r0, r3
 8010734:	f7fa fe59 	bl	800b3ea <lwip_htonl>
 8010738:	4603      	mov	r3, r0
 801073a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801073c:	2b00      	cmp	r3, #0
 801073e:	dc20      	bgt.n	8010782 <tcp_receive+0x446>
            tcp_clear_flags(pcb, TF_RTO);
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	8b5b      	ldrh	r3, [r3, #26]
 8010744:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010748:	b29a      	uxth	r2, r3
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801074e:	e018      	b.n	8010782 <tcp_receive+0x446>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010758:	68db      	ldr	r3, [r3, #12]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	4618      	mov	r0, r3
 801075e:	f7fa fe44 	bl	800b3ea <lwip_htonl>
 8010762:	4603      	mov	r3, r0
 8010764:	1ae3      	subs	r3, r4, r3
 8010766:	2b00      	cmp	r3, #0
 8010768:	dc0b      	bgt.n	8010782 <tcp_receive+0x446>
          tcp_clear_flags(pcb, TF_RTO);
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	8b5b      	ldrh	r3, [r3, #26]
 801076e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010778:	e003      	b.n	8010782 <tcp_receive+0x446>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f002 f8c0 	bl	8012900 <tcp_send_empty_ack>
 8010780:	e000      	b.n	8010784 <tcp_receive+0x448>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010782:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010788:	2b00      	cmp	r3, #0
 801078a:	d052      	beq.n	8010832 <tcp_receive+0x4f6>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010790:	4b59      	ldr	r3, [pc, #356]	@ (80108f8 <tcp_receive+0x5bc>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	1ad3      	subs	r3, r2, r3
 8010796:	2b00      	cmp	r3, #0
 8010798:	da4b      	bge.n	8010832 <tcp_receive+0x4f6>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801079a:	4b58      	ldr	r3, [pc, #352]	@ (80108fc <tcp_receive+0x5c0>)
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	b29a      	uxth	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107a4:	b29b      	uxth	r3, r3
 80107a6:	1ad3      	subs	r3, r2, r3
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80107ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80107b4:	10db      	asrs	r3, r3, #3
 80107b6:	b21b      	sxth	r3, r3
 80107b8:	b29b      	uxth	r3, r3
 80107ba:	1ad3      	subs	r3, r2, r3
 80107bc:	b29b      	uxth	r3, r3
 80107be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80107c6:	b29a      	uxth	r2, r3
 80107c8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107ca:	4413      	add	r3, r2
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	b21a      	sxth	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80107d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80107d8:	2b00      	cmp	r3, #0
 80107da:	da03      	bge.n	80107e4 <tcp_receive+0x4a8>
        m = (s16_t) - m;
 80107dc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80107de:	425b      	negs	r3, r3
 80107e0:	b29b      	uxth	r3, r3
 80107e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80107e4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80107ec:	109b      	asrs	r3, r3, #2
 80107ee:	b21b      	sxth	r3, r3
 80107f0:	b29b      	uxth	r3, r3
 80107f2:	1ad3      	subs	r3, r2, r3
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80107fe:	b29a      	uxth	r2, r3
 8010800:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010802:	4413      	add	r3, r2
 8010804:	b29b      	uxth	r3, r3
 8010806:	b21a      	sxth	r2, r3
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010812:	10db      	asrs	r3, r3, #3
 8010814:	b21b      	sxth	r3, r3
 8010816:	b29a      	uxth	r2, r3
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801081e:	b29b      	uxth	r3, r3
 8010820:	4413      	add	r3, r2
 8010822:	b29b      	uxth	r3, r3
 8010824:	b21a      	sxth	r2, r3
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2200      	movs	r2, #0
 8010830:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010832:	4b33      	ldr	r3, [pc, #204]	@ (8010900 <tcp_receive+0x5c4>)
 8010834:	881b      	ldrh	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	f000 81c6 	beq.w	8010bc8 <tcp_receive+0x88c>
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	7d1b      	ldrb	r3, [r3, #20]
 8010840:	2b06      	cmp	r3, #6
 8010842:	f200 81c1 	bhi.w	8010bc8 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801084a:	4b2e      	ldr	r3, [pc, #184]	@ (8010904 <tcp_receive+0x5c8>)
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	1ad3      	subs	r3, r2, r3
 8010850:	3b01      	subs	r3, #1
 8010852:	2b00      	cmp	r3, #0
 8010854:	f2c0 8086 	blt.w	8010964 <tcp_receive+0x628>
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801085c:	4b28      	ldr	r3, [pc, #160]	@ (8010900 <tcp_receive+0x5c4>)
 801085e:	881b      	ldrh	r3, [r3, #0]
 8010860:	4619      	mov	r1, r3
 8010862:	4b28      	ldr	r3, [pc, #160]	@ (8010904 <tcp_receive+0x5c8>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	440b      	add	r3, r1
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	3301      	adds	r3, #1
 801086c:	2b00      	cmp	r3, #0
 801086e:	dc79      	bgt.n	8010964 <tcp_receive+0x628>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010870:	4b25      	ldr	r3, [pc, #148]	@ (8010908 <tcp_receive+0x5cc>)
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	627b      	str	r3, [r7, #36]	@ 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801087a:	4b22      	ldr	r3, [pc, #136]	@ (8010904 <tcp_receive+0x5c8>)
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010882:	4b21      	ldr	r3, [pc, #132]	@ (8010908 <tcp_receive+0x5cc>)
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d106      	bne.n	8010898 <tcp_receive+0x55c>
 801088a:	4b20      	ldr	r3, [pc, #128]	@ (801090c <tcp_receive+0x5d0>)
 801088c:	f240 5294 	movw	r2, #1428	@ 0x594
 8010890:	491f      	ldr	r1, [pc, #124]	@ (8010910 <tcp_receive+0x5d4>)
 8010892:	4820      	ldr	r0, [pc, #128]	@ (8010914 <tcp_receive+0x5d8>)
 8010894:	f007 fd34 	bl	8018300 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010898:	693b      	ldr	r3, [r7, #16]
 801089a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801089e:	4293      	cmp	r3, r2
 80108a0:	d906      	bls.n	80108b0 <tcp_receive+0x574>
 80108a2:	4b1a      	ldr	r3, [pc, #104]	@ (801090c <tcp_receive+0x5d0>)
 80108a4:	f240 5295 	movw	r2, #1429	@ 0x595
 80108a8:	491b      	ldr	r1, [pc, #108]	@ (8010918 <tcp_receive+0x5dc>)
 80108aa:	481a      	ldr	r0, [pc, #104]	@ (8010914 <tcp_receive+0x5d8>)
 80108ac:	f007 fd28 	bl	8018300 <iprintf>
      off = (u16_t)off32;
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	847b      	strh	r3, [r7, #34]	@ 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80108b4:	4b14      	ldr	r3, [pc, #80]	@ (8010908 <tcp_receive+0x5cc>)
 80108b6:	685b      	ldr	r3, [r3, #4]
 80108b8:	891b      	ldrh	r3, [r3, #8]
 80108ba:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80108bc:	429a      	cmp	r2, r3
 80108be:	d906      	bls.n	80108ce <tcp_receive+0x592>
 80108c0:	4b12      	ldr	r3, [pc, #72]	@ (801090c <tcp_receive+0x5d0>)
 80108c2:	f240 5297 	movw	r2, #1431	@ 0x597
 80108c6:	4915      	ldr	r1, [pc, #84]	@ (801091c <tcp_receive+0x5e0>)
 80108c8:	4812      	ldr	r0, [pc, #72]	@ (8010914 <tcp_receive+0x5d8>)
 80108ca:	f007 fd19 	bl	8018300 <iprintf>
      inseg.len -= off;
 80108ce:	4b0e      	ldr	r3, [pc, #56]	@ (8010908 <tcp_receive+0x5cc>)
 80108d0:	891a      	ldrh	r2, [r3, #8]
 80108d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	b29a      	uxth	r2, r3
 80108d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010908 <tcp_receive+0x5cc>)
 80108da:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80108dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010908 <tcp_receive+0x5cc>)
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	891a      	ldrh	r2, [r3, #8]
 80108e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108e4:	1ad3      	subs	r3, r2, r3
 80108e6:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 80108e8:	e028      	b.n	801093c <tcp_receive+0x600>
 80108ea:	bf00      	nop
 80108ec:	0801b2ac 	.word	0x0801b2ac
 80108f0:	0801b2b4 	.word	0x0801b2b4
 80108f4:	200150e4 	.word	0x200150e4
 80108f8:	200150e0 	.word	0x200150e0
 80108fc:	200150a4 	.word	0x200150a4
 8010900:	200150e6 	.word	0x200150e6
 8010904:	200150dc 	.word	0x200150dc
 8010908:	200150bc 	.word	0x200150bc
 801090c:	0801af6c 	.word	0x0801af6c
 8010910:	0801b2bc 	.word	0x0801b2bc
 8010914:	0801afb8 	.word	0x0801afb8
 8010918:	0801b2cc 	.word	0x0801b2cc
 801091c:	0801b2dc 	.word	0x0801b2dc
        off -= p->len;
 8010920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010922:	895b      	ldrh	r3, [r3, #10]
 8010924:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010926:	1ad3      	subs	r3, r2, r3
 8010928:	847b      	strh	r3, [r7, #34]	@ 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801092a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801092c:	89fa      	ldrh	r2, [r7, #14]
 801092e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010932:	2200      	movs	r2, #0
 8010934:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	627b      	str	r3, [r7, #36]	@ 0x24
      while (p->len < off) {
 801093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801093e:	895b      	ldrh	r3, [r3, #10]
 8010940:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010942:	429a      	cmp	r2, r3
 8010944:	d8ec      	bhi.n	8010920 <tcp_receive+0x5e4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010946:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010948:	4619      	mov	r1, r3
 801094a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801094c:	f7fc f988 	bl	800cc60 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010954:	4a93      	ldr	r2, [pc, #588]	@ (8010ba4 <tcp_receive+0x868>)
 8010956:	6013      	str	r3, [r2, #0]
 8010958:	4b93      	ldr	r3, [pc, #588]	@ (8010ba8 <tcp_receive+0x86c>)
 801095a:	68db      	ldr	r3, [r3, #12]
 801095c:	4a91      	ldr	r2, [pc, #580]	@ (8010ba4 <tcp_receive+0x868>)
 801095e:	6812      	ldr	r2, [r2, #0]
 8010960:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010962:	e00d      	b.n	8010980 <tcp_receive+0x644>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010964:	4b8f      	ldr	r3, [pc, #572]	@ (8010ba4 <tcp_receive+0x868>)
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	2b00      	cmp	r3, #0
 8010970:	da06      	bge.n	8010980 <tcp_receive+0x644>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	8b5b      	ldrh	r3, [r3, #26]
 8010976:	f043 0302 	orr.w	r3, r3, #2
 801097a:	b29a      	uxth	r2, r3
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010980:	4b88      	ldr	r3, [pc, #544]	@ (8010ba4 <tcp_receive+0x868>)
 8010982:	681a      	ldr	r2, [r3, #0]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010988:	1ad3      	subs	r3, r2, r3
 801098a:	2b00      	cmp	r3, #0
 801098c:	f2c0 8105 	blt.w	8010b9a <tcp_receive+0x85e>
 8010990:	4b84      	ldr	r3, [pc, #528]	@ (8010ba4 <tcp_receive+0x868>)
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010998:	6879      	ldr	r1, [r7, #4]
 801099a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801099c:	440b      	add	r3, r1
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	3301      	adds	r3, #1
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	f300 80f9 	bgt.w	8010b9a <tcp_receive+0x85e>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80109ac:	4b7d      	ldr	r3, [pc, #500]	@ (8010ba4 <tcp_receive+0x868>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	f040 80ee 	bne.w	8010b92 <tcp_receive+0x856>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80109b6:	4b7c      	ldr	r3, [pc, #496]	@ (8010ba8 <tcp_receive+0x86c>)
 80109b8:	891c      	ldrh	r4, [r3, #8]
 80109ba:	4b7b      	ldr	r3, [pc, #492]	@ (8010ba8 <tcp_receive+0x86c>)
 80109bc:	68db      	ldr	r3, [r3, #12]
 80109be:	899b      	ldrh	r3, [r3, #12]
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fa fcfc 	bl	800b3c0 <lwip_htons>
 80109c8:	4603      	mov	r3, r0
 80109ca:	b2db      	uxtb	r3, r3
 80109cc:	f003 0303 	and.w	r3, r3, #3
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <tcp_receive+0x69c>
 80109d4:	2301      	movs	r3, #1
 80109d6:	e000      	b.n	80109da <tcp_receive+0x69e>
 80109d8:	2300      	movs	r3, #0
 80109da:	4423      	add	r3, r4
 80109dc:	b29a      	uxth	r2, r3
 80109de:	4b73      	ldr	r3, [pc, #460]	@ (8010bac <tcp_receive+0x870>)
 80109e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80109e6:	4b71      	ldr	r3, [pc, #452]	@ (8010bac <tcp_receive+0x870>)
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	429a      	cmp	r2, r3
 80109ec:	d274      	bcs.n	8010ad8 <tcp_receive+0x79c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80109ee:	4b6e      	ldr	r3, [pc, #440]	@ (8010ba8 <tcp_receive+0x86c>)
 80109f0:	68db      	ldr	r3, [r3, #12]
 80109f2:	899b      	ldrh	r3, [r3, #12]
 80109f4:	b29b      	uxth	r3, r3
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fa fce2 	bl	800b3c0 <lwip_htons>
 80109fc:	4603      	mov	r3, r0
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	f003 0301 	and.w	r3, r3, #1
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d01e      	beq.n	8010a46 <tcp_receive+0x70a>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010a08:	4b67      	ldr	r3, [pc, #412]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a0a:	68db      	ldr	r3, [r3, #12]
 8010a0c:	899b      	ldrh	r3, [r3, #12]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	b21b      	sxth	r3, r3
 8010a12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010a16:	b21c      	sxth	r4, r3
 8010a18:	4b63      	ldr	r3, [pc, #396]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a1a:	68db      	ldr	r3, [r3, #12]
 8010a1c:	899b      	ldrh	r3, [r3, #12]
 8010a1e:	b29b      	uxth	r3, r3
 8010a20:	4618      	mov	r0, r3
 8010a22:	f7fa fccd 	bl	800b3c0 <lwip_htons>
 8010a26:	4603      	mov	r3, r0
 8010a28:	b2db      	uxtb	r3, r3
 8010a2a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010a2e:	b29b      	uxth	r3, r3
 8010a30:	4618      	mov	r0, r3
 8010a32:	f7fa fcc5 	bl	800b3c0 <lwip_htons>
 8010a36:	4603      	mov	r3, r0
 8010a38:	b21b      	sxth	r3, r3
 8010a3a:	4323      	orrs	r3, r4
 8010a3c:	b21a      	sxth	r2, r3
 8010a3e:	4b5a      	ldr	r3, [pc, #360]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a40:	68db      	ldr	r3, [r3, #12]
 8010a42:	b292      	uxth	r2, r2
 8010a44:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010a4a:	4b57      	ldr	r3, [pc, #348]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a4c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a4e:	4b56      	ldr	r3, [pc, #344]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a50:	68db      	ldr	r3, [r3, #12]
 8010a52:	899b      	ldrh	r3, [r3, #12]
 8010a54:	b29b      	uxth	r3, r3
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fa fcb2 	bl	800b3c0 <lwip_htons>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	f003 0302 	and.w	r3, r3, #2
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d005      	beq.n	8010a74 <tcp_receive+0x738>
            inseg.len -= 1;
 8010a68:	4b4f      	ldr	r3, [pc, #316]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a6a:	891b      	ldrh	r3, [r3, #8]
 8010a6c:	3b01      	subs	r3, #1
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	4b4d      	ldr	r3, [pc, #308]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a72:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010a74:	4b4c      	ldr	r3, [pc, #304]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	4a4b      	ldr	r2, [pc, #300]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a7a:	8912      	ldrh	r2, [r2, #8]
 8010a7c:	4611      	mov	r1, r2
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fb ffee 	bl	800ca60 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010a84:	4b48      	ldr	r3, [pc, #288]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a86:	891c      	ldrh	r4, [r3, #8]
 8010a88:	4b47      	ldr	r3, [pc, #284]	@ (8010ba8 <tcp_receive+0x86c>)
 8010a8a:	68db      	ldr	r3, [r3, #12]
 8010a8c:	899b      	ldrh	r3, [r3, #12]
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fa fc95 	bl	800b3c0 <lwip_htons>
 8010a96:	4603      	mov	r3, r0
 8010a98:	b2db      	uxtb	r3, r3
 8010a9a:	f003 0303 	and.w	r3, r3, #3
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d001      	beq.n	8010aa6 <tcp_receive+0x76a>
 8010aa2:	2301      	movs	r3, #1
 8010aa4:	e000      	b.n	8010aa8 <tcp_receive+0x76c>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	4423      	add	r3, r4
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	4b3f      	ldr	r3, [pc, #252]	@ (8010bac <tcp_receive+0x870>)
 8010aae:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8010bac <tcp_receive+0x870>)
 8010ab2:	881b      	ldrh	r3, [r3, #0]
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	4b3b      	ldr	r3, [pc, #236]	@ (8010ba4 <tcp_receive+0x868>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	441a      	add	r2, r3
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ac0:	6879      	ldr	r1, [r7, #4]
 8010ac2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010ac4:	440b      	add	r3, r1
 8010ac6:	429a      	cmp	r2, r3
 8010ac8:	d006      	beq.n	8010ad8 <tcp_receive+0x79c>
 8010aca:	4b39      	ldr	r3, [pc, #228]	@ (8010bb0 <tcp_receive+0x874>)
 8010acc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010ad0:	4938      	ldr	r1, [pc, #224]	@ (8010bb4 <tcp_receive+0x878>)
 8010ad2:	4839      	ldr	r0, [pc, #228]	@ (8010bb8 <tcp_receive+0x87c>)
 8010ad4:	f007 fc14 	bl	8018300 <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010ad8:	4b34      	ldr	r3, [pc, #208]	@ (8010bac <tcp_receive+0x870>)
 8010ada:	881b      	ldrh	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	4b31      	ldr	r3, [pc, #196]	@ (8010ba4 <tcp_receive+0x868>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	441a      	add	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010aec:	4b2f      	ldr	r3, [pc, #188]	@ (8010bac <tcp_receive+0x870>)
 8010aee:	881b      	ldrh	r3, [r3, #0]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d206      	bcs.n	8010b02 <tcp_receive+0x7c6>
 8010af4:	4b2e      	ldr	r3, [pc, #184]	@ (8010bb0 <tcp_receive+0x874>)
 8010af6:	f240 6207 	movw	r2, #1543	@ 0x607
 8010afa:	4930      	ldr	r1, [pc, #192]	@ (8010bbc <tcp_receive+0x880>)
 8010afc:	482e      	ldr	r0, [pc, #184]	@ (8010bb8 <tcp_receive+0x87c>)
 8010afe:	f007 fbff 	bl	8018300 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010b06:	4b29      	ldr	r3, [pc, #164]	@ (8010bac <tcp_receive+0x870>)
 8010b08:	881b      	ldrh	r3, [r3, #0]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f7fd f88e 	bl	800dc34 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010b18:	4b23      	ldr	r3, [pc, #140]	@ (8010ba8 <tcp_receive+0x86c>)
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	891b      	ldrh	r3, [r3, #8]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d006      	beq.n	8010b30 <tcp_receive+0x7f4>
          recv_data = inseg.p;
 8010b22:	4b21      	ldr	r3, [pc, #132]	@ (8010ba8 <tcp_receive+0x86c>)
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	4a26      	ldr	r2, [pc, #152]	@ (8010bc0 <tcp_receive+0x884>)
 8010b28:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8010ba8 <tcp_receive+0x86c>)
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b30:	4b1d      	ldr	r3, [pc, #116]	@ (8010ba8 <tcp_receive+0x86c>)
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	899b      	ldrh	r3, [r3, #12]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7fa fc41 	bl	800b3c0 <lwip_htons>
 8010b3e:	4603      	mov	r3, r0
 8010b40:	b2db      	uxtb	r3, r3
 8010b42:	f003 0301 	and.w	r3, r3, #1
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d006      	beq.n	8010b58 <tcp_receive+0x81c>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8010bc4 <tcp_receive+0x888>)
 8010b4c:	781b      	ldrb	r3, [r3, #0]
 8010b4e:	f043 0320 	orr.w	r3, r3, #32
 8010b52:	b2da      	uxtb	r2, r3
 8010b54:	4b1b      	ldr	r3, [pc, #108]	@ (8010bc4 <tcp_receive+0x888>)
 8010b56:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	8b5b      	ldrh	r3, [r3, #26]
 8010b5c:	f003 0301 	and.w	r3, r3, #1
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d00e      	beq.n	8010b82 <tcp_receive+0x846>
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	8b5b      	ldrh	r3, [r3, #26]
 8010b68:	f023 0301 	bic.w	r3, r3, #1
 8010b6c:	b29a      	uxth	r2, r3
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	835a      	strh	r2, [r3, #26]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	8b5b      	ldrh	r3, [r3, #26]
 8010b76:	f043 0302 	orr.w	r3, r3, #2
 8010b7a:	b29a      	uxth	r2, r3
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010b80:	e00f      	b.n	8010ba2 <tcp_receive+0x866>
        tcp_ack(pcb);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	8b5b      	ldrh	r3, [r3, #26]
 8010b86:	f043 0301 	orr.w	r3, r3, #1
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010b90:	e007      	b.n	8010ba2 <tcp_receive+0x866>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f001 feb4 	bl	8012900 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010b98:	e003      	b.n	8010ba2 <tcp_receive+0x866>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f001 feb0 	bl	8012900 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ba0:	e02c      	b.n	8010bfc <tcp_receive+0x8c0>
 8010ba2:	e02b      	b.n	8010bfc <tcp_receive+0x8c0>
 8010ba4:	200150dc 	.word	0x200150dc
 8010ba8:	200150bc 	.word	0x200150bc
 8010bac:	200150e6 	.word	0x200150e6
 8010bb0:	0801af6c 	.word	0x0801af6c
 8010bb4:	0801b2ec 	.word	0x0801b2ec
 8010bb8:	0801afb8 	.word	0x0801afb8
 8010bbc:	0801b324 	.word	0x0801b324
 8010bc0:	200150ec 	.word	0x200150ec
 8010bc4:	200150e9 	.word	0x200150e9
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8010c04 <tcp_receive+0x8c8>)
 8010bca:	681a      	ldr	r2, [r3, #0]
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bd0:	1ad3      	subs	r3, r2, r3
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	db0a      	blt.n	8010bec <tcp_receive+0x8b0>
 8010bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8010c04 <tcp_receive+0x8c8>)
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bde:	6879      	ldr	r1, [r7, #4]
 8010be0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010be2:	440b      	add	r3, r1
 8010be4:	1ad3      	subs	r3, r2, r3
 8010be6:	3301      	adds	r3, #1
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	dd07      	ble.n	8010bfc <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	8b5b      	ldrh	r3, [r3, #26]
 8010bf0:	f043 0302 	orr.w	r3, r3, #2
 8010bf4:	b29a      	uxth	r2, r3
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010bfa:	e7ff      	b.n	8010bfc <tcp_receive+0x8c0>
 8010bfc:	bf00      	nop
 8010bfe:	3734      	adds	r7, #52	@ 0x34
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd90      	pop	{r4, r7, pc}
 8010c04:	200150dc 	.word	0x200150dc

08010c08 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010c0e:	4b15      	ldr	r3, [pc, #84]	@ (8010c64 <tcp_get_next_optbyte+0x5c>)
 8010c10:	881b      	ldrh	r3, [r3, #0]
 8010c12:	1c5a      	adds	r2, r3, #1
 8010c14:	b291      	uxth	r1, r2
 8010c16:	4a13      	ldr	r2, [pc, #76]	@ (8010c64 <tcp_get_next_optbyte+0x5c>)
 8010c18:	8011      	strh	r1, [r2, #0]
 8010c1a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010c1c:	4b12      	ldr	r3, [pc, #72]	@ (8010c68 <tcp_get_next_optbyte+0x60>)
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d004      	beq.n	8010c2e <tcp_get_next_optbyte+0x26>
 8010c24:	4b11      	ldr	r3, [pc, #68]	@ (8010c6c <tcp_get_next_optbyte+0x64>)
 8010c26:	881b      	ldrh	r3, [r3, #0]
 8010c28:	88fa      	ldrh	r2, [r7, #6]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d208      	bcs.n	8010c40 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010c2e:	4b10      	ldr	r3, [pc, #64]	@ (8010c70 <tcp_get_next_optbyte+0x68>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	3314      	adds	r3, #20
 8010c34:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010c36:	88fb      	ldrh	r3, [r7, #6]
 8010c38:	683a      	ldr	r2, [r7, #0]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	781b      	ldrb	r3, [r3, #0]
 8010c3e:	e00b      	b.n	8010c58 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010c40:	88fb      	ldrh	r3, [r7, #6]
 8010c42:	b2da      	uxtb	r2, r3
 8010c44:	4b09      	ldr	r3, [pc, #36]	@ (8010c6c <tcp_get_next_optbyte+0x64>)
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	1ad3      	subs	r3, r2, r3
 8010c4c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010c4e:	4b06      	ldr	r3, [pc, #24]	@ (8010c68 <tcp_get_next_optbyte+0x60>)
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	797b      	ldrb	r3, [r7, #5]
 8010c54:	4413      	add	r3, r2
 8010c56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c58:	4618      	mov	r0, r3
 8010c5a:	370c      	adds	r7, #12
 8010c5c:	46bd      	mov	sp, r7
 8010c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c62:	4770      	bx	lr
 8010c64:	200150d8 	.word	0x200150d8
 8010c68:	200150d4 	.word	0x200150d4
 8010c6c:	200150d2 	.word	0x200150d2
 8010c70:	200150cc 	.word	0x200150cc

08010c74 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d106      	bne.n	8010c90 <tcp_parseopt+0x1c>
 8010c82:	4b33      	ldr	r3, [pc, #204]	@ (8010d50 <tcp_parseopt+0xdc>)
 8010c84:	f240 727d 	movw	r2, #1917	@ 0x77d
 8010c88:	4932      	ldr	r1, [pc, #200]	@ (8010d54 <tcp_parseopt+0xe0>)
 8010c8a:	4833      	ldr	r0, [pc, #204]	@ (8010d58 <tcp_parseopt+0xe4>)
 8010c8c:	f007 fb38 	bl	8018300 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010c90:	4b32      	ldr	r3, [pc, #200]	@ (8010d5c <tcp_parseopt+0xe8>)
 8010c92:	881b      	ldrh	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d057      	beq.n	8010d48 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010c98:	4b31      	ldr	r3, [pc, #196]	@ (8010d60 <tcp_parseopt+0xec>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	801a      	strh	r2, [r3, #0]
 8010c9e:	e047      	b.n	8010d30 <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8010ca0:	f7ff ffb2 	bl	8010c08 <tcp_get_next_optbyte>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010ca8:	7bfb      	ldrb	r3, [r7, #15]
 8010caa:	2b02      	cmp	r3, #2
 8010cac:	d006      	beq.n	8010cbc <tcp_parseopt+0x48>
 8010cae:	2b02      	cmp	r3, #2
 8010cb0:	dc2b      	bgt.n	8010d0a <tcp_parseopt+0x96>
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d043      	beq.n	8010d3e <tcp_parseopt+0xca>
 8010cb6:	2b01      	cmp	r3, #1
 8010cb8:	d039      	beq.n	8010d2e <tcp_parseopt+0xba>
 8010cba:	e026      	b.n	8010d0a <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010cbc:	f7ff ffa4 	bl	8010c08 <tcp_get_next_optbyte>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2b04      	cmp	r3, #4
 8010cc4:	d13d      	bne.n	8010d42 <tcp_parseopt+0xce>
 8010cc6:	4b26      	ldr	r3, [pc, #152]	@ (8010d60 <tcp_parseopt+0xec>)
 8010cc8:	881b      	ldrh	r3, [r3, #0]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	4a23      	ldr	r2, [pc, #140]	@ (8010d5c <tcp_parseopt+0xe8>)
 8010cce:	8812      	ldrh	r2, [r2, #0]
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	da36      	bge.n	8010d42 <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010cd4:	f7ff ff98 	bl	8010c08 <tcp_get_next_optbyte>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	021b      	lsls	r3, r3, #8
 8010cdc:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010cde:	f7ff ff93 	bl	8010c08 <tcp_get_next_optbyte>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	89bb      	ldrh	r3, [r7, #12]
 8010ce8:	4313      	orrs	r3, r2
 8010cea:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010cec:	89bb      	ldrh	r3, [r7, #12]
 8010cee:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8010cf2:	4293      	cmp	r3, r2
 8010cf4:	d804      	bhi.n	8010d00 <tcp_parseopt+0x8c>
 8010cf6:	89bb      	ldrh	r3, [r7, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <tcp_parseopt+0x8c>
 8010cfc:	89ba      	ldrh	r2, [r7, #12]
 8010cfe:	e001      	b.n	8010d04 <tcp_parseopt+0x90>
 8010d00:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8010d08:	e012      	b.n	8010d30 <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010d0a:	f7ff ff7d 	bl	8010c08 <tcp_get_next_optbyte>
 8010d0e:	4603      	mov	r3, r0
 8010d10:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010d12:	7afb      	ldrb	r3, [r7, #11]
 8010d14:	2b01      	cmp	r3, #1
 8010d16:	d916      	bls.n	8010d46 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010d18:	7afb      	ldrb	r3, [r7, #11]
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	4b10      	ldr	r3, [pc, #64]	@ (8010d60 <tcp_parseopt+0xec>)
 8010d1e:	881b      	ldrh	r3, [r3, #0]
 8010d20:	4413      	add	r3, r2
 8010d22:	b29b      	uxth	r3, r3
 8010d24:	3b02      	subs	r3, #2
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	4b0d      	ldr	r3, [pc, #52]	@ (8010d60 <tcp_parseopt+0xec>)
 8010d2a:	801a      	strh	r2, [r3, #0]
 8010d2c:	e000      	b.n	8010d30 <tcp_parseopt+0xbc>
          break;
 8010d2e:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010d30:	4b0b      	ldr	r3, [pc, #44]	@ (8010d60 <tcp_parseopt+0xec>)
 8010d32:	881a      	ldrh	r2, [r3, #0]
 8010d34:	4b09      	ldr	r3, [pc, #36]	@ (8010d5c <tcp_parseopt+0xe8>)
 8010d36:	881b      	ldrh	r3, [r3, #0]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d3b1      	bcc.n	8010ca0 <tcp_parseopt+0x2c>
 8010d3c:	e004      	b.n	8010d48 <tcp_parseopt+0xd4>
          return;
 8010d3e:	bf00      	nop
 8010d40:	e002      	b.n	8010d48 <tcp_parseopt+0xd4>
            return;
 8010d42:	bf00      	nop
 8010d44:	e000      	b.n	8010d48 <tcp_parseopt+0xd4>
            return;
 8010d46:	bf00      	nop
      }
    }
  }
}
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	0801af6c 	.word	0x0801af6c
 8010d54:	0801b344 	.word	0x0801b344
 8010d58:	0801afb8 	.word	0x0801afb8
 8010d5c:	200150d0 	.word	0x200150d0
 8010d60:	200150d8 	.word	0x200150d8

08010d64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010d64:	b480      	push	{r7}
 8010d66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010d68:	4b05      	ldr	r3, [pc, #20]	@ (8010d80 <tcp_trigger_input_pcb_close+0x1c>)
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	f043 0310 	orr.w	r3, r3, #16
 8010d70:	b2da      	uxtb	r2, r3
 8010d72:	4b03      	ldr	r3, [pc, #12]	@ (8010d80 <tcp_trigger_input_pcb_close+0x1c>)
 8010d74:	701a      	strb	r2, [r3, #0]
}
 8010d76:	bf00      	nop
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7e:	4770      	bx	lr
 8010d80:	200150e9 	.word	0x200150e9

08010d84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b084      	sub	sp, #16
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60f8      	str	r0, [r7, #12]
 8010d8c:	60b9      	str	r1, [r7, #8]
 8010d8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00a      	beq.n	8010dac <tcp_route+0x28>
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	7a1b      	ldrb	r3, [r3, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d006      	beq.n	8010dac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010d9e:	68fb      	ldr	r3, [r7, #12]
 8010da0:	7a1b      	ldrb	r3, [r3, #8]
 8010da2:	4618      	mov	r0, r3
 8010da4:	f7fb fcae 	bl	800c704 <netif_get_by_index>
 8010da8:	4603      	mov	r3, r0
 8010daa:	e003      	b.n	8010db4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f005 fd23 	bl	80167f8 <ip4_route>
 8010db2:	4603      	mov	r3, r0
  }
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3710      	adds	r7, #16
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010dbc:	b590      	push	{r4, r7, lr}
 8010dbe:	b087      	sub	sp, #28
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	60f8      	str	r0, [r7, #12]
 8010dc4:	60b9      	str	r1, [r7, #8]
 8010dc6:	603b      	str	r3, [r7, #0]
 8010dc8:	4613      	mov	r3, r2
 8010dca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d105      	bne.n	8010dde <tcp_create_segment+0x22>
 8010dd2:	4b43      	ldr	r3, [pc, #268]	@ (8010ee0 <tcp_create_segment+0x124>)
 8010dd4:	22a3      	movs	r2, #163	@ 0xa3
 8010dd6:	4943      	ldr	r1, [pc, #268]	@ (8010ee4 <tcp_create_segment+0x128>)
 8010dd8:	4843      	ldr	r0, [pc, #268]	@ (8010ee8 <tcp_create_segment+0x12c>)
 8010dda:	f007 fa91 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d105      	bne.n	8010df0 <tcp_create_segment+0x34>
 8010de4:	4b3e      	ldr	r3, [pc, #248]	@ (8010ee0 <tcp_create_segment+0x124>)
 8010de6:	22a4      	movs	r2, #164	@ 0xa4
 8010de8:	4940      	ldr	r1, [pc, #256]	@ (8010eec <tcp_create_segment+0x130>)
 8010dea:	483f      	ldr	r0, [pc, #252]	@ (8010ee8 <tcp_create_segment+0x12c>)
 8010dec:	f007 fa88 	bl	8018300 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010df0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	f003 0304 	and.w	r3, r3, #4
 8010dfc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010dfe:	2003      	movs	r0, #3
 8010e00:	f7fb f90c 	bl	800c01c <memp_malloc>
 8010e04:	6138      	str	r0, [r7, #16]
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d104      	bne.n	8010e16 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010e0c:	68b8      	ldr	r0, [r7, #8]
 8010e0e:	f7fb ffad 	bl	800cd6c <pbuf_free>
    return NULL;
 8010e12:	2300      	movs	r3, #0
 8010e14:	e060      	b.n	8010ed8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8010e16:	693b      	ldr	r3, [r7, #16]
 8010e18:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8010e1c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	2200      	movs	r2, #0
 8010e22:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010e24:	693b      	ldr	r3, [r7, #16]
 8010e26:	68ba      	ldr	r2, [r7, #8]
 8010e28:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010e2a:	68bb      	ldr	r3, [r7, #8]
 8010e2c:	891a      	ldrh	r2, [r3, #8]
 8010e2e:	7dfb      	ldrb	r3, [r7, #23]
 8010e30:	b29b      	uxth	r3, r3
 8010e32:	429a      	cmp	r2, r3
 8010e34:	d205      	bcs.n	8010e42 <tcp_create_segment+0x86>
 8010e36:	4b2a      	ldr	r3, [pc, #168]	@ (8010ee0 <tcp_create_segment+0x124>)
 8010e38:	22b0      	movs	r2, #176	@ 0xb0
 8010e3a:	492d      	ldr	r1, [pc, #180]	@ (8010ef0 <tcp_create_segment+0x134>)
 8010e3c:	482a      	ldr	r0, [pc, #168]	@ (8010ee8 <tcp_create_segment+0x12c>)
 8010e3e:	f007 fa5f 	bl	8018300 <iprintf>
  seg->len = p->tot_len - optlen;
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	891a      	ldrh	r2, [r3, #8]
 8010e46:	7dfb      	ldrb	r3, [r7, #23]
 8010e48:	b29b      	uxth	r3, r3
 8010e4a:	1ad3      	subs	r3, r2, r3
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	693b      	ldr	r3, [r7, #16]
 8010e50:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010e52:	2114      	movs	r1, #20
 8010e54:	68b8      	ldr	r0, [r7, #8]
 8010e56:	f7fb fef3 	bl	800cc40 <pbuf_add_header>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d004      	beq.n	8010e6a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010e60:	6938      	ldr	r0, [r7, #16]
 8010e62:	f7fd fbfc 	bl	800e65e <tcp_seg_free>
    return NULL;
 8010e66:	2300      	movs	r3, #0
 8010e68:	e036      	b.n	8010ed8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	685b      	ldr	r3, [r3, #4]
 8010e6e:	685a      	ldr	r2, [r3, #4]
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	8ada      	ldrh	r2, [r3, #22]
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	68dc      	ldr	r4, [r3, #12]
 8010e7c:	4610      	mov	r0, r2
 8010e7e:	f7fa fa9f 	bl	800b3c0 <lwip_htons>
 8010e82:	4603      	mov	r3, r0
 8010e84:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	8b1a      	ldrh	r2, [r3, #24]
 8010e8a:	693b      	ldr	r3, [r7, #16]
 8010e8c:	68dc      	ldr	r4, [r3, #12]
 8010e8e:	4610      	mov	r0, r2
 8010e90:	f7fa fa96 	bl	800b3c0 <lwip_htons>
 8010e94:	4603      	mov	r3, r0
 8010e96:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	68dc      	ldr	r4, [r3, #12]
 8010e9c:	6838      	ldr	r0, [r7, #0]
 8010e9e:	f7fa faa4 	bl	800b3ea <lwip_htonl>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010ea6:	7dfb      	ldrb	r3, [r7, #23]
 8010ea8:	089b      	lsrs	r3, r3, #2
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	3305      	adds	r3, #5
 8010eae:	b29b      	uxth	r3, r3
 8010eb0:	031b      	lsls	r3, r3, #12
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	79fb      	ldrb	r3, [r7, #7]
 8010eb6:	b29b      	uxth	r3, r3
 8010eb8:	4313      	orrs	r3, r2
 8010eba:	b29a      	uxth	r2, r3
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	68dc      	ldr	r4, [r3, #12]
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	f7fa fa7d 	bl	800b3c0 <lwip_htons>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	2200      	movs	r2, #0
 8010ed0:	749a      	strb	r2, [r3, #18]
 8010ed2:	2200      	movs	r2, #0
 8010ed4:	74da      	strb	r2, [r3, #19]
  return seg;
 8010ed6:	693b      	ldr	r3, [r7, #16]
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	371c      	adds	r7, #28
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd90      	pop	{r4, r7, pc}
 8010ee0:	0801b360 	.word	0x0801b360
 8010ee4:	0801b394 	.word	0x0801b394
 8010ee8:	0801b3b4 	.word	0x0801b3b4
 8010eec:	0801b3dc 	.word	0x0801b3dc
 8010ef0:	0801b400 	.word	0x0801b400

08010ef4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010ef4:	b580      	push	{r7, lr}
 8010ef6:	b086      	sub	sp, #24
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	607b      	str	r3, [r7, #4]
 8010efc:	4603      	mov	r3, r0
 8010efe:	73fb      	strb	r3, [r7, #15]
 8010f00:	460b      	mov	r3, r1
 8010f02:	81bb      	strh	r3, [r7, #12]
 8010f04:	4613      	mov	r3, r2
 8010f06:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010f08:	89bb      	ldrh	r3, [r7, #12]
 8010f0a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d105      	bne.n	8010f1e <tcp_pbuf_prealloc+0x2a>
 8010f12:	4b30      	ldr	r3, [pc, #192]	@ (8010fd4 <tcp_pbuf_prealloc+0xe0>)
 8010f14:	22e8      	movs	r2, #232	@ 0xe8
 8010f16:	4930      	ldr	r1, [pc, #192]	@ (8010fd8 <tcp_pbuf_prealloc+0xe4>)
 8010f18:	4830      	ldr	r0, [pc, #192]	@ (8010fdc <tcp_pbuf_prealloc+0xe8>)
 8010f1a:	f007 f9f1 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010f1e:	6a3b      	ldr	r3, [r7, #32]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d105      	bne.n	8010f30 <tcp_pbuf_prealloc+0x3c>
 8010f24:	4b2b      	ldr	r3, [pc, #172]	@ (8010fd4 <tcp_pbuf_prealloc+0xe0>)
 8010f26:	22e9      	movs	r2, #233	@ 0xe9
 8010f28:	492d      	ldr	r1, [pc, #180]	@ (8010fe0 <tcp_pbuf_prealloc+0xec>)
 8010f2a:	482c      	ldr	r0, [pc, #176]	@ (8010fdc <tcp_pbuf_prealloc+0xe8>)
 8010f2c:	f007 f9e8 	bl	8018300 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010f30:	89ba      	ldrh	r2, [r7, #12]
 8010f32:	897b      	ldrh	r3, [r7, #10]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d221      	bcs.n	8010f7c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010f38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010f3c:	f003 0302 	and.w	r3, r3, #2
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d111      	bne.n	8010f68 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010f44:	6a3b      	ldr	r3, [r7, #32]
 8010f46:	8b5b      	ldrh	r3, [r3, #26]
 8010f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d115      	bne.n	8010f7c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010f50:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d007      	beq.n	8010f68 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010f58:	6a3b      	ldr	r3, [r7, #32]
 8010f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d103      	bne.n	8010f68 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010f60:	6a3b      	ldr	r3, [r7, #32]
 8010f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d009      	beq.n	8010f7c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010f68:	89bb      	ldrh	r3, [r7, #12]
 8010f6a:	f203 53b7 	addw	r3, r3, #1463	@ 0x5b7
 8010f6e:	f023 0203 	bic.w	r2, r3, #3
 8010f72:	897b      	ldrh	r3, [r7, #10]
 8010f74:	4293      	cmp	r3, r2
 8010f76:	bf28      	it	cs
 8010f78:	4613      	movcs	r3, r2
 8010f7a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010f7c:	8af9      	ldrh	r1, [r7, #22]
 8010f7e:	7bfb      	ldrb	r3, [r7, #15]
 8010f80:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7fb fc0d 	bl	800c7a4 <pbuf_alloc>
 8010f8a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d101      	bne.n	8010f96 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010f92:	2300      	movs	r3, #0
 8010f94:	e019      	b.n	8010fca <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d006      	beq.n	8010fac <tcp_pbuf_prealloc+0xb8>
 8010f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8010fd4 <tcp_pbuf_prealloc+0xe0>)
 8010fa0:	f240 120b 	movw	r2, #267	@ 0x10b
 8010fa4:	490f      	ldr	r1, [pc, #60]	@ (8010fe4 <tcp_pbuf_prealloc+0xf0>)
 8010fa6:	480d      	ldr	r0, [pc, #52]	@ (8010fdc <tcp_pbuf_prealloc+0xe8>)
 8010fa8:	f007 f9aa 	bl	8018300 <iprintf>
  *oversize = p->len - length;
 8010fac:	693b      	ldr	r3, [r7, #16]
 8010fae:	895a      	ldrh	r2, [r3, #10]
 8010fb0:	89bb      	ldrh	r3, [r7, #12]
 8010fb2:	1ad3      	subs	r3, r2, r3
 8010fb4:	b29a      	uxth	r2, r3
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	89ba      	ldrh	r2, [r7, #12]
 8010fbe:	811a      	strh	r2, [r3, #8]
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	891a      	ldrh	r2, [r3, #8]
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	815a      	strh	r2, [r3, #10]
  return p;
 8010fc8:	693b      	ldr	r3, [r7, #16]
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3718      	adds	r7, #24
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
 8010fd2:	bf00      	nop
 8010fd4:	0801b360 	.word	0x0801b360
 8010fd8:	0801b418 	.word	0x0801b418
 8010fdc:	0801b3b4 	.word	0x0801b3b4
 8010fe0:	0801b43c 	.word	0x0801b43c
 8010fe4:	0801b45c 	.word	0x0801b45c

08010fe8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
 8010ff0:	460b      	mov	r3, r1
 8010ff2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d106      	bne.n	8011008 <tcp_write_checks+0x20>
 8010ffa:	4b33      	ldr	r3, [pc, #204]	@ (80110c8 <tcp_write_checks+0xe0>)
 8010ffc:	f240 1233 	movw	r2, #307	@ 0x133
 8011000:	4932      	ldr	r1, [pc, #200]	@ (80110cc <tcp_write_checks+0xe4>)
 8011002:	4833      	ldr	r0, [pc, #204]	@ (80110d0 <tcp_write_checks+0xe8>)
 8011004:	f007 f97c 	bl	8018300 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	7d1b      	ldrb	r3, [r3, #20]
 801100c:	2b04      	cmp	r3, #4
 801100e:	d00e      	beq.n	801102e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011014:	2b07      	cmp	r3, #7
 8011016:	d00a      	beq.n	801102e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801101c:	2b02      	cmp	r3, #2
 801101e:	d006      	beq.n	801102e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011024:	2b03      	cmp	r3, #3
 8011026:	d002      	beq.n	801102e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011028:	f06f 030a 	mvn.w	r3, #10
 801102c:	e048      	b.n	80110c0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801102e:	887b      	ldrh	r3, [r7, #2]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d101      	bne.n	8011038 <tcp_write_checks+0x50>
    return ERR_OK;
 8011034:	2300      	movs	r3, #0
 8011036:	e043      	b.n	80110c0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801103e:	887a      	ldrh	r2, [r7, #2]
 8011040:	429a      	cmp	r2, r3
 8011042:	d909      	bls.n	8011058 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	8b5b      	ldrh	r3, [r3, #26]
 8011048:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801104c:	b29a      	uxth	r2, r3
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011052:	f04f 33ff 	mov.w	r3, #4294967295
 8011056:	e033      	b.n	80110c0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801105e:	2b07      	cmp	r3, #7
 8011060:	d909      	bls.n	8011076 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	8b5b      	ldrh	r3, [r3, #26]
 8011066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801106a:	b29a      	uxth	r2, r3
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011070:	f04f 33ff 	mov.w	r3, #4294967295
 8011074:	e024      	b.n	80110c0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801107c:	2b00      	cmp	r3, #0
 801107e:	d00f      	beq.n	80110a0 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011084:	2b00      	cmp	r3, #0
 8011086:	d11a      	bne.n	80110be <tcp_write_checks+0xd6>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801108c:	2b00      	cmp	r3, #0
 801108e:	d116      	bne.n	80110be <tcp_write_checks+0xd6>
 8011090:	4b0d      	ldr	r3, [pc, #52]	@ (80110c8 <tcp_write_checks+0xe0>)
 8011092:	f240 1255 	movw	r2, #341	@ 0x155
 8011096:	490f      	ldr	r1, [pc, #60]	@ (80110d4 <tcp_write_checks+0xec>)
 8011098:	480d      	ldr	r0, [pc, #52]	@ (80110d0 <tcp_write_checks+0xe8>)
 801109a:	f007 f931 	bl	8018300 <iprintf>
 801109e:	e00e      	b.n	80110be <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d103      	bne.n	80110b0 <tcp_write_checks+0xc8>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d006      	beq.n	80110be <tcp_write_checks+0xd6>
 80110b0:	4b05      	ldr	r3, [pc, #20]	@ (80110c8 <tcp_write_checks+0xe0>)
 80110b2:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 80110b6:	4908      	ldr	r1, [pc, #32]	@ (80110d8 <tcp_write_checks+0xf0>)
 80110b8:	4805      	ldr	r0, [pc, #20]	@ (80110d0 <tcp_write_checks+0xe8>)
 80110ba:	f007 f921 	bl	8018300 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80110be:	2300      	movs	r3, #0
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3708      	adds	r7, #8
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	0801b360 	.word	0x0801b360
 80110cc:	0801b470 	.word	0x0801b470
 80110d0:	0801b3b4 	.word	0x0801b3b4
 80110d4:	0801b490 	.word	0x0801b490
 80110d8:	0801b4cc 	.word	0x0801b4cc

080110dc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80110dc:	b590      	push	{r4, r7, lr}
 80110de:	b09b      	sub	sp, #108	@ 0x6c
 80110e0:	af04      	add	r7, sp, #16
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	4611      	mov	r1, r2
 80110e8:	461a      	mov	r2, r3
 80110ea:	460b      	mov	r3, r1
 80110ec:	80fb      	strh	r3, [r7, #6]
 80110ee:	4613      	mov	r3, r2
 80110f0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80110f2:	2300      	movs	r3, #0
 80110f4:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80110fa:	2300      	movs	r3, #0
 80110fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110fe:	2300      	movs	r3, #0
 8011100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011102:	2300      	movs	r3, #0
 8011104:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011106:	2300      	movs	r3, #0
 8011108:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801110c:	2300      	movs	r3, #0
 801110e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011116:	2300      	movs	r3, #0
 8011118:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d109      	bne.n	8011138 <tcp_write+0x5c>
 8011124:	4ba4      	ldr	r3, [pc, #656]	@ (80113b8 <tcp_write+0x2dc>)
 8011126:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801112a:	49a4      	ldr	r1, [pc, #656]	@ (80113bc <tcp_write+0x2e0>)
 801112c:	48a4      	ldr	r0, [pc, #656]	@ (80113c0 <tcp_write+0x2e4>)
 801112e:	f007 f8e7 	bl	8018300 <iprintf>
 8011132:	f06f 030f 	mvn.w	r3, #15
 8011136:	e32a      	b.n	801178e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801113e:	085b      	lsrs	r3, r3, #1
 8011140:	b29a      	uxth	r2, r3
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011146:	4293      	cmp	r3, r2
 8011148:	bf28      	it	cs
 801114a:	4613      	movcs	r3, r2
 801114c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801114e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8011150:	2b00      	cmp	r3, #0
 8011152:	d102      	bne.n	801115a <tcp_write+0x7e>
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011158:	e000      	b.n	801115c <tcp_write+0x80>
 801115a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801115c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d109      	bne.n	8011178 <tcp_write+0x9c>
 8011164:	4b94      	ldr	r3, [pc, #592]	@ (80113b8 <tcp_write+0x2dc>)
 8011166:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801116a:	4996      	ldr	r1, [pc, #600]	@ (80113c4 <tcp_write+0x2e8>)
 801116c:	4894      	ldr	r0, [pc, #592]	@ (80113c0 <tcp_write+0x2e4>)
 801116e:	f007 f8c7 	bl	8018300 <iprintf>
 8011172:	f06f 030f 	mvn.w	r3, #15
 8011176:	e30a      	b.n	801178e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011178:	88fb      	ldrh	r3, [r7, #6]
 801117a:	4619      	mov	r1, r3
 801117c:	68f8      	ldr	r0, [r7, #12]
 801117e:	f7ff ff33 	bl	8010fe8 <tcp_write_checks>
 8011182:	4603      	mov	r3, r0
 8011184:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8011188:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801118c:	2b00      	cmp	r3, #0
 801118e:	d002      	beq.n	8011196 <tcp_write+0xba>
    return err;
 8011190:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8011194:	e2fb      	b.n	801178e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801119c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111a0:	2300      	movs	r3, #0
 80111a2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 80f6 	beq.w	801139c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80111b6:	e002      	b.n	80111be <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80111b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80111be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d1f8      	bne.n	80111b8 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80111c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111c8:	7a9b      	ldrb	r3, [r3, #10]
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	f003 0304 	and.w	r3, r3, #4
 80111d2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80111d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80111d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111d8:	891b      	ldrh	r3, [r3, #8]
 80111da:	4619      	mov	r1, r3
 80111dc:	8c3b      	ldrh	r3, [r7, #32]
 80111de:	440b      	add	r3, r1
 80111e0:	429a      	cmp	r2, r3
 80111e2:	da06      	bge.n	80111f2 <tcp_write+0x116>
 80111e4:	4b74      	ldr	r3, [pc, #464]	@ (80113b8 <tcp_write+0x2dc>)
 80111e6:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80111ea:	4977      	ldr	r1, [pc, #476]	@ (80113c8 <tcp_write+0x2ec>)
 80111ec:	4874      	ldr	r0, [pc, #464]	@ (80113c0 <tcp_write+0x2e4>)
 80111ee:	f007 f887 	bl	8018300 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80111f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80111f4:	891a      	ldrh	r2, [r3, #8]
 80111f6:	8c3b      	ldrh	r3, [r7, #32]
 80111f8:	4413      	add	r3, r2
 80111fa:	b29b      	uxth	r3, r3
 80111fc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80111fe:	1ad3      	subs	r3, r2, r3
 8011200:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011208:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801120a:	8a7b      	ldrh	r3, [r7, #18]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d026      	beq.n	801125e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011210:	8a7b      	ldrh	r3, [r7, #18]
 8011212:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011214:	429a      	cmp	r2, r3
 8011216:	d206      	bcs.n	8011226 <tcp_write+0x14a>
 8011218:	4b67      	ldr	r3, [pc, #412]	@ (80113b8 <tcp_write+0x2dc>)
 801121a:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801121e:	496b      	ldr	r1, [pc, #428]	@ (80113cc <tcp_write+0x2f0>)
 8011220:	4867      	ldr	r0, [pc, #412]	@ (80113c0 <tcp_write+0x2e4>)
 8011222:	f007 f86d 	bl	8018300 <iprintf>
      seg = last_unsent;
 8011226:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011228:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801122a:	8a7b      	ldrh	r3, [r7, #18]
 801122c:	88fa      	ldrh	r2, [r7, #6]
 801122e:	4293      	cmp	r3, r2
 8011230:	bf28      	it	cs
 8011232:	4613      	movcs	r3, r2
 8011234:	b29b      	uxth	r3, r3
 8011236:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011238:	4293      	cmp	r3, r2
 801123a:	bf28      	it	cs
 801123c:	4613      	movcs	r3, r2
 801123e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8011240:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011244:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011246:	4413      	add	r3, r2
 8011248:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 801124c:	8a7a      	ldrh	r2, [r7, #18]
 801124e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011250:	1ad3      	subs	r3, r2, r3
 8011252:	b29b      	uxth	r3, r3
 8011254:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011256:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8011258:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801125a:	1ad3      	subs	r3, r2, r3
 801125c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801125e:	8a7b      	ldrh	r3, [r7, #18]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00b      	beq.n	801127c <tcp_write+0x1a0>
 8011264:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011268:	88fb      	ldrh	r3, [r7, #6]
 801126a:	429a      	cmp	r2, r3
 801126c:	d006      	beq.n	801127c <tcp_write+0x1a0>
 801126e:	4b52      	ldr	r3, [pc, #328]	@ (80113b8 <tcp_write+0x2dc>)
 8011270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011274:	4956      	ldr	r1, [pc, #344]	@ (80113d0 <tcp_write+0x2f4>)
 8011276:	4852      	ldr	r0, [pc, #328]	@ (80113c0 <tcp_write+0x2e4>)
 8011278:	f007 f842 	bl	8018300 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801127c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011280:	88fb      	ldrh	r3, [r7, #6]
 8011282:	429a      	cmp	r2, r3
 8011284:	f080 8167 	bcs.w	8011556 <tcp_write+0x47a>
 8011288:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801128a:	2b00      	cmp	r3, #0
 801128c:	f000 8163 	beq.w	8011556 <tcp_write+0x47a>
 8011290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011292:	891b      	ldrh	r3, [r3, #8]
 8011294:	2b00      	cmp	r3, #0
 8011296:	f000 815e 	beq.w	8011556 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801129a:	88fa      	ldrh	r2, [r7, #6]
 801129c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80112a0:	1ad2      	subs	r2, r2, r3
 80112a2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80112a4:	4293      	cmp	r3, r2
 80112a6:	bfa8      	it	ge
 80112a8:	4613      	movge	r3, r2
 80112aa:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80112ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80112ae:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80112b0:	797b      	ldrb	r3, [r7, #5]
 80112b2:	f003 0301 	and.w	r3, r3, #1
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d027      	beq.n	801130a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80112ba:	f107 0012 	add.w	r0, r7, #18
 80112be:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80112c0:	8bf9      	ldrh	r1, [r7, #30]
 80112c2:	2301      	movs	r3, #1
 80112c4:	9302      	str	r3, [sp, #8]
 80112c6:	797b      	ldrb	r3, [r7, #5]
 80112c8:	9301      	str	r3, [sp, #4]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	9300      	str	r3, [sp, #0]
 80112ce:	4603      	mov	r3, r0
 80112d0:	2000      	movs	r0, #0
 80112d2:	f7ff fe0f 	bl	8010ef4 <tcp_pbuf_prealloc>
 80112d6:	6578      	str	r0, [r7, #84]	@ 0x54
 80112d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 8225 	beq.w	801172a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80112e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80112e2:	6858      	ldr	r0, [r3, #4]
 80112e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80112e8:	68ba      	ldr	r2, [r7, #8]
 80112ea:	4413      	add	r3, r2
 80112ec:	8bfa      	ldrh	r2, [r7, #30]
 80112ee:	4619      	mov	r1, r3
 80112f0:	f007 f8e1 	bl	80184b6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80112f4:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80112f6:	f7fb fdc7 	bl	800ce88 <pbuf_clen>
 80112fa:	4603      	mov	r3, r0
 80112fc:	461a      	mov	r2, r3
 80112fe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011302:	4413      	add	r3, r2
 8011304:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8011308:	e041      	b.n	801138e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801130a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011310:	e002      	b.n	8011318 <tcp_write+0x23c>
 8011312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	637b      	str	r3, [r7, #52]	@ 0x34
 8011318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1f8      	bne.n	8011312 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011322:	7b1b      	ldrb	r3, [r3, #12]
 8011324:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8011328:	2b00      	cmp	r3, #0
 801132a:	d115      	bne.n	8011358 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801132c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801132e:	685b      	ldr	r3, [r3, #4]
 8011330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011332:	8952      	ldrh	r2, [r2, #10]
 8011334:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8011336:	68ba      	ldr	r2, [r7, #8]
 8011338:	429a      	cmp	r2, r3
 801133a:	d10d      	bne.n	8011358 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801133c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011340:	2b00      	cmp	r3, #0
 8011342:	d006      	beq.n	8011352 <tcp_write+0x276>
 8011344:	4b1c      	ldr	r3, [pc, #112]	@ (80113b8 <tcp_write+0x2dc>)
 8011346:	f240 2231 	movw	r2, #561	@ 0x231
 801134a:	4922      	ldr	r1, [pc, #136]	@ (80113d4 <tcp_write+0x2f8>)
 801134c:	481c      	ldr	r0, [pc, #112]	@ (80113c0 <tcp_write+0x2e4>)
 801134e:	f006 ffd7 	bl	8018300 <iprintf>
          extendlen = seglen;
 8011352:	8bfb      	ldrh	r3, [r7, #30]
 8011354:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8011356:	e01a      	b.n	801138e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011358:	8bfb      	ldrh	r3, [r7, #30]
 801135a:	2201      	movs	r2, #1
 801135c:	4619      	mov	r1, r3
 801135e:	2000      	movs	r0, #0
 8011360:	f7fb fa20 	bl	800c7a4 <pbuf_alloc>
 8011364:	6578      	str	r0, [r7, #84]	@ 0x54
 8011366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011368:	2b00      	cmp	r3, #0
 801136a:	f000 81e0 	beq.w	801172e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801136e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011372:	68ba      	ldr	r2, [r7, #8]
 8011374:	441a      	add	r2, r3
 8011376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011378:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801137a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 801137c:	f7fb fd84 	bl	800ce88 <pbuf_clen>
 8011380:	4603      	mov	r3, r0
 8011382:	461a      	mov	r2, r3
 8011384:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8011388:	4413      	add	r3, r2
 801138a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801138e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011392:	8bfb      	ldrh	r3, [r7, #30]
 8011394:	4413      	add	r3, r2
 8011396:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801139a:	e0dc      	b.n	8011556 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	f000 80d7 	beq.w	8011556 <tcp_write+0x47a>
 80113a8:	4b03      	ldr	r3, [pc, #12]	@ (80113b8 <tcp_write+0x2dc>)
 80113aa:	f240 224a 	movw	r2, #586	@ 0x24a
 80113ae:	490a      	ldr	r1, [pc, #40]	@ (80113d8 <tcp_write+0x2fc>)
 80113b0:	4803      	ldr	r0, [pc, #12]	@ (80113c0 <tcp_write+0x2e4>)
 80113b2:	f006 ffa5 	bl	8018300 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80113b6:	e0ce      	b.n	8011556 <tcp_write+0x47a>
 80113b8:	0801b360 	.word	0x0801b360
 80113bc:	0801b500 	.word	0x0801b500
 80113c0:	0801b3b4 	.word	0x0801b3b4
 80113c4:	0801b518 	.word	0x0801b518
 80113c8:	0801b54c 	.word	0x0801b54c
 80113cc:	0801b564 	.word	0x0801b564
 80113d0:	0801b584 	.word	0x0801b584
 80113d4:	0801b5a4 	.word	0x0801b5a4
 80113d8:	0801b5d0 	.word	0x0801b5d0
    struct pbuf *p;
    u16_t left = len - pos;
 80113dc:	88fa      	ldrh	r2, [r7, #6]
 80113de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80113e2:	1ad3      	subs	r3, r2, r3
 80113e4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80113e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80113ee:	1ad3      	subs	r3, r2, r3
 80113f0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80113f2:	8b7a      	ldrh	r2, [r7, #26]
 80113f4:	8bbb      	ldrh	r3, [r7, #28]
 80113f6:	4293      	cmp	r3, r2
 80113f8:	bf28      	it	cs
 80113fa:	4613      	movcs	r3, r2
 80113fc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80113fe:	797b      	ldrb	r3, [r7, #5]
 8011400:	f003 0301 	and.w	r3, r3, #1
 8011404:	2b00      	cmp	r3, #0
 8011406:	d036      	beq.n	8011476 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011408:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801140c:	b29a      	uxth	r2, r3
 801140e:	8b3b      	ldrh	r3, [r7, #24]
 8011410:	4413      	add	r3, r2
 8011412:	b299      	uxth	r1, r3
 8011414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011416:	2b00      	cmp	r3, #0
 8011418:	bf0c      	ite	eq
 801141a:	2301      	moveq	r3, #1
 801141c:	2300      	movne	r3, #0
 801141e:	b2db      	uxtb	r3, r3
 8011420:	f107 0012 	add.w	r0, r7, #18
 8011424:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8011426:	9302      	str	r3, [sp, #8]
 8011428:	797b      	ldrb	r3, [r7, #5]
 801142a:	9301      	str	r3, [sp, #4]
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	9300      	str	r3, [sp, #0]
 8011430:	4603      	mov	r3, r0
 8011432:	2036      	movs	r0, #54	@ 0x36
 8011434:	f7ff fd5e 	bl	8010ef4 <tcp_pbuf_prealloc>
 8011438:	6338      	str	r0, [r7, #48]	@ 0x30
 801143a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801143c:	2b00      	cmp	r3, #0
 801143e:	f000 8178 	beq.w	8011732 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011444:	895b      	ldrh	r3, [r3, #10]
 8011446:	8b3a      	ldrh	r2, [r7, #24]
 8011448:	429a      	cmp	r2, r3
 801144a:	d906      	bls.n	801145a <tcp_write+0x37e>
 801144c:	4b8c      	ldr	r3, [pc, #560]	@ (8011680 <tcp_write+0x5a4>)
 801144e:	f240 2266 	movw	r2, #614	@ 0x266
 8011452:	498c      	ldr	r1, [pc, #560]	@ (8011684 <tcp_write+0x5a8>)
 8011454:	488c      	ldr	r0, [pc, #560]	@ (8011688 <tcp_write+0x5ac>)
 8011456:	f006 ff53 	bl	8018300 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801145a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801145c:	685a      	ldr	r2, [r3, #4]
 801145e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8011462:	18d0      	adds	r0, r2, r3
 8011464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011468:	68ba      	ldr	r2, [r7, #8]
 801146a:	4413      	add	r3, r2
 801146c:	8b3a      	ldrh	r2, [r7, #24]
 801146e:	4619      	mov	r1, r3
 8011470:	f007 f821 	bl	80184b6 <memcpy>
 8011474:	e02f      	b.n	80114d6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011476:	8a7b      	ldrh	r3, [r7, #18]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d006      	beq.n	801148a <tcp_write+0x3ae>
 801147c:	4b80      	ldr	r3, [pc, #512]	@ (8011680 <tcp_write+0x5a4>)
 801147e:	f240 2271 	movw	r2, #625	@ 0x271
 8011482:	4982      	ldr	r1, [pc, #520]	@ (801168c <tcp_write+0x5b0>)
 8011484:	4880      	ldr	r0, [pc, #512]	@ (8011688 <tcp_write+0x5ac>)
 8011486:	f006 ff3b 	bl	8018300 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801148a:	8b3b      	ldrh	r3, [r7, #24]
 801148c:	2201      	movs	r2, #1
 801148e:	4619      	mov	r1, r3
 8011490:	2036      	movs	r0, #54	@ 0x36
 8011492:	f7fb f987 	bl	800c7a4 <pbuf_alloc>
 8011496:	6178      	str	r0, [r7, #20]
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	2b00      	cmp	r3, #0
 801149c:	f000 814b 	beq.w	8011736 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80114a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80114a4:	68ba      	ldr	r2, [r7, #8]
 80114a6:	441a      	add	r2, r3
 80114a8:	697b      	ldr	r3, [r7, #20]
 80114aa:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80114ac:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80114b6:	4619      	mov	r1, r3
 80114b8:	2036      	movs	r0, #54	@ 0x36
 80114ba:	f7fb f973 	bl	800c7a4 <pbuf_alloc>
 80114be:	6338      	str	r0, [r7, #48]	@ 0x30
 80114c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d103      	bne.n	80114ce <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80114c6:	6978      	ldr	r0, [r7, #20]
 80114c8:	f7fb fc50 	bl	800cd6c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80114cc:	e136      	b.n	801173c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80114ce:	6979      	ldr	r1, [r7, #20]
 80114d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80114d2:	f7fb fd19 	bl	800cf08 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80114d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80114d8:	f7fb fcd6 	bl	800ce88 <pbuf_clen>
 80114dc:	4603      	mov	r3, r0
 80114de:	461a      	mov	r2, r3
 80114e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80114e4:	4413      	add	r3, r2
 80114e6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80114ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80114ee:	2b08      	cmp	r3, #8
 80114f0:	d903      	bls.n	80114fa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80114f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80114f4:	f7fb fc3a 	bl	800cd6c <pbuf_free>
      goto memerr;
 80114f8:	e120      	b.n	801173c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80114fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011502:	441a      	add	r2, r3
 8011504:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011508:	9300      	str	r3, [sp, #0]
 801150a:	4613      	mov	r3, r2
 801150c:	2200      	movs	r2, #0
 801150e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8011510:	68f8      	ldr	r0, [r7, #12]
 8011512:	f7ff fc53 	bl	8010dbc <tcp_create_segment>
 8011516:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8011518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801151a:	2b00      	cmp	r3, #0
 801151c:	f000 810d 	beq.w	801173a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011522:	2b00      	cmp	r3, #0
 8011524:	d102      	bne.n	801152c <tcp_write+0x450>
      queue = seg;
 8011526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011528:	647b      	str	r3, [r7, #68]	@ 0x44
 801152a:	e00c      	b.n	8011546 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801152c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801152e:	2b00      	cmp	r3, #0
 8011530:	d106      	bne.n	8011540 <tcp_write+0x464>
 8011532:	4b53      	ldr	r3, [pc, #332]	@ (8011680 <tcp_write+0x5a4>)
 8011534:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8011538:	4955      	ldr	r1, [pc, #340]	@ (8011690 <tcp_write+0x5b4>)
 801153a:	4853      	ldr	r0, [pc, #332]	@ (8011688 <tcp_write+0x5ac>)
 801153c:	f006 fee0 	bl	8018300 <iprintf>
      prev_seg->next = seg;
 8011540:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011542:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011544:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011548:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801154a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801154e:	8b3b      	ldrh	r3, [r7, #24]
 8011550:	4413      	add	r3, r2
 8011552:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8011556:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801155a:	88fb      	ldrh	r3, [r7, #6]
 801155c:	429a      	cmp	r2, r3
 801155e:	f4ff af3d 	bcc.w	80113dc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011562:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011564:	2b00      	cmp	r3, #0
 8011566:	d02c      	beq.n	80115c2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801156a:	685b      	ldr	r3, [r3, #4]
 801156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801156e:	e01e      	b.n	80115ae <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8011570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011572:	891a      	ldrh	r2, [r3, #8]
 8011574:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8011576:	4413      	add	r3, r2
 8011578:	b29a      	uxth	r2, r3
 801157a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801157c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801157e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d110      	bne.n	80115a8 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801158c:	8952      	ldrh	r2, [r2, #10]
 801158e:	4413      	add	r3, r2
 8011590:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8011592:	68b9      	ldr	r1, [r7, #8]
 8011594:	4618      	mov	r0, r3
 8011596:	f006 ff8e 	bl	80184b6 <memcpy>
        p->len += oversize_used;
 801159a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801159c:	895a      	ldrh	r2, [r3, #10]
 801159e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80115a0:	4413      	add	r3, r2
 80115a2:	b29a      	uxth	r2, r3
 80115a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115a6:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80115a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80115ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d1dd      	bne.n	8011570 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80115b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115b6:	891a      	ldrh	r2, [r3, #8]
 80115b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80115ba:	4413      	add	r3, r2
 80115bc:	b29a      	uxth	r2, r3
 80115be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115c0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80115c2:	8a7a      	ldrh	r2, [r7, #18]
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80115ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d018      	beq.n	8011602 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80115d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d106      	bne.n	80115e4 <tcp_write+0x508>
 80115d6:	4b2a      	ldr	r3, [pc, #168]	@ (8011680 <tcp_write+0x5a4>)
 80115d8:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80115dc:	492d      	ldr	r1, [pc, #180]	@ (8011694 <tcp_write+0x5b8>)
 80115de:	482a      	ldr	r0, [pc, #168]	@ (8011688 <tcp_write+0x5ac>)
 80115e0:	f006 fe8e 	bl	8018300 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80115e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115e6:	685b      	ldr	r3, [r3, #4]
 80115e8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fb fc8c 	bl	800cf08 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80115f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115f2:	891a      	ldrh	r2, [r3, #8]
 80115f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115f6:	891b      	ldrh	r3, [r3, #8]
 80115f8:	4413      	add	r3, r2
 80115fa:	b29a      	uxth	r2, r3
 80115fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115fe:	811a      	strh	r2, [r3, #8]
 8011600:	e037      	b.n	8011672 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011602:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011604:	2b00      	cmp	r3, #0
 8011606:	d034      	beq.n	8011672 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011608:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801160a:	2b00      	cmp	r3, #0
 801160c:	d003      	beq.n	8011616 <tcp_write+0x53a>
 801160e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011610:	685b      	ldr	r3, [r3, #4]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d106      	bne.n	8011624 <tcp_write+0x548>
 8011616:	4b1a      	ldr	r3, [pc, #104]	@ (8011680 <tcp_write+0x5a4>)
 8011618:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801161c:	491e      	ldr	r1, [pc, #120]	@ (8011698 <tcp_write+0x5bc>)
 801161e:	481a      	ldr	r0, [pc, #104]	@ (8011688 <tcp_write+0x5ac>)
 8011620:	f006 fe6e 	bl	8018300 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011626:	685b      	ldr	r3, [r3, #4]
 8011628:	62bb      	str	r3, [r7, #40]	@ 0x28
 801162a:	e009      	b.n	8011640 <tcp_write+0x564>
      p->tot_len += extendlen;
 801162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801162e:	891a      	ldrh	r2, [r3, #8]
 8011630:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8011632:	4413      	add	r3, r2
 8011634:	b29a      	uxth	r2, r3
 8011636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011638:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801163a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d1f1      	bne.n	801162c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8011648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801164a:	891a      	ldrh	r2, [r3, #8]
 801164c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801164e:	4413      	add	r3, r2
 8011650:	b29a      	uxth	r2, r3
 8011652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011654:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011658:	895a      	ldrh	r2, [r3, #10]
 801165a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801165c:	4413      	add	r3, r2
 801165e:	b29a      	uxth	r2, r3
 8011660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011662:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011666:	891a      	ldrh	r2, [r3, #8]
 8011668:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801166a:	4413      	add	r3, r2
 801166c:	b29a      	uxth	r2, r3
 801166e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011670:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011674:	2b00      	cmp	r3, #0
 8011676:	d111      	bne.n	801169c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801167c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801167e:	e010      	b.n	80116a2 <tcp_write+0x5c6>
 8011680:	0801b360 	.word	0x0801b360
 8011684:	0801b600 	.word	0x0801b600
 8011688:	0801b3b4 	.word	0x0801b3b4
 801168c:	0801b640 	.word	0x0801b640
 8011690:	0801b650 	.word	0x0801b650
 8011694:	0801b664 	.word	0x0801b664
 8011698:	0801b69c 	.word	0x0801b69c
  } else {
    last_unsent->next = queue;
 801169c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801169e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80116a0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80116a6:	88fb      	ldrh	r3, [r7, #6]
 80116a8:	441a      	add	r2, r3
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80116b4:	88fb      	ldrh	r3, [r7, #6]
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	68fb      	ldr	r3, [r7, #12]
 80116bc:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80116c6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d00e      	beq.n	80116f2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80116d8:	2b00      	cmp	r3, #0
 80116da:	d10a      	bne.n	80116f2 <tcp_write+0x616>
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d106      	bne.n	80116f2 <tcp_write+0x616>
 80116e4:	4b2c      	ldr	r3, [pc, #176]	@ (8011798 <tcp_write+0x6bc>)
 80116e6:	f240 3212 	movw	r2, #786	@ 0x312
 80116ea:	492c      	ldr	r1, [pc, #176]	@ (801179c <tcp_write+0x6c0>)
 80116ec:	482c      	ldr	r0, [pc, #176]	@ (80117a0 <tcp_write+0x6c4>)
 80116ee:	f006 fe07 	bl	8018300 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80116f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d016      	beq.n	8011726 <tcp_write+0x64a>
 80116f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d012      	beq.n	8011726 <tcp_write+0x64a>
 8011700:	797b      	ldrb	r3, [r7, #5]
 8011702:	f003 0302 	and.w	r3, r3, #2
 8011706:	2b00      	cmp	r3, #0
 8011708:	d10d      	bne.n	8011726 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801170a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	899b      	ldrh	r3, [r3, #12]
 8011710:	b29c      	uxth	r4, r3
 8011712:	2008      	movs	r0, #8
 8011714:	f7f9 fe54 	bl	800b3c0 <lwip_htons>
 8011718:	4603      	mov	r3, r0
 801171a:	461a      	mov	r2, r3
 801171c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	4322      	orrs	r2, r4
 8011722:	b292      	uxth	r2, r2
 8011724:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011726:	2300      	movs	r3, #0
 8011728:	e031      	b.n	801178e <tcp_write+0x6b2>
          goto memerr;
 801172a:	bf00      	nop
 801172c:	e006      	b.n	801173c <tcp_write+0x660>
            goto memerr;
 801172e:	bf00      	nop
 8011730:	e004      	b.n	801173c <tcp_write+0x660>
        goto memerr;
 8011732:	bf00      	nop
 8011734:	e002      	b.n	801173c <tcp_write+0x660>
        goto memerr;
 8011736:	bf00      	nop
 8011738:	e000      	b.n	801173c <tcp_write+0x660>
      goto memerr;
 801173a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	8b5b      	ldrh	r3, [r3, #26]
 8011740:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011744:	b29a      	uxth	r2, r3
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801174a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801174c:	2b00      	cmp	r3, #0
 801174e:	d002      	beq.n	8011756 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8011750:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8011752:	f7fb fb0b 	bl	800cd6c <pbuf_free>
  }
  if (queue != NULL) {
 8011756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011758:	2b00      	cmp	r3, #0
 801175a:	d002      	beq.n	8011762 <tcp_write+0x686>
    tcp_segs_free(queue);
 801175c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801175e:	f7fc ff69 	bl	800e634 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011768:	2b00      	cmp	r3, #0
 801176a:	d00e      	beq.n	801178a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011770:	2b00      	cmp	r3, #0
 8011772:	d10a      	bne.n	801178a <tcp_write+0x6ae>
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011778:	2b00      	cmp	r3, #0
 801177a:	d106      	bne.n	801178a <tcp_write+0x6ae>
 801177c:	4b06      	ldr	r3, [pc, #24]	@ (8011798 <tcp_write+0x6bc>)
 801177e:	f240 3227 	movw	r2, #807	@ 0x327
 8011782:	4906      	ldr	r1, [pc, #24]	@ (801179c <tcp_write+0x6c0>)
 8011784:	4806      	ldr	r0, [pc, #24]	@ (80117a0 <tcp_write+0x6c4>)
 8011786:	f006 fdbb 	bl	8018300 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801178e:	4618      	mov	r0, r3
 8011790:	375c      	adds	r7, #92	@ 0x5c
 8011792:	46bd      	mov	sp, r7
 8011794:	bd90      	pop	{r4, r7, pc}
 8011796:	bf00      	nop
 8011798:	0801b360 	.word	0x0801b360
 801179c:	0801b6d4 	.word	0x0801b6d4
 80117a0:	0801b3b4 	.word	0x0801b3b4

080117a4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80117a4:	b590      	push	{r4, r7, lr}
 80117a6:	b08b      	sub	sp, #44	@ 0x2c
 80117a8:	af02      	add	r7, sp, #8
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	460b      	mov	r3, r1
 80117ae:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80117b0:	2300      	movs	r3, #0
 80117b2:	61fb      	str	r3, [r7, #28]
 80117b4:	2300      	movs	r3, #0
 80117b6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80117b8:	2300      	movs	r3, #0
 80117ba:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d106      	bne.n	80117d0 <tcp_split_unsent_seg+0x2c>
 80117c2:	4b95      	ldr	r3, [pc, #596]	@ (8011a18 <tcp_split_unsent_seg+0x274>)
 80117c4:	f240 324b 	movw	r2, #843	@ 0x34b
 80117c8:	4994      	ldr	r1, [pc, #592]	@ (8011a1c <tcp_split_unsent_seg+0x278>)
 80117ca:	4895      	ldr	r0, [pc, #596]	@ (8011a20 <tcp_split_unsent_seg+0x27c>)
 80117cc:	f006 fd98 	bl	8018300 <iprintf>

  useg = pcb->unsent;
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117d4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80117d6:	697b      	ldr	r3, [r7, #20]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d102      	bne.n	80117e2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80117dc:	f04f 33ff 	mov.w	r3, #4294967295
 80117e0:	e116      	b.n	8011a10 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80117e2:	887b      	ldrh	r3, [r7, #2]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d109      	bne.n	80117fc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80117e8:	4b8b      	ldr	r3, [pc, #556]	@ (8011a18 <tcp_split_unsent_seg+0x274>)
 80117ea:	f240 3253 	movw	r2, #851	@ 0x353
 80117ee:	498d      	ldr	r1, [pc, #564]	@ (8011a24 <tcp_split_unsent_seg+0x280>)
 80117f0:	488b      	ldr	r0, [pc, #556]	@ (8011a20 <tcp_split_unsent_seg+0x27c>)
 80117f2:	f006 fd85 	bl	8018300 <iprintf>
    return ERR_VAL;
 80117f6:	f06f 0305 	mvn.w	r3, #5
 80117fa:	e109      	b.n	8011a10 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80117fc:	697b      	ldr	r3, [r7, #20]
 80117fe:	891b      	ldrh	r3, [r3, #8]
 8011800:	887a      	ldrh	r2, [r7, #2]
 8011802:	429a      	cmp	r2, r3
 8011804:	d301      	bcc.n	801180a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011806:	2300      	movs	r3, #0
 8011808:	e102      	b.n	8011a10 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801180e:	887a      	ldrh	r2, [r7, #2]
 8011810:	429a      	cmp	r2, r3
 8011812:	d906      	bls.n	8011822 <tcp_split_unsent_seg+0x7e>
 8011814:	4b80      	ldr	r3, [pc, #512]	@ (8011a18 <tcp_split_unsent_seg+0x274>)
 8011816:	f240 325b 	movw	r2, #859	@ 0x35b
 801181a:	4983      	ldr	r1, [pc, #524]	@ (8011a28 <tcp_split_unsent_seg+0x284>)
 801181c:	4880      	ldr	r0, [pc, #512]	@ (8011a20 <tcp_split_unsent_seg+0x27c>)
 801181e:	f006 fd6f 	bl	8018300 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	891b      	ldrh	r3, [r3, #8]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d106      	bne.n	8011838 <tcp_split_unsent_seg+0x94>
 801182a:	4b7b      	ldr	r3, [pc, #492]	@ (8011a18 <tcp_split_unsent_seg+0x274>)
 801182c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8011830:	497e      	ldr	r1, [pc, #504]	@ (8011a2c <tcp_split_unsent_seg+0x288>)
 8011832:	487b      	ldr	r0, [pc, #492]	@ (8011a20 <tcp_split_unsent_seg+0x27c>)
 8011834:	f006 fd64 	bl	8018300 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	7a9b      	ldrb	r3, [r3, #10]
 801183c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801183e:	7bfb      	ldrb	r3, [r7, #15]
 8011840:	009b      	lsls	r3, r3, #2
 8011842:	b2db      	uxtb	r3, r3
 8011844:	f003 0304 	and.w	r3, r3, #4
 8011848:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801184a:	697b      	ldr	r3, [r7, #20]
 801184c:	891a      	ldrh	r2, [r3, #8]
 801184e:	887b      	ldrh	r3, [r7, #2]
 8011850:	1ad3      	subs	r3, r2, r3
 8011852:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011854:	7bbb      	ldrb	r3, [r7, #14]
 8011856:	b29a      	uxth	r2, r3
 8011858:	89bb      	ldrh	r3, [r7, #12]
 801185a:	4413      	add	r3, r2
 801185c:	b29b      	uxth	r3, r3
 801185e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011862:	4619      	mov	r1, r3
 8011864:	2036      	movs	r0, #54	@ 0x36
 8011866:	f7fa ff9d 	bl	800c7a4 <pbuf_alloc>
 801186a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801186c:	693b      	ldr	r3, [r7, #16]
 801186e:	2b00      	cmp	r3, #0
 8011870:	f000 80b7 	beq.w	80119e2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011874:	697b      	ldr	r3, [r7, #20]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	891a      	ldrh	r2, [r3, #8]
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	891b      	ldrh	r3, [r3, #8]
 801187e:	1ad3      	subs	r3, r2, r3
 8011880:	b29a      	uxth	r2, r3
 8011882:	887b      	ldrh	r3, [r7, #2]
 8011884:	4413      	add	r3, r2
 8011886:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	6858      	ldr	r0, [r3, #4]
 801188c:	693b      	ldr	r3, [r7, #16]
 801188e:	685a      	ldr	r2, [r3, #4]
 8011890:	7bbb      	ldrb	r3, [r7, #14]
 8011892:	18d1      	adds	r1, r2, r3
 8011894:	897b      	ldrh	r3, [r7, #10]
 8011896:	89ba      	ldrh	r2, [r7, #12]
 8011898:	f7fb fc6e 	bl	800d178 <pbuf_copy_partial>
 801189c:	4603      	mov	r3, r0
 801189e:	461a      	mov	r2, r3
 80118a0:	89bb      	ldrh	r3, [r7, #12]
 80118a2:	4293      	cmp	r3, r2
 80118a4:	f040 809f 	bne.w	80119e6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	68db      	ldr	r3, [r3, #12]
 80118ac:	899b      	ldrh	r3, [r3, #12]
 80118ae:	b29b      	uxth	r3, r3
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7f9 fd85 	bl	800b3c0 <lwip_htons>
 80118b6:	4603      	mov	r3, r0
 80118b8:	b2db      	uxtb	r3, r3
 80118ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80118be:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80118c0:	2300      	movs	r3, #0
 80118c2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80118c4:	7efb      	ldrb	r3, [r7, #27]
 80118c6:	f003 0308 	and.w	r3, r3, #8
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d007      	beq.n	80118de <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80118ce:	7efb      	ldrb	r3, [r7, #27]
 80118d0:	f023 0308 	bic.w	r3, r3, #8
 80118d4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80118d6:	7ebb      	ldrb	r3, [r7, #26]
 80118d8:	f043 0308 	orr.w	r3, r3, #8
 80118dc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80118de:	7efb      	ldrb	r3, [r7, #27]
 80118e0:	f003 0301 	and.w	r3, r3, #1
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d007      	beq.n	80118f8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80118e8:	7efb      	ldrb	r3, [r7, #27]
 80118ea:	f023 0301 	bic.w	r3, r3, #1
 80118ee:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80118f0:	7ebb      	ldrb	r3, [r7, #26]
 80118f2:	f043 0301 	orr.w	r3, r3, #1
 80118f6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	68db      	ldr	r3, [r3, #12]
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	4618      	mov	r0, r3
 8011900:	f7f9 fd73 	bl	800b3ea <lwip_htonl>
 8011904:	4602      	mov	r2, r0
 8011906:	887b      	ldrh	r3, [r7, #2]
 8011908:	18d1      	adds	r1, r2, r3
 801190a:	7eba      	ldrb	r2, [r7, #26]
 801190c:	7bfb      	ldrb	r3, [r7, #15]
 801190e:	9300      	str	r3, [sp, #0]
 8011910:	460b      	mov	r3, r1
 8011912:	6939      	ldr	r1, [r7, #16]
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f7ff fa51 	bl	8010dbc <tcp_create_segment>
 801191a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d063      	beq.n	80119ea <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	4618      	mov	r0, r3
 8011928:	f7fb faae 	bl	800ce88 <pbuf_clen>
 801192c:	4603      	mov	r3, r0
 801192e:	461a      	mov	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011936:	1a9b      	subs	r3, r3, r2
 8011938:	b29a      	uxth	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011940:	697b      	ldr	r3, [r7, #20]
 8011942:	6858      	ldr	r0, [r3, #4]
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	685b      	ldr	r3, [r3, #4]
 8011948:	891a      	ldrh	r2, [r3, #8]
 801194a:	89bb      	ldrh	r3, [r7, #12]
 801194c:	1ad3      	subs	r3, r2, r3
 801194e:	b29b      	uxth	r3, r3
 8011950:	4619      	mov	r1, r3
 8011952:	f7fb f885 	bl	800ca60 <pbuf_realloc>
  useg->len -= remainder;
 8011956:	697b      	ldr	r3, [r7, #20]
 8011958:	891a      	ldrh	r2, [r3, #8]
 801195a:	89bb      	ldrh	r3, [r7, #12]
 801195c:	1ad3      	subs	r3, r2, r3
 801195e:	b29a      	uxth	r2, r3
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	899b      	ldrh	r3, [r3, #12]
 801196a:	b29c      	uxth	r4, r3
 801196c:	7efb      	ldrb	r3, [r7, #27]
 801196e:	b29b      	uxth	r3, r3
 8011970:	4618      	mov	r0, r3
 8011972:	f7f9 fd25 	bl	800b3c0 <lwip_htons>
 8011976:	4603      	mov	r3, r0
 8011978:	461a      	mov	r2, r3
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	68db      	ldr	r3, [r3, #12]
 801197e:	4322      	orrs	r2, r4
 8011980:	b292      	uxth	r2, r2
 8011982:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	4618      	mov	r0, r3
 801198a:	f7fb fa7d 	bl	800ce88 <pbuf_clen>
 801198e:	4603      	mov	r3, r0
 8011990:	461a      	mov	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011998:	4413      	add	r3, r2
 801199a:	b29a      	uxth	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80119a2:	69fb      	ldr	r3, [r7, #28]
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fb fa6e 	bl	800ce88 <pbuf_clen>
 80119ac:	4603      	mov	r3, r0
 80119ae:	461a      	mov	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80119b6:	4413      	add	r3, r2
 80119b8:	b29a      	uxth	r2, r3
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	69fa      	ldr	r2, [r7, #28]
 80119cc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80119ce:	69fb      	ldr	r3, [r7, #28]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d103      	bne.n	80119de <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80119de:	2300      	movs	r3, #0
 80119e0:	e016      	b.n	8011a10 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80119e2:	bf00      	nop
 80119e4:	e002      	b.n	80119ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119e6:	bf00      	nop
 80119e8:	e000      	b.n	80119ec <tcp_split_unsent_seg+0x248>
    goto memerr;
 80119ea:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80119ec:	69fb      	ldr	r3, [r7, #28]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d006      	beq.n	8011a00 <tcp_split_unsent_seg+0x25c>
 80119f2:	4b09      	ldr	r3, [pc, #36]	@ (8011a18 <tcp_split_unsent_seg+0x274>)
 80119f4:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80119f8:	490d      	ldr	r1, [pc, #52]	@ (8011a30 <tcp_split_unsent_seg+0x28c>)
 80119fa:	4809      	ldr	r0, [pc, #36]	@ (8011a20 <tcp_split_unsent_seg+0x27c>)
 80119fc:	f006 fc80 	bl	8018300 <iprintf>
  if (p != NULL) {
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d002      	beq.n	8011a0c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011a06:	6938      	ldr	r0, [r7, #16]
 8011a08:	f7fb f9b0 	bl	800cd6c <pbuf_free>
  }

  return ERR_MEM;
 8011a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3724      	adds	r7, #36	@ 0x24
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd90      	pop	{r4, r7, pc}
 8011a18:	0801b360 	.word	0x0801b360
 8011a1c:	0801b6f4 	.word	0x0801b6f4
 8011a20:	0801b3b4 	.word	0x0801b3b4
 8011a24:	0801b718 	.word	0x0801b718
 8011a28:	0801b73c 	.word	0x0801b73c
 8011a2c:	0801b74c 	.word	0x0801b74c
 8011a30:	0801b75c 	.word	0x0801b75c

08011a34 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011a34:	b590      	push	{r4, r7, lr}
 8011a36:	b085      	sub	sp, #20
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d106      	bne.n	8011a50 <tcp_send_fin+0x1c>
 8011a42:	4b21      	ldr	r3, [pc, #132]	@ (8011ac8 <tcp_send_fin+0x94>)
 8011a44:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8011a48:	4920      	ldr	r1, [pc, #128]	@ (8011acc <tcp_send_fin+0x98>)
 8011a4a:	4821      	ldr	r0, [pc, #132]	@ (8011ad0 <tcp_send_fin+0x9c>)
 8011a4c:	f006 fc58 	bl	8018300 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d02e      	beq.n	8011ab6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a5c:	60fb      	str	r3, [r7, #12]
 8011a5e:	e002      	b.n	8011a66 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d1f8      	bne.n	8011a60 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	68db      	ldr	r3, [r3, #12]
 8011a72:	899b      	ldrh	r3, [r3, #12]
 8011a74:	b29b      	uxth	r3, r3
 8011a76:	4618      	mov	r0, r3
 8011a78:	f7f9 fca2 	bl	800b3c0 <lwip_htons>
 8011a7c:	4603      	mov	r3, r0
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	f003 0307 	and.w	r3, r3, #7
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d116      	bne.n	8011ab6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	68db      	ldr	r3, [r3, #12]
 8011a8c:	899b      	ldrh	r3, [r3, #12]
 8011a8e:	b29c      	uxth	r4, r3
 8011a90:	2001      	movs	r0, #1
 8011a92:	f7f9 fc95 	bl	800b3c0 <lwip_htons>
 8011a96:	4603      	mov	r3, r0
 8011a98:	461a      	mov	r2, r3
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	68db      	ldr	r3, [r3, #12]
 8011a9e:	4322      	orrs	r2, r4
 8011aa0:	b292      	uxth	r2, r2
 8011aa2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	8b5b      	ldrh	r3, [r3, #26]
 8011aa8:	f043 0320 	orr.w	r3, r3, #32
 8011aac:	b29a      	uxth	r2, r3
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	e004      	b.n	8011ac0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011ab6:	2101      	movs	r1, #1
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 f80b 	bl	8011ad4 <tcp_enqueue_flags>
 8011abe:	4603      	mov	r3, r0
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	3714      	adds	r7, #20
 8011ac4:	46bd      	mov	sp, r7
 8011ac6:	bd90      	pop	{r4, r7, pc}
 8011ac8:	0801b360 	.word	0x0801b360
 8011acc:	0801b768 	.word	0x0801b768
 8011ad0:	0801b3b4 	.word	0x0801b3b4

08011ad4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b08a      	sub	sp, #40	@ 0x28
 8011ad8:	af02      	add	r7, sp, #8
 8011ada:	6078      	str	r0, [r7, #4]
 8011adc:	460b      	mov	r3, r1
 8011ade:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011ae8:	78fb      	ldrb	r3, [r7, #3]
 8011aea:	f003 0303 	and.w	r3, r3, #3
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d106      	bne.n	8011b00 <tcp_enqueue_flags+0x2c>
 8011af2:	4b67      	ldr	r3, [pc, #412]	@ (8011c90 <tcp_enqueue_flags+0x1bc>)
 8011af4:	f240 4211 	movw	r2, #1041	@ 0x411
 8011af8:	4966      	ldr	r1, [pc, #408]	@ (8011c94 <tcp_enqueue_flags+0x1c0>)
 8011afa:	4867      	ldr	r0, [pc, #412]	@ (8011c98 <tcp_enqueue_flags+0x1c4>)
 8011afc:	f006 fc00 	bl	8018300 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d106      	bne.n	8011b14 <tcp_enqueue_flags+0x40>
 8011b06:	4b62      	ldr	r3, [pc, #392]	@ (8011c90 <tcp_enqueue_flags+0x1bc>)
 8011b08:	f240 4213 	movw	r2, #1043	@ 0x413
 8011b0c:	4963      	ldr	r1, [pc, #396]	@ (8011c9c <tcp_enqueue_flags+0x1c8>)
 8011b0e:	4862      	ldr	r0, [pc, #392]	@ (8011c98 <tcp_enqueue_flags+0x1c4>)
 8011b10:	f006 fbf6 	bl	8018300 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011b14:	78fb      	ldrb	r3, [r7, #3]
 8011b16:	f003 0302 	and.w	r3, r3, #2
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d001      	beq.n	8011b22 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011b1e:	2301      	movs	r3, #1
 8011b20:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b22:	7ffb      	ldrb	r3, [r7, #31]
 8011b24:	009b      	lsls	r3, r3, #2
 8011b26:	b2db      	uxtb	r3, r3
 8011b28:	f003 0304 	and.w	r3, r3, #4
 8011b2c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011b2e:	7dfb      	ldrb	r3, [r7, #23]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8011b36:	4619      	mov	r1, r3
 8011b38:	2036      	movs	r0, #54	@ 0x36
 8011b3a:	f7fa fe33 	bl	800c7a4 <pbuf_alloc>
 8011b3e:	6138      	str	r0, [r7, #16]
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d109      	bne.n	8011b5a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	8b5b      	ldrh	r3, [r3, #26]
 8011b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b4e:	b29a      	uxth	r2, r3
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b54:	f04f 33ff 	mov.w	r3, #4294967295
 8011b58:	e095      	b.n	8011c86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	895a      	ldrh	r2, [r3, #10]
 8011b5e:	7dfb      	ldrb	r3, [r7, #23]
 8011b60:	b29b      	uxth	r3, r3
 8011b62:	429a      	cmp	r2, r3
 8011b64:	d206      	bcs.n	8011b74 <tcp_enqueue_flags+0xa0>
 8011b66:	4b4a      	ldr	r3, [pc, #296]	@ (8011c90 <tcp_enqueue_flags+0x1bc>)
 8011b68:	f240 4239 	movw	r2, #1081	@ 0x439
 8011b6c:	494c      	ldr	r1, [pc, #304]	@ (8011ca0 <tcp_enqueue_flags+0x1cc>)
 8011b6e:	484a      	ldr	r0, [pc, #296]	@ (8011c98 <tcp_enqueue_flags+0x1c4>)
 8011b70:	f006 fbc6 	bl	8018300 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011b78:	78fa      	ldrb	r2, [r7, #3]
 8011b7a:	7ffb      	ldrb	r3, [r7, #31]
 8011b7c:	9300      	str	r3, [sp, #0]
 8011b7e:	460b      	mov	r3, r1
 8011b80:	6939      	ldr	r1, [r7, #16]
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ff f91a 	bl	8010dbc <tcp_create_segment>
 8011b88:	60f8      	str	r0, [r7, #12]
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d109      	bne.n	8011ba4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	8b5b      	ldrh	r3, [r3, #26]
 8011b94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba2:	e070      	b.n	8011c86 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	f003 0303 	and.w	r3, r3, #3
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d006      	beq.n	8011bbe <tcp_enqueue_flags+0xea>
 8011bb0:	4b37      	ldr	r3, [pc, #220]	@ (8011c90 <tcp_enqueue_flags+0x1bc>)
 8011bb2:	f240 4242 	movw	r2, #1090	@ 0x442
 8011bb6:	493b      	ldr	r1, [pc, #236]	@ (8011ca4 <tcp_enqueue_flags+0x1d0>)
 8011bb8:	4837      	ldr	r0, [pc, #220]	@ (8011c98 <tcp_enqueue_flags+0x1c4>)
 8011bba:	f006 fba1 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	891b      	ldrh	r3, [r3, #8]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d006      	beq.n	8011bd4 <tcp_enqueue_flags+0x100>
 8011bc6:	4b32      	ldr	r3, [pc, #200]	@ (8011c90 <tcp_enqueue_flags+0x1bc>)
 8011bc8:	f240 4243 	movw	r2, #1091	@ 0x443
 8011bcc:	4936      	ldr	r1, [pc, #216]	@ (8011ca8 <tcp_enqueue_flags+0x1d4>)
 8011bce:	4832      	ldr	r0, [pc, #200]	@ (8011c98 <tcp_enqueue_flags+0x1c4>)
 8011bd0:	f006 fb96 	bl	8018300 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d103      	bne.n	8011be4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8011be2:	e00d      	b.n	8011c00 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011be8:	61bb      	str	r3, [r7, #24]
 8011bea:	e002      	b.n	8011bf2 <tcp_enqueue_flags+0x11e>
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	69bb      	ldr	r3, [r7, #24]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d1f8      	bne.n	8011bec <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011bfa:	69bb      	ldr	r3, [r7, #24]
 8011bfc:	68fa      	ldr	r2, [r7, #12]
 8011bfe:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011c08:	78fb      	ldrb	r3, [r7, #3]
 8011c0a:	f003 0302 	and.w	r3, r3, #2
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d104      	bne.n	8011c1c <tcp_enqueue_flags+0x148>
 8011c12:	78fb      	ldrb	r3, [r7, #3]
 8011c14:	f003 0301 	and.w	r3, r3, #1
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d004      	beq.n	8011c26 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8011c20:	1c5a      	adds	r2, r3, #1
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011c26:	78fb      	ldrb	r3, [r7, #3]
 8011c28:	f003 0301 	and.w	r3, r3, #1
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d006      	beq.n	8011c3e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	8b5b      	ldrh	r3, [r3, #26]
 8011c34:	f043 0320 	orr.w	r3, r3, #32
 8011c38:	b29a      	uxth	r2, r3
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	685b      	ldr	r3, [r3, #4]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7fb f920 	bl	800ce88 <pbuf_clen>
 8011c48:	4603      	mov	r3, r0
 8011c4a:	461a      	mov	r2, r3
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c52:	4413      	add	r3, r2
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d00e      	beq.n	8011c84 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d10a      	bne.n	8011c84 <tcp_enqueue_flags+0x1b0>
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d106      	bne.n	8011c84 <tcp_enqueue_flags+0x1b0>
 8011c76:	4b06      	ldr	r3, [pc, #24]	@ (8011c90 <tcp_enqueue_flags+0x1bc>)
 8011c78:	f240 4265 	movw	r2, #1125	@ 0x465
 8011c7c:	490b      	ldr	r1, [pc, #44]	@ (8011cac <tcp_enqueue_flags+0x1d8>)
 8011c7e:	4806      	ldr	r0, [pc, #24]	@ (8011c98 <tcp_enqueue_flags+0x1c4>)
 8011c80:	f006 fb3e 	bl	8018300 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011c84:	2300      	movs	r3, #0
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	3720      	adds	r7, #32
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	0801b360 	.word	0x0801b360
 8011c94:	0801b784 	.word	0x0801b784
 8011c98:	0801b3b4 	.word	0x0801b3b4
 8011c9c:	0801b7dc 	.word	0x0801b7dc
 8011ca0:	0801b7fc 	.word	0x0801b7fc
 8011ca4:	0801b838 	.word	0x0801b838
 8011ca8:	0801b850 	.word	0x0801b850
 8011cac:	0801b87c 	.word	0x0801b87c

08011cb0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011cb0:	b5b0      	push	{r4, r5, r7, lr}
 8011cb2:	b08a      	sub	sp, #40	@ 0x28
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d106      	bne.n	8011ccc <tcp_output+0x1c>
 8011cbe:	4b8a      	ldr	r3, [pc, #552]	@ (8011ee8 <tcp_output+0x238>)
 8011cc0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011cc4:	4989      	ldr	r1, [pc, #548]	@ (8011eec <tcp_output+0x23c>)
 8011cc6:	488a      	ldr	r0, [pc, #552]	@ (8011ef0 <tcp_output+0x240>)
 8011cc8:	f006 fb1a 	bl	8018300 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	7d1b      	ldrb	r3, [r3, #20]
 8011cd0:	2b01      	cmp	r3, #1
 8011cd2:	d106      	bne.n	8011ce2 <tcp_output+0x32>
 8011cd4:	4b84      	ldr	r3, [pc, #528]	@ (8011ee8 <tcp_output+0x238>)
 8011cd6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011cda:	4986      	ldr	r1, [pc, #536]	@ (8011ef4 <tcp_output+0x244>)
 8011cdc:	4884      	ldr	r0, [pc, #528]	@ (8011ef0 <tcp_output+0x240>)
 8011cde:	f006 fb0f 	bl	8018300 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011ce2:	4b85      	ldr	r3, [pc, #532]	@ (8011ef8 <tcp_output+0x248>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d101      	bne.n	8011cf0 <tcp_output+0x40>
    return ERR_OK;
 8011cec:	2300      	movs	r3, #0
 8011cee:	e1ce      	b.n	801208e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011cfc:	4293      	cmp	r3, r2
 8011cfe:	bf28      	it	cs
 8011d00:	4613      	movcs	r3, r2
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011d0a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d10b      	bne.n	8011d2a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	8b5b      	ldrh	r3, [r3, #26]
 8011d16:	f003 0302 	and.w	r3, r3, #2
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	f000 81aa 	beq.w	8012074 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 fded 	bl	8012900 <tcp_send_empty_ack>
 8011d26:	4603      	mov	r3, r0
 8011d28:	e1b1      	b.n	801208e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011d2a:	6879      	ldr	r1, [r7, #4]
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	3304      	adds	r3, #4
 8011d30:	461a      	mov	r2, r3
 8011d32:	6878      	ldr	r0, [r7, #4]
 8011d34:	f7ff f826 	bl	8010d84 <tcp_route>
 8011d38:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011d3a:	697b      	ldr	r3, [r7, #20]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d102      	bne.n	8011d46 <tcp_output+0x96>
    return ERR_RTE;
 8011d40:	f06f 0303 	mvn.w	r3, #3
 8011d44:	e1a3      	b.n	801208e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d003      	beq.n	8011d54 <tcp_output+0xa4>
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d111      	bne.n	8011d78 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d002      	beq.n	8011d60 <tcp_output+0xb0>
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	e000      	b.n	8011d62 <tcp_output+0xb2>
 8011d60:	2300      	movs	r3, #0
 8011d62:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011d64:	693b      	ldr	r3, [r7, #16]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d102      	bne.n	8011d70 <tcp_output+0xc0>
      return ERR_RTE;
 8011d6a:	f06f 0303 	mvn.w	r3, #3
 8011d6e:	e18e      	b.n	801208e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	685b      	ldr	r3, [r3, #4]
 8011d7e:	4618      	mov	r0, r3
 8011d80:	f7f9 fb33 	bl	800b3ea <lwip_htonl>
 8011d84:	4602      	mov	r2, r0
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d8e:	8912      	ldrh	r2, [r2, #8]
 8011d90:	4413      	add	r3, r2
 8011d92:	69ba      	ldr	r2, [r7, #24]
 8011d94:	429a      	cmp	r2, r3
 8011d96:	d227      	bcs.n	8011de8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011d9e:	461a      	mov	r2, r3
 8011da0:	69bb      	ldr	r3, [r7, #24]
 8011da2:	4293      	cmp	r3, r2
 8011da4:	d114      	bne.n	8011dd0 <tcp_output+0x120>
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d110      	bne.n	8011dd0 <tcp_output+0x120>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	f893 3095 	ldrb.w	r3, [r3, #149]	@ 0x95
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d10b      	bne.n	8011dd0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	f883 2094 	strb.w	r2, [r3, #148]	@ 0x94
      pcb->persist_backoff = 1;
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95
      pcb->persist_probe = 0;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	8b5b      	ldrh	r3, [r3, #26]
 8011dd4:	f003 0302 	and.w	r3, r3, #2
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	f000 814d 	beq.w	8012078 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011dde:	6878      	ldr	r0, [r7, #4]
 8011de0:	f000 fd8e 	bl	8012900 <tcp_send_empty_ack>
 8011de4:	4603      	mov	r3, r0
 8011de6:	e152      	b.n	801208e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	2200      	movs	r2, #0
 8011dec:	f883 2095 	strb.w	r2, [r3, #149]	@ 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011df4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011df6:	6a3b      	ldr	r3, [r7, #32]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	f000 811c 	beq.w	8012036 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011dfe:	e002      	b.n	8011e06 <tcp_output+0x156>
 8011e00:	6a3b      	ldr	r3, [r7, #32]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	623b      	str	r3, [r7, #32]
 8011e06:	6a3b      	ldr	r3, [r7, #32]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d1f8      	bne.n	8011e00 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011e0e:	e112      	b.n	8012036 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	899b      	ldrh	r3, [r3, #12]
 8011e16:	b29b      	uxth	r3, r3
 8011e18:	4618      	mov	r0, r3
 8011e1a:	f7f9 fad1 	bl	800b3c0 <lwip_htons>
 8011e1e:	4603      	mov	r3, r0
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	f003 0304 	and.w	r3, r3, #4
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d006      	beq.n	8011e38 <tcp_output+0x188>
 8011e2a:	4b2f      	ldr	r3, [pc, #188]	@ (8011ee8 <tcp_output+0x238>)
 8011e2c:	f240 5236 	movw	r2, #1334	@ 0x536
 8011e30:	4932      	ldr	r1, [pc, #200]	@ (8011efc <tcp_output+0x24c>)
 8011e32:	482f      	ldr	r0, [pc, #188]	@ (8011ef0 <tcp_output+0x240>)
 8011e34:	f006 fa64 	bl	8018300 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d01f      	beq.n	8011e80 <tcp_output+0x1d0>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	8b5b      	ldrh	r3, [r3, #26]
 8011e44:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d119      	bne.n	8011e80 <tcp_output+0x1d0>
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d00b      	beq.n	8011e6c <tcp_output+0x1bc>
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d110      	bne.n	8011e80 <tcp_output+0x1d0>
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e62:	891a      	ldrh	r2, [r3, #8]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d209      	bcs.n	8011e80 <tcp_output+0x1d0>
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d004      	beq.n	8011e80 <tcp_output+0x1d0>
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011e7c:	2b07      	cmp	r3, #7
 8011e7e:	d901      	bls.n	8011e84 <tcp_output+0x1d4>
 8011e80:	2301      	movs	r3, #1
 8011e82:	e000      	b.n	8011e86 <tcp_output+0x1d6>
 8011e84:	2300      	movs	r3, #0
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d106      	bne.n	8011e98 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	8b5b      	ldrh	r3, [r3, #26]
 8011e8e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	f000 80e4 	beq.w	8012060 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	7d1b      	ldrb	r3, [r3, #20]
 8011e9c:	2b02      	cmp	r3, #2
 8011e9e:	d00d      	beq.n	8011ebc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ea2:	68db      	ldr	r3, [r3, #12]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	b29c      	uxth	r4, r3
 8011ea8:	2010      	movs	r0, #16
 8011eaa:	f7f9 fa89 	bl	800b3c0 <lwip_htons>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011eb4:	68db      	ldr	r3, [r3, #12]
 8011eb6:	4322      	orrs	r2, r4
 8011eb8:	b292      	uxth	r2, r2
 8011eba:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011ebc:	697a      	ldr	r2, [r7, #20]
 8011ebe:	6879      	ldr	r1, [r7, #4]
 8011ec0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011ec2:	f000 f909 	bl	80120d8 <tcp_output_segment>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d016      	beq.n	8011f00 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	8b5b      	ldrh	r3, [r3, #26]
 8011ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	835a      	strh	r2, [r3, #26]
      return err;
 8011ee0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ee4:	e0d3      	b.n	801208e <tcp_output+0x3de>
 8011ee6:	bf00      	nop
 8011ee8:	0801b360 	.word	0x0801b360
 8011eec:	0801b8a4 	.word	0x0801b8a4
 8011ef0:	0801b3b4 	.word	0x0801b3b4
 8011ef4:	0801b8bc 	.word	0x0801b8bc
 8011ef8:	200150f0 	.word	0x200150f0
 8011efc:	0801b8e4 	.word	0x0801b8e4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f02:	681a      	ldr	r2, [r3, #0]
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	7d1b      	ldrb	r3, [r3, #20]
 8011f0c:	2b02      	cmp	r3, #2
 8011f0e:	d006      	beq.n	8011f1e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	8b5b      	ldrh	r3, [r3, #26]
 8011f14:	f023 0303 	bic.w	r3, r3, #3
 8011f18:	b29a      	uxth	r2, r3
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f20:	68db      	ldr	r3, [r3, #12]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7f9 fa60 	bl	800b3ea <lwip_htonl>
 8011f2a:	4604      	mov	r4, r0
 8011f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f2e:	891b      	ldrh	r3, [r3, #8]
 8011f30:	461d      	mov	r5, r3
 8011f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f34:	68db      	ldr	r3, [r3, #12]
 8011f36:	899b      	ldrh	r3, [r3, #12]
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7f9 fa40 	bl	800b3c0 <lwip_htons>
 8011f40:	4603      	mov	r3, r0
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	f003 0303 	and.w	r3, r3, #3
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <tcp_output+0x2a0>
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	e000      	b.n	8011f52 <tcp_output+0x2a2>
 8011f50:	2300      	movs	r3, #0
 8011f52:	442b      	add	r3, r5
 8011f54:	4423      	add	r3, r4
 8011f56:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	da02      	bge.n	8011f6a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	68ba      	ldr	r2, [r7, #8]
 8011f68:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6c:	891b      	ldrh	r3, [r3, #8]
 8011f6e:	461c      	mov	r4, r3
 8011f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f72:	68db      	ldr	r3, [r3, #12]
 8011f74:	899b      	ldrh	r3, [r3, #12]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7f9 fa21 	bl	800b3c0 <lwip_htons>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	f003 0303 	and.w	r3, r3, #3
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d001      	beq.n	8011f8e <tcp_output+0x2de>
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	e000      	b.n	8011f90 <tcp_output+0x2e0>
 8011f8e:	2300      	movs	r3, #0
 8011f90:	4423      	add	r3, r4
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d049      	beq.n	801202a <tcp_output+0x37a>
      seg->next = NULL;
 8011f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f98:	2200      	movs	r2, #0
 8011f9a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d105      	bne.n	8011fb0 <tcp_output+0x300>
        pcb->unacked = seg;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011fa8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fac:	623b      	str	r3, [r7, #32]
 8011fae:	e03f      	b.n	8012030 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb2:	68db      	ldr	r3, [r3, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7f9 fa17 	bl	800b3ea <lwip_htonl>
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	6a3b      	ldr	r3, [r7, #32]
 8011fc0:	68db      	ldr	r3, [r3, #12]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f7f9 fa10 	bl	800b3ea <lwip_htonl>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	1ae3      	subs	r3, r4, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	da24      	bge.n	801201c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	3370      	adds	r3, #112	@ 0x70
 8011fd6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fd8:	e002      	b.n	8011fe0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011fda:	69fb      	ldr	r3, [r7, #28]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011fe0:	69fb      	ldr	r3, [r7, #28]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d011      	beq.n	801200c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	685b      	ldr	r3, [r3, #4]
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7f9 f9fa 	bl	800b3ea <lwip_htonl>
 8011ff6:	4604      	mov	r4, r0
 8011ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ffa:	68db      	ldr	r3, [r3, #12]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	4618      	mov	r0, r3
 8012000:	f7f9 f9f3 	bl	800b3ea <lwip_htonl>
 8012004:	4603      	mov	r3, r0
 8012006:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012008:	2b00      	cmp	r3, #0
 801200a:	dbe6      	blt.n	8011fda <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801200c:	69fb      	ldr	r3, [r7, #28]
 801200e:	681a      	ldr	r2, [r3, #0]
 8012010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012012:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012018:	601a      	str	r2, [r3, #0]
 801201a:	e009      	b.n	8012030 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801201c:	6a3b      	ldr	r3, [r7, #32]
 801201e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012020:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	623b      	str	r3, [r7, #32]
 8012028:	e002      	b.n	8012030 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801202a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801202c:	f7fc fb17 	bl	800e65e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012034:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8012036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012038:	2b00      	cmp	r3, #0
 801203a:	d012      	beq.n	8012062 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801203c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801203e:	68db      	ldr	r3, [r3, #12]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	4618      	mov	r0, r3
 8012044:	f7f9 f9d1 	bl	800b3ea <lwip_htonl>
 8012048:	4602      	mov	r2, r0
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801204e:	1ad3      	subs	r3, r2, r3
 8012050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012052:	8912      	ldrh	r2, [r2, #8]
 8012054:	4413      	add	r3, r2
  while (seg != NULL &&
 8012056:	69ba      	ldr	r2, [r7, #24]
 8012058:	429a      	cmp	r2, r3
 801205a:	f4bf aed9 	bcs.w	8011e10 <tcp_output+0x160>
 801205e:	e000      	b.n	8012062 <tcp_output+0x3b2>
      break;
 8012060:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012066:	2b00      	cmp	r3, #0
 8012068:	d108      	bne.n	801207c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8012072:	e004      	b.n	801207e <tcp_output+0x3ce>
    goto output_done;
 8012074:	bf00      	nop
 8012076:	e002      	b.n	801207e <tcp_output+0x3ce>
    goto output_done;
 8012078:	bf00      	nop
 801207a:	e000      	b.n	801207e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801207c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	8b5b      	ldrh	r3, [r3, #26]
 8012082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8012086:	b29a      	uxth	r2, r3
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801208c:	2300      	movs	r3, #0
}
 801208e:	4618      	mov	r0, r3
 8012090:	3728      	adds	r7, #40	@ 0x28
 8012092:	46bd      	mov	sp, r7
 8012094:	bdb0      	pop	{r4, r5, r7, pc}
 8012096:	bf00      	nop

08012098 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b082      	sub	sp, #8
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d106      	bne.n	80120b4 <tcp_output_segment_busy+0x1c>
 80120a6:	4b09      	ldr	r3, [pc, #36]	@ (80120cc <tcp_output_segment_busy+0x34>)
 80120a8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80120ac:	4908      	ldr	r1, [pc, #32]	@ (80120d0 <tcp_output_segment_busy+0x38>)
 80120ae:	4809      	ldr	r0, [pc, #36]	@ (80120d4 <tcp_output_segment_busy+0x3c>)
 80120b0:	f006 f926 	bl	8018300 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	7b9b      	ldrb	r3, [r3, #14]
 80120ba:	2b01      	cmp	r3, #1
 80120bc:	d001      	beq.n	80120c2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80120be:	2301      	movs	r3, #1
 80120c0:	e000      	b.n	80120c4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80120c2:	2300      	movs	r3, #0
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3708      	adds	r7, #8
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}
 80120cc:	0801b360 	.word	0x0801b360
 80120d0:	0801b8fc 	.word	0x0801b8fc
 80120d4:	0801b3b4 	.word	0x0801b3b4

080120d8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80120d8:	b5b0      	push	{r4, r5, r7, lr}
 80120da:	b08c      	sub	sp, #48	@ 0x30
 80120dc:	af04      	add	r7, sp, #16
 80120de:	60f8      	str	r0, [r7, #12]
 80120e0:	60b9      	str	r1, [r7, #8]
 80120e2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d106      	bne.n	80120f8 <tcp_output_segment+0x20>
 80120ea:	4b6d      	ldr	r3, [pc, #436]	@ (80122a0 <tcp_output_segment+0x1c8>)
 80120ec:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80120f0:	496c      	ldr	r1, [pc, #432]	@ (80122a4 <tcp_output_segment+0x1cc>)
 80120f2:	486d      	ldr	r0, [pc, #436]	@ (80122a8 <tcp_output_segment+0x1d0>)
 80120f4:	f006 f904 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d106      	bne.n	801210c <tcp_output_segment+0x34>
 80120fe:	4b68      	ldr	r3, [pc, #416]	@ (80122a0 <tcp_output_segment+0x1c8>)
 8012100:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8012104:	4969      	ldr	r1, [pc, #420]	@ (80122ac <tcp_output_segment+0x1d4>)
 8012106:	4868      	ldr	r0, [pc, #416]	@ (80122a8 <tcp_output_segment+0x1d0>)
 8012108:	f006 f8fa 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d106      	bne.n	8012120 <tcp_output_segment+0x48>
 8012112:	4b63      	ldr	r3, [pc, #396]	@ (80122a0 <tcp_output_segment+0x1c8>)
 8012114:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8012118:	4965      	ldr	r1, [pc, #404]	@ (80122b0 <tcp_output_segment+0x1d8>)
 801211a:	4863      	ldr	r0, [pc, #396]	@ (80122a8 <tcp_output_segment+0x1d0>)
 801211c:	f006 f8f0 	bl	8018300 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012120:	68f8      	ldr	r0, [r7, #12]
 8012122:	f7ff ffb9 	bl	8012098 <tcp_output_segment_busy>
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d001      	beq.n	8012130 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801212c:	2300      	movs	r3, #0
 801212e:	e0b3      	b.n	8012298 <tcp_output_segment+0x1c0>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	68dc      	ldr	r4, [r3, #12]
 8012138:	4610      	mov	r0, r2
 801213a:	f7f9 f956 	bl	800b3ea <lwip_htonl>
 801213e:	4603      	mov	r3, r0
 8012140:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012142:	68bb      	ldr	r3, [r7, #8]
 8012144:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	68dc      	ldr	r4, [r3, #12]
 801214a:	4610      	mov	r0, r2
 801214c:	f7f9 f938 	bl	800b3c0 <lwip_htons>
 8012150:	4603      	mov	r3, r0
 8012152:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012158:	68ba      	ldr	r2, [r7, #8]
 801215a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801215c:	441a      	add	r2, r3
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	3314      	adds	r3, #20
 8012168:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	7a9b      	ldrb	r3, [r3, #10]
 801216e:	f003 0301 	and.w	r3, r3, #1
 8012172:	2b00      	cmp	r3, #0
 8012174:	d015      	beq.n	80121a2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012176:	68bb      	ldr	r3, [r7, #8]
 8012178:	3304      	adds	r3, #4
 801217a:	461a      	mov	r2, r3
 801217c:	6879      	ldr	r1, [r7, #4]
 801217e:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 8012182:	f7fc fdef 	bl	800ed64 <tcp_eff_send_mss_netif>
 8012186:	4603      	mov	r3, r0
 8012188:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801218a:	8b7b      	ldrh	r3, [r7, #26]
 801218c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8012190:	4618      	mov	r0, r3
 8012192:	f7f9 f92a 	bl	800b3ea <lwip_htonl>
 8012196:	4602      	mov	r2, r0
 8012198:	69fb      	ldr	r3, [r7, #28]
 801219a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801219c:	69fb      	ldr	r3, [r7, #28]
 801219e:	3304      	adds	r3, #4
 80121a0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	da02      	bge.n	80121b2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	2200      	movs	r2, #0
 80121b0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d10c      	bne.n	80121d4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80121ba:	4b3e      	ldr	r3, [pc, #248]	@ (80122b4 <tcp_output_segment+0x1dc>)
 80121bc:	681a      	ldr	r2, [r3, #0]
 80121be:	68bb      	ldr	r3, [r7, #8]
 80121c0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	68db      	ldr	r3, [r3, #12]
 80121c6:	685b      	ldr	r3, [r3, #4]
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f9 f90e 	bl	800b3ea <lwip_htonl>
 80121ce:	4602      	mov	r2, r0
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	68da      	ldr	r2, [r3, #12]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	685b      	ldr	r3, [r3, #4]
 80121dc:	685b      	ldr	r3, [r3, #4]
 80121de:	1ad3      	subs	r3, r2, r3
 80121e0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	685b      	ldr	r3, [r3, #4]
 80121e6:	8959      	ldrh	r1, [r3, #10]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	8b3a      	ldrh	r2, [r7, #24]
 80121ee:	1a8a      	subs	r2, r1, r2
 80121f0:	b292      	uxth	r2, r2
 80121f2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	8919      	ldrh	r1, [r3, #8]
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	8b3a      	ldrh	r2, [r7, #24]
 8012200:	1a8a      	subs	r2, r1, r2
 8012202:	b292      	uxth	r2, r2
 8012204:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	68fa      	ldr	r2, [r7, #12]
 801220c:	68d2      	ldr	r2, [r2, #12]
 801220e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	68db      	ldr	r3, [r3, #12]
 8012214:	2200      	movs	r2, #0
 8012216:	741a      	strb	r2, [r3, #16]
 8012218:	2200      	movs	r2, #0
 801221a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	68da      	ldr	r2, [r3, #12]
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	7a9b      	ldrb	r3, [r3, #10]
 8012224:	f003 0301 	and.w	r3, r3, #1
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <tcp_output_segment+0x158>
 801222c:	2318      	movs	r3, #24
 801222e:	e000      	b.n	8012232 <tcp_output_segment+0x15a>
 8012230:	2314      	movs	r3, #20
 8012232:	4413      	add	r3, r2
 8012234:	69fa      	ldr	r2, [r7, #28]
 8012236:	429a      	cmp	r2, r3
 8012238:	d006      	beq.n	8012248 <tcp_output_segment+0x170>
 801223a:	4b19      	ldr	r3, [pc, #100]	@ (80122a0 <tcp_output_segment+0x1c8>)
 801223c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8012240:	491d      	ldr	r1, [pc, #116]	@ (80122b8 <tcp_output_segment+0x1e0>)
 8012242:	4819      	ldr	r0, [pc, #100]	@ (80122a8 <tcp_output_segment+0x1d0>)
 8012244:	f006 f85c 	bl	8018300 <iprintf>
         seg->tcphdr->chksum, chksum_slow));
      seg->tcphdr->chksum = chksum_slow;
    }
#endif /* TCP_CHECKSUM_ON_COPY_SANITY_CHECK */
#else /* TCP_CHECKSUM_ON_COPY */
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	6858      	ldr	r0, [r3, #4]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	685b      	ldr	r3, [r3, #4]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012250:	8919      	ldrh	r1, [r3, #8]
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
 8012252:	68bd      	ldr	r5, [r7, #8]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	3304      	adds	r3, #4
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	68d4      	ldr	r4, [r2, #12]
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	462b      	mov	r3, r5
 8012260:	460a      	mov	r2, r1
 8012262:	2106      	movs	r1, #6
 8012264:	f7f9 f9de 	bl	800b624 <ip_chksum_pseudo>
 8012268:	4603      	mov	r3, r0
 801226a:	8223      	strh	r3, [r4, #16]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	6858      	ldr	r0, [r3, #4]
 8012270:	68b9      	ldr	r1, [r7, #8]
 8012272:	68bb      	ldr	r3, [r7, #8]
 8012274:	1d1c      	adds	r4, r3, #4
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	7add      	ldrb	r5, [r3, #11]
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	7a9b      	ldrb	r3, [r3, #10]
 801227e:	687a      	ldr	r2, [r7, #4]
 8012280:	9202      	str	r2, [sp, #8]
 8012282:	2206      	movs	r2, #6
 8012284:	9201      	str	r2, [sp, #4]
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	462b      	mov	r3, r5
 801228a:	4622      	mov	r2, r4
 801228c:	f004 fc9c 	bl	8016bc8 <ip4_output_if>
 8012290:	4603      	mov	r3, r0
 8012292:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012294:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012298:	4618      	mov	r0, r3
 801229a:	3720      	adds	r7, #32
 801229c:	46bd      	mov	sp, r7
 801229e:	bdb0      	pop	{r4, r5, r7, pc}
 80122a0:	0801b360 	.word	0x0801b360
 80122a4:	0801b924 	.word	0x0801b924
 80122a8:	0801b3b4 	.word	0x0801b3b4
 80122ac:	0801b944 	.word	0x0801b944
 80122b0:	0801b964 	.word	0x0801b964
 80122b4:	200150a4 	.word	0x200150a4
 80122b8:	0801b988 	.word	0x0801b988

080122bc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80122bc:	b5b0      	push	{r4, r5, r7, lr}
 80122be:	b084      	sub	sp, #16
 80122c0:	af00      	add	r7, sp, #0
 80122c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d106      	bne.n	80122d8 <tcp_rexmit_rto_prepare+0x1c>
 80122ca:	4b31      	ldr	r3, [pc, #196]	@ (8012390 <tcp_rexmit_rto_prepare+0xd4>)
 80122cc:	f240 6263 	movw	r2, #1635	@ 0x663
 80122d0:	4930      	ldr	r1, [pc, #192]	@ (8012394 <tcp_rexmit_rto_prepare+0xd8>)
 80122d2:	4831      	ldr	r0, [pc, #196]	@ (8012398 <tcp_rexmit_rto_prepare+0xdc>)
 80122d4:	f006 f814 	bl	8018300 <iprintf>

  if (pcb->unacked == NULL) {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d102      	bne.n	80122e6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80122e0:	f06f 0305 	mvn.w	r3, #5
 80122e4:	e050      	b.n	8012388 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122ea:	60fb      	str	r3, [r7, #12]
 80122ec:	e00b      	b.n	8012306 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f7ff fed2 	bl	8012098 <tcp_output_segment_busy>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d002      	beq.n	8012300 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80122fa:	f06f 0305 	mvn.w	r3, #5
 80122fe:	e043      	b.n	8012388 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	60fb      	str	r3, [r7, #12]
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d1ef      	bne.n	80122ee <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801230e:	68f8      	ldr	r0, [r7, #12]
 8012310:	f7ff fec2 	bl	8012098 <tcp_output_segment_busy>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d002      	beq.n	8012320 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801231a:	f06f 0305 	mvn.w	r3, #5
 801231e:	e033      	b.n	8012388 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	2200      	movs	r2, #0
 8012334:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	8b5b      	ldrh	r3, [r3, #26]
 801233a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801233e:	b29a      	uxth	r2, r3
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	685b      	ldr	r3, [r3, #4]
 801234a:	4618      	mov	r0, r3
 801234c:	f7f9 f84d 	bl	800b3ea <lwip_htonl>
 8012350:	4604      	mov	r4, r0
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	891b      	ldrh	r3, [r3, #8]
 8012356:	461d      	mov	r5, r3
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	68db      	ldr	r3, [r3, #12]
 801235c:	899b      	ldrh	r3, [r3, #12]
 801235e:	b29b      	uxth	r3, r3
 8012360:	4618      	mov	r0, r3
 8012362:	f7f9 f82d 	bl	800b3c0 <lwip_htons>
 8012366:	4603      	mov	r3, r0
 8012368:	b2db      	uxtb	r3, r3
 801236a:	f003 0303 	and.w	r3, r3, #3
 801236e:	2b00      	cmp	r3, #0
 8012370:	d001      	beq.n	8012376 <tcp_rexmit_rto_prepare+0xba>
 8012372:	2301      	movs	r3, #1
 8012374:	e000      	b.n	8012378 <tcp_rexmit_rto_prepare+0xbc>
 8012376:	2300      	movs	r3, #0
 8012378:	442b      	add	r3, r5
 801237a:	18e2      	adds	r2, r4, r3
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2200      	movs	r2, #0
 8012384:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8012386:	2300      	movs	r3, #0
}
 8012388:	4618      	mov	r0, r3
 801238a:	3710      	adds	r7, #16
 801238c:	46bd      	mov	sp, r7
 801238e:	bdb0      	pop	{r4, r5, r7, pc}
 8012390:	0801b360 	.word	0x0801b360
 8012394:	0801b99c 	.word	0x0801b99c
 8012398:	0801b3b4 	.word	0x0801b3b4

0801239c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d106      	bne.n	80123b8 <tcp_rexmit_rto_commit+0x1c>
 80123aa:	4b0d      	ldr	r3, [pc, #52]	@ (80123e0 <tcp_rexmit_rto_commit+0x44>)
 80123ac:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80123b0:	490c      	ldr	r1, [pc, #48]	@ (80123e4 <tcp_rexmit_rto_commit+0x48>)
 80123b2:	480d      	ldr	r0, [pc, #52]	@ (80123e8 <tcp_rexmit_rto_commit+0x4c>)
 80123b4:	f005 ffa4 	bl	8018300 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80123be:	2bff      	cmp	r3, #255	@ 0xff
 80123c0:	d007      	beq.n	80123d2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80123c8:	3301      	adds	r3, #1
 80123ca:	b2da      	uxtb	r2, r3
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80123d2:	6878      	ldr	r0, [r7, #4]
 80123d4:	f7ff fc6c 	bl	8011cb0 <tcp_output>
}
 80123d8:	bf00      	nop
 80123da:	3708      	adds	r7, #8
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}
 80123e0:	0801b360 	.word	0x0801b360
 80123e4:	0801b9c0 	.word	0x0801b9c0
 80123e8:	0801b3b4 	.word	0x0801b3b4

080123ec <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d106      	bne.n	8012408 <tcp_rexmit_rto+0x1c>
 80123fa:	4b0a      	ldr	r3, [pc, #40]	@ (8012424 <tcp_rexmit_rto+0x38>)
 80123fc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012400:	4909      	ldr	r1, [pc, #36]	@ (8012428 <tcp_rexmit_rto+0x3c>)
 8012402:	480a      	ldr	r0, [pc, #40]	@ (801242c <tcp_rexmit_rto+0x40>)
 8012404:	f005 ff7c 	bl	8018300 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012408:	6878      	ldr	r0, [r7, #4]
 801240a:	f7ff ff57 	bl	80122bc <tcp_rexmit_rto_prepare>
 801240e:	4603      	mov	r3, r0
 8012410:	2b00      	cmp	r3, #0
 8012412:	d102      	bne.n	801241a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f7ff ffc1 	bl	801239c <tcp_rexmit_rto_commit>
  }
}
 801241a:	bf00      	nop
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	0801b360 	.word	0x0801b360
 8012428:	0801b9e4 	.word	0x0801b9e4
 801242c:	0801b3b4 	.word	0x0801b3b4

08012430 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012430:	b590      	push	{r4, r7, lr}
 8012432:	b085      	sub	sp, #20
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d106      	bne.n	801244c <tcp_rexmit+0x1c>
 801243e:	4b2f      	ldr	r3, [pc, #188]	@ (80124fc <tcp_rexmit+0xcc>)
 8012440:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8012444:	492e      	ldr	r1, [pc, #184]	@ (8012500 <tcp_rexmit+0xd0>)
 8012446:	482f      	ldr	r0, [pc, #188]	@ (8012504 <tcp_rexmit+0xd4>)
 8012448:	f005 ff5a 	bl	8018300 <iprintf>

  if (pcb->unacked == NULL) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012450:	2b00      	cmp	r3, #0
 8012452:	d102      	bne.n	801245a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8012454:	f06f 0305 	mvn.w	r3, #5
 8012458:	e04c      	b.n	80124f4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801245e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8012460:	68b8      	ldr	r0, [r7, #8]
 8012462:	f7ff fe19 	bl	8012098 <tcp_output_segment_busy>
 8012466:	4603      	mov	r3, r0
 8012468:	2b00      	cmp	r3, #0
 801246a:	d002      	beq.n	8012472 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801246c:	f06f 0305 	mvn.w	r3, #5
 8012470:	e040      	b.n	80124f4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8012472:	68bb      	ldr	r3, [r7, #8]
 8012474:	681a      	ldr	r2, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	336c      	adds	r3, #108	@ 0x6c
 801247e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012480:	e002      	b.n	8012488 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d011      	beq.n	80124b4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	685b      	ldr	r3, [r3, #4]
 8012498:	4618      	mov	r0, r3
 801249a:	f7f8 ffa6 	bl	800b3ea <lwip_htonl>
 801249e:	4604      	mov	r4, r0
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	685b      	ldr	r3, [r3, #4]
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7f8 ff9f 	bl	800b3ea <lwip_htonl>
 80124ac:	4603      	mov	r3, r0
 80124ae:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	dbe6      	blt.n	8012482 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	681a      	ldr	r2, [r3, #0]
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	68ba      	ldr	r2, [r7, #8]
 80124c0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80124c2:	68bb      	ldr	r3, [r7, #8]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d103      	bne.n	80124d2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	2200      	movs	r2, #0
 80124ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80124d8:	2bff      	cmp	r3, #255	@ 0xff
 80124da:	d007      	beq.n	80124ec <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80124e2:	3301      	adds	r3, #1
 80124e4:	b2da      	uxtb	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	2200      	movs	r2, #0
 80124f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80124f2:	2300      	movs	r3, #0
}
 80124f4:	4618      	mov	r0, r3
 80124f6:	3714      	adds	r7, #20
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd90      	pop	{r4, r7, pc}
 80124fc:	0801b360 	.word	0x0801b360
 8012500:	0801ba00 	.word	0x0801ba00
 8012504:	0801b3b4 	.word	0x0801b3b4

08012508 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b082      	sub	sp, #8
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d106      	bne.n	8012524 <tcp_rexmit_fast+0x1c>
 8012516:	4b2a      	ldr	r3, [pc, #168]	@ (80125c0 <tcp_rexmit_fast+0xb8>)
 8012518:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801251c:	4929      	ldr	r1, [pc, #164]	@ (80125c4 <tcp_rexmit_fast+0xbc>)
 801251e:	482a      	ldr	r0, [pc, #168]	@ (80125c8 <tcp_rexmit_fast+0xc0>)
 8012520:	f005 feee 	bl	8018300 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012528:	2b00      	cmp	r3, #0
 801252a:	d044      	beq.n	80125b6 <tcp_rexmit_fast+0xae>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	8b5b      	ldrh	r3, [r3, #26]
 8012530:	f003 0304 	and.w	r3, r3, #4
 8012534:	2b00      	cmp	r3, #0
 8012536:	d13e      	bne.n	80125b6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff ff79 	bl	8012430 <tcp_rexmit>
 801253e:	4603      	mov	r3, r0
 8012540:	2b00      	cmp	r3, #0
 8012542:	d138      	bne.n	80125b6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012550:	4293      	cmp	r3, r2
 8012552:	bf28      	it	cs
 8012554:	4613      	movcs	r3, r2
 8012556:	b29b      	uxth	r3, r3
 8012558:	0fda      	lsrs	r2, r3, #31
 801255a:	4413      	add	r3, r2
 801255c:	105b      	asrs	r3, r3, #1
 801255e:	b29a      	uxth	r2, r3
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801256c:	461a      	mov	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	429a      	cmp	r2, r3
 8012576:	d206      	bcs.n	8012586 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801257c:	005b      	lsls	r3, r3, #1
 801257e:	b29a      	uxth	r2, r3
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012590:	4619      	mov	r1, r3
 8012592:	0049      	lsls	r1, r1, #1
 8012594:	440b      	add	r3, r1
 8012596:	b29b      	uxth	r3, r3
 8012598:	4413      	add	r3, r2
 801259a:	b29a      	uxth	r2, r3
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	8b5b      	ldrh	r3, [r3, #26]
 80125a6:	f043 0304 	orr.w	r3, r3, #4
 80125aa:	b29a      	uxth	r2, r3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	2200      	movs	r2, #0
 80125b4:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80125b6:	bf00      	nop
 80125b8:	3708      	adds	r7, #8
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd80      	pop	{r7, pc}
 80125be:	bf00      	nop
 80125c0:	0801b360 	.word	0x0801b360
 80125c4:	0801ba18 	.word	0x0801ba18
 80125c8:	0801b3b4 	.word	0x0801b3b4

080125cc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b086      	sub	sp, #24
 80125d0:	af00      	add	r7, sp, #0
 80125d2:	60f8      	str	r0, [r7, #12]
 80125d4:	607b      	str	r3, [r7, #4]
 80125d6:	460b      	mov	r3, r1
 80125d8:	817b      	strh	r3, [r7, #10]
 80125da:	4613      	mov	r3, r2
 80125dc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80125de:	897a      	ldrh	r2, [r7, #10]
 80125e0:	893b      	ldrh	r3, [r7, #8]
 80125e2:	4413      	add	r3, r2
 80125e4:	b29b      	uxth	r3, r3
 80125e6:	3314      	adds	r3, #20
 80125e8:	b29b      	uxth	r3, r3
 80125ea:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80125ee:	4619      	mov	r1, r3
 80125f0:	2022      	movs	r0, #34	@ 0x22
 80125f2:	f7fa f8d7 	bl	800c7a4 <pbuf_alloc>
 80125f6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80125f8:	697b      	ldr	r3, [r7, #20]
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	d04d      	beq.n	801269a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80125fe:	897b      	ldrh	r3, [r7, #10]
 8012600:	3313      	adds	r3, #19
 8012602:	697a      	ldr	r2, [r7, #20]
 8012604:	8952      	ldrh	r2, [r2, #10]
 8012606:	4293      	cmp	r3, r2
 8012608:	db06      	blt.n	8012618 <tcp_output_alloc_header_common+0x4c>
 801260a:	4b26      	ldr	r3, [pc, #152]	@ (80126a4 <tcp_output_alloc_header_common+0xd8>)
 801260c:	f240 7223 	movw	r2, #1827	@ 0x723
 8012610:	4925      	ldr	r1, [pc, #148]	@ (80126a8 <tcp_output_alloc_header_common+0xdc>)
 8012612:	4826      	ldr	r0, [pc, #152]	@ (80126ac <tcp_output_alloc_header_common+0xe0>)
 8012614:	f005 fe74 	bl	8018300 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801261e:	8c3b      	ldrh	r3, [r7, #32]
 8012620:	4618      	mov	r0, r3
 8012622:	f7f8 fecd 	bl	800b3c0 <lwip_htons>
 8012626:	4603      	mov	r3, r0
 8012628:	461a      	mov	r2, r3
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801262e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012630:	4618      	mov	r0, r3
 8012632:	f7f8 fec5 	bl	800b3c0 <lwip_htons>
 8012636:	4603      	mov	r3, r0
 8012638:	461a      	mov	r2, r3
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801263e:	693b      	ldr	r3, [r7, #16]
 8012640:	687a      	ldr	r2, [r7, #4]
 8012642:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8012644:	68f8      	ldr	r0, [r7, #12]
 8012646:	f7f8 fed0 	bl	800b3ea <lwip_htonl>
 801264a:	4602      	mov	r2, r0
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8012650:	897b      	ldrh	r3, [r7, #10]
 8012652:	089b      	lsrs	r3, r3, #2
 8012654:	b29b      	uxth	r3, r3
 8012656:	3305      	adds	r3, #5
 8012658:	b29b      	uxth	r3, r3
 801265a:	031b      	lsls	r3, r3, #12
 801265c:	b29a      	uxth	r2, r3
 801265e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8012662:	b29b      	uxth	r3, r3
 8012664:	4313      	orrs	r3, r2
 8012666:	b29b      	uxth	r3, r3
 8012668:	4618      	mov	r0, r3
 801266a:	f7f8 fea9 	bl	800b3c0 <lwip_htons>
 801266e:	4603      	mov	r3, r0
 8012670:	461a      	mov	r2, r3
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8012676:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8012678:	4618      	mov	r0, r3
 801267a:	f7f8 fea1 	bl	800b3c0 <lwip_htons>
 801267e:	4603      	mov	r3, r0
 8012680:	461a      	mov	r2, r3
 8012682:	693b      	ldr	r3, [r7, #16]
 8012684:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012686:	693b      	ldr	r3, [r7, #16]
 8012688:	2200      	movs	r2, #0
 801268a:	741a      	strb	r2, [r3, #16]
 801268c:	2200      	movs	r2, #0
 801268e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	2200      	movs	r2, #0
 8012694:	749a      	strb	r2, [r3, #18]
 8012696:	2200      	movs	r2, #0
 8012698:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801269a:	697b      	ldr	r3, [r7, #20]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	0801b360 	.word	0x0801b360
 80126a8:	0801ba38 	.word	0x0801ba38
 80126ac:	0801b3b4 	.word	0x0801b3b4

080126b0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80126b0:	b5b0      	push	{r4, r5, r7, lr}
 80126b2:	b08a      	sub	sp, #40	@ 0x28
 80126b4:	af04      	add	r7, sp, #16
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	607b      	str	r3, [r7, #4]
 80126ba:	460b      	mov	r3, r1
 80126bc:	817b      	strh	r3, [r7, #10]
 80126be:	4613      	mov	r3, r2
 80126c0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d106      	bne.n	80126d6 <tcp_output_alloc_header+0x26>
 80126c8:	4b15      	ldr	r3, [pc, #84]	@ (8012720 <tcp_output_alloc_header+0x70>)
 80126ca:	f240 7242 	movw	r2, #1858	@ 0x742
 80126ce:	4915      	ldr	r1, [pc, #84]	@ (8012724 <tcp_output_alloc_header+0x74>)
 80126d0:	4815      	ldr	r0, [pc, #84]	@ (8012728 <tcp_output_alloc_header+0x78>)
 80126d2:	f005 fe15 	bl	8018300 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	8adb      	ldrh	r3, [r3, #22]
 80126de:	68fa      	ldr	r2, [r7, #12]
 80126e0:	8b12      	ldrh	r2, [r2, #24]
 80126e2:	68f9      	ldr	r1, [r7, #12]
 80126e4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80126e6:	893d      	ldrh	r5, [r7, #8]
 80126e8:	897c      	ldrh	r4, [r7, #10]
 80126ea:	9103      	str	r1, [sp, #12]
 80126ec:	2110      	movs	r1, #16
 80126ee:	9102      	str	r1, [sp, #8]
 80126f0:	9201      	str	r2, [sp, #4]
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	462a      	mov	r2, r5
 80126f8:	4621      	mov	r1, r4
 80126fa:	f7ff ff67 	bl	80125cc <tcp_output_alloc_header_common>
 80126fe:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d006      	beq.n	8012714 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801270a:	68fa      	ldr	r2, [r7, #12]
 801270c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801270e:	441a      	add	r2, r3
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012714:	697b      	ldr	r3, [r7, #20]
}
 8012716:	4618      	mov	r0, r3
 8012718:	3718      	adds	r7, #24
 801271a:	46bd      	mov	sp, r7
 801271c:	bdb0      	pop	{r4, r5, r7, pc}
 801271e:	bf00      	nop
 8012720:	0801b360 	.word	0x0801b360
 8012724:	0801ba68 	.word	0x0801ba68
 8012728:	0801b3b4 	.word	0x0801b3b4

0801272c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b088      	sub	sp, #32
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	4611      	mov	r1, r2
 8012738:	461a      	mov	r2, r3
 801273a:	460b      	mov	r3, r1
 801273c:	71fb      	strb	r3, [r7, #7]
 801273e:	4613      	mov	r3, r2
 8012740:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012742:	2300      	movs	r3, #0
 8012744:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012746:	68bb      	ldr	r3, [r7, #8]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d106      	bne.n	801275a <tcp_output_fill_options+0x2e>
 801274c:	4b12      	ldr	r3, [pc, #72]	@ (8012798 <tcp_output_fill_options+0x6c>)
 801274e:	f240 7256 	movw	r2, #1878	@ 0x756
 8012752:	4912      	ldr	r1, [pc, #72]	@ (801279c <tcp_output_fill_options+0x70>)
 8012754:	4812      	ldr	r0, [pc, #72]	@ (80127a0 <tcp_output_fill_options+0x74>)
 8012756:	f005 fdd3 	bl	8018300 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	685b      	ldr	r3, [r3, #4]
 801275e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012760:	69bb      	ldr	r3, [r7, #24]
 8012762:	3314      	adds	r3, #20
 8012764:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012766:	8bfb      	ldrh	r3, [r7, #30]
 8012768:	009b      	lsls	r3, r3, #2
 801276a:	461a      	mov	r2, r3
 801276c:	79fb      	ldrb	r3, [r7, #7]
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	f003 0304 	and.w	r3, r3, #4
 8012774:	4413      	add	r3, r2
 8012776:	3314      	adds	r3, #20
 8012778:	69ba      	ldr	r2, [r7, #24]
 801277a:	4413      	add	r3, r2
 801277c:	697a      	ldr	r2, [r7, #20]
 801277e:	429a      	cmp	r2, r3
 8012780:	d006      	beq.n	8012790 <tcp_output_fill_options+0x64>
 8012782:	4b05      	ldr	r3, [pc, #20]	@ (8012798 <tcp_output_fill_options+0x6c>)
 8012784:	f240 7275 	movw	r2, #1909	@ 0x775
 8012788:	4906      	ldr	r1, [pc, #24]	@ (80127a4 <tcp_output_fill_options+0x78>)
 801278a:	4805      	ldr	r0, [pc, #20]	@ (80127a0 <tcp_output_fill_options+0x74>)
 801278c:	f005 fdb8 	bl	8018300 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012790:	bf00      	nop
 8012792:	3720      	adds	r7, #32
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	0801b360 	.word	0x0801b360
 801279c:	0801ba90 	.word	0x0801ba90
 80127a0:	0801b3b4 	.word	0x0801b3b4
 80127a4:	0801b988 	.word	0x0801b988

080127a8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b08c      	sub	sp, #48	@ 0x30
 80127ac:	af04      	add	r7, sp, #16
 80127ae:	60f8      	str	r0, [r7, #12]
 80127b0:	60b9      	str	r1, [r7, #8]
 80127b2:	607a      	str	r2, [r7, #4]
 80127b4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80127b6:	68bb      	ldr	r3, [r7, #8]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d106      	bne.n	80127ca <tcp_output_control_segment+0x22>
 80127bc:	4b24      	ldr	r3, [pc, #144]	@ (8012850 <tcp_output_control_segment+0xa8>)
 80127be:	f240 7287 	movw	r2, #1927	@ 0x787
 80127c2:	4924      	ldr	r1, [pc, #144]	@ (8012854 <tcp_output_control_segment+0xac>)
 80127c4:	4824      	ldr	r0, [pc, #144]	@ (8012858 <tcp_output_control_segment+0xb0>)
 80127c6:	f005 fd9b 	bl	8018300 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80127ca:	683a      	ldr	r2, [r7, #0]
 80127cc:	6879      	ldr	r1, [r7, #4]
 80127ce:	68f8      	ldr	r0, [r7, #12]
 80127d0:	f7fe fad8 	bl	8010d84 <tcp_route>
 80127d4:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 80127d6:	69bb      	ldr	r3, [r7, #24]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d102      	bne.n	80127e2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80127dc:	23fc      	movs	r3, #252	@ 0xfc
 80127de:	77fb      	strb	r3, [r7, #31]
 80127e0:	e02c      	b.n	801283c <tcp_output_control_segment+0x94>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	685b      	ldr	r3, [r3, #4]
 80127e6:	617b      	str	r3, [r7, #20]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	891a      	ldrh	r2, [r3, #8]
 80127ec:	683b      	ldr	r3, [r7, #0]
 80127ee:	9300      	str	r3, [sp, #0]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2106      	movs	r1, #6
 80127f4:	68b8      	ldr	r0, [r7, #8]
 80127f6:	f7f8 ff15 	bl	800b624 <ip_chksum_pseudo>
 80127fa:	4603      	mov	r3, r0
 80127fc:	461a      	mov	r2, r3
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	821a      	strh	r2, [r3, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d006      	beq.n	8012816 <tcp_output_control_segment+0x6e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	7adb      	ldrb	r3, [r3, #11]
 801280c:	77bb      	strb	r3, [r7, #30]
      tos = pcb->tos;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	7a9b      	ldrb	r3, [r3, #10]
 8012812:	777b      	strb	r3, [r7, #29]
 8012814:	e003      	b.n	801281e <tcp_output_control_segment+0x76>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012816:	23ff      	movs	r3, #255	@ 0xff
 8012818:	77bb      	strb	r3, [r7, #30]
      tos = 0;
 801281a:	2300      	movs	r3, #0
 801281c:	777b      	strb	r3, [r7, #29]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801281e:	7fba      	ldrb	r2, [r7, #30]
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	9302      	str	r3, [sp, #8]
 8012824:	2306      	movs	r3, #6
 8012826:	9301      	str	r3, [sp, #4]
 8012828:	7f7b      	ldrb	r3, [r7, #29]
 801282a:	9300      	str	r3, [sp, #0]
 801282c:	4613      	mov	r3, r2
 801282e:	683a      	ldr	r2, [r7, #0]
 8012830:	6879      	ldr	r1, [r7, #4]
 8012832:	68b8      	ldr	r0, [r7, #8]
 8012834:	f004 f9c8 	bl	8016bc8 <ip4_output_if>
 8012838:	4603      	mov	r3, r0
 801283a:	77fb      	strb	r3, [r7, #31]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801283c:	68b8      	ldr	r0, [r7, #8]
 801283e:	f7fa fa95 	bl	800cd6c <pbuf_free>
  return err;
 8012842:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012846:	4618      	mov	r0, r3
 8012848:	3720      	adds	r7, #32
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	0801b360 	.word	0x0801b360
 8012854:	0801bab8 	.word	0x0801bab8
 8012858:	0801b3b4 	.word	0x0801b3b4

0801285c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801285c:	b590      	push	{r4, r7, lr}
 801285e:	b08b      	sub	sp, #44	@ 0x2c
 8012860:	af04      	add	r7, sp, #16
 8012862:	60f8      	str	r0, [r7, #12]
 8012864:	60b9      	str	r1, [r7, #8]
 8012866:	607a      	str	r2, [r7, #4]
 8012868:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d106      	bne.n	801287e <tcp_rst+0x22>
 8012870:	4b1f      	ldr	r3, [pc, #124]	@ (80128f0 <tcp_rst+0x94>)
 8012872:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8012876:	491f      	ldr	r1, [pc, #124]	@ (80128f4 <tcp_rst+0x98>)
 8012878:	481f      	ldr	r0, [pc, #124]	@ (80128f8 <tcp_rst+0x9c>)
 801287a:	f005 fd41 	bl	8018300 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801287e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012880:	2b00      	cmp	r3, #0
 8012882:	d106      	bne.n	8012892 <tcp_rst+0x36>
 8012884:	4b1a      	ldr	r3, [pc, #104]	@ (80128f0 <tcp_rst+0x94>)
 8012886:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801288a:	491c      	ldr	r1, [pc, #112]	@ (80128fc <tcp_rst+0xa0>)
 801288c:	481a      	ldr	r0, [pc, #104]	@ (80128f8 <tcp_rst+0x9c>)
 801288e:	f005 fd37 	bl	8018300 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012892:	2300      	movs	r3, #0
 8012894:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012896:	f646 030b 	movw	r3, #26635	@ 0x680b
 801289a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801289c:	7dfb      	ldrb	r3, [r7, #23]
 801289e:	b29c      	uxth	r4, r3
 80128a0:	68b8      	ldr	r0, [r7, #8]
 80128a2:	f7f8 fda2 	bl	800b3ea <lwip_htonl>
 80128a6:	4602      	mov	r2, r0
 80128a8:	8abb      	ldrh	r3, [r7, #20]
 80128aa:	9303      	str	r3, [sp, #12]
 80128ac:	2314      	movs	r3, #20
 80128ae:	9302      	str	r3, [sp, #8]
 80128b0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80128b2:	9301      	str	r3, [sp, #4]
 80128b4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	4613      	mov	r3, r2
 80128ba:	2200      	movs	r2, #0
 80128bc:	4621      	mov	r1, r4
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f7ff fe84 	bl	80125cc <tcp_output_alloc_header_common>
 80128c4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00c      	beq.n	80128e6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80128cc:	7dfb      	ldrb	r3, [r7, #23]
 80128ce:	2200      	movs	r2, #0
 80128d0:	6939      	ldr	r1, [r7, #16]
 80128d2:	68f8      	ldr	r0, [r7, #12]
 80128d4:	f7ff ff2a 	bl	801272c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80128d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128da:	683a      	ldr	r2, [r7, #0]
 80128dc:	6939      	ldr	r1, [r7, #16]
 80128de:	68f8      	ldr	r0, [r7, #12]
 80128e0:	f7ff ff62 	bl	80127a8 <tcp_output_control_segment>
 80128e4:	e000      	b.n	80128e8 <tcp_rst+0x8c>
    return;
 80128e6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80128e8:	371c      	adds	r7, #28
 80128ea:	46bd      	mov	sp, r7
 80128ec:	bd90      	pop	{r4, r7, pc}
 80128ee:	bf00      	nop
 80128f0:	0801b360 	.word	0x0801b360
 80128f4:	0801bae4 	.word	0x0801bae4
 80128f8:	0801b3b4 	.word	0x0801b3b4
 80128fc:	0801bb00 	.word	0x0801bb00

08012900 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012900:	b590      	push	{r4, r7, lr}
 8012902:	b087      	sub	sp, #28
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012908:	2300      	movs	r3, #0
 801290a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801290c:	2300      	movs	r3, #0
 801290e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d106      	bne.n	8012924 <tcp_send_empty_ack+0x24>
 8012916:	4b28      	ldr	r3, [pc, #160]	@ (80129b8 <tcp_send_empty_ack+0xb8>)
 8012918:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801291c:	4927      	ldr	r1, [pc, #156]	@ (80129bc <tcp_send_empty_ack+0xbc>)
 801291e:	4828      	ldr	r0, [pc, #160]	@ (80129c0 <tcp_send_empty_ack+0xc0>)
 8012920:	f005 fcee 	bl	8018300 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012924:	7dfb      	ldrb	r3, [r7, #23]
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	b2db      	uxtb	r3, r3
 801292a:	f003 0304 	and.w	r3, r3, #4
 801292e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012930:	7d7b      	ldrb	r3, [r7, #21]
 8012932:	b29c      	uxth	r4, r3
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012938:	4618      	mov	r0, r3
 801293a:	f7f8 fd56 	bl	800b3ea <lwip_htonl>
 801293e:	4603      	mov	r3, r0
 8012940:	2200      	movs	r2, #0
 8012942:	4621      	mov	r1, r4
 8012944:	6878      	ldr	r0, [r7, #4]
 8012946:	f7ff feb3 	bl	80126b0 <tcp_output_alloc_header>
 801294a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d109      	bne.n	8012966 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	8b5b      	ldrh	r3, [r3, #26]
 8012956:	f043 0303 	orr.w	r3, r3, #3
 801295a:	b29a      	uxth	r2, r3
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012960:	f06f 0301 	mvn.w	r3, #1
 8012964:	e023      	b.n	80129ae <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012966:	7dbb      	ldrb	r3, [r7, #22]
 8012968:	7dfa      	ldrb	r2, [r7, #23]
 801296a:	6939      	ldr	r1, [r7, #16]
 801296c:	6878      	ldr	r0, [r7, #4]
 801296e:	f7ff fedd 	bl	801272c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012972:	687a      	ldr	r2, [r7, #4]
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	3304      	adds	r3, #4
 8012978:	6939      	ldr	r1, [r7, #16]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f7ff ff14 	bl	80127a8 <tcp_output_control_segment>
 8012980:	4603      	mov	r3, r0
 8012982:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012984:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d007      	beq.n	801299c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	8b5b      	ldrh	r3, [r3, #26]
 8012990:	f043 0303 	orr.w	r3, r3, #3
 8012994:	b29a      	uxth	r2, r3
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	835a      	strh	r2, [r3, #26]
 801299a:	e006      	b.n	80129aa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	8b5b      	ldrh	r3, [r3, #26]
 80129a0:	f023 0303 	bic.w	r3, r3, #3
 80129a4:	b29a      	uxth	r2, r3
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80129aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	371c      	adds	r7, #28
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd90      	pop	{r4, r7, pc}
 80129b6:	bf00      	nop
 80129b8:	0801b360 	.word	0x0801b360
 80129bc:	0801bb1c 	.word	0x0801bb1c
 80129c0:	0801b3b4 	.word	0x0801b3b4

080129c4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80129c4:	b590      	push	{r4, r7, lr}
 80129c6:	b087      	sub	sp, #28
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129cc:	2300      	movs	r3, #0
 80129ce:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <tcp_keepalive+0x20>
 80129d6:	4b18      	ldr	r3, [pc, #96]	@ (8012a38 <tcp_keepalive+0x74>)
 80129d8:	f640 0224 	movw	r2, #2084	@ 0x824
 80129dc:	4917      	ldr	r1, [pc, #92]	@ (8012a3c <tcp_keepalive+0x78>)
 80129de:	4818      	ldr	r0, [pc, #96]	@ (8012a40 <tcp_keepalive+0x7c>)
 80129e0:	f005 fc8e 	bl	8018300 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80129e4:	7dfb      	ldrb	r3, [r7, #23]
 80129e6:	b29c      	uxth	r4, r3
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80129ec:	3b01      	subs	r3, #1
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7f8 fcfb 	bl	800b3ea <lwip_htonl>
 80129f4:	4603      	mov	r3, r0
 80129f6:	2200      	movs	r2, #0
 80129f8:	4621      	mov	r1, r4
 80129fa:	6878      	ldr	r0, [r7, #4]
 80129fc:	f7ff fe58 	bl	80126b0 <tcp_output_alloc_header>
 8012a00:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a02:	693b      	ldr	r3, [r7, #16]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d102      	bne.n	8012a0e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012a08:	f04f 33ff 	mov.w	r3, #4294967295
 8012a0c:	e010      	b.n	8012a30 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012a0e:	7dfb      	ldrb	r3, [r7, #23]
 8012a10:	2200      	movs	r2, #0
 8012a12:	6939      	ldr	r1, [r7, #16]
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7ff fe89 	bl	801272c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	3304      	adds	r3, #4
 8012a20:	6939      	ldr	r1, [r7, #16]
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f7ff fec0 	bl	80127a8 <tcp_output_control_segment>
 8012a28:	4603      	mov	r3, r0
 8012a2a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012a2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a30:	4618      	mov	r0, r3
 8012a32:	371c      	adds	r7, #28
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd90      	pop	{r4, r7, pc}
 8012a38:	0801b360 	.word	0x0801b360
 8012a3c:	0801bb3c 	.word	0x0801bb3c
 8012a40:	0801b3b4 	.word	0x0801b3b4

08012a44 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012a44:	b590      	push	{r4, r7, lr}
 8012a46:	b08b      	sub	sp, #44	@ 0x2c
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d106      	bne.n	8012a66 <tcp_zero_window_probe+0x22>
 8012a58:	4b4c      	ldr	r3, [pc, #304]	@ (8012b8c <tcp_zero_window_probe+0x148>)
 8012a5a:	f640 024f 	movw	r2, #2127	@ 0x84f
 8012a5e:	494c      	ldr	r1, [pc, #304]	@ (8012b90 <tcp_zero_window_probe+0x14c>)
 8012a60:	484c      	ldr	r0, [pc, #304]	@ (8012b94 <tcp_zero_window_probe+0x150>)
 8012a62:	f005 fc4d 	bl	8018300 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a6a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012a6c:	6a3b      	ldr	r3, [r7, #32]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d101      	bne.n	8012a76 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	e086      	b.n	8012b84 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8012a7c:	2bff      	cmp	r3, #255	@ 0xff
 8012a7e:	d007      	beq.n	8012a90 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f893 3096 	ldrb.w	r3, [r3, #150]	@ 0x96
 8012a86:	3301      	adds	r3, #1
 8012a88:	b2da      	uxtb	r2, r3
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f883 2096 	strb.w	r2, [r3, #150]	@ 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012a90:	6a3b      	ldr	r3, [r7, #32]
 8012a92:	68db      	ldr	r3, [r3, #12]
 8012a94:	899b      	ldrh	r3, [r3, #12]
 8012a96:	b29b      	uxth	r3, r3
 8012a98:	4618      	mov	r0, r3
 8012a9a:	f7f8 fc91 	bl	800b3c0 <lwip_htons>
 8012a9e:	4603      	mov	r3, r0
 8012aa0:	b2db      	uxtb	r3, r3
 8012aa2:	f003 0301 	and.w	r3, r3, #1
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d005      	beq.n	8012ab6 <tcp_zero_window_probe+0x72>
 8012aaa:	6a3b      	ldr	r3, [r7, #32]
 8012aac:	891b      	ldrh	r3, [r3, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d101      	bne.n	8012ab6 <tcp_zero_window_probe+0x72>
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e000      	b.n	8012ab8 <tcp_zero_window_probe+0x74>
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012aba:	7ffb      	ldrb	r3, [r7, #31]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	bf0c      	ite	eq
 8012ac0:	2301      	moveq	r3, #1
 8012ac2:	2300      	movne	r3, #0
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012acc:	b299      	uxth	r1, r3
 8012ace:	6a3b      	ldr	r3, [r7, #32]
 8012ad0:	68db      	ldr	r3, [r3, #12]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	8bba      	ldrh	r2, [r7, #28]
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7ff fdea 	bl	80126b0 <tcp_output_alloc_header>
 8012adc:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012ade:	69bb      	ldr	r3, [r7, #24]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d102      	bne.n	8012aea <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ae8:	e04c      	b.n	8012b84 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	685b      	ldr	r3, [r3, #4]
 8012aee:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012af0:	7ffb      	ldrb	r3, [r7, #31]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d011      	beq.n	8012b1a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012af6:	697b      	ldr	r3, [r7, #20]
 8012af8:	899b      	ldrh	r3, [r3, #12]
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	b21b      	sxth	r3, r3
 8012afe:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012b02:	b21c      	sxth	r4, r3
 8012b04:	2011      	movs	r0, #17
 8012b06:	f7f8 fc5b 	bl	800b3c0 <lwip_htons>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	b21b      	sxth	r3, r3
 8012b0e:	4323      	orrs	r3, r4
 8012b10:	b21b      	sxth	r3, r3
 8012b12:	b29a      	uxth	r2, r3
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	819a      	strh	r2, [r3, #12]
 8012b18:	e010      	b.n	8012b3c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012b1a:	69bb      	ldr	r3, [r7, #24]
 8012b1c:	685b      	ldr	r3, [r3, #4]
 8012b1e:	3314      	adds	r3, #20
 8012b20:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012b22:	6a3b      	ldr	r3, [r7, #32]
 8012b24:	6858      	ldr	r0, [r3, #4]
 8012b26:	6a3b      	ldr	r3, [r7, #32]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	891a      	ldrh	r2, [r3, #8]
 8012b2c:	6a3b      	ldr	r3, [r7, #32]
 8012b2e:	891b      	ldrh	r3, [r3, #8]
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	2201      	movs	r2, #1
 8012b36:	6939      	ldr	r1, [r7, #16]
 8012b38:	f7fa fb1e 	bl	800d178 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012b3c:	6a3b      	ldr	r3, [r7, #32]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	685b      	ldr	r3, [r3, #4]
 8012b42:	4618      	mov	r0, r3
 8012b44:	f7f8 fc51 	bl	800b3ea <lwip_htonl>
 8012b48:	4603      	mov	r3, r0
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	1ad3      	subs	r3, r2, r3
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	da02      	bge.n	8012b60 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012b64:	2200      	movs	r2, #0
 8012b66:	69b9      	ldr	r1, [r7, #24]
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff fddf 	bl	801272c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012b6e:	687a      	ldr	r2, [r7, #4]
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	3304      	adds	r3, #4
 8012b74:	69b9      	ldr	r1, [r7, #24]
 8012b76:	6878      	ldr	r0, [r7, #4]
 8012b78:	f7ff fe16 	bl	80127a8 <tcp_output_control_segment>
 8012b7c:	4603      	mov	r3, r0
 8012b7e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012b80:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	372c      	adds	r7, #44	@ 0x2c
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd90      	pop	{r4, r7, pc}
 8012b8c:	0801b360 	.word	0x0801b360
 8012b90:	0801bb58 	.word	0x0801bb58
 8012b94:	0801b3b4 	.word	0x0801b3b4

08012b98 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b082      	sub	sp, #8
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012ba0:	f7fa fbd8 	bl	800d354 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8012bd0 <tcpip_tcp_timer+0x38>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d103      	bne.n	8012bb4 <tcpip_tcp_timer+0x1c>
 8012bac:	4b09      	ldr	r3, [pc, #36]	@ (8012bd4 <tcpip_tcp_timer+0x3c>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d005      	beq.n	8012bc0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	4908      	ldr	r1, [pc, #32]	@ (8012bd8 <tcpip_tcp_timer+0x40>)
 8012bb8:	20fa      	movs	r0, #250	@ 0xfa
 8012bba:	f000 f8f3 	bl	8012da4 <sys_timeout>
 8012bbe:	e003      	b.n	8012bc8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012bc0:	4b06      	ldr	r3, [pc, #24]	@ (8012bdc <tcpip_tcp_timer+0x44>)
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	601a      	str	r2, [r3, #0]
  }
}
 8012bc6:	bf00      	nop
 8012bc8:	bf00      	nop
 8012bca:	3708      	adds	r7, #8
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}
 8012bd0:	200150b0 	.word	0x200150b0
 8012bd4:	200150b4 	.word	0x200150b4
 8012bd8:	08012b99 	.word	0x08012b99
 8012bdc:	200150fc 	.word	0x200150fc

08012be0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012be4:	4b0a      	ldr	r3, [pc, #40]	@ (8012c10 <tcp_timer_needed+0x30>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d10f      	bne.n	8012c0c <tcp_timer_needed+0x2c>
 8012bec:	4b09      	ldr	r3, [pc, #36]	@ (8012c14 <tcp_timer_needed+0x34>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d103      	bne.n	8012bfc <tcp_timer_needed+0x1c>
 8012bf4:	4b08      	ldr	r3, [pc, #32]	@ (8012c18 <tcp_timer_needed+0x38>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d007      	beq.n	8012c0c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012bfc:	4b04      	ldr	r3, [pc, #16]	@ (8012c10 <tcp_timer_needed+0x30>)
 8012bfe:	2201      	movs	r2, #1
 8012c00:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012c02:	2200      	movs	r2, #0
 8012c04:	4905      	ldr	r1, [pc, #20]	@ (8012c1c <tcp_timer_needed+0x3c>)
 8012c06:	20fa      	movs	r0, #250	@ 0xfa
 8012c08:	f000 f8cc 	bl	8012da4 <sys_timeout>
  }
}
 8012c0c:	bf00      	nop
 8012c0e:	bd80      	pop	{r7, pc}
 8012c10:	200150fc 	.word	0x200150fc
 8012c14:	200150b0 	.word	0x200150b0
 8012c18:	200150b4 	.word	0x200150b4
 8012c1c:	08012b99 	.word	0x08012b99

08012c20 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012c20:	b580      	push	{r7, lr}
 8012c22:	b086      	sub	sp, #24
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012c2c:	200a      	movs	r0, #10
 8012c2e:	f7f9 f9f5 	bl	800c01c <memp_malloc>
 8012c32:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d109      	bne.n	8012c4e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d151      	bne.n	8012ce4 <sys_timeout_abs+0xc4>
 8012c40:	4b2a      	ldr	r3, [pc, #168]	@ (8012cec <sys_timeout_abs+0xcc>)
 8012c42:	22be      	movs	r2, #190	@ 0xbe
 8012c44:	492a      	ldr	r1, [pc, #168]	@ (8012cf0 <sys_timeout_abs+0xd0>)
 8012c46:	482b      	ldr	r0, [pc, #172]	@ (8012cf4 <sys_timeout_abs+0xd4>)
 8012c48:	f005 fb5a 	bl	8018300 <iprintf>
    return;
 8012c4c:	e04a      	b.n	8012ce4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012c4e:	693b      	ldr	r3, [r7, #16]
 8012c50:	2200      	movs	r2, #0
 8012c52:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012c54:	693b      	ldr	r3, [r7, #16]
 8012c56:	68ba      	ldr	r2, [r7, #8]
 8012c58:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012c66:	4b24      	ldr	r3, [pc, #144]	@ (8012cf8 <sys_timeout_abs+0xd8>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d103      	bne.n	8012c76 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012c6e:	4a22      	ldr	r2, [pc, #136]	@ (8012cf8 <sys_timeout_abs+0xd8>)
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	6013      	str	r3, [r2, #0]
    return;
 8012c74:	e037      	b.n	8012ce6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012c76:	693b      	ldr	r3, [r7, #16]
 8012c78:	685a      	ldr	r2, [r3, #4]
 8012c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8012cf8 <sys_timeout_abs+0xd8>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	0fdb      	lsrs	r3, r3, #31
 8012c84:	f003 0301 	and.w	r3, r3, #1
 8012c88:	b2db      	uxtb	r3, r3
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d007      	beq.n	8012c9e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8012cf8 <sys_timeout_abs+0xd8>)
 8012c90:	681a      	ldr	r2, [r3, #0]
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012c96:	4a18      	ldr	r2, [pc, #96]	@ (8012cf8 <sys_timeout_abs+0xd8>)
 8012c98:	693b      	ldr	r3, [r7, #16]
 8012c9a:	6013      	str	r3, [r2, #0]
 8012c9c:	e023      	b.n	8012ce6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c9e:	4b16      	ldr	r3, [pc, #88]	@ (8012cf8 <sys_timeout_abs+0xd8>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	617b      	str	r3, [r7, #20]
 8012ca4:	e01a      	b.n	8012cdc <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012ca6:	697b      	ldr	r3, [r7, #20]
 8012ca8:	681b      	ldr	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d00b      	beq.n	8012cc6 <sys_timeout_abs+0xa6>
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	685a      	ldr	r2, [r3, #4]
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	685b      	ldr	r3, [r3, #4]
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	0fdb      	lsrs	r3, r3, #31
 8012cbc:	f003 0301 	and.w	r3, r3, #1
 8012cc0:	b2db      	uxtb	r3, r3
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d007      	beq.n	8012cd6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	681a      	ldr	r2, [r3, #0]
 8012cca:	693b      	ldr	r3, [r7, #16]
 8012ccc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	693a      	ldr	r2, [r7, #16]
 8012cd2:	601a      	str	r2, [r3, #0]
        break;
 8012cd4:	e007      	b.n	8012ce6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	617b      	str	r3, [r7, #20]
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d1e1      	bne.n	8012ca6 <sys_timeout_abs+0x86>
 8012ce2:	e000      	b.n	8012ce6 <sys_timeout_abs+0xc6>
    return;
 8012ce4:	bf00      	nop
      }
    }
  }
}
 8012ce6:	3718      	adds	r7, #24
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd80      	pop	{r7, pc}
 8012cec:	0801bb7c 	.word	0x0801bb7c
 8012cf0:	0801bbb0 	.word	0x0801bbb0
 8012cf4:	0801bbf0 	.word	0x0801bbf0
 8012cf8:	200150f4 	.word	0x200150f4

08012cfc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b086      	sub	sp, #24
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012d04:	687b      	ldr	r3, [r7, #4]
 8012d06:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012d08:	697b      	ldr	r3, [r7, #20]
 8012d0a:	685b      	ldr	r3, [r3, #4]
 8012d0c:	4798      	blx	r3

  now = sys_now();
 8012d0e:	f7f2 ff6b 	bl	8005be8 <sys_now>
 8012d12:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012d14:	697b      	ldr	r3, [r7, #20]
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	4b0f      	ldr	r3, [pc, #60]	@ (8012d58 <lwip_cyclic_timer+0x5c>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4413      	add	r3, r2
 8012d1e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012d20:	68fa      	ldr	r2, [r7, #12]
 8012d22:	693b      	ldr	r3, [r7, #16]
 8012d24:	1ad3      	subs	r3, r2, r3
 8012d26:	0fdb      	lsrs	r3, r3, #31
 8012d28:	f003 0301 	and.w	r3, r3, #1
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d009      	beq.n	8012d46 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	693b      	ldr	r3, [r7, #16]
 8012d38:	4413      	add	r3, r2
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	4907      	ldr	r1, [pc, #28]	@ (8012d5c <lwip_cyclic_timer+0x60>)
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff ff6e 	bl	8012c20 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012d44:	e004      	b.n	8012d50 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	4904      	ldr	r1, [pc, #16]	@ (8012d5c <lwip_cyclic_timer+0x60>)
 8012d4a:	68f8      	ldr	r0, [r7, #12]
 8012d4c:	f7ff ff68 	bl	8012c20 <sys_timeout_abs>
}
 8012d50:	bf00      	nop
 8012d52:	3718      	adds	r7, #24
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	200150f8 	.word	0x200150f8
 8012d5c:	08012cfd 	.word	0x08012cfd

08012d60 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b082      	sub	sp, #8
 8012d64:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d66:	2301      	movs	r3, #1
 8012d68:	607b      	str	r3, [r7, #4]
 8012d6a:	e00e      	b.n	8012d8a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012d6c:	4a0b      	ldr	r2, [pc, #44]	@ (8012d9c <sys_timeouts_init+0x3c>)
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	00db      	lsls	r3, r3, #3
 8012d78:	4a08      	ldr	r2, [pc, #32]	@ (8012d9c <sys_timeouts_init+0x3c>)
 8012d7a:	4413      	add	r3, r2
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	4908      	ldr	r1, [pc, #32]	@ (8012da0 <sys_timeouts_init+0x40>)
 8012d80:	f000 f810 	bl	8012da4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	3301      	adds	r3, #1
 8012d88:	607b      	str	r3, [r7, #4]
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	2b04      	cmp	r3, #4
 8012d8e:	d9ed      	bls.n	8012d6c <sys_timeouts_init+0xc>
  }
}
 8012d90:	bf00      	nop
 8012d92:	bf00      	nop
 8012d94:	3708      	adds	r7, #8
 8012d96:	46bd      	mov	sp, r7
 8012d98:	bd80      	pop	{r7, pc}
 8012d9a:	bf00      	nop
 8012d9c:	0801cb70 	.word	0x0801cb70
 8012da0:	08012cfd 	.word	0x08012cfd

08012da4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	60f8      	str	r0, [r7, #12]
 8012dac:	60b9      	str	r1, [r7, #8]
 8012dae:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012db6:	d306      	bcc.n	8012dc6 <sys_timeout+0x22>
 8012db8:	4b0a      	ldr	r3, [pc, #40]	@ (8012de4 <sys_timeout+0x40>)
 8012dba:	f240 1229 	movw	r2, #297	@ 0x129
 8012dbe:	490a      	ldr	r1, [pc, #40]	@ (8012de8 <sys_timeout+0x44>)
 8012dc0:	480a      	ldr	r0, [pc, #40]	@ (8012dec <sys_timeout+0x48>)
 8012dc2:	f005 fa9d 	bl	8018300 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012dc6:	f7f2 ff0f 	bl	8005be8 <sys_now>
 8012dca:	4602      	mov	r2, r0
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	4413      	add	r3, r2
 8012dd0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012dd2:	687a      	ldr	r2, [r7, #4]
 8012dd4:	68b9      	ldr	r1, [r7, #8]
 8012dd6:	6978      	ldr	r0, [r7, #20]
 8012dd8:	f7ff ff22 	bl	8012c20 <sys_timeout_abs>
#endif
}
 8012ddc:	bf00      	nop
 8012dde:	3718      	adds	r7, #24
 8012de0:	46bd      	mov	sp, r7
 8012de2:	bd80      	pop	{r7, pc}
 8012de4:	0801bb7c 	.word	0x0801bb7c
 8012de8:	0801bc18 	.word	0x0801bc18
 8012dec:	0801bbf0 	.word	0x0801bbf0

08012df0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012df6:	f7f2 fef7 	bl	8005be8 <sys_now>
 8012dfa:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012dfc:	4b17      	ldr	r3, [pc, #92]	@ (8012e5c <sys_check_timeouts+0x6c>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d022      	beq.n	8012e4e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	68fa      	ldr	r2, [r7, #12]
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	0fdb      	lsrs	r3, r3, #31
 8012e12:	f003 0301 	and.w	r3, r3, #1
 8012e16:	b2db      	uxtb	r3, r3
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d11a      	bne.n	8012e52 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	4a0e      	ldr	r2, [pc, #56]	@ (8012e5c <sys_check_timeouts+0x6c>)
 8012e22:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012e24:	68bb      	ldr	r3, [r7, #8]
 8012e26:	689b      	ldr	r3, [r3, #8]
 8012e28:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012e2a:	68bb      	ldr	r3, [r7, #8]
 8012e2c:	68db      	ldr	r3, [r3, #12]
 8012e2e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	685b      	ldr	r3, [r3, #4]
 8012e34:	4a0a      	ldr	r2, [pc, #40]	@ (8012e60 <sys_check_timeouts+0x70>)
 8012e36:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012e38:	68b9      	ldr	r1, [r7, #8]
 8012e3a:	200a      	movs	r0, #10
 8012e3c:	f7f9 f940 	bl	800c0c0 <memp_free>
    if (handler != NULL) {
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d0da      	beq.n	8012dfc <sys_check_timeouts+0xc>
      handler(arg);
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6838      	ldr	r0, [r7, #0]
 8012e4a:	4798      	blx	r3
  do {
 8012e4c:	e7d6      	b.n	8012dfc <sys_check_timeouts+0xc>
      return;
 8012e4e:	bf00      	nop
 8012e50:	e000      	b.n	8012e54 <sys_check_timeouts+0x64>
      return;
 8012e52:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012e54:	3710      	adds	r7, #16
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	200150f4 	.word	0x200150f4
 8012e60:	200150f8 	.word	0x200150f8

08012e64 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012e6a:	4b16      	ldr	r3, [pc, #88]	@ (8012ec4 <sys_timeouts_sleeptime+0x60>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d102      	bne.n	8012e78 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012e72:	f04f 33ff 	mov.w	r3, #4294967295
 8012e76:	e020      	b.n	8012eba <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012e78:	f7f2 feb6 	bl	8005be8 <sys_now>
 8012e7c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012e7e:	4b11      	ldr	r3, [pc, #68]	@ (8012ec4 <sys_timeouts_sleeptime+0x60>)
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	685a      	ldr	r2, [r3, #4]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	0fdb      	lsrs	r3, r3, #31
 8012e8a:	f003 0301 	and.w	r3, r3, #1
 8012e8e:	b2db      	uxtb	r3, r3
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d001      	beq.n	8012e98 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012e94:	2300      	movs	r3, #0
 8012e96:	e010      	b.n	8012eba <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012e98:	4b0a      	ldr	r3, [pc, #40]	@ (8012ec4 <sys_timeouts_sleeptime+0x60>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
 8012e9c:	685a      	ldr	r2, [r3, #4]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	1ad3      	subs	r3, r2, r3
 8012ea2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012ea4:	683b      	ldr	r3, [r7, #0]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	da06      	bge.n	8012eb8 <sys_timeouts_sleeptime+0x54>
 8012eaa:	4b07      	ldr	r3, [pc, #28]	@ (8012ec8 <sys_timeouts_sleeptime+0x64>)
 8012eac:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012eb0:	4906      	ldr	r1, [pc, #24]	@ (8012ecc <sys_timeouts_sleeptime+0x68>)
 8012eb2:	4807      	ldr	r0, [pc, #28]	@ (8012ed0 <sys_timeouts_sleeptime+0x6c>)
 8012eb4:	f005 fa24 	bl	8018300 <iprintf>
    return ret;
 8012eb8:	683b      	ldr	r3, [r7, #0]
  }
}
 8012eba:	4618      	mov	r0, r3
 8012ebc:	3708      	adds	r7, #8
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	200150f4 	.word	0x200150f4
 8012ec8:	0801bb7c 	.word	0x0801bb7c
 8012ecc:	0801bc50 	.word	0x0801bc50
 8012ed0:	0801bbf0 	.word	0x0801bbf0

08012ed4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012ed8:	f005 f912 	bl	8018100 <rand>
 8012edc:	4603      	mov	r3, r0
 8012ede:	b29b      	uxth	r3, r3
 8012ee0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012ee4:	b29b      	uxth	r3, r3
 8012ee6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012eea:	b29a      	uxth	r2, r3
 8012eec:	4b01      	ldr	r3, [pc, #4]	@ (8012ef4 <udp_init+0x20>)
 8012eee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ef0:	bf00      	nop
 8012ef2:	bd80      	pop	{r7, pc}
 8012ef4:	2000001c 	.word	0x2000001c

08012ef8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012f02:	4b17      	ldr	r3, [pc, #92]	@ (8012f60 <udp_new_port+0x68>)
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	1c5a      	adds	r2, r3, #1
 8012f08:	b291      	uxth	r1, r2
 8012f0a:	4a15      	ldr	r2, [pc, #84]	@ (8012f60 <udp_new_port+0x68>)
 8012f0c:	8011      	strh	r1, [r2, #0]
 8012f0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f12:	4293      	cmp	r3, r2
 8012f14:	d103      	bne.n	8012f1e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012f16:	4b12      	ldr	r3, [pc, #72]	@ (8012f60 <udp_new_port+0x68>)
 8012f18:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012f1c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f1e:	4b11      	ldr	r3, [pc, #68]	@ (8012f64 <udp_new_port+0x6c>)
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	603b      	str	r3, [r7, #0]
 8012f24:	e011      	b.n	8012f4a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	8a5a      	ldrh	r2, [r3, #18]
 8012f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012f60 <udp_new_port+0x68>)
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d108      	bne.n	8012f44 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012f32:	88fb      	ldrh	r3, [r7, #6]
 8012f34:	3301      	adds	r3, #1
 8012f36:	80fb      	strh	r3, [r7, #6]
 8012f38:	88fb      	ldrh	r3, [r7, #6]
 8012f3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012f3e:	d3e0      	bcc.n	8012f02 <udp_new_port+0xa>
        return 0;
 8012f40:	2300      	movs	r3, #0
 8012f42:	e007      	b.n	8012f54 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f44:	683b      	ldr	r3, [r7, #0]
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	603b      	str	r3, [r7, #0]
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d1ea      	bne.n	8012f26 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012f50:	4b03      	ldr	r3, [pc, #12]	@ (8012f60 <udp_new_port+0x68>)
 8012f52:	881b      	ldrh	r3, [r3, #0]
}
 8012f54:	4618      	mov	r0, r3
 8012f56:	370c      	adds	r7, #12
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr
 8012f60:	2000001c 	.word	0x2000001c
 8012f64:	20015100 	.word	0x20015100

08012f68 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	60f8      	str	r0, [r7, #12]
 8012f70:	60b9      	str	r1, [r7, #8]
 8012f72:	4613      	mov	r3, r2
 8012f74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d105      	bne.n	8012f88 <udp_input_local_match+0x20>
 8012f7c:	4b27      	ldr	r3, [pc, #156]	@ (801301c <udp_input_local_match+0xb4>)
 8012f7e:	2287      	movs	r2, #135	@ 0x87
 8012f80:	4927      	ldr	r1, [pc, #156]	@ (8013020 <udp_input_local_match+0xb8>)
 8012f82:	4828      	ldr	r0, [pc, #160]	@ (8013024 <udp_input_local_match+0xbc>)
 8012f84:	f005 f9bc 	bl	8018300 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d105      	bne.n	8012f9a <udp_input_local_match+0x32>
 8012f8e:	4b23      	ldr	r3, [pc, #140]	@ (801301c <udp_input_local_match+0xb4>)
 8012f90:	2288      	movs	r2, #136	@ 0x88
 8012f92:	4925      	ldr	r1, [pc, #148]	@ (8013028 <udp_input_local_match+0xc0>)
 8012f94:	4823      	ldr	r0, [pc, #140]	@ (8013024 <udp_input_local_match+0xbc>)
 8012f96:	f005 f9b3 	bl	8018300 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	7a1b      	ldrb	r3, [r3, #8]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00b      	beq.n	8012fba <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	7a1a      	ldrb	r2, [r3, #8]
 8012fa6:	4b21      	ldr	r3, [pc, #132]	@ (801302c <udp_input_local_match+0xc4>)
 8012fa8:	685b      	ldr	r3, [r3, #4]
 8012faa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012fae:	3301      	adds	r3, #1
 8012fb0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d001      	beq.n	8012fba <udp_input_local_match+0x52>
    return 0;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	e02b      	b.n	8013012 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012fba:	79fb      	ldrb	r3, [r7, #7]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d018      	beq.n	8012ff2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d013      	beq.n	8012fee <udp_input_local_match+0x86>
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d00f      	beq.n	8012fee <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fce:	4b17      	ldr	r3, [pc, #92]	@ (801302c <udp_input_local_match+0xc4>)
 8012fd0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fd6:	d00a      	beq.n	8012fee <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	681a      	ldr	r2, [r3, #0]
 8012fdc:	4b13      	ldr	r3, [pc, #76]	@ (801302c <udp_input_local_match+0xc4>)
 8012fde:	695b      	ldr	r3, [r3, #20]
 8012fe0:	405a      	eors	r2, r3
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	3308      	adds	r3, #8
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d110      	bne.n	8013010 <udp_input_local_match+0xa8>
          return 1;
 8012fee:	2301      	movs	r3, #1
 8012ff0:	e00f      	b.n	8013012 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d009      	beq.n	801300c <udp_input_local_match+0xa4>
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d005      	beq.n	801300c <udp_input_local_match+0xa4>
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	681a      	ldr	r2, [r3, #0]
 8013004:	4b09      	ldr	r3, [pc, #36]	@ (801302c <udp_input_local_match+0xc4>)
 8013006:	695b      	ldr	r3, [r3, #20]
 8013008:	429a      	cmp	r2, r3
 801300a:	d101      	bne.n	8013010 <udp_input_local_match+0xa8>
        return 1;
 801300c:	2301      	movs	r3, #1
 801300e:	e000      	b.n	8013012 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013010:	2300      	movs	r3, #0
}
 8013012:	4618      	mov	r0, r3
 8013014:	3710      	adds	r7, #16
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	0801bc64 	.word	0x0801bc64
 8013020:	0801bc94 	.word	0x0801bc94
 8013024:	0801bcb8 	.word	0x0801bcb8
 8013028:	0801bce0 	.word	0x0801bce0
 801302c:	20009320 	.word	0x20009320

08013030 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013030:	b590      	push	{r4, r7, lr}
 8013032:	b08d      	sub	sp, #52	@ 0x34
 8013034:	af02      	add	r7, sp, #8
 8013036:	6078      	str	r0, [r7, #4]
 8013038:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801303a:	2300      	movs	r3, #0
 801303c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d105      	bne.n	8013050 <udp_input+0x20>
 8013044:	4b87      	ldr	r3, [pc, #540]	@ (8013264 <udp_input+0x234>)
 8013046:	22cf      	movs	r2, #207	@ 0xcf
 8013048:	4987      	ldr	r1, [pc, #540]	@ (8013268 <udp_input+0x238>)
 801304a:	4888      	ldr	r0, [pc, #544]	@ (801326c <udp_input+0x23c>)
 801304c:	f005 f958 	bl	8018300 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013050:	683b      	ldr	r3, [r7, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d105      	bne.n	8013062 <udp_input+0x32>
 8013056:	4b83      	ldr	r3, [pc, #524]	@ (8013264 <udp_input+0x234>)
 8013058:	22d0      	movs	r2, #208	@ 0xd0
 801305a:	4985      	ldr	r1, [pc, #532]	@ (8013270 <udp_input+0x240>)
 801305c:	4883      	ldr	r0, [pc, #524]	@ (801326c <udp_input+0x23c>)
 801305e:	f005 f94f 	bl	8018300 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	895b      	ldrh	r3, [r3, #10]
 8013066:	2b07      	cmp	r3, #7
 8013068:	d803      	bhi.n	8013072 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f7f9 fe7e 	bl	800cd6c <pbuf_free>
    goto end;
 8013070:	e0f0      	b.n	8013254 <udp_input+0x224>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013078:	4b7e      	ldr	r3, [pc, #504]	@ (8013274 <udp_input+0x244>)
 801307a:	695b      	ldr	r3, [r3, #20]
 801307c:	4a7d      	ldr	r2, [pc, #500]	@ (8013274 <udp_input+0x244>)
 801307e:	6812      	ldr	r2, [r2, #0]
 8013080:	4611      	mov	r1, r2
 8013082:	4618      	mov	r0, r3
 8013084:	f003 fede 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 8013088:	4603      	mov	r3, r0
 801308a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801308c:	697b      	ldr	r3, [r7, #20]
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	b29b      	uxth	r3, r3
 8013092:	4618      	mov	r0, r3
 8013094:	f7f8 f994 	bl	800b3c0 <lwip_htons>
 8013098:	4603      	mov	r3, r0
 801309a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	885b      	ldrh	r3, [r3, #2]
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7f8 f98c 	bl	800b3c0 <lwip_htons>
 80130a8:	4603      	mov	r3, r0
 80130aa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80130ac:	2300      	movs	r3, #0
 80130ae:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80130b0:	2300      	movs	r3, #0
 80130b2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80130b4:	2300      	movs	r3, #0
 80130b6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130b8:	4b6f      	ldr	r3, [pc, #444]	@ (8013278 <udp_input+0x248>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80130be:	e054      	b.n	801316a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80130c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130c2:	8a5b      	ldrh	r3, [r3, #18]
 80130c4:	89fa      	ldrh	r2, [r7, #14]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d14a      	bne.n	8013160 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80130ca:	7cfb      	ldrb	r3, [r7, #19]
 80130cc:	461a      	mov	r2, r3
 80130ce:	6839      	ldr	r1, [r7, #0]
 80130d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80130d2:	f7ff ff49 	bl	8012f68 <udp_input_local_match>
 80130d6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d041      	beq.n	8013160 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80130dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130de:	7c1b      	ldrb	r3, [r3, #16]
 80130e0:	f003 0304 	and.w	r3, r3, #4
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d11d      	bne.n	8013124 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d102      	bne.n	80130f4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80130ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130f0:	61fb      	str	r3, [r7, #28]
 80130f2:	e017      	b.n	8013124 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80130f4:	7cfb      	ldrb	r3, [r7, #19]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d014      	beq.n	8013124 <udp_input+0xf4>
 80130fa:	4b5e      	ldr	r3, [pc, #376]	@ (8013274 <udp_input+0x244>)
 80130fc:	695b      	ldr	r3, [r3, #20]
 80130fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013102:	d10f      	bne.n	8013124 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	3304      	adds	r3, #4
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	429a      	cmp	r2, r3
 8013110:	d008      	beq.n	8013124 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	683b      	ldr	r3, [r7, #0]
 8013118:	3304      	adds	r3, #4
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	429a      	cmp	r2, r3
 801311e:	d101      	bne.n	8013124 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013122:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013126:	8a9b      	ldrh	r3, [r3, #20]
 8013128:	8a3a      	ldrh	r2, [r7, #16]
 801312a:	429a      	cmp	r2, r3
 801312c:	d118      	bne.n	8013160 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013130:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013132:	2b00      	cmp	r3, #0
 8013134:	d005      	beq.n	8013142 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013138:	685a      	ldr	r2, [r3, #4]
 801313a:	4b4e      	ldr	r3, [pc, #312]	@ (8013274 <udp_input+0x244>)
 801313c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801313e:	429a      	cmp	r2, r3
 8013140:	d10e      	bne.n	8013160 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013142:	6a3b      	ldr	r3, [r7, #32]
 8013144:	2b00      	cmp	r3, #0
 8013146:	d014      	beq.n	8013172 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801314a:	68da      	ldr	r2, [r3, #12]
 801314c:	6a3b      	ldr	r3, [r7, #32]
 801314e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013150:	4b49      	ldr	r3, [pc, #292]	@ (8013278 <udp_input+0x248>)
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013156:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013158:	4a47      	ldr	r2, [pc, #284]	@ (8013278 <udp_input+0x248>)
 801315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801315c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801315e:	e008      	b.n	8013172 <udp_input+0x142>
      }
    }

    prev = pcb;
 8013160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013162:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013166:	68db      	ldr	r3, [r3, #12]
 8013168:	627b      	str	r3, [r7, #36]	@ 0x24
 801316a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801316c:	2b00      	cmp	r3, #0
 801316e:	d1a7      	bne.n	80130c0 <udp_input+0x90>
 8013170:	e000      	b.n	8013174 <udp_input+0x144>
        break;
 8013172:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013176:	2b00      	cmp	r3, #0
 8013178:	d101      	bne.n	801317e <udp_input+0x14e>
    pcb = uncon_pcb;
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801317e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013180:	2b00      	cmp	r3, #0
 8013182:	d002      	beq.n	801318a <udp_input+0x15a>
    for_us = 1;
 8013184:	2301      	movs	r3, #1
 8013186:	76fb      	strb	r3, [r7, #27]
 8013188:	e00a      	b.n	80131a0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	3304      	adds	r3, #4
 801318e:	681a      	ldr	r2, [r3, #0]
 8013190:	4b38      	ldr	r3, [pc, #224]	@ (8013274 <udp_input+0x244>)
 8013192:	695b      	ldr	r3, [r3, #20]
 8013194:	429a      	cmp	r2, r3
 8013196:	bf0c      	ite	eq
 8013198:	2301      	moveq	r3, #1
 801319a:	2300      	movne	r3, #0
 801319c:	b2db      	uxtb	r3, r3
 801319e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80131a0:	7efb      	ldrb	r3, [r7, #27]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d052      	beq.n	801324c <udp_input+0x21c>
          goto chkerr;
        }
      } else
#endif /* LWIP_UDPLITE */
      {
        if (udphdr->chksum != 0) {
 80131a6:	697b      	ldr	r3, [r7, #20]
 80131a8:	88db      	ldrh	r3, [r3, #6]
 80131aa:	b29b      	uxth	r3, r3
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d00b      	beq.n	80131c8 <udp_input+0x198>
          if (ip_chksum_pseudo(p, IP_PROTO_UDP, p->tot_len,
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	891a      	ldrh	r2, [r3, #8]
 80131b4:	4b31      	ldr	r3, [pc, #196]	@ (801327c <udp_input+0x24c>)
 80131b6:	9300      	str	r3, [sp, #0]
 80131b8:	4b31      	ldr	r3, [pc, #196]	@ (8013280 <udp_input+0x250>)
 80131ba:	2111      	movs	r1, #17
 80131bc:	6878      	ldr	r0, [r7, #4]
 80131be:	f7f8 fa31 	bl	800b624 <ip_chksum_pseudo>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d146      	bne.n	8013256 <udp_input+0x226>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80131c8:	2108      	movs	r1, #8
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7f9 fd48 	bl	800cc60 <pbuf_remove_header>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00a      	beq.n	80131ec <udp_input+0x1bc>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80131d6:	4b23      	ldr	r3, [pc, #140]	@ (8013264 <udp_input+0x234>)
 80131d8:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80131dc:	4929      	ldr	r1, [pc, #164]	@ (8013284 <udp_input+0x254>)
 80131de:	4823      	ldr	r0, [pc, #140]	@ (801326c <udp_input+0x23c>)
 80131e0:	f005 f88e 	bl	8018300 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	f7f9 fdc1 	bl	800cd6c <pbuf_free>
      goto end;
 80131ea:	e033      	b.n	8013254 <udp_input+0x224>
    }

    if (pcb != NULL) {
 80131ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d012      	beq.n	8013218 <udp_input+0x1e8>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80131f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131f4:	699b      	ldr	r3, [r3, #24]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00a      	beq.n	8013210 <udp_input+0x1e0>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80131fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131fc:	699c      	ldr	r4, [r3, #24]
 80131fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013200:	69d8      	ldr	r0, [r3, #28]
 8013202:	8a3b      	ldrh	r3, [r7, #16]
 8013204:	9300      	str	r3, [sp, #0]
 8013206:	4b1e      	ldr	r3, [pc, #120]	@ (8013280 <udp_input+0x250>)
 8013208:	687a      	ldr	r2, [r7, #4]
 801320a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801320c:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801320e:	e026      	b.n	801325e <udp_input+0x22e>
        pbuf_free(p);
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7f9 fdab 	bl	800cd6c <pbuf_free>
        goto end;
 8013216:	e01d      	b.n	8013254 <udp_input+0x224>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013218:	7cfb      	ldrb	r3, [r7, #19]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d112      	bne.n	8013244 <udp_input+0x214>
 801321e:	4b15      	ldr	r3, [pc, #84]	@ (8013274 <udp_input+0x244>)
 8013220:	695b      	ldr	r3, [r3, #20]
 8013222:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013226:	2be0      	cmp	r3, #224	@ 0xe0
 8013228:	d00c      	beq.n	8013244 <udp_input+0x214>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801322a:	4b12      	ldr	r3, [pc, #72]	@ (8013274 <udp_input+0x244>)
 801322c:	899b      	ldrh	r3, [r3, #12]
 801322e:	3308      	adds	r3, #8
 8013230:	b29b      	uxth	r3, r3
 8013232:	b21b      	sxth	r3, r3
 8013234:	4619      	mov	r1, r3
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7f9 fd85 	bl	800cd46 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801323c:	2103      	movs	r1, #3
 801323e:	6878      	ldr	r0, [r7, #4]
 8013240:	f003 fa46 	bl	80166d0 <icmp_dest_unreach>
      pbuf_free(p);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7f9 fd91 	bl	800cd6c <pbuf_free>
  return;
 801324a:	e008      	b.n	801325e <udp_input+0x22e>
    pbuf_free(p);
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7f9 fd8d 	bl	800cd6c <pbuf_free>
  return;
 8013252:	e004      	b.n	801325e <udp_input+0x22e>
 8013254:	e003      	b.n	801325e <udp_input+0x22e>
            goto chkerr;
 8013256:	bf00      	nop
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
              ("udp_input: UDP (or UDP Lite) datagram discarded due to failing checksum\n"));
  UDP_STATS_INC(udp.chkerr);
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7f9 fd87 	bl	800cd6c <pbuf_free>
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801325e:	372c      	adds	r7, #44	@ 0x2c
 8013260:	46bd      	mov	sp, r7
 8013262:	bd90      	pop	{r4, r7, pc}
 8013264:	0801bc64 	.word	0x0801bc64
 8013268:	0801bd08 	.word	0x0801bd08
 801326c:	0801bcb8 	.word	0x0801bcb8
 8013270:	0801bd20 	.word	0x0801bd20
 8013274:	20009320 	.word	0x20009320
 8013278:	20015100 	.word	0x20015100
 801327c:	20009334 	.word	0x20009334
 8013280:	20009330 	.word	0x20009330
 8013284:	0801bd3c 	.word	0x0801bd3c

08013288 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b088      	sub	sp, #32
 801328c:	af02      	add	r7, sp, #8
 801328e:	60f8      	str	r0, [r7, #12]
 8013290:	60b9      	str	r1, [r7, #8]
 8013292:	607a      	str	r2, [r7, #4]
 8013294:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d109      	bne.n	80132b0 <udp_sendto_if+0x28>
 801329c:	4b2e      	ldr	r3, [pc, #184]	@ (8013358 <udp_sendto_if+0xd0>)
 801329e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80132a2:	492e      	ldr	r1, [pc, #184]	@ (801335c <udp_sendto_if+0xd4>)
 80132a4:	482e      	ldr	r0, [pc, #184]	@ (8013360 <udp_sendto_if+0xd8>)
 80132a6:	f005 f82b 	bl	8018300 <iprintf>
 80132aa:	f06f 030f 	mvn.w	r3, #15
 80132ae:	e04f      	b.n	8013350 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d109      	bne.n	80132ca <udp_sendto_if+0x42>
 80132b6:	4b28      	ldr	r3, [pc, #160]	@ (8013358 <udp_sendto_if+0xd0>)
 80132b8:	f240 2281 	movw	r2, #641	@ 0x281
 80132bc:	4929      	ldr	r1, [pc, #164]	@ (8013364 <udp_sendto_if+0xdc>)
 80132be:	4828      	ldr	r0, [pc, #160]	@ (8013360 <udp_sendto_if+0xd8>)
 80132c0:	f005 f81e 	bl	8018300 <iprintf>
 80132c4:	f06f 030f 	mvn.w	r3, #15
 80132c8:	e042      	b.n	8013350 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d109      	bne.n	80132e4 <udp_sendto_if+0x5c>
 80132d0:	4b21      	ldr	r3, [pc, #132]	@ (8013358 <udp_sendto_if+0xd0>)
 80132d2:	f240 2282 	movw	r2, #642	@ 0x282
 80132d6:	4924      	ldr	r1, [pc, #144]	@ (8013368 <udp_sendto_if+0xe0>)
 80132d8:	4821      	ldr	r0, [pc, #132]	@ (8013360 <udp_sendto_if+0xd8>)
 80132da:	f005 f811 	bl	8018300 <iprintf>
 80132de:	f06f 030f 	mvn.w	r3, #15
 80132e2:	e035      	b.n	8013350 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80132e4:	6a3b      	ldr	r3, [r7, #32]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d109      	bne.n	80132fe <udp_sendto_if+0x76>
 80132ea:	4b1b      	ldr	r3, [pc, #108]	@ (8013358 <udp_sendto_if+0xd0>)
 80132ec:	f240 2283 	movw	r2, #643	@ 0x283
 80132f0:	491e      	ldr	r1, [pc, #120]	@ (801336c <udp_sendto_if+0xe4>)
 80132f2:	481b      	ldr	r0, [pc, #108]	@ (8013360 <udp_sendto_if+0xd8>)
 80132f4:	f005 f804 	bl	8018300 <iprintf>
 80132f8:	f06f 030f 	mvn.w	r3, #15
 80132fc:	e028      	b.n	8013350 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d009      	beq.n	8013318 <udp_sendto_if+0x90>
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d005      	beq.n	8013318 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013314:	2be0      	cmp	r3, #224	@ 0xe0
 8013316:	d103      	bne.n	8013320 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013318:	6a3b      	ldr	r3, [r7, #32]
 801331a:	3304      	adds	r3, #4
 801331c:	617b      	str	r3, [r7, #20]
 801331e:	e00b      	b.n	8013338 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	681a      	ldr	r2, [r3, #0]
 8013324:	6a3b      	ldr	r3, [r7, #32]
 8013326:	3304      	adds	r3, #4
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	429a      	cmp	r2, r3
 801332c:	d002      	beq.n	8013334 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801332e:	f06f 0303 	mvn.w	r3, #3
 8013332:	e00d      	b.n	8013350 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013338:	887a      	ldrh	r2, [r7, #2]
 801333a:	697b      	ldr	r3, [r7, #20]
 801333c:	9301      	str	r3, [sp, #4]
 801333e:	6a3b      	ldr	r3, [r7, #32]
 8013340:	9300      	str	r3, [sp, #0]
 8013342:	4613      	mov	r3, r2
 8013344:	687a      	ldr	r2, [r7, #4]
 8013346:	68b9      	ldr	r1, [r7, #8]
 8013348:	68f8      	ldr	r0, [r7, #12]
 801334a:	f000 f811 	bl	8013370 <udp_sendto_if_src>
 801334e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013350:	4618      	mov	r0, r3
 8013352:	3718      	adds	r7, #24
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}
 8013358:	0801bc64 	.word	0x0801bc64
 801335c:	0801bdd8 	.word	0x0801bdd8
 8013360:	0801bcb8 	.word	0x0801bcb8
 8013364:	0801bdf4 	.word	0x0801bdf4
 8013368:	0801be10 	.word	0x0801be10
 801336c:	0801be30 	.word	0x0801be30

08013370 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08c      	sub	sp, #48	@ 0x30
 8013374:	af04      	add	r7, sp, #16
 8013376:	60f8      	str	r0, [r7, #12]
 8013378:	60b9      	str	r1, [r7, #8]
 801337a:	607a      	str	r2, [r7, #4]
 801337c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d109      	bne.n	8013398 <udp_sendto_if_src+0x28>
 8013384:	4b72      	ldr	r3, [pc, #456]	@ (8013550 <udp_sendto_if_src+0x1e0>)
 8013386:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801338a:	4972      	ldr	r1, [pc, #456]	@ (8013554 <udp_sendto_if_src+0x1e4>)
 801338c:	4872      	ldr	r0, [pc, #456]	@ (8013558 <udp_sendto_if_src+0x1e8>)
 801338e:	f004 ffb7 	bl	8018300 <iprintf>
 8013392:	f06f 030f 	mvn.w	r3, #15
 8013396:	e0d6      	b.n	8013546 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	2b00      	cmp	r3, #0
 801339c:	d109      	bne.n	80133b2 <udp_sendto_if_src+0x42>
 801339e:	4b6c      	ldr	r3, [pc, #432]	@ (8013550 <udp_sendto_if_src+0x1e0>)
 80133a0:	f240 22d2 	movw	r2, #722	@ 0x2d2
 80133a4:	496d      	ldr	r1, [pc, #436]	@ (801355c <udp_sendto_if_src+0x1ec>)
 80133a6:	486c      	ldr	r0, [pc, #432]	@ (8013558 <udp_sendto_if_src+0x1e8>)
 80133a8:	f004 ffaa 	bl	8018300 <iprintf>
 80133ac:	f06f 030f 	mvn.w	r3, #15
 80133b0:	e0c9      	b.n	8013546 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d109      	bne.n	80133cc <udp_sendto_if_src+0x5c>
 80133b8:	4b65      	ldr	r3, [pc, #404]	@ (8013550 <udp_sendto_if_src+0x1e0>)
 80133ba:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80133be:	4968      	ldr	r1, [pc, #416]	@ (8013560 <udp_sendto_if_src+0x1f0>)
 80133c0:	4865      	ldr	r0, [pc, #404]	@ (8013558 <udp_sendto_if_src+0x1e8>)
 80133c2:	f004 ff9d 	bl	8018300 <iprintf>
 80133c6:	f06f 030f 	mvn.w	r3, #15
 80133ca:	e0bc      	b.n	8013546 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80133cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d109      	bne.n	80133e6 <udp_sendto_if_src+0x76>
 80133d2:	4b5f      	ldr	r3, [pc, #380]	@ (8013550 <udp_sendto_if_src+0x1e0>)
 80133d4:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80133d8:	4962      	ldr	r1, [pc, #392]	@ (8013564 <udp_sendto_if_src+0x1f4>)
 80133da:	485f      	ldr	r0, [pc, #380]	@ (8013558 <udp_sendto_if_src+0x1e8>)
 80133dc:	f004 ff90 	bl	8018300 <iprintf>
 80133e0:	f06f 030f 	mvn.w	r3, #15
 80133e4:	e0af      	b.n	8013546 <udp_sendto_if_src+0x1d6>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80133e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d109      	bne.n	8013400 <udp_sendto_if_src+0x90>
 80133ec:	4b58      	ldr	r3, [pc, #352]	@ (8013550 <udp_sendto_if_src+0x1e0>)
 80133ee:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80133f2:	495d      	ldr	r1, [pc, #372]	@ (8013568 <udp_sendto_if_src+0x1f8>)
 80133f4:	4858      	ldr	r0, [pc, #352]	@ (8013558 <udp_sendto_if_src+0x1e8>)
 80133f6:	f004 ff83 	bl	8018300 <iprintf>
 80133fa:	f06f 030f 	mvn.w	r3, #15
 80133fe:	e0a2      	b.n	8013546 <udp_sendto_if_src+0x1d6>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	8a5b      	ldrh	r3, [r3, #18]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d10f      	bne.n	8013428 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013408:	68f9      	ldr	r1, [r7, #12]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	8a5b      	ldrh	r3, [r3, #18]
 801340e:	461a      	mov	r2, r3
 8013410:	68f8      	ldr	r0, [r7, #12]
 8013412:	f000 f8ad 	bl	8013570 <udp_bind>
 8013416:	4603      	mov	r3, r0
 8013418:	767b      	strb	r3, [r7, #25]
    if (err != ERR_OK) {
 801341a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d002      	beq.n	8013428 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013422:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8013426:	e08e      	b.n	8013546 <udp_sendto_if_src+0x1d6>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	891b      	ldrh	r3, [r3, #8]
 801342c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013430:	4293      	cmp	r3, r2
 8013432:	d902      	bls.n	801343a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013434:	f04f 33ff 	mov.w	r3, #4294967295
 8013438:	e085      	b.n	8013546 <udp_sendto_if_src+0x1d6>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801343a:	2108      	movs	r1, #8
 801343c:	68b8      	ldr	r0, [r7, #8]
 801343e:	f7f9 fbff 	bl	800cc40 <pbuf_add_header>
 8013442:	4603      	mov	r3, r0
 8013444:	2b00      	cmp	r3, #0
 8013446:	d015      	beq.n	8013474 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013448:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801344c:	2108      	movs	r1, #8
 801344e:	2022      	movs	r0, #34	@ 0x22
 8013450:	f7f9 f9a8 	bl	800c7a4 <pbuf_alloc>
 8013454:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013456:	69fb      	ldr	r3, [r7, #28]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d102      	bne.n	8013462 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801345c:	f04f 33ff 	mov.w	r3, #4294967295
 8013460:	e071      	b.n	8013546 <udp_sendto_if_src+0x1d6>
    }
    if (p->tot_len != 0) {
 8013462:	68bb      	ldr	r3, [r7, #8]
 8013464:	891b      	ldrh	r3, [r3, #8]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d006      	beq.n	8013478 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801346a:	68b9      	ldr	r1, [r7, #8]
 801346c:	69f8      	ldr	r0, [r7, #28]
 801346e:	f7f9 fda1 	bl	800cfb4 <pbuf_chain>
 8013472:	e001      	b.n	8013478 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013474:	68bb      	ldr	r3, [r7, #8]
 8013476:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	895b      	ldrh	r3, [r3, #10]
 801347c:	2b07      	cmp	r3, #7
 801347e:	d806      	bhi.n	801348e <udp_sendto_if_src+0x11e>
 8013480:	4b33      	ldr	r3, [pc, #204]	@ (8013550 <udp_sendto_if_src+0x1e0>)
 8013482:	f240 320d 	movw	r2, #781	@ 0x30d
 8013486:	4939      	ldr	r1, [pc, #228]	@ (801356c <udp_sendto_if_src+0x1fc>)
 8013488:	4833      	ldr	r0, [pc, #204]	@ (8013558 <udp_sendto_if_src+0x1e8>)
 801348a:	f004 ff39 	bl	8018300 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801348e:	69fb      	ldr	r3, [r7, #28]
 8013490:	685b      	ldr	r3, [r3, #4]
 8013492:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	8a5b      	ldrh	r3, [r3, #18]
 8013498:	4618      	mov	r0, r3
 801349a:	f7f7 ff91 	bl	800b3c0 <lwip_htons>
 801349e:	4603      	mov	r3, r0
 80134a0:	461a      	mov	r2, r3
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80134a6:	887b      	ldrh	r3, [r7, #2]
 80134a8:	4618      	mov	r0, r3
 80134aa:	f7f7 ff89 	bl	800b3c0 <lwip_htons>
 80134ae:	4603      	mov	r3, r0
 80134b0:	461a      	mov	r2, r3
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80134b6:	697b      	ldr	r3, [r7, #20]
 80134b8:	2200      	movs	r2, #0
 80134ba:	719a      	strb	r2, [r3, #6]
 80134bc:	2200      	movs	r2, #0
 80134be:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	891b      	ldrh	r3, [r3, #8]
 80134c4:	4618      	mov	r0, r3
 80134c6:	f7f7 ff7b 	bl	800b3c0 <lwip_htons>
 80134ca:	4603      	mov	r3, r0
 80134cc:	461a      	mov	r2, r3
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	809a      	strh	r2, [r3, #4]
    /* calculate checksum */
#if CHECKSUM_GEN_UDP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_UDP) {
      /* Checksum is mandatory over IPv6. */
      if (IP_IS_V6(dst_ip) || (pcb->flags & UDP_FLAGS_NOCHKSUM) == 0) {
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	7c1b      	ldrb	r3, [r3, #16]
 80134d6:	f003 0301 	and.w	r3, r3, #1
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d113      	bne.n	8013506 <udp_sendto_if_src+0x196>
          acc = udpchksum + (u16_t)~(chksum);
          udpchksum = FOLD_U32T(acc);
        } else
#endif /* LWIP_CHECKSUM_ON_COPY */
        {
          udpchksum = ip_chksum_pseudo(q, IP_PROTO_UDP, q->tot_len,
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	891a      	ldrh	r2, [r3, #8]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134e8:	2111      	movs	r1, #17
 80134ea:	69f8      	ldr	r0, [r7, #28]
 80134ec:	f7f8 f89a 	bl	800b624 <ip_chksum_pseudo>
 80134f0:	4603      	mov	r3, r0
 80134f2:	837b      	strh	r3, [r7, #26]
                                       src_ip, dst_ip);
        }

        /* chksum zero must become 0xffff, as zero means 'no checksum' */
        if (udpchksum == 0x0000) {
 80134f4:	8b7b      	ldrh	r3, [r7, #26]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d102      	bne.n	8013500 <udp_sendto_if_src+0x190>
          udpchksum = 0xffff;
 80134fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80134fe:	837b      	strh	r3, [r7, #26]
        }
        udphdr->chksum = udpchksum;
 8013500:	697b      	ldr	r3, [r7, #20]
 8013502:	8b7a      	ldrh	r2, [r7, #26]
 8013504:	80da      	strh	r2, [r3, #6]
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013506:	2311      	movs	r3, #17
 8013508:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	7adb      	ldrb	r3, [r3, #11]
 801350e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013510:	68fb      	ldr	r3, [r7, #12]
 8013512:	7a9b      	ldrb	r3, [r3, #10]
 8013514:	7cb9      	ldrb	r1, [r7, #18]
 8013516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013518:	9202      	str	r2, [sp, #8]
 801351a:	7cfa      	ldrb	r2, [r7, #19]
 801351c:	9201      	str	r2, [sp, #4]
 801351e:	9300      	str	r3, [sp, #0]
 8013520:	460b      	mov	r3, r1
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013526:	69f8      	ldr	r0, [r7, #28]
 8013528:	f003 fb78 	bl	8016c1c <ip4_output_if_src>
 801352c:	4603      	mov	r3, r0
 801352e:	767b      	strb	r3, [r7, #25]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013530:	69fa      	ldr	r2, [r7, #28]
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	429a      	cmp	r2, r3
 8013536:	d004      	beq.n	8013542 <udp_sendto_if_src+0x1d2>
    /* free the header pbuf */
    pbuf_free(q);
 8013538:	69f8      	ldr	r0, [r7, #28]
 801353a:	f7f9 fc17 	bl	800cd6c <pbuf_free>
    q = NULL;
 801353e:	2300      	movs	r3, #0
 8013540:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013542:	f997 3019 	ldrsb.w	r3, [r7, #25]
}
 8013546:	4618      	mov	r0, r3
 8013548:	3720      	adds	r7, #32
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	0801bc64 	.word	0x0801bc64
 8013554:	0801be50 	.word	0x0801be50
 8013558:	0801bcb8 	.word	0x0801bcb8
 801355c:	0801be70 	.word	0x0801be70
 8013560:	0801be90 	.word	0x0801be90
 8013564:	0801beb4 	.word	0x0801beb4
 8013568:	0801bed8 	.word	0x0801bed8
 801356c:	0801befc 	.word	0x0801befc

08013570 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013570:	b580      	push	{r7, lr}
 8013572:	b086      	sub	sp, #24
 8013574:	af00      	add	r7, sp, #0
 8013576:	60f8      	str	r0, [r7, #12]
 8013578:	60b9      	str	r1, [r7, #8]
 801357a:	4613      	mov	r3, r2
 801357c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d101      	bne.n	8013588 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013584:	4b39      	ldr	r3, [pc, #228]	@ (801366c <udp_bind+0xfc>)
 8013586:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d109      	bne.n	80135a2 <udp_bind+0x32>
 801358e:	4b38      	ldr	r3, [pc, #224]	@ (8013670 <udp_bind+0x100>)
 8013590:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8013594:	4937      	ldr	r1, [pc, #220]	@ (8013674 <udp_bind+0x104>)
 8013596:	4838      	ldr	r0, [pc, #224]	@ (8013678 <udp_bind+0x108>)
 8013598:	f004 feb2 	bl	8018300 <iprintf>
 801359c:	f06f 030f 	mvn.w	r3, #15
 80135a0:	e060      	b.n	8013664 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80135a2:	2300      	movs	r3, #0
 80135a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135a6:	4b35      	ldr	r3, [pc, #212]	@ (801367c <udp_bind+0x10c>)
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	617b      	str	r3, [r7, #20]
 80135ac:	e009      	b.n	80135c2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80135ae:	68fa      	ldr	r2, [r7, #12]
 80135b0:	697b      	ldr	r3, [r7, #20]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d102      	bne.n	80135bc <udp_bind+0x4c>
      rebind = 1;
 80135b6:	2301      	movs	r3, #1
 80135b8:	74fb      	strb	r3, [r7, #19]
      break;
 80135ba:	e005      	b.n	80135c8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	68db      	ldr	r3, [r3, #12]
 80135c0:	617b      	str	r3, [r7, #20]
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1f2      	bne.n	80135ae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80135c8:	88fb      	ldrh	r3, [r7, #6]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d109      	bne.n	80135e2 <udp_bind+0x72>
    port = udp_new_port();
 80135ce:	f7ff fc93 	bl	8012ef8 <udp_new_port>
 80135d2:	4603      	mov	r3, r0
 80135d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80135d6:	88fb      	ldrh	r3, [r7, #6]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d12c      	bne.n	8013636 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80135dc:	f06f 0307 	mvn.w	r3, #7
 80135e0:	e040      	b.n	8013664 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135e2:	4b26      	ldr	r3, [pc, #152]	@ (801367c <udp_bind+0x10c>)
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	617b      	str	r3, [r7, #20]
 80135e8:	e022      	b.n	8013630 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80135ea:	68fa      	ldr	r2, [r7, #12]
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d01b      	beq.n	801362a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	8a5b      	ldrh	r3, [r3, #18]
 80135f6:	88fa      	ldrh	r2, [r7, #6]
 80135f8:	429a      	cmp	r2, r3
 80135fa:	d116      	bne.n	801362a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80135fc:	697b      	ldr	r3, [r7, #20]
 80135fe:	681a      	ldr	r2, [r3, #0]
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013604:	429a      	cmp	r2, r3
 8013606:	d00d      	beq.n	8013624 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013608:	68bb      	ldr	r3, [r7, #8]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d00a      	beq.n	8013624 <udp_bind+0xb4>
 801360e:	68bb      	ldr	r3, [r7, #8]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d006      	beq.n	8013624 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013616:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013618:	2b00      	cmp	r3, #0
 801361a:	d003      	beq.n	8013624 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	2b00      	cmp	r3, #0
 8013622:	d102      	bne.n	801362a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013624:	f06f 0307 	mvn.w	r3, #7
 8013628:	e01c      	b.n	8013664 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	68db      	ldr	r3, [r3, #12]
 801362e:	617b      	str	r3, [r7, #20]
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d1d9      	bne.n	80135ea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013636:	68bb      	ldr	r3, [r7, #8]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d002      	beq.n	8013642 <udp_bind+0xd2>
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	e000      	b.n	8013644 <udp_bind+0xd4>
 8013642:	2300      	movs	r3, #0
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	88fa      	ldrh	r2, [r7, #6]
 801364c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801364e:	7cfb      	ldrb	r3, [r7, #19]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d106      	bne.n	8013662 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013654:	4b09      	ldr	r3, [pc, #36]	@ (801367c <udp_bind+0x10c>)
 8013656:	681a      	ldr	r2, [r3, #0]
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801365c:	4a07      	ldr	r2, [pc, #28]	@ (801367c <udp_bind+0x10c>)
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	3718      	adds	r7, #24
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}
 801366c:	0801cb98 	.word	0x0801cb98
 8013670:	0801bc64 	.word	0x0801bc64
 8013674:	0801bf2c 	.word	0x0801bf2c
 8013678:	0801bcb8 	.word	0x0801bcb8
 801367c:	20015100 	.word	0x20015100

08013680 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	4613      	mov	r3, r2
 801368c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d109      	bne.n	80136a8 <udp_connect+0x28>
 8013694:	4b2c      	ldr	r3, [pc, #176]	@ (8013748 <udp_connect+0xc8>)
 8013696:	f240 4235 	movw	r2, #1077	@ 0x435
 801369a:	492c      	ldr	r1, [pc, #176]	@ (801374c <udp_connect+0xcc>)
 801369c:	482c      	ldr	r0, [pc, #176]	@ (8013750 <udp_connect+0xd0>)
 801369e:	f004 fe2f 	bl	8018300 <iprintf>
 80136a2:	f06f 030f 	mvn.w	r3, #15
 80136a6:	e04b      	b.n	8013740 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d109      	bne.n	80136c2 <udp_connect+0x42>
 80136ae:	4b26      	ldr	r3, [pc, #152]	@ (8013748 <udp_connect+0xc8>)
 80136b0:	f240 4236 	movw	r2, #1078	@ 0x436
 80136b4:	4927      	ldr	r1, [pc, #156]	@ (8013754 <udp_connect+0xd4>)
 80136b6:	4826      	ldr	r0, [pc, #152]	@ (8013750 <udp_connect+0xd0>)
 80136b8:	f004 fe22 	bl	8018300 <iprintf>
 80136bc:	f06f 030f 	mvn.w	r3, #15
 80136c0:	e03e      	b.n	8013740 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	8a5b      	ldrh	r3, [r3, #18]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d10f      	bne.n	80136ea <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80136ca:	68f9      	ldr	r1, [r7, #12]
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	8a5b      	ldrh	r3, [r3, #18]
 80136d0:	461a      	mov	r2, r3
 80136d2:	68f8      	ldr	r0, [r7, #12]
 80136d4:	f7ff ff4c 	bl	8013570 <udp_bind>
 80136d8:	4603      	mov	r3, r0
 80136da:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80136dc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d002      	beq.n	80136ea <udp_connect+0x6a>
      return err;
 80136e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80136e8:	e02a      	b.n	8013740 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80136ea:	68bb      	ldr	r3, [r7, #8]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d002      	beq.n	80136f6 <udp_connect+0x76>
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	e000      	b.n	80136f8 <udp_connect+0x78>
 80136f6:	2300      	movs	r3, #0
 80136f8:	68fa      	ldr	r2, [r7, #12]
 80136fa:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	88fa      	ldrh	r2, [r7, #6]
 8013700:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	7c1b      	ldrb	r3, [r3, #16]
 8013706:	f043 0304 	orr.w	r3, r3, #4
 801370a:	b2da      	uxtb	r2, r3
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013710:	4b11      	ldr	r3, [pc, #68]	@ (8013758 <udp_connect+0xd8>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	617b      	str	r3, [r7, #20]
 8013716:	e008      	b.n	801372a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8013718:	68fa      	ldr	r2, [r7, #12]
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	429a      	cmp	r2, r3
 801371e:	d101      	bne.n	8013724 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8013720:	2300      	movs	r3, #0
 8013722:	e00d      	b.n	8013740 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	68db      	ldr	r3, [r3, #12]
 8013728:	617b      	str	r3, [r7, #20]
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d1f3      	bne.n	8013718 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8013730:	4b09      	ldr	r3, [pc, #36]	@ (8013758 <udp_connect+0xd8>)
 8013732:	681a      	ldr	r2, [r3, #0]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013738:	4a07      	ldr	r2, [pc, #28]	@ (8013758 <udp_connect+0xd8>)
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801373e:	2300      	movs	r3, #0
}
 8013740:	4618      	mov	r0, r3
 8013742:	3718      	adds	r7, #24
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}
 8013748:	0801bc64 	.word	0x0801bc64
 801374c:	0801bf44 	.word	0x0801bf44
 8013750:	0801bcb8 	.word	0x0801bcb8
 8013754:	0801bf60 	.word	0x0801bf60
 8013758:	20015100 	.word	0x20015100

0801375c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d107      	bne.n	801377e <udp_recv+0x22>
 801376e:	4b08      	ldr	r3, [pc, #32]	@ (8013790 <udp_recv+0x34>)
 8013770:	f240 428a 	movw	r2, #1162	@ 0x48a
 8013774:	4907      	ldr	r1, [pc, #28]	@ (8013794 <udp_recv+0x38>)
 8013776:	4808      	ldr	r0, [pc, #32]	@ (8013798 <udp_recv+0x3c>)
 8013778:	f004 fdc2 	bl	8018300 <iprintf>
 801377c:	e005      	b.n	801378a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	68ba      	ldr	r2, [r7, #8]
 8013782:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	61da      	str	r2, [r3, #28]
}
 801378a:	3710      	adds	r7, #16
 801378c:	46bd      	mov	sp, r7
 801378e:	bd80      	pop	{r7, pc}
 8013790:	0801bc64 	.word	0x0801bc64
 8013794:	0801bf98 	.word	0x0801bf98
 8013798:	0801bcb8 	.word	0x0801bcb8

0801379c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d107      	bne.n	80137ba <udp_remove+0x1e>
 80137aa:	4b19      	ldr	r3, [pc, #100]	@ (8013810 <udp_remove+0x74>)
 80137ac:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80137b0:	4918      	ldr	r1, [pc, #96]	@ (8013814 <udp_remove+0x78>)
 80137b2:	4819      	ldr	r0, [pc, #100]	@ (8013818 <udp_remove+0x7c>)
 80137b4:	f004 fda4 	bl	8018300 <iprintf>
 80137b8:	e026      	b.n	8013808 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80137ba:	4b18      	ldr	r3, [pc, #96]	@ (801381c <udp_remove+0x80>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	d105      	bne.n	80137d0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80137c4:	4b15      	ldr	r3, [pc, #84]	@ (801381c <udp_remove+0x80>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	4a14      	ldr	r2, [pc, #80]	@ (801381c <udp_remove+0x80>)
 80137cc:	6013      	str	r3, [r2, #0]
 80137ce:	e017      	b.n	8013800 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80137d0:	4b12      	ldr	r3, [pc, #72]	@ (801381c <udp_remove+0x80>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	60fb      	str	r3, [r7, #12]
 80137d6:	e010      	b.n	80137fa <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d009      	beq.n	80137f4 <udp_remove+0x58>
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	687a      	ldr	r2, [r7, #4]
 80137e6:	429a      	cmp	r2, r3
 80137e8:	d104      	bne.n	80137f4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	68da      	ldr	r2, [r3, #12]
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	60da      	str	r2, [r3, #12]
        break;
 80137f2:	e005      	b.n	8013800 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	68db      	ldr	r3, [r3, #12]
 80137f8:	60fb      	str	r3, [r7, #12]
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d1eb      	bne.n	80137d8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013800:	6879      	ldr	r1, [r7, #4]
 8013802:	2000      	movs	r0, #0
 8013804:	f7f8 fc5c 	bl	800c0c0 <memp_free>
}
 8013808:	3710      	adds	r7, #16
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	0801bc64 	.word	0x0801bc64
 8013814:	0801bfb0 	.word	0x0801bfb0
 8013818:	0801bcb8 	.word	0x0801bcb8
 801381c:	20015100 	.word	0x20015100

08013820 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013826:	2000      	movs	r0, #0
 8013828:	f7f8 fbf8 	bl	800c01c <memp_malloc>
 801382c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d007      	beq.n	8013844 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013834:	2220      	movs	r2, #32
 8013836:	2100      	movs	r1, #0
 8013838:	6878      	ldr	r0, [r7, #4]
 801383a:	f004 fdc6 	bl	80183ca <memset>
    pcb->ttl = UDP_TTL;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	22ff      	movs	r2, #255	@ 0xff
 8013842:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013844:	687b      	ldr	r3, [r7, #4]
}
 8013846:	4618      	mov	r0, r3
 8013848:	3708      	adds	r7, #8
 801384a:	46bd      	mov	sp, r7
 801384c:	bd80      	pop	{r7, pc}

0801384e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801384e:	b580      	push	{r7, lr}
 8013850:	b084      	sub	sp, #16
 8013852:	af00      	add	r7, sp, #0
 8013854:	4603      	mov	r3, r0
 8013856:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8013858:	f7ff ffe2 	bl	8013820 <udp_new>
 801385c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801385e:	68fb      	ldr	r3, [r7, #12]
}
 8013860:	4618      	mov	r0, r3
 8013862:	3710      	adds	r7, #16
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013868:	b480      	push	{r7}
 801386a:	b085      	sub	sp, #20
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d01e      	beq.n	80138b6 <udp_netif_ip_addr_changed+0x4e>
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d01a      	beq.n	80138b6 <udp_netif_ip_addr_changed+0x4e>
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d017      	beq.n	80138b6 <udp_netif_ip_addr_changed+0x4e>
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d013      	beq.n	80138b6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801388e:	4b0d      	ldr	r3, [pc, #52]	@ (80138c4 <udp_netif_ip_addr_changed+0x5c>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	60fb      	str	r3, [r7, #12]
 8013894:	e00c      	b.n	80138b0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	429a      	cmp	r2, r3
 80138a0:	d103      	bne.n	80138aa <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80138a2:	683b      	ldr	r3, [r7, #0]
 80138a4:	681a      	ldr	r2, [r3, #0]
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	68db      	ldr	r3, [r3, #12]
 80138ae:	60fb      	str	r3, [r7, #12]
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d1ef      	bne.n	8013896 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80138b6:	bf00      	nop
 80138b8:	3714      	adds	r7, #20
 80138ba:	46bd      	mov	sp, r7
 80138bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138c0:	4770      	bx	lr
 80138c2:	bf00      	nop
 80138c4:	20015100 	.word	0x20015100

080138c8 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 80138c8:	b580      	push	{r7, lr}
 80138ca:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80138cc:	4b20      	ldr	r3, [pc, #128]	@ (8013950 <dhcp_inc_pcb_refcount+0x88>)
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d133      	bne.n	801393c <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80138d4:	4b1f      	ldr	r3, [pc, #124]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d005      	beq.n	80138e8 <dhcp_inc_pcb_refcount+0x20>
 80138dc:	4b1e      	ldr	r3, [pc, #120]	@ (8013958 <dhcp_inc_pcb_refcount+0x90>)
 80138de:	22e5      	movs	r2, #229	@ 0xe5
 80138e0:	491e      	ldr	r1, [pc, #120]	@ (801395c <dhcp_inc_pcb_refcount+0x94>)
 80138e2:	481f      	ldr	r0, [pc, #124]	@ (8013960 <dhcp_inc_pcb_refcount+0x98>)
 80138e4:	f004 fd0c 	bl	8018300 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80138e8:	f7ff ff9a 	bl	8013820 <udp_new>
 80138ec:	4603      	mov	r3, r0
 80138ee:	4a19      	ldr	r2, [pc, #100]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 80138f0:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80138f2:	4b18      	ldr	r3, [pc, #96]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d102      	bne.n	8013900 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80138fa:	f04f 33ff 	mov.w	r3, #4294967295
 80138fe:	e024      	b.n	801394a <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8013900:	4b14      	ldr	r3, [pc, #80]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	7a5a      	ldrb	r2, [r3, #9]
 8013906:	4b13      	ldr	r3, [pc, #76]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	f042 0220 	orr.w	r2, r2, #32
 801390e:	b2d2      	uxtb	r2, r2
 8013910:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8013912:	4b10      	ldr	r3, [pc, #64]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	2244      	movs	r2, #68	@ 0x44
 8013918:	4912      	ldr	r1, [pc, #72]	@ (8013964 <dhcp_inc_pcb_refcount+0x9c>)
 801391a:	4618      	mov	r0, r3
 801391c:	f7ff fe28 	bl	8013570 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8013920:	4b0c      	ldr	r3, [pc, #48]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	2243      	movs	r2, #67	@ 0x43
 8013926:	490f      	ldr	r1, [pc, #60]	@ (8013964 <dhcp_inc_pcb_refcount+0x9c>)
 8013928:	4618      	mov	r0, r3
 801392a:	f7ff fea9 	bl	8013680 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801392e:	4b09      	ldr	r3, [pc, #36]	@ (8013954 <dhcp_inc_pcb_refcount+0x8c>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	2200      	movs	r2, #0
 8013934:	490c      	ldr	r1, [pc, #48]	@ (8013968 <dhcp_inc_pcb_refcount+0xa0>)
 8013936:	4618      	mov	r0, r3
 8013938:	f7ff ff10 	bl	801375c <udp_recv>
  }

  dhcp_pcb_refcount++;
 801393c:	4b04      	ldr	r3, [pc, #16]	@ (8013950 <dhcp_inc_pcb_refcount+0x88>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	3301      	adds	r3, #1
 8013942:	b2da      	uxtb	r2, r3
 8013944:	4b02      	ldr	r3, [pc, #8]	@ (8013950 <dhcp_inc_pcb_refcount+0x88>)
 8013946:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013948:	2300      	movs	r3, #0
}
 801394a:	4618      	mov	r0, r3
 801394c:	bd80      	pop	{r7, pc}
 801394e:	bf00      	nop
 8013950:	20015130 	.word	0x20015130
 8013954:	2001512c 	.word	0x2001512c
 8013958:	0801bfc8 	.word	0x0801bfc8
 801395c:	0801c000 	.word	0x0801c000
 8013960:	0801c028 	.word	0x0801c028
 8013964:	0801cb98 	.word	0x0801cb98
 8013968:	080151f1 	.word	0x080151f1

0801396c <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013970:	4b0e      	ldr	r3, [pc, #56]	@ (80139ac <dhcp_dec_pcb_refcount+0x40>)
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d105      	bne.n	8013984 <dhcp_dec_pcb_refcount+0x18>
 8013978:	4b0d      	ldr	r3, [pc, #52]	@ (80139b0 <dhcp_dec_pcb_refcount+0x44>)
 801397a:	22ff      	movs	r2, #255	@ 0xff
 801397c:	490d      	ldr	r1, [pc, #52]	@ (80139b4 <dhcp_dec_pcb_refcount+0x48>)
 801397e:	480e      	ldr	r0, [pc, #56]	@ (80139b8 <dhcp_dec_pcb_refcount+0x4c>)
 8013980:	f004 fcbe 	bl	8018300 <iprintf>
  dhcp_pcb_refcount--;
 8013984:	4b09      	ldr	r3, [pc, #36]	@ (80139ac <dhcp_dec_pcb_refcount+0x40>)
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	3b01      	subs	r3, #1
 801398a:	b2da      	uxtb	r2, r3
 801398c:	4b07      	ldr	r3, [pc, #28]	@ (80139ac <dhcp_dec_pcb_refcount+0x40>)
 801398e:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013990:	4b06      	ldr	r3, [pc, #24]	@ (80139ac <dhcp_dec_pcb_refcount+0x40>)
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d107      	bne.n	80139a8 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013998:	4b08      	ldr	r3, [pc, #32]	@ (80139bc <dhcp_dec_pcb_refcount+0x50>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4618      	mov	r0, r3
 801399e:	f7ff fefd 	bl	801379c <udp_remove>
    dhcp_pcb = NULL;
 80139a2:	4b06      	ldr	r3, [pc, #24]	@ (80139bc <dhcp_dec_pcb_refcount+0x50>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	601a      	str	r2, [r3, #0]
  }
}
 80139a8:	bf00      	nop
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	20015130 	.word	0x20015130
 80139b0:	0801bfc8 	.word	0x0801bfc8
 80139b4:	0801c050 	.word	0x0801c050
 80139b8:	0801c028 	.word	0x0801c028
 80139bc:	2001512c 	.word	0x2001512c

080139c0 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80139ce:	210c      	movs	r1, #12
 80139d0:	68f8      	ldr	r0, [r7, #12]
 80139d2:	f001 f84f 	bl	8014a74 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80139d6:	4b06      	ldr	r3, [pc, #24]	@ (80139f0 <dhcp_handle_nak+0x30>)
 80139d8:	4a05      	ldr	r2, [pc, #20]	@ (80139f0 <dhcp_handle_nak+0x30>)
 80139da:	4905      	ldr	r1, [pc, #20]	@ (80139f0 <dhcp_handle_nak+0x30>)
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f7f8 fd11 	bl	800c404 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f000 fc48 	bl	8014278 <dhcp_discover>
}
 80139e8:	bf00      	nop
 80139ea:	3710      	adds	r7, #16
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	0801cb98 	.word	0x0801cb98

080139f4 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b084      	sub	sp, #16
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a00:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8013a02:	2108      	movs	r1, #8
 8013a04:	68f8      	ldr	r0, [r7, #12]
 8013a06:	f001 f835 	bl	8014a74 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	331c      	adds	r3, #28
 8013a0e:	2200      	movs	r2, #0
 8013a10:	4619      	mov	r1, r3
 8013a12:	6878      	ldr	r0, [r7, #4]
 8013a14:	f002 fb36 	bl	8016084 <etharp_query>
 8013a18:	4603      	mov	r3, r0
 8013a1a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	799b      	ldrb	r3, [r3, #6]
 8013a20:	2bff      	cmp	r3, #255	@ 0xff
 8013a22:	d005      	beq.n	8013a30 <dhcp_check+0x3c>
    dhcp->tries++;
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	799b      	ldrb	r3, [r3, #6]
 8013a28:	3301      	adds	r3, #1
 8013a2a:	b2da      	uxtb	r2, r3
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8013a30:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013a34:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013a36:	893b      	ldrh	r3, [r7, #8]
 8013a38:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013a3c:	4a06      	ldr	r2, [pc, #24]	@ (8013a58 <dhcp_check+0x64>)
 8013a3e:	fb82 1203 	smull	r1, r2, r2, r3
 8013a42:	1152      	asrs	r2, r2, #5
 8013a44:	17db      	asrs	r3, r3, #31
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	b29a      	uxth	r2, r3
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013a4e:	bf00      	nop
 8013a50:	3710      	adds	r7, #16
 8013a52:	46bd      	mov	sp, r7
 8013a54:	bd80      	pop	{r7, pc}
 8013a56:	bf00      	nop
 8013a58:	10624dd3 	.word	0x10624dd3

08013a5c <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	b084      	sub	sp, #16
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
 8013a64:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a6a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8013aa0 <dhcp_handle_offer+0x44>)
 8013a6e:	789b      	ldrb	r3, [r3, #2]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d011      	beq.n	8013a98 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	2200      	movs	r2, #0
 8013a78:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8013a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8013aa4 <dhcp_handle_offer+0x48>)
 8013a7c:	689b      	ldr	r3, [r3, #8]
 8013a7e:	4618      	mov	r0, r3
 8013a80:	f7f7 fcb3 	bl	800b3ea <lwip_htonl>
 8013a84:	4602      	mov	r2, r0
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013a8a:	683b      	ldr	r3, [r7, #0]
 8013a8c:	691a      	ldr	r2, [r3, #16]
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013a92:	6878      	ldr	r0, [r7, #4]
 8013a94:	f000 f808 	bl	8013aa8 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8013a98:	bf00      	nop
 8013a9a:	3710      	adds	r7, #16
 8013a9c:	46bd      	mov	sp, r7
 8013a9e:	bd80      	pop	{r7, pc}
 8013aa0:	20015124 	.word	0x20015124
 8013aa4:	20015104 	.word	0x20015104

08013aa8 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8013aa8:	b5b0      	push	{r4, r5, r7, lr}
 8013aaa:	b08a      	sub	sp, #40	@ 0x28
 8013aac:	af02      	add	r7, sp, #8
 8013aae:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d109      	bne.n	8013aca <dhcp_select+0x22>
 8013ab6:	4b71      	ldr	r3, [pc, #452]	@ (8013c7c <dhcp_select+0x1d4>)
 8013ab8:	f240 1277 	movw	r2, #375	@ 0x177
 8013abc:	4970      	ldr	r1, [pc, #448]	@ (8013c80 <dhcp_select+0x1d8>)
 8013abe:	4871      	ldr	r0, [pc, #452]	@ (8013c84 <dhcp_select+0x1dc>)
 8013ac0:	f004 fc1e 	bl	8018300 <iprintf>
 8013ac4:	f06f 030f 	mvn.w	r3, #15
 8013ac8:	e0d3      	b.n	8013c72 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ace:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d109      	bne.n	8013aea <dhcp_select+0x42>
 8013ad6:	4b69      	ldr	r3, [pc, #420]	@ (8013c7c <dhcp_select+0x1d4>)
 8013ad8:	f240 1279 	movw	r2, #377	@ 0x179
 8013adc:	496a      	ldr	r1, [pc, #424]	@ (8013c88 <dhcp_select+0x1e0>)
 8013ade:	4869      	ldr	r0, [pc, #420]	@ (8013c84 <dhcp_select+0x1dc>)
 8013ae0:	f004 fc0e 	bl	8018300 <iprintf>
 8013ae4:	f06f 0305 	mvn.w	r3, #5
 8013ae8:	e0c3      	b.n	8013c72 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8013aea:	2101      	movs	r1, #1
 8013aec:	69b8      	ldr	r0, [r7, #24]
 8013aee:	f000 ffc1 	bl	8014a74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013af2:	f107 030c 	add.w	r3, r7, #12
 8013af6:	2203      	movs	r2, #3
 8013af8:	69b9      	ldr	r1, [r7, #24]
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f001 fc46 	bl	801538c <dhcp_create_msg>
 8013b00:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	f000 8085 	beq.w	8013c14 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013b10:	89b8      	ldrh	r0, [r7, #12]
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b18:	2302      	movs	r3, #2
 8013b1a:	2239      	movs	r2, #57	@ 0x39
 8013b1c:	f000 ffc4 	bl	8014aa8 <dhcp_option>
 8013b20:	4603      	mov	r3, r0
 8013b22:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013b24:	89b8      	ldrh	r0, [r7, #12]
 8013b26:	693b      	ldr	r3, [r7, #16]
 8013b28:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b30:	461a      	mov	r2, r3
 8013b32:	f001 f813 	bl	8014b5c <dhcp_option_short>
 8013b36:	4603      	mov	r3, r0
 8013b38:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013b3a:	89b8      	ldrh	r0, [r7, #12]
 8013b3c:	693b      	ldr	r3, [r7, #16]
 8013b3e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b42:	2304      	movs	r3, #4
 8013b44:	2232      	movs	r2, #50	@ 0x32
 8013b46:	f000 ffaf 	bl	8014aa8 <dhcp_option>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013b4e:	89bc      	ldrh	r4, [r7, #12]
 8013b50:	693b      	ldr	r3, [r7, #16]
 8013b52:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	69db      	ldr	r3, [r3, #28]
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7f7 fc45 	bl	800b3ea <lwip_htonl>
 8013b60:	4603      	mov	r3, r0
 8013b62:	461a      	mov	r2, r3
 8013b64:	4629      	mov	r1, r5
 8013b66:	4620      	mov	r0, r4
 8013b68:	f001 f82a 	bl	8014bc0 <dhcp_option_long>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013b70:	89b8      	ldrh	r0, [r7, #12]
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013b78:	2304      	movs	r3, #4
 8013b7a:	2236      	movs	r2, #54	@ 0x36
 8013b7c:	f000 ff94 	bl	8014aa8 <dhcp_option>
 8013b80:	4603      	mov	r3, r0
 8013b82:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013b84:	89bc      	ldrh	r4, [r7, #12]
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8013b8c:	69bb      	ldr	r3, [r7, #24]
 8013b8e:	699b      	ldr	r3, [r3, #24]
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7f7 fc2a 	bl	800b3ea <lwip_htonl>
 8013b96:	4603      	mov	r3, r0
 8013b98:	461a      	mov	r2, r3
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	4620      	mov	r0, r4
 8013b9e:	f001 f80f 	bl	8014bc0 <dhcp_option_long>
 8013ba2:	4603      	mov	r3, r0
 8013ba4:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013ba6:	89b8      	ldrh	r0, [r7, #12]
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013bae:	2303      	movs	r3, #3
 8013bb0:	2237      	movs	r2, #55	@ 0x37
 8013bb2:	f000 ff79 	bl	8014aa8 <dhcp_option>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013bba:	2300      	movs	r3, #0
 8013bbc:	77bb      	strb	r3, [r7, #30]
 8013bbe:	e00e      	b.n	8013bde <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013bc0:	89b8      	ldrh	r0, [r7, #12]
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8013bc8:	7fbb      	ldrb	r3, [r7, #30]
 8013bca:	4a30      	ldr	r2, [pc, #192]	@ (8013c8c <dhcp_select+0x1e4>)
 8013bcc:	5cd3      	ldrb	r3, [r2, r3]
 8013bce:	461a      	mov	r2, r3
 8013bd0:	f000 ff9e 	bl	8014b10 <dhcp_option_byte>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013bd8:	7fbb      	ldrb	r3, [r7, #30]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	77bb      	strb	r3, [r7, #30]
 8013bde:	7fbb      	ldrb	r3, [r7, #30]
 8013be0:	2b02      	cmp	r3, #2
 8013be2:	d9ed      	bls.n	8013bc0 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013be4:	89b8      	ldrh	r0, [r7, #12]
 8013be6:	693b      	ldr	r3, [r7, #16]
 8013be8:	33f0      	adds	r3, #240	@ 0xf0
 8013bea:	697a      	ldr	r2, [r7, #20]
 8013bec:	4619      	mov	r1, r3
 8013bee:	f001 fca3 	bl	8015538 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013bf2:	4b27      	ldr	r3, [pc, #156]	@ (8013c90 <dhcp_select+0x1e8>)
 8013bf4:	6818      	ldr	r0, [r3, #0]
 8013bf6:	4b27      	ldr	r3, [pc, #156]	@ (8013c94 <dhcp_select+0x1ec>)
 8013bf8:	9301      	str	r3, [sp, #4]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	9300      	str	r3, [sp, #0]
 8013bfe:	2343      	movs	r3, #67	@ 0x43
 8013c00:	4a25      	ldr	r2, [pc, #148]	@ (8013c98 <dhcp_select+0x1f0>)
 8013c02:	6979      	ldr	r1, [r7, #20]
 8013c04:	f7ff fbb4 	bl	8013370 <udp_sendto_if_src>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013c0c:	6978      	ldr	r0, [r7, #20]
 8013c0e:	f7f9 f8ad 	bl	800cd6c <pbuf_free>
 8013c12:	e001      	b.n	8013c18 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013c14:	23ff      	movs	r3, #255	@ 0xff
 8013c16:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013c18:	69bb      	ldr	r3, [r7, #24]
 8013c1a:	799b      	ldrb	r3, [r3, #6]
 8013c1c:	2bff      	cmp	r3, #255	@ 0xff
 8013c1e:	d005      	beq.n	8013c2c <dhcp_select+0x184>
    dhcp->tries++;
 8013c20:	69bb      	ldr	r3, [r7, #24]
 8013c22:	799b      	ldrb	r3, [r3, #6]
 8013c24:	3301      	adds	r3, #1
 8013c26:	b2da      	uxtb	r2, r3
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013c2c:	69bb      	ldr	r3, [r7, #24]
 8013c2e:	799b      	ldrb	r3, [r3, #6]
 8013c30:	2b05      	cmp	r3, #5
 8013c32:	d80d      	bhi.n	8013c50 <dhcp_select+0x1a8>
 8013c34:	69bb      	ldr	r3, [r7, #24]
 8013c36:	799b      	ldrb	r3, [r3, #6]
 8013c38:	461a      	mov	r2, r3
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	4093      	lsls	r3, r2
 8013c3e:	b29b      	uxth	r3, r3
 8013c40:	461a      	mov	r2, r3
 8013c42:	0152      	lsls	r2, r2, #5
 8013c44:	1ad2      	subs	r2, r2, r3
 8013c46:	0092      	lsls	r2, r2, #2
 8013c48:	4413      	add	r3, r2
 8013c4a:	00db      	lsls	r3, r3, #3
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	e001      	b.n	8013c54 <dhcp_select+0x1ac>
 8013c50:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8013c54:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013c56:	89fb      	ldrh	r3, [r7, #14]
 8013c58:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8013c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8013c9c <dhcp_select+0x1f4>)
 8013c5e:	fb82 1203 	smull	r1, r2, r2, r3
 8013c62:	1152      	asrs	r2, r2, #5
 8013c64:	17db      	asrs	r3, r3, #31
 8013c66:	1ad3      	subs	r3, r2, r3
 8013c68:	b29a      	uxth	r2, r3
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3720      	adds	r7, #32
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bdb0      	pop	{r4, r5, r7, pc}
 8013c7a:	bf00      	nop
 8013c7c:	0801bfc8 	.word	0x0801bfc8
 8013c80:	0801c074 	.word	0x0801c074
 8013c84:	0801c028 	.word	0x0801c028
 8013c88:	0801c090 	.word	0x0801c090
 8013c8c:	20000020 	.word	0x20000020
 8013c90:	2001512c 	.word	0x2001512c
 8013c94:	0801cb98 	.word	0x0801cb98
 8013c98:	0801cb9c 	.word	0x0801cb9c
 8013c9c:	10624dd3 	.word	0x10624dd3

08013ca0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b082      	sub	sp, #8
 8013ca4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8013ca6:	4b27      	ldr	r3, [pc, #156]	@ (8013d44 <dhcp_coarse_tmr+0xa4>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	607b      	str	r3, [r7, #4]
 8013cac:	e042      	b.n	8013d34 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013cb2:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d039      	beq.n	8013d2e <dhcp_coarse_tmr+0x8e>
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	795b      	ldrb	r3, [r3, #5]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d035      	beq.n	8013d2e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	8a9b      	ldrh	r3, [r3, #20]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d012      	beq.n	8013cf0 <dhcp_coarse_tmr+0x50>
 8013cca:	683b      	ldr	r3, [r7, #0]
 8013ccc:	8a5b      	ldrh	r3, [r3, #18]
 8013cce:	3301      	adds	r3, #1
 8013cd0:	b29a      	uxth	r2, r3
 8013cd2:	683b      	ldr	r3, [r7, #0]
 8013cd4:	825a      	strh	r2, [r3, #18]
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	8a5a      	ldrh	r2, [r3, #18]
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	8a9b      	ldrh	r3, [r3, #20]
 8013cde:	429a      	cmp	r2, r3
 8013ce0:	d106      	bne.n	8013cf0 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f000 fe2c 	bl	8014940 <dhcp_release_and_stop>
        dhcp_start(netif);
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f000 f969 	bl	8013fc0 <dhcp_start>
 8013cee:	e01e      	b.n	8013d2e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	8a1b      	ldrh	r3, [r3, #16]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00b      	beq.n	8013d10 <dhcp_coarse_tmr+0x70>
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	8a1b      	ldrh	r3, [r3, #16]
 8013cfc:	1e5a      	subs	r2, r3, #1
 8013cfe:	b291      	uxth	r1, r2
 8013d00:	683a      	ldr	r2, [r7, #0]
 8013d02:	8211      	strh	r1, [r2, #16]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d103      	bne.n	8013d10 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 f8c6 	bl	8013e9a <dhcp_t2_timeout>
 8013d0e:	e00e      	b.n	8013d2e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013d10:	683b      	ldr	r3, [r7, #0]
 8013d12:	89db      	ldrh	r3, [r3, #14]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d00a      	beq.n	8013d2e <dhcp_coarse_tmr+0x8e>
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	89db      	ldrh	r3, [r3, #14]
 8013d1c:	1e5a      	subs	r2, r3, #1
 8013d1e:	b291      	uxth	r1, r2
 8013d20:	683a      	ldr	r2, [r7, #0]
 8013d22:	81d1      	strh	r1, [r2, #14]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	d102      	bne.n	8013d2e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f000 f888 	bl	8013e3e <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	607b      	str	r3, [r7, #4]
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d1b9      	bne.n	8013cae <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8013d3a:	bf00      	nop
 8013d3c:	bf00      	nop
 8013d3e:	3708      	adds	r7, #8
 8013d40:	46bd      	mov	sp, r7
 8013d42:	bd80      	pop	{r7, pc}
 8013d44:	20015098 	.word	0x20015098

08013d48 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013d4e:	4b16      	ldr	r3, [pc, #88]	@ (8013da8 <dhcp_fine_tmr+0x60>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	607b      	str	r3, [r7, #4]
 8013d54:	e020      	b.n	8013d98 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d5a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d017      	beq.n	8013d92 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	891b      	ldrh	r3, [r3, #8]
 8013d66:	2b01      	cmp	r3, #1
 8013d68:	d906      	bls.n	8013d78 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	891b      	ldrh	r3, [r3, #8]
 8013d6e:	3b01      	subs	r3, #1
 8013d70:	b29a      	uxth	r2, r3
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	811a      	strh	r2, [r3, #8]
 8013d76:	e00c      	b.n	8013d92 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013d78:	683b      	ldr	r3, [r7, #0]
 8013d7a:	891b      	ldrh	r3, [r3, #8]
 8013d7c:	2b01      	cmp	r3, #1
 8013d7e:	d108      	bne.n	8013d92 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013d80:	683b      	ldr	r3, [r7, #0]
 8013d82:	891b      	ldrh	r3, [r3, #8]
 8013d84:	3b01      	subs	r3, #1
 8013d86:	b29a      	uxth	r2, r3
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f000 f80d 	bl	8013dac <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	607b      	str	r3, [r7, #4]
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d1db      	bne.n	8013d56 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013d9e:	bf00      	nop
 8013da0:	bf00      	nop
 8013da2:	3708      	adds	r7, #8
 8013da4:	46bd      	mov	sp, r7
 8013da6:	bd80      	pop	{r7, pc}
 8013da8:	20015098 	.word	0x20015098

08013dac <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013db8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	795b      	ldrb	r3, [r3, #5]
 8013dbe:	2b0c      	cmp	r3, #12
 8013dc0:	d003      	beq.n	8013dca <dhcp_timeout+0x1e>
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	795b      	ldrb	r3, [r3, #5]
 8013dc6:	2b06      	cmp	r3, #6
 8013dc8:	d103      	bne.n	8013dd2 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013dca:	6878      	ldr	r0, [r7, #4]
 8013dcc:	f000 fa54 	bl	8014278 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013dd0:	e031      	b.n	8013e36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	795b      	ldrb	r3, [r3, #5]
 8013dd6:	2b01      	cmp	r3, #1
 8013dd8:	d10e      	bne.n	8013df8 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013dda:	68fb      	ldr	r3, [r7, #12]
 8013ddc:	799b      	ldrb	r3, [r3, #6]
 8013dde:	2b05      	cmp	r3, #5
 8013de0:	d803      	bhi.n	8013dea <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013de2:	6878      	ldr	r0, [r7, #4]
 8013de4:	f7ff fe60 	bl	8013aa8 <dhcp_select>
}
 8013de8:	e025      	b.n	8013e36 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f000 fda8 	bl	8014940 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 f8e5 	bl	8013fc0 <dhcp_start>
}
 8013df6:	e01e      	b.n	8013e36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	795b      	ldrb	r3, [r3, #5]
 8013dfc:	2b08      	cmp	r3, #8
 8013dfe:	d10b      	bne.n	8013e18 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	799b      	ldrb	r3, [r3, #6]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d803      	bhi.n	8013e10 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7ff fdf3 	bl	80139f4 <dhcp_check>
}
 8013e0e:	e012      	b.n	8013e36 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013e10:	6878      	ldr	r0, [r7, #4]
 8013e12:	f000 fad3 	bl	80143bc <dhcp_bind>
}
 8013e16:	e00e      	b.n	8013e36 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	795b      	ldrb	r3, [r3, #5]
 8013e1c:	2b03      	cmp	r3, #3
 8013e1e:	d10a      	bne.n	8013e36 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	799b      	ldrb	r3, [r3, #6]
 8013e24:	2b01      	cmp	r3, #1
 8013e26:	d803      	bhi.n	8013e30 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013e28:	6878      	ldr	r0, [r7, #4]
 8013e2a:	f000 fcd5 	bl	80147d8 <dhcp_reboot>
}
 8013e2e:	e002      	b.n	8013e36 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 fa21 	bl	8014278 <dhcp_discover>
}
 8013e36:	bf00      	nop
 8013e38:	3710      	adds	r7, #16
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}

08013e3e <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013e3e:	b580      	push	{r7, lr}
 8013e40:	b084      	sub	sp, #16
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	795b      	ldrb	r3, [r3, #5]
 8013e50:	2b01      	cmp	r3, #1
 8013e52:	d007      	beq.n	8013e64 <dhcp_t1_timeout+0x26>
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	795b      	ldrb	r3, [r3, #5]
 8013e58:	2b0a      	cmp	r3, #10
 8013e5a:	d003      	beq.n	8013e64 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013e60:	2b05      	cmp	r3, #5
 8013e62:	d116      	bne.n	8013e92 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013e64:	6878      	ldr	r0, [r7, #4]
 8013e66:	f000 fb83 	bl	8014570 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013e6a:	68fb      	ldr	r3, [r7, #12]
 8013e6c:	899b      	ldrh	r3, [r3, #12]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	8a5b      	ldrh	r3, [r3, #18]
 8013e74:	1ad3      	subs	r3, r2, r3
 8013e76:	2b01      	cmp	r3, #1
 8013e78:	dd0b      	ble.n	8013e92 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	899b      	ldrh	r3, [r3, #12]
 8013e7e:	461a      	mov	r2, r3
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	8a5b      	ldrh	r3, [r3, #18]
 8013e84:	1ad3      	subs	r3, r2, r3
 8013e86:	0fda      	lsrs	r2, r3, #31
 8013e88:	4413      	add	r3, r2
 8013e8a:	105b      	asrs	r3, r3, #1
 8013e8c:	b29a      	uxth	r2, r3
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013e92:	bf00      	nop
 8013e94:	3710      	adds	r7, #16
 8013e96:	46bd      	mov	sp, r7
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b084      	sub	sp, #16
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013ea6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	795b      	ldrb	r3, [r3, #5]
 8013eac:	2b01      	cmp	r3, #1
 8013eae:	d00b      	beq.n	8013ec8 <dhcp_t2_timeout+0x2e>
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	795b      	ldrb	r3, [r3, #5]
 8013eb4:	2b0a      	cmp	r3, #10
 8013eb6:	d007      	beq.n	8013ec8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013ebc:	2b05      	cmp	r3, #5
 8013ebe:	d003      	beq.n	8013ec8 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	795b      	ldrb	r3, [r3, #5]
 8013ec4:	2b04      	cmp	r3, #4
 8013ec6:	d116      	bne.n	8013ef6 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f000 fbeb 	bl	80146a4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	8a9b      	ldrh	r3, [r3, #20]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	8a5b      	ldrh	r3, [r3, #18]
 8013ed8:	1ad3      	subs	r3, r2, r3
 8013eda:	2b01      	cmp	r3, #1
 8013edc:	dd0b      	ble.n	8013ef6 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013ede:	68fb      	ldr	r3, [r7, #12]
 8013ee0:	8a9b      	ldrh	r3, [r3, #20]
 8013ee2:	461a      	mov	r2, r3
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	8a5b      	ldrh	r3, [r3, #18]
 8013ee8:	1ad3      	subs	r3, r2, r3
 8013eea:	0fda      	lsrs	r2, r3, #31
 8013eec:	4413      	add	r3, r2
 8013eee:	105b      	asrs	r3, r3, #1
 8013ef0:	b29a      	uxth	r2, r3
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013ef6:	bf00      	nop
 8013ef8:	3710      	adds	r7, #16
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
	...

08013f00 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f0e:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2200      	movs	r2, #0
 8013f14:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013f1c:	4b26      	ldr	r3, [pc, #152]	@ (8013fb8 <dhcp_handle_ack+0xb8>)
 8013f1e:	78db      	ldrb	r3, [r3, #3]
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d003      	beq.n	8013f2c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013f24:	4b25      	ldr	r3, [pc, #148]	@ (8013fbc <dhcp_handle_ack+0xbc>)
 8013f26:	68da      	ldr	r2, [r3, #12]
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013f2c:	4b22      	ldr	r3, [pc, #136]	@ (8013fb8 <dhcp_handle_ack+0xb8>)
 8013f2e:	791b      	ldrb	r3, [r3, #4]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d004      	beq.n	8013f3e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013f34:	4b21      	ldr	r3, [pc, #132]	@ (8013fbc <dhcp_handle_ack+0xbc>)
 8013f36:	691a      	ldr	r2, [r3, #16]
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8013f3c:	e004      	b.n	8013f48 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f42:	085a      	lsrs	r2, r3, #1
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013f48:	4b1b      	ldr	r3, [pc, #108]	@ (8013fb8 <dhcp_handle_ack+0xb8>)
 8013f4a:	795b      	ldrb	r3, [r3, #5]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d004      	beq.n	8013f5a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013f50:	4b1a      	ldr	r3, [pc, #104]	@ (8013fbc <dhcp_handle_ack+0xbc>)
 8013f52:	695a      	ldr	r2, [r3, #20]
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	631a      	str	r2, [r3, #48]	@ 0x30
 8013f58:	e007      	b.n	8013f6a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8013f5e:	4613      	mov	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	1a9b      	subs	r3, r3, r2
 8013f64:	08da      	lsrs	r2, r3, #3
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013f6a:	683b      	ldr	r3, [r7, #0]
 8013f6c:	691a      	ldr	r2, [r3, #16]
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013f72:	4b11      	ldr	r3, [pc, #68]	@ (8013fb8 <dhcp_handle_ack+0xb8>)
 8013f74:	799b      	ldrb	r3, [r3, #6]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d00b      	beq.n	8013f92 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013f7a:	4b10      	ldr	r3, [pc, #64]	@ (8013fbc <dhcp_handle_ack+0xbc>)
 8013f7c:	699b      	ldr	r3, [r3, #24]
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f7f7 fa33 	bl	800b3ea <lwip_htonl>
 8013f84:	4602      	mov	r2, r0
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	71da      	strb	r2, [r3, #7]
 8013f90:	e002      	b.n	8013f98 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	2200      	movs	r2, #0
 8013f96:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013f98:	4b07      	ldr	r3, [pc, #28]	@ (8013fb8 <dhcp_handle_ack+0xb8>)
 8013f9a:	79db      	ldrb	r3, [r3, #7]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	d007      	beq.n	8013fb0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013fa0:	4b06      	ldr	r3, [pc, #24]	@ (8013fbc <dhcp_handle_ack+0xbc>)
 8013fa2:	69db      	ldr	r3, [r3, #28]
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7f7 fa20 	bl	800b3ea <lwip_htonl>
 8013faa:	4602      	mov	r2, r0
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013fb0:	bf00      	nop
 8013fb2:	3710      	adds	r7, #16
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	20015124 	.word	0x20015124
 8013fbc:	20015104 	.word	0x20015104

08013fc0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d109      	bne.n	8013fe2 <dhcp_start+0x22>
 8013fce:	4b37      	ldr	r3, [pc, #220]	@ (80140ac <dhcp_start+0xec>)
 8013fd0:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8013fd4:	4936      	ldr	r1, [pc, #216]	@ (80140b0 <dhcp_start+0xf0>)
 8013fd6:	4837      	ldr	r0, [pc, #220]	@ (80140b4 <dhcp_start+0xf4>)
 8013fd8:	f004 f992 	bl	8018300 <iprintf>
 8013fdc:	f06f 030f 	mvn.w	r3, #15
 8013fe0:	e060      	b.n	80140a4 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8013fe8:	f003 0301 	and.w	r3, r3, #1
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d109      	bne.n	8014004 <dhcp_start+0x44>
 8013ff0:	4b2e      	ldr	r3, [pc, #184]	@ (80140ac <dhcp_start+0xec>)
 8013ff2:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8013ff6:	4930      	ldr	r1, [pc, #192]	@ (80140b8 <dhcp_start+0xf8>)
 8013ff8:	482e      	ldr	r0, [pc, #184]	@ (80140b4 <dhcp_start+0xf4>)
 8013ffa:	f004 f981 	bl	8018300 <iprintf>
 8013ffe:	f06f 030f 	mvn.w	r3, #15
 8014002:	e04f      	b.n	80140a4 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014008:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801400e:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8014012:	d202      	bcs.n	801401a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014014:	f04f 33ff 	mov.w	r3, #4294967295
 8014018:	e044      	b.n	80140a4 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d10d      	bne.n	801403c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014020:	2034      	movs	r0, #52	@ 0x34
 8014022:	f7f7 fe79 	bl	800bd18 <mem_malloc>
 8014026:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d102      	bne.n	8014034 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801402e:	f04f 33ff 	mov.w	r3, #4294967295
 8014032:	e037      	b.n	80140a4 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	68fa      	ldr	r2, [r7, #12]
 8014038:	625a      	str	r2, [r3, #36]	@ 0x24
 801403a:	e005      	b.n	8014048 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	791b      	ldrb	r3, [r3, #4]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d001      	beq.n	8014048 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014044:	f7ff fc92 	bl	801396c <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014048:	2234      	movs	r2, #52	@ 0x34
 801404a:	2100      	movs	r1, #0
 801404c:	68f8      	ldr	r0, [r7, #12]
 801404e:	f004 f9bc 	bl	80183ca <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014052:	f7ff fc39 	bl	80138c8 <dhcp_inc_pcb_refcount>
 8014056:	4603      	mov	r3, r0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d002      	beq.n	8014062 <dhcp_start+0xa2>
    return ERR_MEM;
 801405c:	f04f 33ff 	mov.w	r3, #4294967295
 8014060:	e020      	b.n	80140a4 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	2201      	movs	r2, #1
 8014066:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801406e:	f003 0304 	and.w	r3, r3, #4
 8014072:	2b00      	cmp	r3, #0
 8014074:	d105      	bne.n	8014082 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014076:	2102      	movs	r1, #2
 8014078:	68f8      	ldr	r0, [r7, #12]
 801407a:	f000 fcfb 	bl	8014a74 <dhcp_set_state>
    return ERR_OK;
 801407e:	2300      	movs	r3, #0
 8014080:	e010      	b.n	80140a4 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014082:	6878      	ldr	r0, [r7, #4]
 8014084:	f000 f8f8 	bl	8014278 <dhcp_discover>
 8014088:	4603      	mov	r3, r0
 801408a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801408c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d005      	beq.n	80140a0 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f000 fc53 	bl	8014940 <dhcp_release_and_stop>
    return ERR_MEM;
 801409a:	f04f 33ff 	mov.w	r3, #4294967295
 801409e:	e001      	b.n	80140a4 <dhcp_start+0xe4>
  }
  return result;
 80140a0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80140a4:	4618      	mov	r0, r3
 80140a6:	3710      	adds	r7, #16
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	0801bfc8 	.word	0x0801bfc8
 80140b0:	0801c0ac 	.word	0x0801c0ac
 80140b4:	0801c028 	.word	0x0801c028
 80140b8:	0801c0f0 	.word	0x0801c0f0

080140bc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b084      	sub	sp, #16
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140c8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d025      	beq.n	801411c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	795b      	ldrb	r3, [r3, #5]
 80140d4:	2b0a      	cmp	r3, #10
 80140d6:	d008      	beq.n	80140ea <dhcp_network_changed+0x2e>
 80140d8:	2b0a      	cmp	r3, #10
 80140da:	dc0d      	bgt.n	80140f8 <dhcp_network_changed+0x3c>
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d01f      	beq.n	8014120 <dhcp_network_changed+0x64>
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	db09      	blt.n	80140f8 <dhcp_network_changed+0x3c>
 80140e4:	3b03      	subs	r3, #3
 80140e6:	2b02      	cmp	r3, #2
 80140e8:	d806      	bhi.n	80140f8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	2200      	movs	r2, #0
 80140ee:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80140f0:	6878      	ldr	r0, [r7, #4]
 80140f2:	f000 fb71 	bl	80147d8 <dhcp_reboot>
      break;
 80140f6:	e014      	b.n	8014122 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	795b      	ldrb	r3, [r3, #5]
 80140fc:	2b0c      	cmp	r3, #12
 80140fe:	d906      	bls.n	801410e <dhcp_network_changed+0x52>
 8014100:	4b09      	ldr	r3, [pc, #36]	@ (8014128 <dhcp_network_changed+0x6c>)
 8014102:	f240 326d 	movw	r2, #877	@ 0x36d
 8014106:	4909      	ldr	r1, [pc, #36]	@ (801412c <dhcp_network_changed+0x70>)
 8014108:	4809      	ldr	r0, [pc, #36]	@ (8014130 <dhcp_network_changed+0x74>)
 801410a:	f004 f8f9 	bl	8018300 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2200      	movs	r2, #0
 8014112:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014114:	6878      	ldr	r0, [r7, #4]
 8014116:	f000 f8af 	bl	8014278 <dhcp_discover>
      break;
 801411a:	e002      	b.n	8014122 <dhcp_network_changed+0x66>
    return;
 801411c:	bf00      	nop
 801411e:	e000      	b.n	8014122 <dhcp_network_changed+0x66>
      break;
 8014120:	bf00      	nop
  }
}
 8014122:	3710      	adds	r7, #16
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	0801bfc8 	.word	0x0801bfc8
 801412c:	0801c114 	.word	0x0801c114
 8014130:	0801c028 	.word	0x0801c028

08014134 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b084      	sub	sp, #16
 8014138:	af00      	add	r7, sp, #0
 801413a:	6078      	str	r0, [r7, #4]
 801413c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d107      	bne.n	8014154 <dhcp_arp_reply+0x20>
 8014144:	4b0e      	ldr	r3, [pc, #56]	@ (8014180 <dhcp_arp_reply+0x4c>)
 8014146:	f240 328b 	movw	r2, #907	@ 0x38b
 801414a:	490e      	ldr	r1, [pc, #56]	@ (8014184 <dhcp_arp_reply+0x50>)
 801414c:	480e      	ldr	r0, [pc, #56]	@ (8014188 <dhcp_arp_reply+0x54>)
 801414e:	f004 f8d7 	bl	8018300 <iprintf>
 8014152:	e012      	b.n	801417a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014158:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d00c      	beq.n	801417a <dhcp_arp_reply+0x46>
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	795b      	ldrb	r3, [r3, #5]
 8014164:	2b08      	cmp	r3, #8
 8014166:	d108      	bne.n	801417a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	69db      	ldr	r3, [r3, #28]
 8014170:	429a      	cmp	r2, r3
 8014172:	d102      	bne.n	801417a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8014174:	6878      	ldr	r0, [r7, #4]
 8014176:	f000 f809 	bl	801418c <dhcp_decline>
    }
  }
}
 801417a:	3710      	adds	r7, #16
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}
 8014180:	0801bfc8 	.word	0x0801bfc8
 8014184:	0801c0ac 	.word	0x0801c0ac
 8014188:	0801c028 	.word	0x0801c028

0801418c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801418c:	b5b0      	push	{r4, r5, r7, lr}
 801418e:	b08a      	sub	sp, #40	@ 0x28
 8014190:	af02      	add	r7, sp, #8
 8014192:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014198:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801419a:	210c      	movs	r1, #12
 801419c:	69b8      	ldr	r0, [r7, #24]
 801419e:	f000 fc69 	bl	8014a74 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80141a2:	f107 030c 	add.w	r3, r7, #12
 80141a6:	2204      	movs	r2, #4
 80141a8:	69b9      	ldr	r1, [r7, #24]
 80141aa:	6878      	ldr	r0, [r7, #4]
 80141ac:	f001 f8ee 	bl	801538c <dhcp_create_msg>
 80141b0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80141b2:	697b      	ldr	r3, [r7, #20]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d035      	beq.n	8014224 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80141b8:	697b      	ldr	r3, [r7, #20]
 80141ba:	685b      	ldr	r3, [r3, #4]
 80141bc:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80141be:	89b8      	ldrh	r0, [r7, #12]
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80141c6:	2304      	movs	r3, #4
 80141c8:	2232      	movs	r2, #50	@ 0x32
 80141ca:	f000 fc6d 	bl	8014aa8 <dhcp_option>
 80141ce:	4603      	mov	r3, r0
 80141d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80141d2:	89bc      	ldrh	r4, [r7, #12]
 80141d4:	693b      	ldr	r3, [r7, #16]
 80141d6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	69db      	ldr	r3, [r3, #28]
 80141de:	4618      	mov	r0, r3
 80141e0:	f7f7 f903 	bl	800b3ea <lwip_htonl>
 80141e4:	4603      	mov	r3, r0
 80141e6:	461a      	mov	r2, r3
 80141e8:	4629      	mov	r1, r5
 80141ea:	4620      	mov	r0, r4
 80141ec:	f000 fce8 	bl	8014bc0 <dhcp_option_long>
 80141f0:	4603      	mov	r3, r0
 80141f2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80141f4:	89b8      	ldrh	r0, [r7, #12]
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	33f0      	adds	r3, #240	@ 0xf0
 80141fa:	697a      	ldr	r2, [r7, #20]
 80141fc:	4619      	mov	r1, r3
 80141fe:	f001 f99b 	bl	8015538 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014202:	4b19      	ldr	r3, [pc, #100]	@ (8014268 <dhcp_decline+0xdc>)
 8014204:	6818      	ldr	r0, [r3, #0]
 8014206:	4b19      	ldr	r3, [pc, #100]	@ (801426c <dhcp_decline+0xe0>)
 8014208:	9301      	str	r3, [sp, #4]
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	9300      	str	r3, [sp, #0]
 801420e:	2343      	movs	r3, #67	@ 0x43
 8014210:	4a17      	ldr	r2, [pc, #92]	@ (8014270 <dhcp_decline+0xe4>)
 8014212:	6979      	ldr	r1, [r7, #20]
 8014214:	f7ff f8ac 	bl	8013370 <udp_sendto_if_src>
 8014218:	4603      	mov	r3, r0
 801421a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801421c:	6978      	ldr	r0, [r7, #20]
 801421e:	f7f8 fda5 	bl	800cd6c <pbuf_free>
 8014222:	e001      	b.n	8014228 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014224:	23ff      	movs	r3, #255	@ 0xff
 8014226:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014228:	69bb      	ldr	r3, [r7, #24]
 801422a:	799b      	ldrb	r3, [r3, #6]
 801422c:	2bff      	cmp	r3, #255	@ 0xff
 801422e:	d005      	beq.n	801423c <dhcp_decline+0xb0>
    dhcp->tries++;
 8014230:	69bb      	ldr	r3, [r7, #24]
 8014232:	799b      	ldrb	r3, [r3, #6]
 8014234:	3301      	adds	r3, #1
 8014236:	b2da      	uxtb	r2, r3
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801423c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014240:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014242:	89fb      	ldrh	r3, [r7, #14]
 8014244:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014248:	4a0a      	ldr	r2, [pc, #40]	@ (8014274 <dhcp_decline+0xe8>)
 801424a:	fb82 1203 	smull	r1, r2, r2, r3
 801424e:	1152      	asrs	r2, r2, #5
 8014250:	17db      	asrs	r3, r3, #31
 8014252:	1ad3      	subs	r3, r2, r3
 8014254:	b29a      	uxth	r2, r3
 8014256:	69bb      	ldr	r3, [r7, #24]
 8014258:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801425a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801425e:	4618      	mov	r0, r3
 8014260:	3720      	adds	r7, #32
 8014262:	46bd      	mov	sp, r7
 8014264:	bdb0      	pop	{r4, r5, r7, pc}
 8014266:	bf00      	nop
 8014268:	2001512c 	.word	0x2001512c
 801426c:	0801cb98 	.word	0x0801cb98
 8014270:	0801cb9c 	.word	0x0801cb9c
 8014274:	10624dd3 	.word	0x10624dd3

08014278 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8014278:	b580      	push	{r7, lr}
 801427a:	b08a      	sub	sp, #40	@ 0x28
 801427c:	af02      	add	r7, sp, #8
 801427e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014284:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8014286:	2300      	movs	r3, #0
 8014288:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801428a:	69bb      	ldr	r3, [r7, #24]
 801428c:	2200      	movs	r2, #0
 801428e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8014290:	2106      	movs	r1, #6
 8014292:	69b8      	ldr	r0, [r7, #24]
 8014294:	f000 fbee 	bl	8014a74 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8014298:	f107 0308 	add.w	r3, r7, #8
 801429c:	2201      	movs	r2, #1
 801429e:	69b9      	ldr	r1, [r7, #24]
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f001 f873 	bl	801538c <dhcp_create_msg>
 80142a6:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80142a8:	693b      	ldr	r3, [r7, #16]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d04b      	beq.n	8014346 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80142ae:	693b      	ldr	r3, [r7, #16]
 80142b0:	685b      	ldr	r3, [r3, #4]
 80142b2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80142b4:	8938      	ldrh	r0, [r7, #8]
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80142bc:	2302      	movs	r3, #2
 80142be:	2239      	movs	r2, #57	@ 0x39
 80142c0:	f000 fbf2 	bl	8014aa8 <dhcp_option>
 80142c4:	4603      	mov	r3, r0
 80142c6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80142c8:	8938      	ldrh	r0, [r7, #8]
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80142d4:	461a      	mov	r2, r3
 80142d6:	f000 fc41 	bl	8014b5c <dhcp_option_short>
 80142da:	4603      	mov	r3, r0
 80142dc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80142de:	8938      	ldrh	r0, [r7, #8]
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80142e6:	2303      	movs	r3, #3
 80142e8:	2237      	movs	r2, #55	@ 0x37
 80142ea:	f000 fbdd 	bl	8014aa8 <dhcp_option>
 80142ee:	4603      	mov	r3, r0
 80142f0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142f2:	2300      	movs	r3, #0
 80142f4:	77fb      	strb	r3, [r7, #31]
 80142f6:	e00e      	b.n	8014316 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80142f8:	8938      	ldrh	r0, [r7, #8]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014300:	7ffb      	ldrb	r3, [r7, #31]
 8014302:	4a29      	ldr	r2, [pc, #164]	@ (80143a8 <dhcp_discover+0x130>)
 8014304:	5cd3      	ldrb	r3, [r2, r3]
 8014306:	461a      	mov	r2, r3
 8014308:	f000 fc02 	bl	8014b10 <dhcp_option_byte>
 801430c:	4603      	mov	r3, r0
 801430e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014310:	7ffb      	ldrb	r3, [r7, #31]
 8014312:	3301      	adds	r3, #1
 8014314:	77fb      	strb	r3, [r7, #31]
 8014316:	7ffb      	ldrb	r3, [r7, #31]
 8014318:	2b02      	cmp	r3, #2
 801431a:	d9ed      	bls.n	80142f8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801431c:	8938      	ldrh	r0, [r7, #8]
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	33f0      	adds	r3, #240	@ 0xf0
 8014322:	693a      	ldr	r2, [r7, #16]
 8014324:	4619      	mov	r1, r3
 8014326:	f001 f907 	bl	8015538 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801432a:	4b20      	ldr	r3, [pc, #128]	@ (80143ac <dhcp_discover+0x134>)
 801432c:	6818      	ldr	r0, [r3, #0]
 801432e:	4b20      	ldr	r3, [pc, #128]	@ (80143b0 <dhcp_discover+0x138>)
 8014330:	9301      	str	r3, [sp, #4]
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	2343      	movs	r3, #67	@ 0x43
 8014338:	4a1e      	ldr	r2, [pc, #120]	@ (80143b4 <dhcp_discover+0x13c>)
 801433a:	6939      	ldr	r1, [r7, #16]
 801433c:	f7ff f818 	bl	8013370 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014340:	6938      	ldr	r0, [r7, #16]
 8014342:	f7f8 fd13 	bl	800cd6c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014346:	69bb      	ldr	r3, [r7, #24]
 8014348:	799b      	ldrb	r3, [r3, #6]
 801434a:	2bff      	cmp	r3, #255	@ 0xff
 801434c:	d005      	beq.n	801435a <dhcp_discover+0xe2>
    dhcp->tries++;
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	799b      	ldrb	r3, [r3, #6]
 8014352:	3301      	adds	r3, #1
 8014354:	b2da      	uxtb	r2, r3
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	799b      	ldrb	r3, [r3, #6]
 801435e:	2b05      	cmp	r3, #5
 8014360:	d80d      	bhi.n	801437e <dhcp_discover+0x106>
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	799b      	ldrb	r3, [r3, #6]
 8014366:	461a      	mov	r2, r3
 8014368:	2301      	movs	r3, #1
 801436a:	4093      	lsls	r3, r2
 801436c:	b29b      	uxth	r3, r3
 801436e:	461a      	mov	r2, r3
 8014370:	0152      	lsls	r2, r2, #5
 8014372:	1ad2      	subs	r2, r2, r3
 8014374:	0092      	lsls	r2, r2, #2
 8014376:	4413      	add	r3, r2
 8014378:	00db      	lsls	r3, r3, #3
 801437a:	b29b      	uxth	r3, r3
 801437c:	e001      	b.n	8014382 <dhcp_discover+0x10a>
 801437e:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8014382:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014384:	897b      	ldrh	r3, [r7, #10]
 8014386:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801438a:	4a0b      	ldr	r2, [pc, #44]	@ (80143b8 <dhcp_discover+0x140>)
 801438c:	fb82 1203 	smull	r1, r2, r2, r3
 8014390:	1152      	asrs	r2, r2, #5
 8014392:	17db      	asrs	r3, r3, #31
 8014394:	1ad3      	subs	r3, r2, r3
 8014396:	b29a      	uxth	r2, r3
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801439c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80143a0:	4618      	mov	r0, r3
 80143a2:	3720      	adds	r7, #32
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	20000020 	.word	0x20000020
 80143ac:	2001512c 	.word	0x2001512c
 80143b0:	0801cb98 	.word	0x0801cb98
 80143b4:	0801cb9c 	.word	0x0801cb9c
 80143b8:	10624dd3 	.word	0x10624dd3

080143bc <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80143bc:	b580      	push	{r7, lr}
 80143be:	b088      	sub	sp, #32
 80143c0:	af00      	add	r7, sp, #0
 80143c2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d107      	bne.n	80143da <dhcp_bind+0x1e>
 80143ca:	4b64      	ldr	r3, [pc, #400]	@ (801455c <dhcp_bind+0x1a0>)
 80143cc:	f240 4215 	movw	r2, #1045	@ 0x415
 80143d0:	4963      	ldr	r1, [pc, #396]	@ (8014560 <dhcp_bind+0x1a4>)
 80143d2:	4864      	ldr	r0, [pc, #400]	@ (8014564 <dhcp_bind+0x1a8>)
 80143d4:	f003 ff94 	bl	8018300 <iprintf>
 80143d8:	e0bc      	b.n	8014554 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143de:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80143e0:	69bb      	ldr	r3, [r7, #24]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d107      	bne.n	80143f6 <dhcp_bind+0x3a>
 80143e6:	4b5d      	ldr	r3, [pc, #372]	@ (801455c <dhcp_bind+0x1a0>)
 80143e8:	f240 4217 	movw	r2, #1047	@ 0x417
 80143ec:	495e      	ldr	r1, [pc, #376]	@ (8014568 <dhcp_bind+0x1ac>)
 80143ee:	485d      	ldr	r0, [pc, #372]	@ (8014564 <dhcp_bind+0x1a8>)
 80143f0:	f003 ff86 	bl	8018300 <iprintf>
 80143f4:	e0ae      	b.n	8014554 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80143f6:	69bb      	ldr	r3, [r7, #24]
 80143f8:	2200      	movs	r2, #0
 80143fa:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80143fc:	69bb      	ldr	r3, [r7, #24]
 80143fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014404:	d019      	beq.n	801443a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014406:	69bb      	ldr	r3, [r7, #24]
 8014408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801440a:	331e      	adds	r3, #30
 801440c:	4a57      	ldr	r2, [pc, #348]	@ (801456c <dhcp_bind+0x1b0>)
 801440e:	fba2 2303 	umull	r2, r3, r2, r3
 8014412:	095b      	lsrs	r3, r3, #5
 8014414:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014416:	69fb      	ldr	r3, [r7, #28]
 8014418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801441c:	d302      	bcc.n	8014424 <dhcp_bind+0x68>
      timeout = 0xffff;
 801441e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014422:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	b29a      	uxth	r2, r3
 8014428:	69bb      	ldr	r3, [r7, #24]
 801442a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	8a9b      	ldrh	r3, [r3, #20]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d102      	bne.n	801443a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8014434:	69bb      	ldr	r3, [r7, #24]
 8014436:	2201      	movs	r2, #1
 8014438:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801443e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014442:	d01d      	beq.n	8014480 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014444:	69bb      	ldr	r3, [r7, #24]
 8014446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014448:	331e      	adds	r3, #30
 801444a:	4a48      	ldr	r2, [pc, #288]	@ (801456c <dhcp_bind+0x1b0>)
 801444c:	fba2 2303 	umull	r2, r3, r2, r3
 8014450:	095b      	lsrs	r3, r3, #5
 8014452:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801445a:	d302      	bcc.n	8014462 <dhcp_bind+0xa6>
      timeout = 0xffff;
 801445c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014460:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8014462:	69fb      	ldr	r3, [r7, #28]
 8014464:	b29a      	uxth	r2, r3
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801446a:	69bb      	ldr	r3, [r7, #24]
 801446c:	895b      	ldrh	r3, [r3, #10]
 801446e:	2b00      	cmp	r3, #0
 8014470:	d102      	bne.n	8014478 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	2201      	movs	r2, #1
 8014476:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	895a      	ldrh	r2, [r3, #10]
 801447c:	69bb      	ldr	r3, [r7, #24]
 801447e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014488:	d01d      	beq.n	80144c6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801448e:	331e      	adds	r3, #30
 8014490:	4a36      	ldr	r2, [pc, #216]	@ (801456c <dhcp_bind+0x1b0>)
 8014492:	fba2 2303 	umull	r2, r3, r2, r3
 8014496:	095b      	lsrs	r3, r3, #5
 8014498:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80144a0:	d302      	bcc.n	80144a8 <dhcp_bind+0xec>
      timeout = 0xffff;
 80144a2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80144a6:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	b29a      	uxth	r2, r3
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80144b0:	69bb      	ldr	r3, [r7, #24]
 80144b2:	899b      	ldrh	r3, [r3, #12]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d102      	bne.n	80144be <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80144b8:	69bb      	ldr	r3, [r7, #24]
 80144ba:	2201      	movs	r2, #1
 80144bc:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80144be:	69bb      	ldr	r3, [r7, #24]
 80144c0:	899a      	ldrh	r2, [r3, #12]
 80144c2:	69bb      	ldr	r3, [r7, #24]
 80144c4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	895a      	ldrh	r2, [r3, #10]
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	899b      	ldrh	r3, [r3, #12]
 80144ce:	429a      	cmp	r2, r3
 80144d0:	d306      	bcc.n	80144e0 <dhcp_bind+0x124>
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	899b      	ldrh	r3, [r3, #12]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d002      	beq.n	80144e0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	2200      	movs	r2, #0
 80144de:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80144e0:	69bb      	ldr	r3, [r7, #24]
 80144e2:	79db      	ldrb	r3, [r3, #7]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d003      	beq.n	80144f0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80144e8:	69bb      	ldr	r3, [r7, #24]
 80144ea:	6a1b      	ldr	r3, [r3, #32]
 80144ec:	613b      	str	r3, [r7, #16]
 80144ee:	e014      	b.n	801451a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80144f0:	69bb      	ldr	r3, [r7, #24]
 80144f2:	331c      	adds	r3, #28
 80144f4:	781b      	ldrb	r3, [r3, #0]
 80144f6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80144f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	db02      	blt.n	8014506 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014500:	23ff      	movs	r3, #255	@ 0xff
 8014502:	613b      	str	r3, [r7, #16]
 8014504:	e009      	b.n	801451a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8014506:	7dfb      	ldrb	r3, [r7, #23]
 8014508:	2bbf      	cmp	r3, #191	@ 0xbf
 801450a:	d903      	bls.n	8014514 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801450c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8014510:	613b      	str	r3, [r7, #16]
 8014512:	e002      	b.n	801451a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8014514:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014518:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801451a:	69bb      	ldr	r3, [r7, #24]
 801451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801451e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d108      	bne.n	8014538 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8014526:	69bb      	ldr	r3, [r7, #24]
 8014528:	69da      	ldr	r2, [r3, #28]
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	4013      	ands	r3, r2
 801452e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8014536:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014538:	210a      	movs	r1, #10
 801453a:	69b8      	ldr	r0, [r7, #24]
 801453c:	f000 fa9a 	bl	8014a74 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014540:	69bb      	ldr	r3, [r7, #24]
 8014542:	f103 011c 	add.w	r1, r3, #28
 8014546:	f107 030c 	add.w	r3, r7, #12
 801454a:	f107 0210 	add.w	r2, r7, #16
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f7f7 ff58 	bl	800c404 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8014554:	3720      	adds	r7, #32
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	0801bfc8 	.word	0x0801bfc8
 8014560:	0801c128 	.word	0x0801c128
 8014564:	0801c028 	.word	0x0801c028
 8014568:	0801c144 	.word	0x0801c144
 801456c:	88888889 	.word	0x88888889

08014570 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b08a      	sub	sp, #40	@ 0x28
 8014574:	af02      	add	r7, sp, #8
 8014576:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801457c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801457e:	2105      	movs	r1, #5
 8014580:	69b8      	ldr	r0, [r7, #24]
 8014582:	f000 fa77 	bl	8014a74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014586:	f107 030c 	add.w	r3, r7, #12
 801458a:	2203      	movs	r2, #3
 801458c:	69b9      	ldr	r1, [r7, #24]
 801458e:	6878      	ldr	r0, [r7, #4]
 8014590:	f000 fefc 	bl	801538c <dhcp_create_msg>
 8014594:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d04e      	beq.n	801463a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	685b      	ldr	r3, [r3, #4]
 80145a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80145a2:	89b8      	ldrh	r0, [r7, #12]
 80145a4:	693b      	ldr	r3, [r7, #16]
 80145a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80145aa:	2302      	movs	r3, #2
 80145ac:	2239      	movs	r2, #57	@ 0x39
 80145ae:	f000 fa7b 	bl	8014aa8 <dhcp_option>
 80145b2:	4603      	mov	r3, r0
 80145b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80145b6:	89b8      	ldrh	r0, [r7, #12]
 80145b8:	693b      	ldr	r3, [r7, #16]
 80145ba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80145c2:	461a      	mov	r2, r3
 80145c4:	f000 faca 	bl	8014b5c <dhcp_option_short>
 80145c8:	4603      	mov	r3, r0
 80145ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80145cc:	89b8      	ldrh	r0, [r7, #12]
 80145ce:	693b      	ldr	r3, [r7, #16]
 80145d0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80145d4:	2303      	movs	r3, #3
 80145d6:	2237      	movs	r2, #55	@ 0x37
 80145d8:	f000 fa66 	bl	8014aa8 <dhcp_option>
 80145dc:	4603      	mov	r3, r0
 80145de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145e0:	2300      	movs	r3, #0
 80145e2:	77bb      	strb	r3, [r7, #30]
 80145e4:	e00e      	b.n	8014604 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80145e6:	89b8      	ldrh	r0, [r7, #12]
 80145e8:	693b      	ldr	r3, [r7, #16]
 80145ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80145ee:	7fbb      	ldrb	r3, [r7, #30]
 80145f0:	4a29      	ldr	r2, [pc, #164]	@ (8014698 <dhcp_renew+0x128>)
 80145f2:	5cd3      	ldrb	r3, [r2, r3]
 80145f4:	461a      	mov	r2, r3
 80145f6:	f000 fa8b 	bl	8014b10 <dhcp_option_byte>
 80145fa:	4603      	mov	r3, r0
 80145fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80145fe:	7fbb      	ldrb	r3, [r7, #30]
 8014600:	3301      	adds	r3, #1
 8014602:	77bb      	strb	r3, [r7, #30]
 8014604:	7fbb      	ldrb	r3, [r7, #30]
 8014606:	2b02      	cmp	r3, #2
 8014608:	d9ed      	bls.n	80145e6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801460a:	89b8      	ldrh	r0, [r7, #12]
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	33f0      	adds	r3, #240	@ 0xf0
 8014610:	697a      	ldr	r2, [r7, #20]
 8014612:	4619      	mov	r1, r3
 8014614:	f000 ff90 	bl	8015538 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014618:	4b20      	ldr	r3, [pc, #128]	@ (801469c <dhcp_renew+0x12c>)
 801461a:	6818      	ldr	r0, [r3, #0]
 801461c:	69bb      	ldr	r3, [r7, #24]
 801461e:	f103 0218 	add.w	r2, r3, #24
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	9300      	str	r3, [sp, #0]
 8014626:	2343      	movs	r3, #67	@ 0x43
 8014628:	6979      	ldr	r1, [r7, #20]
 801462a:	f7fe fe2d 	bl	8013288 <udp_sendto_if>
 801462e:	4603      	mov	r3, r0
 8014630:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014632:	6978      	ldr	r0, [r7, #20]
 8014634:	f7f8 fb9a 	bl	800cd6c <pbuf_free>
 8014638:	e001      	b.n	801463e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801463a:	23ff      	movs	r3, #255	@ 0xff
 801463c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801463e:	69bb      	ldr	r3, [r7, #24]
 8014640:	799b      	ldrb	r3, [r3, #6]
 8014642:	2bff      	cmp	r3, #255	@ 0xff
 8014644:	d005      	beq.n	8014652 <dhcp_renew+0xe2>
    dhcp->tries++;
 8014646:	69bb      	ldr	r3, [r7, #24]
 8014648:	799b      	ldrb	r3, [r3, #6]
 801464a:	3301      	adds	r3, #1
 801464c:	b2da      	uxtb	r2, r3
 801464e:	69bb      	ldr	r3, [r7, #24]
 8014650:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8014652:	69bb      	ldr	r3, [r7, #24]
 8014654:	799b      	ldrb	r3, [r3, #6]
 8014656:	2b09      	cmp	r3, #9
 8014658:	d809      	bhi.n	801466e <dhcp_renew+0xfe>
 801465a:	69bb      	ldr	r3, [r7, #24]
 801465c:	799b      	ldrb	r3, [r3, #6]
 801465e:	461a      	mov	r2, r3
 8014660:	0152      	lsls	r2, r2, #5
 8014662:	1ad2      	subs	r2, r2, r3
 8014664:	0092      	lsls	r2, r2, #2
 8014666:	4413      	add	r3, r2
 8014668:	011b      	lsls	r3, r3, #4
 801466a:	b29b      	uxth	r3, r3
 801466c:	e001      	b.n	8014672 <dhcp_renew+0x102>
 801466e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8014672:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014674:	89fb      	ldrh	r3, [r7, #14]
 8014676:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 801467a:	4a09      	ldr	r2, [pc, #36]	@ (80146a0 <dhcp_renew+0x130>)
 801467c:	fb82 1203 	smull	r1, r2, r2, r3
 8014680:	1152      	asrs	r2, r2, #5
 8014682:	17db      	asrs	r3, r3, #31
 8014684:	1ad3      	subs	r3, r2, r3
 8014686:	b29a      	uxth	r2, r3
 8014688:	69bb      	ldr	r3, [r7, #24]
 801468a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801468c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014690:	4618      	mov	r0, r3
 8014692:	3720      	adds	r7, #32
 8014694:	46bd      	mov	sp, r7
 8014696:	bd80      	pop	{r7, pc}
 8014698:	20000020 	.word	0x20000020
 801469c:	2001512c 	.word	0x2001512c
 80146a0:	10624dd3 	.word	0x10624dd3

080146a4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08a      	sub	sp, #40	@ 0x28
 80146a8:	af02      	add	r7, sp, #8
 80146aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146b0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80146b2:	2104      	movs	r1, #4
 80146b4:	69b8      	ldr	r0, [r7, #24]
 80146b6:	f000 f9dd 	bl	8014a74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80146ba:	f107 030c 	add.w	r3, r7, #12
 80146be:	2203      	movs	r2, #3
 80146c0:	69b9      	ldr	r1, [r7, #24]
 80146c2:	6878      	ldr	r0, [r7, #4]
 80146c4:	f000 fe62 	bl	801538c <dhcp_create_msg>
 80146c8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80146ca:	697b      	ldr	r3, [r7, #20]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d04c      	beq.n	801476a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146d0:	697b      	ldr	r3, [r7, #20]
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80146d6:	89b8      	ldrh	r0, [r7, #12]
 80146d8:	693b      	ldr	r3, [r7, #16]
 80146da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146de:	2302      	movs	r3, #2
 80146e0:	2239      	movs	r2, #57	@ 0x39
 80146e2:	f000 f9e1 	bl	8014aa8 <dhcp_option>
 80146e6:	4603      	mov	r3, r0
 80146e8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80146ea:	89b8      	ldrh	r0, [r7, #12]
 80146ec:	693b      	ldr	r3, [r7, #16]
 80146ee:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80146f6:	461a      	mov	r2, r3
 80146f8:	f000 fa30 	bl	8014b5c <dhcp_option_short>
 80146fc:	4603      	mov	r3, r0
 80146fe:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014700:	89b8      	ldrh	r0, [r7, #12]
 8014702:	693b      	ldr	r3, [r7, #16]
 8014704:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014708:	2303      	movs	r3, #3
 801470a:	2237      	movs	r2, #55	@ 0x37
 801470c:	f000 f9cc 	bl	8014aa8 <dhcp_option>
 8014710:	4603      	mov	r3, r0
 8014712:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014714:	2300      	movs	r3, #0
 8014716:	77bb      	strb	r3, [r7, #30]
 8014718:	e00e      	b.n	8014738 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801471a:	89b8      	ldrh	r0, [r7, #12]
 801471c:	693b      	ldr	r3, [r7, #16]
 801471e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014722:	7fbb      	ldrb	r3, [r7, #30]
 8014724:	4a28      	ldr	r2, [pc, #160]	@ (80147c8 <dhcp_rebind+0x124>)
 8014726:	5cd3      	ldrb	r3, [r2, r3]
 8014728:	461a      	mov	r2, r3
 801472a:	f000 f9f1 	bl	8014b10 <dhcp_option_byte>
 801472e:	4603      	mov	r3, r0
 8014730:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014732:	7fbb      	ldrb	r3, [r7, #30]
 8014734:	3301      	adds	r3, #1
 8014736:	77bb      	strb	r3, [r7, #30]
 8014738:	7fbb      	ldrb	r3, [r7, #30]
 801473a:	2b02      	cmp	r3, #2
 801473c:	d9ed      	bls.n	801471a <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801473e:	89b8      	ldrh	r0, [r7, #12]
 8014740:	693b      	ldr	r3, [r7, #16]
 8014742:	33f0      	adds	r3, #240	@ 0xf0
 8014744:	697a      	ldr	r2, [r7, #20]
 8014746:	4619      	mov	r1, r3
 8014748:	f000 fef6 	bl	8015538 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801474c:	4b1f      	ldr	r3, [pc, #124]	@ (80147cc <dhcp_rebind+0x128>)
 801474e:	6818      	ldr	r0, [r3, #0]
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	9300      	str	r3, [sp, #0]
 8014754:	2343      	movs	r3, #67	@ 0x43
 8014756:	4a1e      	ldr	r2, [pc, #120]	@ (80147d0 <dhcp_rebind+0x12c>)
 8014758:	6979      	ldr	r1, [r7, #20]
 801475a:	f7fe fd95 	bl	8013288 <udp_sendto_if>
 801475e:	4603      	mov	r3, r0
 8014760:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014762:	6978      	ldr	r0, [r7, #20]
 8014764:	f7f8 fb02 	bl	800cd6c <pbuf_free>
 8014768:	e001      	b.n	801476e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801476a:	23ff      	movs	r3, #255	@ 0xff
 801476c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801476e:	69bb      	ldr	r3, [r7, #24]
 8014770:	799b      	ldrb	r3, [r3, #6]
 8014772:	2bff      	cmp	r3, #255	@ 0xff
 8014774:	d005      	beq.n	8014782 <dhcp_rebind+0xde>
    dhcp->tries++;
 8014776:	69bb      	ldr	r3, [r7, #24]
 8014778:	799b      	ldrb	r3, [r3, #6]
 801477a:	3301      	adds	r3, #1
 801477c:	b2da      	uxtb	r2, r3
 801477e:	69bb      	ldr	r3, [r7, #24]
 8014780:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8014782:	69bb      	ldr	r3, [r7, #24]
 8014784:	799b      	ldrb	r3, [r3, #6]
 8014786:	2b09      	cmp	r3, #9
 8014788:	d809      	bhi.n	801479e <dhcp_rebind+0xfa>
 801478a:	69bb      	ldr	r3, [r7, #24]
 801478c:	799b      	ldrb	r3, [r3, #6]
 801478e:	461a      	mov	r2, r3
 8014790:	0152      	lsls	r2, r2, #5
 8014792:	1ad2      	subs	r2, r2, r3
 8014794:	0092      	lsls	r2, r2, #2
 8014796:	4413      	add	r3, r2
 8014798:	00db      	lsls	r3, r3, #3
 801479a:	b29b      	uxth	r3, r3
 801479c:	e001      	b.n	80147a2 <dhcp_rebind+0xfe>
 801479e:	f242 7310 	movw	r3, #10000	@ 0x2710
 80147a2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80147a4:	89fb      	ldrh	r3, [r7, #14]
 80147a6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80147aa:	4a0a      	ldr	r2, [pc, #40]	@ (80147d4 <dhcp_rebind+0x130>)
 80147ac:	fb82 1203 	smull	r1, r2, r2, r3
 80147b0:	1152      	asrs	r2, r2, #5
 80147b2:	17db      	asrs	r3, r3, #31
 80147b4:	1ad3      	subs	r3, r2, r3
 80147b6:	b29a      	uxth	r2, r3
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80147bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80147c0:	4618      	mov	r0, r3
 80147c2:	3720      	adds	r7, #32
 80147c4:	46bd      	mov	sp, r7
 80147c6:	bd80      	pop	{r7, pc}
 80147c8:	20000020 	.word	0x20000020
 80147cc:	2001512c 	.word	0x2001512c
 80147d0:	0801cb9c 	.word	0x0801cb9c
 80147d4:	10624dd3 	.word	0x10624dd3

080147d8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80147d8:	b5b0      	push	{r4, r5, r7, lr}
 80147da:	b08a      	sub	sp, #40	@ 0x28
 80147dc:	af02      	add	r7, sp, #8
 80147de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147e4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80147e6:	2103      	movs	r1, #3
 80147e8:	69b8      	ldr	r0, [r7, #24]
 80147ea:	f000 f943 	bl	8014a74 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80147ee:	f107 030c 	add.w	r3, r7, #12
 80147f2:	2203      	movs	r2, #3
 80147f4:	69b9      	ldr	r1, [r7, #24]
 80147f6:	6878      	ldr	r0, [r7, #4]
 80147f8:	f000 fdc8 	bl	801538c <dhcp_create_msg>
 80147fc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	2b00      	cmp	r3, #0
 8014802:	d066      	beq.n	80148d2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014804:	697b      	ldr	r3, [r7, #20]
 8014806:	685b      	ldr	r3, [r3, #4]
 8014808:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801480a:	89b8      	ldrh	r0, [r7, #12]
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014812:	2302      	movs	r3, #2
 8014814:	2239      	movs	r2, #57	@ 0x39
 8014816:	f000 f947 	bl	8014aa8 <dhcp_option>
 801481a:	4603      	mov	r3, r0
 801481c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801481e:	89b8      	ldrh	r0, [r7, #12]
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	33f0      	adds	r3, #240	@ 0xf0
 8014824:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8014828:	4619      	mov	r1, r3
 801482a:	f000 f997 	bl	8014b5c <dhcp_option_short>
 801482e:	4603      	mov	r3, r0
 8014830:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014832:	89b8      	ldrh	r0, [r7, #12]
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801483a:	2304      	movs	r3, #4
 801483c:	2232      	movs	r2, #50	@ 0x32
 801483e:	f000 f933 	bl	8014aa8 <dhcp_option>
 8014842:	4603      	mov	r3, r0
 8014844:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014846:	89bc      	ldrh	r4, [r7, #12]
 8014848:	693b      	ldr	r3, [r7, #16]
 801484a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801484e:	69bb      	ldr	r3, [r7, #24]
 8014850:	69db      	ldr	r3, [r3, #28]
 8014852:	4618      	mov	r0, r3
 8014854:	f7f6 fdc9 	bl	800b3ea <lwip_htonl>
 8014858:	4603      	mov	r3, r0
 801485a:	461a      	mov	r2, r3
 801485c:	4629      	mov	r1, r5
 801485e:	4620      	mov	r0, r4
 8014860:	f000 f9ae 	bl	8014bc0 <dhcp_option_long>
 8014864:	4603      	mov	r3, r0
 8014866:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014868:	89b8      	ldrh	r0, [r7, #12]
 801486a:	693b      	ldr	r3, [r7, #16]
 801486c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8014870:	2303      	movs	r3, #3
 8014872:	2237      	movs	r2, #55	@ 0x37
 8014874:	f000 f918 	bl	8014aa8 <dhcp_option>
 8014878:	4603      	mov	r3, r0
 801487a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801487c:	2300      	movs	r3, #0
 801487e:	77bb      	strb	r3, [r7, #30]
 8014880:	e00e      	b.n	80148a0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014882:	89b8      	ldrh	r0, [r7, #12]
 8014884:	693b      	ldr	r3, [r7, #16]
 8014886:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801488a:	7fbb      	ldrb	r3, [r7, #30]
 801488c:	4a28      	ldr	r2, [pc, #160]	@ (8014930 <dhcp_reboot+0x158>)
 801488e:	5cd3      	ldrb	r3, [r2, r3]
 8014890:	461a      	mov	r2, r3
 8014892:	f000 f93d 	bl	8014b10 <dhcp_option_byte>
 8014896:	4603      	mov	r3, r0
 8014898:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801489a:	7fbb      	ldrb	r3, [r7, #30]
 801489c:	3301      	adds	r3, #1
 801489e:	77bb      	strb	r3, [r7, #30]
 80148a0:	7fbb      	ldrb	r3, [r7, #30]
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d9ed      	bls.n	8014882 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80148a6:	89b8      	ldrh	r0, [r7, #12]
 80148a8:	693b      	ldr	r3, [r7, #16]
 80148aa:	33f0      	adds	r3, #240	@ 0xf0
 80148ac:	697a      	ldr	r2, [r7, #20]
 80148ae:	4619      	mov	r1, r3
 80148b0:	f000 fe42 	bl	8015538 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80148b4:	4b1f      	ldr	r3, [pc, #124]	@ (8014934 <dhcp_reboot+0x15c>)
 80148b6:	6818      	ldr	r0, [r3, #0]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	9300      	str	r3, [sp, #0]
 80148bc:	2343      	movs	r3, #67	@ 0x43
 80148be:	4a1e      	ldr	r2, [pc, #120]	@ (8014938 <dhcp_reboot+0x160>)
 80148c0:	6979      	ldr	r1, [r7, #20]
 80148c2:	f7fe fce1 	bl	8013288 <udp_sendto_if>
 80148c6:	4603      	mov	r3, r0
 80148c8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80148ca:	6978      	ldr	r0, [r7, #20]
 80148cc:	f7f8 fa4e 	bl	800cd6c <pbuf_free>
 80148d0:	e001      	b.n	80148d6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80148d2:	23ff      	movs	r3, #255	@ 0xff
 80148d4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80148d6:	69bb      	ldr	r3, [r7, #24]
 80148d8:	799b      	ldrb	r3, [r3, #6]
 80148da:	2bff      	cmp	r3, #255	@ 0xff
 80148dc:	d005      	beq.n	80148ea <dhcp_reboot+0x112>
    dhcp->tries++;
 80148de:	69bb      	ldr	r3, [r7, #24]
 80148e0:	799b      	ldrb	r3, [r3, #6]
 80148e2:	3301      	adds	r3, #1
 80148e4:	b2da      	uxtb	r2, r3
 80148e6:	69bb      	ldr	r3, [r7, #24]
 80148e8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80148ea:	69bb      	ldr	r3, [r7, #24]
 80148ec:	799b      	ldrb	r3, [r3, #6]
 80148ee:	2b09      	cmp	r3, #9
 80148f0:	d809      	bhi.n	8014906 <dhcp_reboot+0x12e>
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	799b      	ldrb	r3, [r3, #6]
 80148f6:	461a      	mov	r2, r3
 80148f8:	0152      	lsls	r2, r2, #5
 80148fa:	1ad2      	subs	r2, r2, r3
 80148fc:	0092      	lsls	r2, r2, #2
 80148fe:	4413      	add	r3, r2
 8014900:	00db      	lsls	r3, r3, #3
 8014902:	b29b      	uxth	r3, r3
 8014904:	e001      	b.n	801490a <dhcp_reboot+0x132>
 8014906:	f242 7310 	movw	r3, #10000	@ 0x2710
 801490a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801490c:	89fb      	ldrh	r3, [r7, #14]
 801490e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8014912:	4a0a      	ldr	r2, [pc, #40]	@ (801493c <dhcp_reboot+0x164>)
 8014914:	fb82 1203 	smull	r1, r2, r2, r3
 8014918:	1152      	asrs	r2, r2, #5
 801491a:	17db      	asrs	r3, r3, #31
 801491c:	1ad3      	subs	r3, r2, r3
 801491e:	b29a      	uxth	r2, r3
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014924:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014928:	4618      	mov	r0, r3
 801492a:	3720      	adds	r7, #32
 801492c:	46bd      	mov	sp, r7
 801492e:	bdb0      	pop	{r4, r5, r7, pc}
 8014930:	20000020 	.word	0x20000020
 8014934:	2001512c 	.word	0x2001512c
 8014938:	0801cb9c 	.word	0x0801cb9c
 801493c:	10624dd3 	.word	0x10624dd3

08014940 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014940:	b5b0      	push	{r4, r5, r7, lr}
 8014942:	b08a      	sub	sp, #40	@ 0x28
 8014944:	af02      	add	r7, sp, #8
 8014946:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801494c:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	2b00      	cmp	r3, #0
 8014952:	f000 8084 	beq.w	8014a5e <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8014956:	69fb      	ldr	r3, [r7, #28]
 8014958:	795b      	ldrb	r3, [r3, #5]
 801495a:	2b00      	cmp	r3, #0
 801495c:	f000 8081 	beq.w	8014a62 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014960:	69fb      	ldr	r3, [r7, #28]
 8014962:	699b      	ldr	r3, [r3, #24]
 8014964:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8014966:	69fb      	ldr	r3, [r7, #28]
 8014968:	2200      	movs	r2, #0
 801496a:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801496c:	69fb      	ldr	r3, [r7, #28]
 801496e:	2200      	movs	r2, #0
 8014970:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014972:	69fb      	ldr	r3, [r7, #28]
 8014974:	2200      	movs	r2, #0
 8014976:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014978:	69fb      	ldr	r3, [r7, #28]
 801497a:	2200      	movs	r2, #0
 801497c:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	2200      	movs	r2, #0
 8014982:	631a      	str	r2, [r3, #48]	@ 0x30
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801498c:	69fb      	ldr	r3, [r7, #28]
 801498e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014990:	69fb      	ldr	r3, [r7, #28]
 8014992:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014994:	69fb      	ldr	r3, [r7, #28]
 8014996:	2200      	movs	r2, #0
 8014998:	829a      	strh	r2, [r3, #20]
 801499a:	69fb      	ldr	r3, [r7, #28]
 801499c:	8a9a      	ldrh	r2, [r3, #20]
 801499e:	69fb      	ldr	r3, [r7, #28]
 80149a0:	825a      	strh	r2, [r3, #18]
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	8a5a      	ldrh	r2, [r3, #18]
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	821a      	strh	r2, [r3, #16]
 80149aa:	69fb      	ldr	r3, [r7, #28]
 80149ac:	8a1a      	ldrh	r2, [r3, #16]
 80149ae:	69fb      	ldr	r3, [r7, #28]
 80149b0:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 fdee 	bl	8015594 <dhcp_supplied_address>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d03b      	beq.n	8014a36 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80149be:	f107 030e 	add.w	r3, r7, #14
 80149c2:	2207      	movs	r2, #7
 80149c4:	69f9      	ldr	r1, [r7, #28]
 80149c6:	6878      	ldr	r0, [r7, #4]
 80149c8:	f000 fce0 	bl	801538c <dhcp_create_msg>
 80149cc:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80149ce:	69bb      	ldr	r3, [r7, #24]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d030      	beq.n	8014a36 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80149d4:	69bb      	ldr	r3, [r7, #24]
 80149d6:	685b      	ldr	r3, [r3, #4]
 80149d8:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80149da:	89f8      	ldrh	r0, [r7, #14]
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80149e2:	2304      	movs	r3, #4
 80149e4:	2236      	movs	r2, #54	@ 0x36
 80149e6:	f000 f85f 	bl	8014aa8 <dhcp_option>
 80149ea:	4603      	mov	r3, r0
 80149ec:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80149ee:	89fc      	ldrh	r4, [r7, #14]
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80149f6:	693b      	ldr	r3, [r7, #16]
 80149f8:	4618      	mov	r0, r3
 80149fa:	f7f6 fcf6 	bl	800b3ea <lwip_htonl>
 80149fe:	4603      	mov	r3, r0
 8014a00:	461a      	mov	r2, r3
 8014a02:	4629      	mov	r1, r5
 8014a04:	4620      	mov	r0, r4
 8014a06:	f000 f8db 	bl	8014bc0 <dhcp_option_long>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014a0e:	89f8      	ldrh	r0, [r7, #14]
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	33f0      	adds	r3, #240	@ 0xf0
 8014a14:	69ba      	ldr	r2, [r7, #24]
 8014a16:	4619      	mov	r1, r3
 8014a18:	f000 fd8e 	bl	8015538 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014a1c:	4b13      	ldr	r3, [pc, #76]	@ (8014a6c <dhcp_release_and_stop+0x12c>)
 8014a1e:	6818      	ldr	r0, [r3, #0]
 8014a20:	f107 0210 	add.w	r2, r7, #16
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	9300      	str	r3, [sp, #0]
 8014a28:	2343      	movs	r3, #67	@ 0x43
 8014a2a:	69b9      	ldr	r1, [r7, #24]
 8014a2c:	f7fe fc2c 	bl	8013288 <udp_sendto_if>
      pbuf_free(p_out);
 8014a30:	69b8      	ldr	r0, [r7, #24]
 8014a32:	f7f8 f99b 	bl	800cd6c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014a36:	4b0e      	ldr	r3, [pc, #56]	@ (8014a70 <dhcp_release_and_stop+0x130>)
 8014a38:	4a0d      	ldr	r2, [pc, #52]	@ (8014a70 <dhcp_release_and_stop+0x130>)
 8014a3a:	490d      	ldr	r1, [pc, #52]	@ (8014a70 <dhcp_release_and_stop+0x130>)
 8014a3c:	6878      	ldr	r0, [r7, #4]
 8014a3e:	f7f7 fce1 	bl	800c404 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014a42:	2100      	movs	r1, #0
 8014a44:	69f8      	ldr	r0, [r7, #28]
 8014a46:	f000 f815 	bl	8014a74 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8014a4a:	69fb      	ldr	r3, [r7, #28]
 8014a4c:	791b      	ldrb	r3, [r3, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d008      	beq.n	8014a64 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014a52:	f7fe ff8b 	bl	801396c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8014a56:	69fb      	ldr	r3, [r7, #28]
 8014a58:	2200      	movs	r2, #0
 8014a5a:	711a      	strb	r2, [r3, #4]
 8014a5c:	e002      	b.n	8014a64 <dhcp_release_and_stop+0x124>
    return;
 8014a5e:	bf00      	nop
 8014a60:	e000      	b.n	8014a64 <dhcp_release_and_stop+0x124>
    return;
 8014a62:	bf00      	nop
  }
}
 8014a64:	3720      	adds	r7, #32
 8014a66:	46bd      	mov	sp, r7
 8014a68:	bdb0      	pop	{r4, r5, r7, pc}
 8014a6a:	bf00      	nop
 8014a6c:	2001512c 	.word	0x2001512c
 8014a70:	0801cb98 	.word	0x0801cb98

08014a74 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014a74:	b480      	push	{r7}
 8014a76:	b083      	sub	sp, #12
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	460b      	mov	r3, r1
 8014a7e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	795b      	ldrb	r3, [r3, #5]
 8014a84:	78fa      	ldrb	r2, [r7, #3]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d008      	beq.n	8014a9c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	78fa      	ldrb	r2, [r7, #3]
 8014a8e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	2200      	movs	r2, #0
 8014a94:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	811a      	strh	r2, [r3, #8]
  }
}
 8014a9c:	bf00      	nop
 8014a9e:	370c      	adds	r7, #12
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa6:	4770      	bx	lr

08014aa8 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8014aa8:	b580      	push	{r7, lr}
 8014aaa:	b082      	sub	sp, #8
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6039      	str	r1, [r7, #0]
 8014ab0:	4611      	mov	r1, r2
 8014ab2:	461a      	mov	r2, r3
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	80fb      	strh	r3, [r7, #6]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	717b      	strb	r3, [r7, #5]
 8014abc:	4613      	mov	r3, r2
 8014abe:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014ac0:	88fa      	ldrh	r2, [r7, #6]
 8014ac2:	793b      	ldrb	r3, [r7, #4]
 8014ac4:	4413      	add	r3, r2
 8014ac6:	3302      	adds	r3, #2
 8014ac8:	2b44      	cmp	r3, #68	@ 0x44
 8014aca:	d906      	bls.n	8014ada <dhcp_option+0x32>
 8014acc:	4b0d      	ldr	r3, [pc, #52]	@ (8014b04 <dhcp_option+0x5c>)
 8014ace:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014ad2:	490d      	ldr	r1, [pc, #52]	@ (8014b08 <dhcp_option+0x60>)
 8014ad4:	480d      	ldr	r0, [pc, #52]	@ (8014b0c <dhcp_option+0x64>)
 8014ad6:	f003 fc13 	bl	8018300 <iprintf>
  options[options_out_len++] = option_type;
 8014ada:	88fb      	ldrh	r3, [r7, #6]
 8014adc:	1c5a      	adds	r2, r3, #1
 8014ade:	80fa      	strh	r2, [r7, #6]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	797a      	ldrb	r2, [r7, #5]
 8014ae8:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8014aea:	88fb      	ldrh	r3, [r7, #6]
 8014aec:	1c5a      	adds	r2, r3, #1
 8014aee:	80fa      	strh	r2, [r7, #6]
 8014af0:	461a      	mov	r2, r3
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	4413      	add	r3, r2
 8014af6:	793a      	ldrb	r2, [r7, #4]
 8014af8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014afa:	88fb      	ldrh	r3, [r7, #6]
}
 8014afc:	4618      	mov	r0, r3
 8014afe:	3708      	adds	r7, #8
 8014b00:	46bd      	mov	sp, r7
 8014b02:	bd80      	pop	{r7, pc}
 8014b04:	0801bfc8 	.word	0x0801bfc8
 8014b08:	0801c15c 	.word	0x0801c15c
 8014b0c:	0801c028 	.word	0x0801c028

08014b10 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	4603      	mov	r3, r0
 8014b18:	6039      	str	r1, [r7, #0]
 8014b1a:	80fb      	strh	r3, [r7, #6]
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8014b20:	88fb      	ldrh	r3, [r7, #6]
 8014b22:	2b43      	cmp	r3, #67	@ 0x43
 8014b24:	d906      	bls.n	8014b34 <dhcp_option_byte+0x24>
 8014b26:	4b0a      	ldr	r3, [pc, #40]	@ (8014b50 <dhcp_option_byte+0x40>)
 8014b28:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8014b2c:	4909      	ldr	r1, [pc, #36]	@ (8014b54 <dhcp_option_byte+0x44>)
 8014b2e:	480a      	ldr	r0, [pc, #40]	@ (8014b58 <dhcp_option_byte+0x48>)
 8014b30:	f003 fbe6 	bl	8018300 <iprintf>
  options[options_out_len++] = value;
 8014b34:	88fb      	ldrh	r3, [r7, #6]
 8014b36:	1c5a      	adds	r2, r3, #1
 8014b38:	80fa      	strh	r2, [r7, #6]
 8014b3a:	461a      	mov	r2, r3
 8014b3c:	683b      	ldr	r3, [r7, #0]
 8014b3e:	4413      	add	r3, r2
 8014b40:	797a      	ldrb	r2, [r7, #5]
 8014b42:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014b44:	88fb      	ldrh	r3, [r7, #6]
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3708      	adds	r7, #8
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bd80      	pop	{r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	0801bfc8 	.word	0x0801bfc8
 8014b54:	0801c1a0 	.word	0x0801c1a0
 8014b58:	0801c028 	.word	0x0801c028

08014b5c <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b082      	sub	sp, #8
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	4603      	mov	r3, r0
 8014b64:	6039      	str	r1, [r7, #0]
 8014b66:	80fb      	strh	r3, [r7, #6]
 8014b68:	4613      	mov	r3, r2
 8014b6a:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014b6c:	88fb      	ldrh	r3, [r7, #6]
 8014b6e:	3302      	adds	r3, #2
 8014b70:	2b44      	cmp	r3, #68	@ 0x44
 8014b72:	d906      	bls.n	8014b82 <dhcp_option_short+0x26>
 8014b74:	4b0f      	ldr	r3, [pc, #60]	@ (8014bb4 <dhcp_option_short+0x58>)
 8014b76:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8014b7a:	490f      	ldr	r1, [pc, #60]	@ (8014bb8 <dhcp_option_short+0x5c>)
 8014b7c:	480f      	ldr	r0, [pc, #60]	@ (8014bbc <dhcp_option_short+0x60>)
 8014b7e:	f003 fbbf 	bl	8018300 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014b82:	88bb      	ldrh	r3, [r7, #4]
 8014b84:	0a1b      	lsrs	r3, r3, #8
 8014b86:	b29a      	uxth	r2, r3
 8014b88:	88fb      	ldrh	r3, [r7, #6]
 8014b8a:	1c59      	adds	r1, r3, #1
 8014b8c:	80f9      	strh	r1, [r7, #6]
 8014b8e:	4619      	mov	r1, r3
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	440b      	add	r3, r1
 8014b94:	b2d2      	uxtb	r2, r2
 8014b96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8014b98:	88fb      	ldrh	r3, [r7, #6]
 8014b9a:	1c5a      	adds	r2, r3, #1
 8014b9c:	80fa      	strh	r2, [r7, #6]
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	683b      	ldr	r3, [r7, #0]
 8014ba2:	4413      	add	r3, r2
 8014ba4:	88ba      	ldrh	r2, [r7, #4]
 8014ba6:	b2d2      	uxtb	r2, r2
 8014ba8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014baa:	88fb      	ldrh	r3, [r7, #6]
}
 8014bac:	4618      	mov	r0, r3
 8014bae:	3708      	adds	r7, #8
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	bd80      	pop	{r7, pc}
 8014bb4:	0801bfc8 	.word	0x0801bfc8
 8014bb8:	0801c1d8 	.word	0x0801c1d8
 8014bbc:	0801c028 	.word	0x0801c028

08014bc0 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	60b9      	str	r1, [r7, #8]
 8014bca:	607a      	str	r2, [r7, #4]
 8014bcc:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8014bce:	89fb      	ldrh	r3, [r7, #14]
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	2b44      	cmp	r3, #68	@ 0x44
 8014bd4:	d906      	bls.n	8014be4 <dhcp_option_long+0x24>
 8014bd6:	4b19      	ldr	r3, [pc, #100]	@ (8014c3c <dhcp_option_long+0x7c>)
 8014bd8:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8014bdc:	4918      	ldr	r1, [pc, #96]	@ (8014c40 <dhcp_option_long+0x80>)
 8014bde:	4819      	ldr	r0, [pc, #100]	@ (8014c44 <dhcp_option_long+0x84>)
 8014be0:	f003 fb8e 	bl	8018300 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	0e1a      	lsrs	r2, r3, #24
 8014be8:	89fb      	ldrh	r3, [r7, #14]
 8014bea:	1c59      	adds	r1, r3, #1
 8014bec:	81f9      	strh	r1, [r7, #14]
 8014bee:	4619      	mov	r1, r3
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	440b      	add	r3, r1
 8014bf4:	b2d2      	uxtb	r2, r2
 8014bf6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	0c1a      	lsrs	r2, r3, #16
 8014bfc:	89fb      	ldrh	r3, [r7, #14]
 8014bfe:	1c59      	adds	r1, r3, #1
 8014c00:	81f9      	strh	r1, [r7, #14]
 8014c02:	4619      	mov	r1, r3
 8014c04:	68bb      	ldr	r3, [r7, #8]
 8014c06:	440b      	add	r3, r1
 8014c08:	b2d2      	uxtb	r2, r2
 8014c0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	0a1a      	lsrs	r2, r3, #8
 8014c10:	89fb      	ldrh	r3, [r7, #14]
 8014c12:	1c59      	adds	r1, r3, #1
 8014c14:	81f9      	strh	r1, [r7, #14]
 8014c16:	4619      	mov	r1, r3
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	440b      	add	r3, r1
 8014c1c:	b2d2      	uxtb	r2, r2
 8014c1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014c20:	89fb      	ldrh	r3, [r7, #14]
 8014c22:	1c5a      	adds	r2, r3, #1
 8014c24:	81fa      	strh	r2, [r7, #14]
 8014c26:	461a      	mov	r2, r3
 8014c28:	68bb      	ldr	r3, [r7, #8]
 8014c2a:	4413      	add	r3, r2
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	b2d2      	uxtb	r2, r2
 8014c30:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014c32:	89fb      	ldrh	r3, [r7, #14]
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3710      	adds	r7, #16
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	bd80      	pop	{r7, pc}
 8014c3c:	0801bfc8 	.word	0x0801bfc8
 8014c40:	0801c214 	.word	0x0801c214
 8014c44:	0801c028 	.word	0x0801c028

08014c48 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b090      	sub	sp, #64	@ 0x40
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
 8014c50:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014c52:	2300      	movs	r3, #0
 8014c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8014c56:	2300      	movs	r3, #0
 8014c58:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8014c5a:	2208      	movs	r2, #8
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	48b5      	ldr	r0, [pc, #724]	@ (8014f34 <dhcp_parse_reply+0x2ec>)
 8014c60:	f003 fbb3 	bl	80183ca <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	895b      	ldrh	r3, [r3, #10]
 8014c68:	2b2b      	cmp	r3, #43	@ 0x2b
 8014c6a:	d802      	bhi.n	8014c72 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014c6c:	f06f 0301 	mvn.w	r3, #1
 8014c70:	e2a7      	b.n	80151c2 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8014c78:	23f0      	movs	r3, #240	@ 0xf0
 8014c7a:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	891b      	ldrh	r3, [r3, #8]
 8014c80:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014c86:	e00c      	b.n	8014ca2 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8014c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c8a:	895b      	ldrh	r3, [r3, #10]
 8014c8c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014c8e:	1ad3      	subs	r3, r2, r3
 8014c90:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c94:	895b      	ldrh	r3, [r3, #10]
 8014c96:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8014c98:	1ad3      	subs	r3, r2, r3
 8014c9a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8014c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d004      	beq.n	8014cb2 <dhcp_parse_reply+0x6a>
 8014ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014caa:	895b      	ldrh	r3, [r3, #10]
 8014cac:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d2ea      	bcs.n	8014c88 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d102      	bne.n	8014cbe <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8014cb8:	f06f 0301 	mvn.w	r3, #1
 8014cbc:	e281      	b.n	80151c2 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014cbe:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014cc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8014cc2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8014cc4:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8014cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014ccc:	e239      	b.n	8015142 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8014cce:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014cd2:	4413      	add	r3, r2
 8014cd4:	781b      	ldrb	r3, [r3, #0]
 8014cd6:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8014cd8:	2300      	movs	r3, #0
 8014cda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8014cde:	f04f 33ff 	mov.w	r3, #4294967295
 8014ce2:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8014ce4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014ce6:	3302      	adds	r3, #2
 8014ce8:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8014cea:	8bfa      	ldrh	r2, [r7, #30]
 8014cec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014cee:	429a      	cmp	r2, r3
 8014cf0:	d202      	bcs.n	8014cf8 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8014cf2:	f06f 0301 	mvn.w	r3, #1
 8014cf6:	e264      	b.n	80151c2 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014cf8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cfe:	8952      	ldrh	r2, [r2, #10]
 8014d00:	4293      	cmp	r3, r2
 8014d02:	da07      	bge.n	8014d14 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8014d04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014d06:	3301      	adds	r3, #1
 8014d08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014d0a:	4413      	add	r3, r2
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014d12:	e00b      	b.n	8014d2c <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8014d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d004      	beq.n	8014d26 <dhcp_parse_reply+0xde>
 8014d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d1e:	681b      	ldr	r3, [r3, #0]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	781b      	ldrb	r3, [r3, #0]
 8014d24:	e000      	b.n	8014d28 <dhcp_parse_reply+0xe0>
 8014d26:	2300      	movs	r3, #0
 8014d28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014d30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8014d34:	7dfb      	ldrb	r3, [r7, #23]
 8014d36:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d38:	f200 812c 	bhi.w	8014f94 <dhcp_parse_reply+0x34c>
 8014d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8014d44 <dhcp_parse_reply+0xfc>)
 8014d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d42:	bf00      	nop
 8014d44:	08014e35 	.word	0x08014e35
 8014d48:	08014e45 	.word	0x08014e45
 8014d4c:	08014f95 	.word	0x08014f95
 8014d50:	08014e67 	.word	0x08014e67
 8014d54:	08014f95 	.word	0x08014f95
 8014d58:	08014f95 	.word	0x08014f95
 8014d5c:	08014f95 	.word	0x08014f95
 8014d60:	08014f95 	.word	0x08014f95
 8014d64:	08014f95 	.word	0x08014f95
 8014d68:	08014f95 	.word	0x08014f95
 8014d6c:	08014f95 	.word	0x08014f95
 8014d70:	08014f95 	.word	0x08014f95
 8014d74:	08014f95 	.word	0x08014f95
 8014d78:	08014f95 	.word	0x08014f95
 8014d7c:	08014f95 	.word	0x08014f95
 8014d80:	08014f95 	.word	0x08014f95
 8014d84:	08014f95 	.word	0x08014f95
 8014d88:	08014f95 	.word	0x08014f95
 8014d8c:	08014f95 	.word	0x08014f95
 8014d90:	08014f95 	.word	0x08014f95
 8014d94:	08014f95 	.word	0x08014f95
 8014d98:	08014f95 	.word	0x08014f95
 8014d9c:	08014f95 	.word	0x08014f95
 8014da0:	08014f95 	.word	0x08014f95
 8014da4:	08014f95 	.word	0x08014f95
 8014da8:	08014f95 	.word	0x08014f95
 8014dac:	08014f95 	.word	0x08014f95
 8014db0:	08014f95 	.word	0x08014f95
 8014db4:	08014f95 	.word	0x08014f95
 8014db8:	08014f95 	.word	0x08014f95
 8014dbc:	08014f95 	.word	0x08014f95
 8014dc0:	08014f95 	.word	0x08014f95
 8014dc4:	08014f95 	.word	0x08014f95
 8014dc8:	08014f95 	.word	0x08014f95
 8014dcc:	08014f95 	.word	0x08014f95
 8014dd0:	08014f95 	.word	0x08014f95
 8014dd4:	08014f95 	.word	0x08014f95
 8014dd8:	08014f95 	.word	0x08014f95
 8014ddc:	08014f95 	.word	0x08014f95
 8014de0:	08014f95 	.word	0x08014f95
 8014de4:	08014f95 	.word	0x08014f95
 8014de8:	08014f95 	.word	0x08014f95
 8014dec:	08014f95 	.word	0x08014f95
 8014df0:	08014f95 	.word	0x08014f95
 8014df4:	08014f95 	.word	0x08014f95
 8014df8:	08014f95 	.word	0x08014f95
 8014dfc:	08014f95 	.word	0x08014f95
 8014e00:	08014f95 	.word	0x08014f95
 8014e04:	08014f95 	.word	0x08014f95
 8014e08:	08014f95 	.word	0x08014f95
 8014e0c:	08014f95 	.word	0x08014f95
 8014e10:	08014e93 	.word	0x08014e93
 8014e14:	08014eb5 	.word	0x08014eb5
 8014e18:	08014ef1 	.word	0x08014ef1
 8014e1c:	08014f13 	.word	0x08014f13
 8014e20:	08014f95 	.word	0x08014f95
 8014e24:	08014f95 	.word	0x08014f95
 8014e28:	08014f95 	.word	0x08014f95
 8014e2c:	08014f51 	.word	0x08014f51
 8014e30:	08014f73 	.word	0x08014f73
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014e34:	2300      	movs	r3, #0
 8014e36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014e3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e3e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8014e42:	e0ab      	b.n	8014f9c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e48:	2b04      	cmp	r3, #4
 8014e4a:	d009      	beq.n	8014e60 <dhcp_parse_reply+0x218>
 8014e4c:	4b3a      	ldr	r3, [pc, #232]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014e4e:	f240 622e 	movw	r2, #1582	@ 0x62e
 8014e52:	493a      	ldr	r1, [pc, #232]	@ (8014f3c <dhcp_parse_reply+0x2f4>)
 8014e54:	483a      	ldr	r0, [pc, #232]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014e56:	f003 fa53 	bl	8018300 <iprintf>
 8014e5a:	f06f 0305 	mvn.w	r3, #5
 8014e5e:	e1b0      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014e60:	2306      	movs	r3, #6
 8014e62:	623b      	str	r3, [r7, #32]
        break;
 8014e64:	e09a      	b.n	8014f9c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014e66:	2304      	movs	r3, #4
 8014e68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014e6c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014e70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d209      	bcs.n	8014e8c <dhcp_parse_reply+0x244>
 8014e78:	4b2f      	ldr	r3, [pc, #188]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014e7a:	f240 6233 	movw	r2, #1587	@ 0x633
 8014e7e:	4931      	ldr	r1, [pc, #196]	@ (8014f44 <dhcp_parse_reply+0x2fc>)
 8014e80:	482f      	ldr	r0, [pc, #188]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014e82:	f003 fa3d 	bl	8018300 <iprintf>
 8014e86:	f06f 0305 	mvn.w	r3, #5
 8014e8a:	e19a      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014e8c:	2307      	movs	r3, #7
 8014e8e:	623b      	str	r3, [r7, #32]
        break;
 8014e90:	e084      	b.n	8014f9c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014e92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e96:	2b04      	cmp	r3, #4
 8014e98:	d009      	beq.n	8014eae <dhcp_parse_reply+0x266>
 8014e9a:	4b27      	ldr	r3, [pc, #156]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014e9c:	f240 6241 	movw	r2, #1601	@ 0x641
 8014ea0:	4926      	ldr	r1, [pc, #152]	@ (8014f3c <dhcp_parse_reply+0x2f4>)
 8014ea2:	4827      	ldr	r0, [pc, #156]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014ea4:	f003 fa2c 	bl	8018300 <iprintf>
 8014ea8:	f06f 0305 	mvn.w	r3, #5
 8014eac:	e189      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014eae:	2303      	movs	r3, #3
 8014eb0:	623b      	str	r3, [r7, #32]
        break;
 8014eb2:	e073      	b.n	8014f9c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014eb8:	2b01      	cmp	r3, #1
 8014eba:	d009      	beq.n	8014ed0 <dhcp_parse_reply+0x288>
 8014ebc:	4b1e      	ldr	r3, [pc, #120]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014ebe:	f240 624f 	movw	r2, #1615	@ 0x64f
 8014ec2:	4921      	ldr	r1, [pc, #132]	@ (8014f48 <dhcp_parse_reply+0x300>)
 8014ec4:	481e      	ldr	r0, [pc, #120]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014ec6:	f003 fa1b 	bl	8018300 <iprintf>
 8014eca:	f06f 0305 	mvn.w	r3, #5
 8014ece:	e178      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014ed0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8014ed2:	2bf0      	cmp	r3, #240	@ 0xf0
 8014ed4:	d009      	beq.n	8014eea <dhcp_parse_reply+0x2a2>
 8014ed6:	4b18      	ldr	r3, [pc, #96]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014ed8:	f240 6251 	movw	r2, #1617	@ 0x651
 8014edc:	491b      	ldr	r1, [pc, #108]	@ (8014f4c <dhcp_parse_reply+0x304>)
 8014ede:	4818      	ldr	r0, [pc, #96]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014ee0:	f003 fa0e 	bl	8018300 <iprintf>
 8014ee4:	f06f 0305 	mvn.w	r3, #5
 8014ee8:	e16b      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014eea:	2300      	movs	r3, #0
 8014eec:	623b      	str	r3, [r7, #32]
        break;
 8014eee:	e055      	b.n	8014f9c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014ef4:	2b01      	cmp	r3, #1
 8014ef6:	d009      	beq.n	8014f0c <dhcp_parse_reply+0x2c4>
 8014ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014efa:	f240 6255 	movw	r2, #1621	@ 0x655
 8014efe:	4912      	ldr	r1, [pc, #72]	@ (8014f48 <dhcp_parse_reply+0x300>)
 8014f00:	480f      	ldr	r0, [pc, #60]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014f02:	f003 f9fd 	bl	8018300 <iprintf>
 8014f06:	f06f 0305 	mvn.w	r3, #5
 8014f0a:	e15a      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	623b      	str	r3, [r7, #32]
        break;
 8014f10:	e044      	b.n	8014f9c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f12:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f16:	2b04      	cmp	r3, #4
 8014f18:	d009      	beq.n	8014f2e <dhcp_parse_reply+0x2e6>
 8014f1a:	4b07      	ldr	r3, [pc, #28]	@ (8014f38 <dhcp_parse_reply+0x2f0>)
 8014f1c:	f240 6259 	movw	r2, #1625	@ 0x659
 8014f20:	4906      	ldr	r1, [pc, #24]	@ (8014f3c <dhcp_parse_reply+0x2f4>)
 8014f22:	4807      	ldr	r0, [pc, #28]	@ (8014f40 <dhcp_parse_reply+0x2f8>)
 8014f24:	f003 f9ec 	bl	8018300 <iprintf>
 8014f28:	f06f 0305 	mvn.w	r3, #5
 8014f2c:	e149      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014f2e:	2302      	movs	r3, #2
 8014f30:	623b      	str	r3, [r7, #32]
        break;
 8014f32:	e033      	b.n	8014f9c <dhcp_parse_reply+0x354>
 8014f34:	20015124 	.word	0x20015124
 8014f38:	0801bfc8 	.word	0x0801bfc8
 8014f3c:	0801c250 	.word	0x0801c250
 8014f40:	0801c028 	.word	0x0801c028
 8014f44:	0801c25c 	.word	0x0801c25c
 8014f48:	0801c270 	.word	0x0801c270
 8014f4c:	0801c27c 	.word	0x0801c27c
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f54:	2b04      	cmp	r3, #4
 8014f56:	d009      	beq.n	8014f6c <dhcp_parse_reply+0x324>
 8014f58:	4b9c      	ldr	r3, [pc, #624]	@ (80151cc <dhcp_parse_reply+0x584>)
 8014f5a:	f240 625d 	movw	r2, #1629	@ 0x65d
 8014f5e:	499c      	ldr	r1, [pc, #624]	@ (80151d0 <dhcp_parse_reply+0x588>)
 8014f60:	489c      	ldr	r0, [pc, #624]	@ (80151d4 <dhcp_parse_reply+0x58c>)
 8014f62:	f003 f9cd 	bl	8018300 <iprintf>
 8014f66:	f06f 0305 	mvn.w	r3, #5
 8014f6a:	e12a      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014f6c:	2304      	movs	r3, #4
 8014f6e:	623b      	str	r3, [r7, #32]
        break;
 8014f70:	e014      	b.n	8014f9c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014f72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014f76:	2b04      	cmp	r3, #4
 8014f78:	d009      	beq.n	8014f8e <dhcp_parse_reply+0x346>
 8014f7a:	4b94      	ldr	r3, [pc, #592]	@ (80151cc <dhcp_parse_reply+0x584>)
 8014f7c:	f240 6261 	movw	r2, #1633	@ 0x661
 8014f80:	4993      	ldr	r1, [pc, #588]	@ (80151d0 <dhcp_parse_reply+0x588>)
 8014f82:	4894      	ldr	r0, [pc, #592]	@ (80151d4 <dhcp_parse_reply+0x58c>)
 8014f84:	f003 f9bc 	bl	8018300 <iprintf>
 8014f88:	f06f 0305 	mvn.w	r3, #5
 8014f8c:	e119      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014f8e:	2305      	movs	r3, #5
 8014f90:	623b      	str	r3, [r7, #32]
        break;
 8014f92:	e003      	b.n	8014f9c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014f94:	2300      	movs	r3, #0
 8014f96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014f9a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014f9c:	7dfb      	ldrb	r3, [r7, #23]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d103      	bne.n	8014faa <dhcp_parse_reply+0x362>
      offset++;
 8014fa2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8014fa8:	e0a1      	b.n	80150ee <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014faa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8014fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fb0:	4413      	add	r3, r2
 8014fb2:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	dd02      	ble.n	8014fc0 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8014fba:	f06f 0301 	mvn.w	r3, #1
 8014fbe:	e100      	b.n	80151c2 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8014fc8:	4413      	add	r3, r2
 8014fca:	b29b      	uxth	r3, r3
 8014fcc:	3302      	adds	r3, #2
 8014fce:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8014fd0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	f000 808a 	beq.w	80150ee <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014fde:	6a3b      	ldr	r3, [r7, #32]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	db02      	blt.n	8014fea <dhcp_parse_reply+0x3a2>
 8014fe4:	6a3b      	ldr	r3, [r7, #32]
 8014fe6:	2b07      	cmp	r3, #7
 8014fe8:	dd06      	ble.n	8014ff8 <dhcp_parse_reply+0x3b0>
 8014fea:	4b78      	ldr	r3, [pc, #480]	@ (80151cc <dhcp_parse_reply+0x584>)
 8014fec:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8014ff0:	4979      	ldr	r1, [pc, #484]	@ (80151d8 <dhcp_parse_reply+0x590>)
 8014ff2:	4878      	ldr	r0, [pc, #480]	@ (80151d4 <dhcp_parse_reply+0x58c>)
 8014ff4:	f003 f984 	bl	8018300 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014ff8:	4a78      	ldr	r2, [pc, #480]	@ (80151dc <dhcp_parse_reply+0x594>)
 8014ffa:	6a3b      	ldr	r3, [r7, #32]
 8014ffc:	4413      	add	r3, r2
 8014ffe:	781b      	ldrb	r3, [r3, #0]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d174      	bne.n	80150ee <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015008:	2b04      	cmp	r3, #4
 801500a:	bf28      	it	cs
 801500c:	2304      	movcs	r3, #4
 801500e:	b2db      	uxtb	r3, r3
 8015010:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015012:	8bfb      	ldrh	r3, [r7, #30]
 8015014:	8aba      	ldrh	r2, [r7, #20]
 8015016:	f107 0108 	add.w	r1, r7, #8
 801501a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801501c:	f7f8 f8ac 	bl	800d178 <pbuf_copy_partial>
 8015020:	4603      	mov	r3, r0
 8015022:	461a      	mov	r2, r3
 8015024:	8abb      	ldrh	r3, [r7, #20]
 8015026:	4293      	cmp	r3, r2
 8015028:	d002      	beq.n	8015030 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801502a:	f06f 0301 	mvn.w	r3, #1
 801502e:	e0c8      	b.n	80151c2 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015030:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015034:	2b04      	cmp	r3, #4
 8015036:	d933      	bls.n	80150a0 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015038:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801503c:	f003 0303 	and.w	r3, r3, #3
 8015040:	b2db      	uxtb	r3, r3
 8015042:	2b00      	cmp	r3, #0
 8015044:	d009      	beq.n	801505a <dhcp_parse_reply+0x412>
 8015046:	4b61      	ldr	r3, [pc, #388]	@ (80151cc <dhcp_parse_reply+0x584>)
 8015048:	f240 6281 	movw	r2, #1665	@ 0x681
 801504c:	4964      	ldr	r1, [pc, #400]	@ (80151e0 <dhcp_parse_reply+0x598>)
 801504e:	4861      	ldr	r0, [pc, #388]	@ (80151d4 <dhcp_parse_reply+0x58c>)
 8015050:	f003 f956 	bl	8018300 <iprintf>
 8015054:	f06f 0305 	mvn.w	r3, #5
 8015058:	e0b3      	b.n	80151c2 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801505a:	4a60      	ldr	r2, [pc, #384]	@ (80151dc <dhcp_parse_reply+0x594>)
 801505c:	6a3b      	ldr	r3, [r7, #32]
 801505e:	4413      	add	r3, r2
 8015060:	2201      	movs	r2, #1
 8015062:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015064:	68bb      	ldr	r3, [r7, #8]
 8015066:	4618      	mov	r0, r3
 8015068:	f7f6 f9bf 	bl	800b3ea <lwip_htonl>
 801506c:	4602      	mov	r2, r0
 801506e:	495d      	ldr	r1, [pc, #372]	@ (80151e4 <dhcp_parse_reply+0x59c>)
 8015070:	6a3b      	ldr	r3, [r7, #32]
 8015072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015076:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801507a:	3b04      	subs	r3, #4
 801507c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015080:	8bfb      	ldrh	r3, [r7, #30]
 8015082:	3304      	adds	r3, #4
 8015084:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015086:	8a7a      	ldrh	r2, [r7, #18]
 8015088:	8bfb      	ldrh	r3, [r7, #30]
 801508a:	429a      	cmp	r2, r3
 801508c:	d202      	bcs.n	8015094 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801508e:	f06f 0301 	mvn.w	r3, #1
 8015092:	e096      	b.n	80151c2 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015094:	8a7b      	ldrh	r3, [r7, #18]
 8015096:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015098:	6a3b      	ldr	r3, [r7, #32]
 801509a:	3301      	adds	r3, #1
 801509c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801509e:	e79e      	b.n	8014fde <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 80150a0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80150a4:	2b04      	cmp	r3, #4
 80150a6:	d106      	bne.n	80150b6 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f6 f99d 	bl	800b3ea <lwip_htonl>
 80150b0:	4603      	mov	r3, r0
 80150b2:	60bb      	str	r3, [r7, #8]
 80150b4:	e011      	b.n	80150da <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80150b6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80150ba:	2b01      	cmp	r3, #1
 80150bc:	d009      	beq.n	80150d2 <dhcp_parse_reply+0x48a>
 80150be:	4b43      	ldr	r3, [pc, #268]	@ (80151cc <dhcp_parse_reply+0x584>)
 80150c0:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 80150c4:	4948      	ldr	r1, [pc, #288]	@ (80151e8 <dhcp_parse_reply+0x5a0>)
 80150c6:	4843      	ldr	r0, [pc, #268]	@ (80151d4 <dhcp_parse_reply+0x58c>)
 80150c8:	f003 f91a 	bl	8018300 <iprintf>
 80150cc:	f06f 0305 	mvn.w	r3, #5
 80150d0:	e077      	b.n	80151c2 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80150d2:	f107 0308 	add.w	r3, r7, #8
 80150d6:	781b      	ldrb	r3, [r3, #0]
 80150d8:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80150da:	4a40      	ldr	r2, [pc, #256]	@ (80151dc <dhcp_parse_reply+0x594>)
 80150dc:	6a3b      	ldr	r3, [r7, #32]
 80150de:	4413      	add	r3, r2
 80150e0:	2201      	movs	r2, #1
 80150e2:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80150e4:	68ba      	ldr	r2, [r7, #8]
 80150e6:	493f      	ldr	r1, [pc, #252]	@ (80151e4 <dhcp_parse_reply+0x59c>)
 80150e8:	6a3b      	ldr	r3, [r7, #32]
 80150ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80150ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150f0:	895b      	ldrh	r3, [r3, #10]
 80150f2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d324      	bcc.n	8015142 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80150f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150fa:	895b      	ldrh	r3, [r3, #10]
 80150fc:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015104:	895b      	ldrh	r3, [r3, #10]
 8015106:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801510c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801510e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8015110:	429a      	cmp	r2, r3
 8015112:	d213      	bcs.n	801513c <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801511c:	2b00      	cmp	r3, #0
 801511e:	d109      	bne.n	8015134 <dhcp_parse_reply+0x4ec>
 8015120:	4b2a      	ldr	r3, [pc, #168]	@ (80151cc <dhcp_parse_reply+0x584>)
 8015122:	f240 629d 	movw	r2, #1693	@ 0x69d
 8015126:	4931      	ldr	r1, [pc, #196]	@ (80151ec <dhcp_parse_reply+0x5a4>)
 8015128:	482a      	ldr	r0, [pc, #168]	@ (80151d4 <dhcp_parse_reply+0x58c>)
 801512a:	f003 f8e9 	bl	8018300 <iprintf>
 801512e:	f06f 0305 	mvn.w	r3, #5
 8015132:	e046      	b.n	80151c2 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8015134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801513a:	e002      	b.n	8015142 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801513c:	f06f 0301 	mvn.w	r3, #1
 8015140:	e03f      	b.n	80151c2 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015144:	2b00      	cmp	r3, #0
 8015146:	d00a      	beq.n	801515e <dhcp_parse_reply+0x516>
 8015148:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801514a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801514c:	429a      	cmp	r2, r3
 801514e:	d206      	bcs.n	801515e <dhcp_parse_reply+0x516>
 8015150:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015152:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015154:	4413      	add	r3, r2
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	2bff      	cmp	r3, #255	@ 0xff
 801515a:	f47f adb8 	bne.w	8014cce <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801515e:	4b1f      	ldr	r3, [pc, #124]	@ (80151dc <dhcp_parse_reply+0x594>)
 8015160:	781b      	ldrb	r3, [r3, #0]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d018      	beq.n	8015198 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8015166:	4b1f      	ldr	r3, [pc, #124]	@ (80151e4 <dhcp_parse_reply+0x59c>)
 8015168:	681b      	ldr	r3, [r3, #0]
 801516a:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801516c:	4b1b      	ldr	r3, [pc, #108]	@ (80151dc <dhcp_parse_reply+0x594>)
 801516e:	2200      	movs	r2, #0
 8015170:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	2b01      	cmp	r3, #1
 8015176:	d102      	bne.n	801517e <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8015178:	2301      	movs	r3, #1
 801517a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801517c:	e00c      	b.n	8015198 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2b02      	cmp	r3, #2
 8015182:	d102      	bne.n	801518a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8015184:	2301      	movs	r3, #1
 8015186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015188:	e006      	b.n	8015198 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	2b03      	cmp	r3, #3
 801518e:	d103      	bne.n	8015198 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8015190:	2301      	movs	r3, #1
 8015192:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8015194:	2301      	movs	r3, #1
 8015196:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8015198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801519a:	2b00      	cmp	r3, #0
 801519c:	d006      	beq.n	80151ac <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801519e:	2300      	movs	r3, #0
 80151a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80151a2:	236c      	movs	r3, #108	@ 0x6c
 80151a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80151a6:	23ec      	movs	r3, #236	@ 0xec
 80151a8:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80151aa:	e56a      	b.n	8014c82 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80151ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d006      	beq.n	80151c0 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80151b2:	2300      	movs	r3, #0
 80151b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80151b6:	232c      	movs	r3, #44	@ 0x2c
 80151b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80151ba:	236c      	movs	r3, #108	@ 0x6c
 80151bc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 80151be:	e560      	b.n	8014c82 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80151c0:	2300      	movs	r3, #0
}
 80151c2:	4618      	mov	r0, r3
 80151c4:	3740      	adds	r7, #64	@ 0x40
 80151c6:	46bd      	mov	sp, r7
 80151c8:	bd80      	pop	{r7, pc}
 80151ca:	bf00      	nop
 80151cc:	0801bfc8 	.word	0x0801bfc8
 80151d0:	0801c250 	.word	0x0801c250
 80151d4:	0801c028 	.word	0x0801c028
 80151d8:	0801c294 	.word	0x0801c294
 80151dc:	20015124 	.word	0x20015124
 80151e0:	0801c2a8 	.word	0x0801c2a8
 80151e4:	20015104 	.word	0x20015104
 80151e8:	0801c2c0 	.word	0x0801c2c0
 80151ec:	0801c2d4 	.word	0x0801c2d4

080151f0 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80151f0:	b580      	push	{r7, lr}
 80151f2:	b08a      	sub	sp, #40	@ 0x28
 80151f4:	af00      	add	r7, sp, #0
 80151f6:	60f8      	str	r0, [r7, #12]
 80151f8:	60b9      	str	r1, [r7, #8]
 80151fa:	607a      	str	r2, [r7, #4]
 80151fc:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80151fe:	4b60      	ldr	r3, [pc, #384]	@ (8015380 <dhcp_recv+0x190>)
 8015200:	685b      	ldr	r3, [r3, #4]
 8015202:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015204:	6a3b      	ldr	r3, [r7, #32]
 8015206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015208:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8015210:	69fb      	ldr	r3, [r7, #28]
 8015212:	2b00      	cmp	r3, #0
 8015214:	f000 809d 	beq.w	8015352 <dhcp_recv+0x162>
 8015218:	69fb      	ldr	r3, [r7, #28]
 801521a:	791b      	ldrb	r3, [r3, #4]
 801521c:	2b00      	cmp	r3, #0
 801521e:	f000 8098 	beq.w	8015352 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	895b      	ldrh	r3, [r3, #10]
 8015226:	2b2b      	cmp	r3, #43	@ 0x2b
 8015228:	f240 8095 	bls.w	8015356 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801522c:	69bb      	ldr	r3, [r7, #24]
 801522e:	781b      	ldrb	r3, [r3, #0]
 8015230:	2b02      	cmp	r3, #2
 8015232:	f040 8092 	bne.w	801535a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015236:	2300      	movs	r3, #0
 8015238:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801523c:	e012      	b.n	8015264 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801523e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015242:	6a3a      	ldr	r2, [r7, #32]
 8015244:	4413      	add	r3, r2
 8015246:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801524a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801524e:	69b9      	ldr	r1, [r7, #24]
 8015250:	440b      	add	r3, r1
 8015252:	7f1b      	ldrb	r3, [r3, #28]
 8015254:	429a      	cmp	r2, r3
 8015256:	f040 8082 	bne.w	801535e <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801525a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801525e:	3301      	adds	r3, #1
 8015260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015264:	6a3b      	ldr	r3, [r7, #32]
 8015266:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801526a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801526e:	429a      	cmp	r2, r3
 8015270:	d203      	bcs.n	801527a <dhcp_recv+0x8a>
 8015272:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015276:	2b05      	cmp	r3, #5
 8015278:	d9e1      	bls.n	801523e <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801527a:	69bb      	ldr	r3, [r7, #24]
 801527c:	685b      	ldr	r3, [r3, #4]
 801527e:	4618      	mov	r0, r3
 8015280:	f7f6 f8b3 	bl	800b3ea <lwip_htonl>
 8015284:	4602      	mov	r2, r0
 8015286:	69fb      	ldr	r3, [r7, #28]
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	429a      	cmp	r2, r3
 801528c:	d169      	bne.n	8015362 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801528e:	69f9      	ldr	r1, [r7, #28]
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7ff fcd9 	bl	8014c48 <dhcp_parse_reply>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d164      	bne.n	8015366 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801529c:	4b39      	ldr	r3, [pc, #228]	@ (8015384 <dhcp_recv+0x194>)
 801529e:	785b      	ldrb	r3, [r3, #1]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d062      	beq.n	801536a <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	685b      	ldr	r3, [r3, #4]
 80152a8:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80152aa:	4b37      	ldr	r3, [pc, #220]	@ (8015388 <dhcp_recv+0x198>)
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80152b0:	7cfb      	ldrb	r3, [r7, #19]
 80152b2:	2b05      	cmp	r3, #5
 80152b4:	d12a      	bne.n	801530c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80152b6:	69fb      	ldr	r3, [r7, #28]
 80152b8:	795b      	ldrb	r3, [r3, #5]
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d112      	bne.n	80152e4 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80152be:	6979      	ldr	r1, [r7, #20]
 80152c0:	6a38      	ldr	r0, [r7, #32]
 80152c2:	f7fe fe1d 	bl	8013f00 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80152c6:	6a3b      	ldr	r3, [r7, #32]
 80152c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80152cc:	f003 0308 	and.w	r3, r3, #8
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d003      	beq.n	80152dc <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80152d4:	6a38      	ldr	r0, [r7, #32]
 80152d6:	f7fe fb8d 	bl	80139f4 <dhcp_check>
 80152da:	e049      	b.n	8015370 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80152dc:	6a38      	ldr	r0, [r7, #32]
 80152de:	f7ff f86d 	bl	80143bc <dhcp_bind>
 80152e2:	e045      	b.n	8015370 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80152e4:	69fb      	ldr	r3, [r7, #28]
 80152e6:	795b      	ldrb	r3, [r3, #5]
 80152e8:	2b03      	cmp	r3, #3
 80152ea:	d007      	beq.n	80152fc <dhcp_recv+0x10c>
 80152ec:	69fb      	ldr	r3, [r7, #28]
 80152ee:	795b      	ldrb	r3, [r3, #5]
 80152f0:	2b04      	cmp	r3, #4
 80152f2:	d003      	beq.n	80152fc <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80152f8:	2b05      	cmp	r3, #5
 80152fa:	d139      	bne.n	8015370 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80152fc:	6979      	ldr	r1, [r7, #20]
 80152fe:	6a38      	ldr	r0, [r7, #32]
 8015300:	f7fe fdfe 	bl	8013f00 <dhcp_handle_ack>
      dhcp_bind(netif);
 8015304:	6a38      	ldr	r0, [r7, #32]
 8015306:	f7ff f859 	bl	80143bc <dhcp_bind>
 801530a:	e031      	b.n	8015370 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801530c:	7cfb      	ldrb	r3, [r7, #19]
 801530e:	2b06      	cmp	r3, #6
 8015310:	d113      	bne.n	801533a <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015312:	69fb      	ldr	r3, [r7, #28]
 8015314:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8015316:	2b03      	cmp	r3, #3
 8015318:	d00b      	beq.n	8015332 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	795b      	ldrb	r3, [r3, #5]
 801531e:	2b01      	cmp	r3, #1
 8015320:	d007      	beq.n	8015332 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8015326:	2b04      	cmp	r3, #4
 8015328:	d003      	beq.n	8015332 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	795b      	ldrb	r3, [r3, #5]
 801532e:	2b05      	cmp	r3, #5
 8015330:	d103      	bne.n	801533a <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015332:	6a38      	ldr	r0, [r7, #32]
 8015334:	f7fe fb44 	bl	80139c0 <dhcp_handle_nak>
 8015338:	e01a      	b.n	8015370 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801533a:	7cfb      	ldrb	r3, [r7, #19]
 801533c:	2b02      	cmp	r3, #2
 801533e:	d116      	bne.n	801536e <dhcp_recv+0x17e>
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	795b      	ldrb	r3, [r3, #5]
 8015344:	2b06      	cmp	r3, #6
 8015346:	d112      	bne.n	801536e <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8015348:	6979      	ldr	r1, [r7, #20]
 801534a:	6a38      	ldr	r0, [r7, #32]
 801534c:	f7fe fb86 	bl	8013a5c <dhcp_handle_offer>
 8015350:	e00e      	b.n	8015370 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015352:	bf00      	nop
 8015354:	e00c      	b.n	8015370 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015356:	bf00      	nop
 8015358:	e00a      	b.n	8015370 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801535a:	bf00      	nop
 801535c:	e008      	b.n	8015370 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801535e:	bf00      	nop
 8015360:	e006      	b.n	8015370 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015362:	bf00      	nop
 8015364:	e004      	b.n	8015370 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015366:	bf00      	nop
 8015368:	e002      	b.n	8015370 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801536a:	bf00      	nop
 801536c:	e000      	b.n	8015370 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801536e:	bf00      	nop
  pbuf_free(p);
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f7f7 fcfb 	bl	800cd6c <pbuf_free>
}
 8015376:	bf00      	nop
 8015378:	3728      	adds	r7, #40	@ 0x28
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	20009320 	.word	0x20009320
 8015384:	20015124 	.word	0x20015124
 8015388:	20015104 	.word	0x20015104

0801538c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b088      	sub	sp, #32
 8015390:	af00      	add	r7, sp, #0
 8015392:	60f8      	str	r0, [r7, #12]
 8015394:	60b9      	str	r1, [r7, #8]
 8015396:	603b      	str	r3, [r7, #0]
 8015398:	4613      	mov	r3, r2
 801539a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d108      	bne.n	80153b4 <dhcp_create_msg+0x28>
 80153a2:	4b5f      	ldr	r3, [pc, #380]	@ (8015520 <dhcp_create_msg+0x194>)
 80153a4:	f240 7269 	movw	r2, #1897	@ 0x769
 80153a8:	495e      	ldr	r1, [pc, #376]	@ (8015524 <dhcp_create_msg+0x198>)
 80153aa:	485f      	ldr	r0, [pc, #380]	@ (8015528 <dhcp_create_msg+0x19c>)
 80153ac:	f002 ffa8 	bl	8018300 <iprintf>
 80153b0:	2300      	movs	r3, #0
 80153b2:	e0b1      	b.n	8015518 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d108      	bne.n	80153cc <dhcp_create_msg+0x40>
 80153ba:	4b59      	ldr	r3, [pc, #356]	@ (8015520 <dhcp_create_msg+0x194>)
 80153bc:	f240 726a 	movw	r2, #1898	@ 0x76a
 80153c0:	495a      	ldr	r1, [pc, #360]	@ (801552c <dhcp_create_msg+0x1a0>)
 80153c2:	4859      	ldr	r0, [pc, #356]	@ (8015528 <dhcp_create_msg+0x19c>)
 80153c4:	f002 ff9c 	bl	8018300 <iprintf>
 80153c8:	2300      	movs	r3, #0
 80153ca:	e0a5      	b.n	8015518 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80153cc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80153d0:	f44f 719a 	mov.w	r1, #308	@ 0x134
 80153d4:	2036      	movs	r0, #54	@ 0x36
 80153d6:	f7f7 f9e5 	bl	800c7a4 <pbuf_alloc>
 80153da:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80153dc:	69bb      	ldr	r3, [r7, #24]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d101      	bne.n	80153e6 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80153e2:	2300      	movs	r3, #0
 80153e4:	e098      	b.n	8015518 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80153e6:	69bb      	ldr	r3, [r7, #24]
 80153e8:	895b      	ldrh	r3, [r3, #10]
 80153ea:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80153ee:	d206      	bcs.n	80153fe <dhcp_create_msg+0x72>
 80153f0:	4b4b      	ldr	r3, [pc, #300]	@ (8015520 <dhcp_create_msg+0x194>)
 80153f2:	f240 7271 	movw	r2, #1905	@ 0x771
 80153f6:	494e      	ldr	r1, [pc, #312]	@ (8015530 <dhcp_create_msg+0x1a4>)
 80153f8:	484b      	ldr	r0, [pc, #300]	@ (8015528 <dhcp_create_msg+0x19c>)
 80153fa:	f002 ff81 	bl	8018300 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80153fe:	79fb      	ldrb	r3, [r7, #7]
 8015400:	2b03      	cmp	r3, #3
 8015402:	d103      	bne.n	801540c <dhcp_create_msg+0x80>
 8015404:	68bb      	ldr	r3, [r7, #8]
 8015406:	795b      	ldrb	r3, [r3, #5]
 8015408:	2b03      	cmp	r3, #3
 801540a:	d10d      	bne.n	8015428 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801540c:	68bb      	ldr	r3, [r7, #8]
 801540e:	799b      	ldrb	r3, [r3, #6]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d105      	bne.n	8015420 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015414:	f002 fe74 	bl	8018100 <rand>
 8015418:	4603      	mov	r3, r0
 801541a:	461a      	mov	r2, r3
 801541c:	4b45      	ldr	r3, [pc, #276]	@ (8015534 <dhcp_create_msg+0x1a8>)
 801541e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8015420:	4b44      	ldr	r3, [pc, #272]	@ (8015534 <dhcp_create_msg+0x1a8>)
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	68bb      	ldr	r3, [r7, #8]
 8015426:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8015428:	69bb      	ldr	r3, [r7, #24]
 801542a:	685b      	ldr	r3, [r3, #4]
 801542c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801542e:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8015432:	2100      	movs	r1, #0
 8015434:	6978      	ldr	r0, [r7, #20]
 8015436:	f002 ffc8 	bl	80183ca <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	2201      	movs	r2, #1
 801543e:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015440:	697b      	ldr	r3, [r7, #20]
 8015442:	2201      	movs	r2, #1
 8015444:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015450:	68bb      	ldr	r3, [r7, #8]
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	4618      	mov	r0, r3
 8015456:	f7f5 ffc8 	bl	800b3ea <lwip_htonl>
 801545a:	4602      	mov	r2, r0
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	2b08      	cmp	r3, #8
 8015464:	d010      	beq.n	8015488 <dhcp_create_msg+0xfc>
 8015466:	79fb      	ldrb	r3, [r7, #7]
 8015468:	2b04      	cmp	r3, #4
 801546a:	d00d      	beq.n	8015488 <dhcp_create_msg+0xfc>
 801546c:	79fb      	ldrb	r3, [r7, #7]
 801546e:	2b07      	cmp	r3, #7
 8015470:	d00a      	beq.n	8015488 <dhcp_create_msg+0xfc>
 8015472:	79fb      	ldrb	r3, [r7, #7]
 8015474:	2b03      	cmp	r3, #3
 8015476:	d10c      	bne.n	8015492 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015478:	68bb      	ldr	r3, [r7, #8]
 801547a:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801547c:	2b05      	cmp	r3, #5
 801547e:	d003      	beq.n	8015488 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015480:	68bb      	ldr	r3, [r7, #8]
 8015482:	795b      	ldrb	r3, [r3, #5]
 8015484:	2b04      	cmp	r3, #4
 8015486:	d104      	bne.n	8015492 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	3304      	adds	r3, #4
 801548c:	681a      	ldr	r2, [r3, #0]
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015492:	2300      	movs	r3, #0
 8015494:	83fb      	strh	r3, [r7, #30]
 8015496:	e00c      	b.n	80154b2 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8015498:	8bfa      	ldrh	r2, [r7, #30]
 801549a:	8bfb      	ldrh	r3, [r7, #30]
 801549c:	68f9      	ldr	r1, [r7, #12]
 801549e:	440a      	add	r2, r1
 80154a0:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 80154a4:	697a      	ldr	r2, [r7, #20]
 80154a6:	4413      	add	r3, r2
 80154a8:	460a      	mov	r2, r1
 80154aa:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80154ac:	8bfb      	ldrh	r3, [r7, #30]
 80154ae:	3301      	adds	r3, #1
 80154b0:	83fb      	strh	r3, [r7, #30]
 80154b2:	8bfb      	ldrh	r3, [r7, #30]
 80154b4:	2b05      	cmp	r3, #5
 80154b6:	d9ef      	bls.n	8015498 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	2200      	movs	r2, #0
 80154bc:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80154c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 80154c4:	2200      	movs	r2, #0
 80154c6:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 80154ca:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 80154ce:	2200      	movs	r2, #0
 80154d0:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 80154d4:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 80154d8:	2200      	movs	r2, #0
 80154da:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 80154de:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80154e8:	2301      	movs	r3, #1
 80154ea:	2235      	movs	r2, #53	@ 0x35
 80154ec:	2000      	movs	r0, #0
 80154ee:	f7ff fadb 	bl	8014aa8 <dhcp_option>
 80154f2:	4603      	mov	r3, r0
 80154f4:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80154fc:	79fa      	ldrb	r2, [r7, #7]
 80154fe:	8a7b      	ldrh	r3, [r7, #18]
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff fb05 	bl	8014b10 <dhcp_option_byte>
 8015506:	4603      	mov	r3, r0
 8015508:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d002      	beq.n	8015516 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8015510:	683b      	ldr	r3, [r7, #0]
 8015512:	8a7a      	ldrh	r2, [r7, #18]
 8015514:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8015516:	69bb      	ldr	r3, [r7, #24]
}
 8015518:	4618      	mov	r0, r3
 801551a:	3720      	adds	r7, #32
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}
 8015520:	0801bfc8 	.word	0x0801bfc8
 8015524:	0801c2e8 	.word	0x0801c2e8
 8015528:	0801c028 	.word	0x0801c028
 801552c:	0801c308 	.word	0x0801c308
 8015530:	0801c328 	.word	0x0801c328
 8015534:	20015134 	.word	0x20015134

08015538 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	4603      	mov	r3, r0
 8015540:	60b9      	str	r1, [r7, #8]
 8015542:	607a      	str	r2, [r7, #4]
 8015544:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8015546:	89fb      	ldrh	r3, [r7, #14]
 8015548:	1c5a      	adds	r2, r3, #1
 801554a:	81fa      	strh	r2, [r7, #14]
 801554c:	461a      	mov	r2, r3
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	4413      	add	r3, r2
 8015552:	22ff      	movs	r2, #255	@ 0xff
 8015554:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015556:	e007      	b.n	8015568 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8015558:	89fb      	ldrh	r3, [r7, #14]
 801555a:	1c5a      	adds	r2, r3, #1
 801555c:	81fa      	strh	r2, [r7, #14]
 801555e:	461a      	mov	r2, r3
 8015560:	68bb      	ldr	r3, [r7, #8]
 8015562:	4413      	add	r3, r2
 8015564:	2200      	movs	r2, #0
 8015566:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8015568:	89fb      	ldrh	r3, [r7, #14]
 801556a:	2b43      	cmp	r3, #67	@ 0x43
 801556c:	d904      	bls.n	8015578 <dhcp_option_trailer+0x40>
 801556e:	89fb      	ldrh	r3, [r7, #14]
 8015570:	f003 0303 	and.w	r3, r3, #3
 8015574:	2b00      	cmp	r3, #0
 8015576:	d002      	beq.n	801557e <dhcp_option_trailer+0x46>
 8015578:	89fb      	ldrh	r3, [r7, #14]
 801557a:	2b43      	cmp	r3, #67	@ 0x43
 801557c:	d9ec      	bls.n	8015558 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801557e:	89fb      	ldrh	r3, [r7, #14]
 8015580:	33f0      	adds	r3, #240	@ 0xf0
 8015582:	b29b      	uxth	r3, r3
 8015584:	4619      	mov	r1, r3
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7f7 fa6a 	bl	800ca60 <pbuf_realloc>
}
 801558c:	bf00      	nop
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015594:	b480      	push	{r7}
 8015596:	b085      	sub	sp, #20
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d017      	beq.n	80155d2 <dhcp_supplied_address+0x3e>
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d013      	beq.n	80155d2 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155ae:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80155b0:	68fb      	ldr	r3, [r7, #12]
 80155b2:	795b      	ldrb	r3, [r3, #5]
 80155b4:	2b0a      	cmp	r3, #10
 80155b6:	d007      	beq.n	80155c8 <dhcp_supplied_address+0x34>
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	795b      	ldrb	r3, [r3, #5]
 80155bc:	2b05      	cmp	r3, #5
 80155be:	d003      	beq.n	80155c8 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80155c4:	2b04      	cmp	r3, #4
 80155c6:	d101      	bne.n	80155cc <dhcp_supplied_address+0x38>
 80155c8:	2301      	movs	r3, #1
 80155ca:	e000      	b.n	80155ce <dhcp_supplied_address+0x3a>
 80155cc:	2300      	movs	r3, #0
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	e000      	b.n	80155d4 <dhcp_supplied_address+0x40>
  }
  return 0;
 80155d2:	2300      	movs	r3, #0
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3714      	adds	r7, #20
 80155d8:	46bd      	mov	sp, r7
 80155da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155de:	4770      	bx	lr

080155e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b082      	sub	sp, #8
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80155e8:	4915      	ldr	r1, [pc, #84]	@ (8015640 <etharp_free_entry+0x60>)
 80155ea:	687a      	ldr	r2, [r7, #4]
 80155ec:	4613      	mov	r3, r2
 80155ee:	005b      	lsls	r3, r3, #1
 80155f0:	4413      	add	r3, r2
 80155f2:	00db      	lsls	r3, r3, #3
 80155f4:	440b      	add	r3, r1
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d013      	beq.n	8015624 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80155fc:	4910      	ldr	r1, [pc, #64]	@ (8015640 <etharp_free_entry+0x60>)
 80155fe:	687a      	ldr	r2, [r7, #4]
 8015600:	4613      	mov	r3, r2
 8015602:	005b      	lsls	r3, r3, #1
 8015604:	4413      	add	r3, r2
 8015606:	00db      	lsls	r3, r3, #3
 8015608:	440b      	add	r3, r1
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4618      	mov	r0, r3
 801560e:	f7f7 fbad 	bl	800cd6c <pbuf_free>
    arp_table[i].q = NULL;
 8015612:	490b      	ldr	r1, [pc, #44]	@ (8015640 <etharp_free_entry+0x60>)
 8015614:	687a      	ldr	r2, [r7, #4]
 8015616:	4613      	mov	r3, r2
 8015618:	005b      	lsls	r3, r3, #1
 801561a:	4413      	add	r3, r2
 801561c:	00db      	lsls	r3, r3, #3
 801561e:	440b      	add	r3, r1
 8015620:	2200      	movs	r2, #0
 8015622:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015624:	4906      	ldr	r1, [pc, #24]	@ (8015640 <etharp_free_entry+0x60>)
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	4613      	mov	r3, r2
 801562a:	005b      	lsls	r3, r3, #1
 801562c:	4413      	add	r3, r2
 801562e:	00db      	lsls	r3, r3, #3
 8015630:	440b      	add	r3, r1
 8015632:	3314      	adds	r3, #20
 8015634:	2200      	movs	r2, #0
 8015636:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015638:	bf00      	nop
 801563a:	3708      	adds	r7, #8
 801563c:	46bd      	mov	sp, r7
 801563e:	bd80      	pop	{r7, pc}
 8015640:	20015138 	.word	0x20015138

08015644 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801564a:	2300      	movs	r3, #0
 801564c:	607b      	str	r3, [r7, #4]
 801564e:	e096      	b.n	801577e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015650:	494f      	ldr	r1, [pc, #316]	@ (8015790 <etharp_tmr+0x14c>)
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	4613      	mov	r3, r2
 8015656:	005b      	lsls	r3, r3, #1
 8015658:	4413      	add	r3, r2
 801565a:	00db      	lsls	r3, r3, #3
 801565c:	440b      	add	r3, r1
 801565e:	3314      	adds	r3, #20
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015664:	78fb      	ldrb	r3, [r7, #3]
 8015666:	2b00      	cmp	r3, #0
 8015668:	f000 8086 	beq.w	8015778 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801566c:	4948      	ldr	r1, [pc, #288]	@ (8015790 <etharp_tmr+0x14c>)
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	4613      	mov	r3, r2
 8015672:	005b      	lsls	r3, r3, #1
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	440b      	add	r3, r1
 801567a:	3312      	adds	r3, #18
 801567c:	881b      	ldrh	r3, [r3, #0]
 801567e:	3301      	adds	r3, #1
 8015680:	b298      	uxth	r0, r3
 8015682:	4943      	ldr	r1, [pc, #268]	@ (8015790 <etharp_tmr+0x14c>)
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	4613      	mov	r3, r2
 8015688:	005b      	lsls	r3, r3, #1
 801568a:	4413      	add	r3, r2
 801568c:	00db      	lsls	r3, r3, #3
 801568e:	440b      	add	r3, r1
 8015690:	3312      	adds	r3, #18
 8015692:	4602      	mov	r2, r0
 8015694:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015696:	493e      	ldr	r1, [pc, #248]	@ (8015790 <etharp_tmr+0x14c>)
 8015698:	687a      	ldr	r2, [r7, #4]
 801569a:	4613      	mov	r3, r2
 801569c:	005b      	lsls	r3, r3, #1
 801569e:	4413      	add	r3, r2
 80156a0:	00db      	lsls	r3, r3, #3
 80156a2:	440b      	add	r3, r1
 80156a4:	3312      	adds	r3, #18
 80156a6:	881b      	ldrh	r3, [r3, #0]
 80156a8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80156ac:	d215      	bcs.n	80156da <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80156ae:	4938      	ldr	r1, [pc, #224]	@ (8015790 <etharp_tmr+0x14c>)
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	4613      	mov	r3, r2
 80156b4:	005b      	lsls	r3, r3, #1
 80156b6:	4413      	add	r3, r2
 80156b8:	00db      	lsls	r3, r3, #3
 80156ba:	440b      	add	r3, r1
 80156bc:	3314      	adds	r3, #20
 80156be:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80156c0:	2b01      	cmp	r3, #1
 80156c2:	d10e      	bne.n	80156e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80156c4:	4932      	ldr	r1, [pc, #200]	@ (8015790 <etharp_tmr+0x14c>)
 80156c6:	687a      	ldr	r2, [r7, #4]
 80156c8:	4613      	mov	r3, r2
 80156ca:	005b      	lsls	r3, r3, #1
 80156cc:	4413      	add	r3, r2
 80156ce:	00db      	lsls	r3, r3, #3
 80156d0:	440b      	add	r3, r1
 80156d2:	3312      	adds	r3, #18
 80156d4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80156d6:	2b04      	cmp	r3, #4
 80156d8:	d903      	bls.n	80156e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80156da:	6878      	ldr	r0, [r7, #4]
 80156dc:	f7ff ff80 	bl	80155e0 <etharp_free_entry>
 80156e0:	e04a      	b.n	8015778 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80156e2:	492b      	ldr	r1, [pc, #172]	@ (8015790 <etharp_tmr+0x14c>)
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	4613      	mov	r3, r2
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	4413      	add	r3, r2
 80156ec:	00db      	lsls	r3, r3, #3
 80156ee:	440b      	add	r3, r1
 80156f0:	3314      	adds	r3, #20
 80156f2:	781b      	ldrb	r3, [r3, #0]
 80156f4:	2b03      	cmp	r3, #3
 80156f6:	d10a      	bne.n	801570e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80156f8:	4925      	ldr	r1, [pc, #148]	@ (8015790 <etharp_tmr+0x14c>)
 80156fa:	687a      	ldr	r2, [r7, #4]
 80156fc:	4613      	mov	r3, r2
 80156fe:	005b      	lsls	r3, r3, #1
 8015700:	4413      	add	r3, r2
 8015702:	00db      	lsls	r3, r3, #3
 8015704:	440b      	add	r3, r1
 8015706:	3314      	adds	r3, #20
 8015708:	2204      	movs	r2, #4
 801570a:	701a      	strb	r2, [r3, #0]
 801570c:	e034      	b.n	8015778 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801570e:	4920      	ldr	r1, [pc, #128]	@ (8015790 <etharp_tmr+0x14c>)
 8015710:	687a      	ldr	r2, [r7, #4]
 8015712:	4613      	mov	r3, r2
 8015714:	005b      	lsls	r3, r3, #1
 8015716:	4413      	add	r3, r2
 8015718:	00db      	lsls	r3, r3, #3
 801571a:	440b      	add	r3, r1
 801571c:	3314      	adds	r3, #20
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	2b04      	cmp	r3, #4
 8015722:	d10a      	bne.n	801573a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015724:	491a      	ldr	r1, [pc, #104]	@ (8015790 <etharp_tmr+0x14c>)
 8015726:	687a      	ldr	r2, [r7, #4]
 8015728:	4613      	mov	r3, r2
 801572a:	005b      	lsls	r3, r3, #1
 801572c:	4413      	add	r3, r2
 801572e:	00db      	lsls	r3, r3, #3
 8015730:	440b      	add	r3, r1
 8015732:	3314      	adds	r3, #20
 8015734:	2202      	movs	r2, #2
 8015736:	701a      	strb	r2, [r3, #0]
 8015738:	e01e      	b.n	8015778 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801573a:	4915      	ldr	r1, [pc, #84]	@ (8015790 <etharp_tmr+0x14c>)
 801573c:	687a      	ldr	r2, [r7, #4]
 801573e:	4613      	mov	r3, r2
 8015740:	005b      	lsls	r3, r3, #1
 8015742:	4413      	add	r3, r2
 8015744:	00db      	lsls	r3, r3, #3
 8015746:	440b      	add	r3, r1
 8015748:	3314      	adds	r3, #20
 801574a:	781b      	ldrb	r3, [r3, #0]
 801574c:	2b01      	cmp	r3, #1
 801574e:	d113      	bne.n	8015778 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015750:	490f      	ldr	r1, [pc, #60]	@ (8015790 <etharp_tmr+0x14c>)
 8015752:	687a      	ldr	r2, [r7, #4]
 8015754:	4613      	mov	r3, r2
 8015756:	005b      	lsls	r3, r3, #1
 8015758:	4413      	add	r3, r2
 801575a:	00db      	lsls	r3, r3, #3
 801575c:	440b      	add	r3, r1
 801575e:	3308      	adds	r3, #8
 8015760:	6818      	ldr	r0, [r3, #0]
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	4613      	mov	r3, r2
 8015766:	005b      	lsls	r3, r3, #1
 8015768:	4413      	add	r3, r2
 801576a:	00db      	lsls	r3, r3, #3
 801576c:	4a08      	ldr	r2, [pc, #32]	@ (8015790 <etharp_tmr+0x14c>)
 801576e:	4413      	add	r3, r2
 8015770:	3304      	adds	r3, #4
 8015772:	4619      	mov	r1, r3
 8015774:	f000 fe72 	bl	801645c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	3301      	adds	r3, #1
 801577c:	607b      	str	r3, [r7, #4]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	2b09      	cmp	r3, #9
 8015782:	f77f af65 	ble.w	8015650 <etharp_tmr+0xc>
      }
    }
  }
}
 8015786:	bf00      	nop
 8015788:	bf00      	nop
 801578a:	3708      	adds	r7, #8
 801578c:	46bd      	mov	sp, r7
 801578e:	bd80      	pop	{r7, pc}
 8015790:	20015138 	.word	0x20015138

08015794 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015794:	b580      	push	{r7, lr}
 8015796:	b08a      	sub	sp, #40	@ 0x28
 8015798:	af00      	add	r7, sp, #0
 801579a:	60f8      	str	r0, [r7, #12]
 801579c:	460b      	mov	r3, r1
 801579e:	607a      	str	r2, [r7, #4]
 80157a0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80157a2:	230a      	movs	r3, #10
 80157a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80157a6:	230a      	movs	r3, #10
 80157a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80157aa:	230a      	movs	r3, #10
 80157ac:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 80157ae:	2300      	movs	r3, #0
 80157b0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80157b2:	230a      	movs	r3, #10
 80157b4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80157b6:	2300      	movs	r3, #0
 80157b8:	83bb      	strh	r3, [r7, #28]
 80157ba:	2300      	movs	r3, #0
 80157bc:	837b      	strh	r3, [r7, #26]
 80157be:	2300      	movs	r3, #0
 80157c0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80157c2:	2300      	movs	r3, #0
 80157c4:	843b      	strh	r3, [r7, #32]
 80157c6:	e0ae      	b.n	8015926 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80157c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80157cc:	49a6      	ldr	r1, [pc, #664]	@ (8015a68 <etharp_find_entry+0x2d4>)
 80157ce:	4613      	mov	r3, r2
 80157d0:	005b      	lsls	r3, r3, #1
 80157d2:	4413      	add	r3, r2
 80157d4:	00db      	lsls	r3, r3, #3
 80157d6:	440b      	add	r3, r1
 80157d8:	3314      	adds	r3, #20
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80157de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80157e2:	2b0a      	cmp	r3, #10
 80157e4:	d105      	bne.n	80157f2 <etharp_find_entry+0x5e>
 80157e6:	7dfb      	ldrb	r3, [r7, #23]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d102      	bne.n	80157f2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80157ec:	8c3b      	ldrh	r3, [r7, #32]
 80157ee:	847b      	strh	r3, [r7, #34]	@ 0x22
 80157f0:	e095      	b.n	801591e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80157f2:	7dfb      	ldrb	r3, [r7, #23]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f000 8092 	beq.w	801591e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80157fa:	7dfb      	ldrb	r3, [r7, #23]
 80157fc:	2b01      	cmp	r3, #1
 80157fe:	d009      	beq.n	8015814 <etharp_find_entry+0x80>
 8015800:	7dfb      	ldrb	r3, [r7, #23]
 8015802:	2b01      	cmp	r3, #1
 8015804:	d806      	bhi.n	8015814 <etharp_find_entry+0x80>
 8015806:	4b99      	ldr	r3, [pc, #612]	@ (8015a6c <etharp_find_entry+0x2d8>)
 8015808:	f240 1223 	movw	r2, #291	@ 0x123
 801580c:	4998      	ldr	r1, [pc, #608]	@ (8015a70 <etharp_find_entry+0x2dc>)
 801580e:	4899      	ldr	r0, [pc, #612]	@ (8015a74 <etharp_find_entry+0x2e0>)
 8015810:	f002 fd76 	bl	8018300 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	2b00      	cmp	r3, #0
 8015818:	d020      	beq.n	801585c <etharp_find_entry+0xc8>
 801581a:	68fb      	ldr	r3, [r7, #12]
 801581c:	6819      	ldr	r1, [r3, #0]
 801581e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015822:	4891      	ldr	r0, [pc, #580]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015824:	4613      	mov	r3, r2
 8015826:	005b      	lsls	r3, r3, #1
 8015828:	4413      	add	r3, r2
 801582a:	00db      	lsls	r3, r3, #3
 801582c:	4403      	add	r3, r0
 801582e:	3304      	adds	r3, #4
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	4299      	cmp	r1, r3
 8015834:	d112      	bne.n	801585c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d00c      	beq.n	8015856 <etharp_find_entry+0xc2>
 801583c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015840:	4989      	ldr	r1, [pc, #548]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015842:	4613      	mov	r3, r2
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	4413      	add	r3, r2
 8015848:	00db      	lsls	r3, r3, #3
 801584a:	440b      	add	r3, r1
 801584c:	3308      	adds	r3, #8
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	687a      	ldr	r2, [r7, #4]
 8015852:	429a      	cmp	r2, r3
 8015854:	d102      	bne.n	801585c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015856:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801585a:	e100      	b.n	8015a5e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801585c:	7dfb      	ldrb	r3, [r7, #23]
 801585e:	2b01      	cmp	r3, #1
 8015860:	d140      	bne.n	80158e4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015866:	4980      	ldr	r1, [pc, #512]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015868:	4613      	mov	r3, r2
 801586a:	005b      	lsls	r3, r3, #1
 801586c:	4413      	add	r3, r2
 801586e:	00db      	lsls	r3, r3, #3
 8015870:	440b      	add	r3, r1
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d01a      	beq.n	80158ae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801587c:	497a      	ldr	r1, [pc, #488]	@ (8015a68 <etharp_find_entry+0x2d4>)
 801587e:	4613      	mov	r3, r2
 8015880:	005b      	lsls	r3, r3, #1
 8015882:	4413      	add	r3, r2
 8015884:	00db      	lsls	r3, r3, #3
 8015886:	440b      	add	r3, r1
 8015888:	3312      	adds	r3, #18
 801588a:	881b      	ldrh	r3, [r3, #0]
 801588c:	8bba      	ldrh	r2, [r7, #28]
 801588e:	429a      	cmp	r2, r3
 8015890:	d845      	bhi.n	801591e <etharp_find_entry+0x18a>
            old_queue = i;
 8015892:	8c3b      	ldrh	r3, [r7, #32]
 8015894:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015896:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801589a:	4973      	ldr	r1, [pc, #460]	@ (8015a68 <etharp_find_entry+0x2d4>)
 801589c:	4613      	mov	r3, r2
 801589e:	005b      	lsls	r3, r3, #1
 80158a0:	4413      	add	r3, r2
 80158a2:	00db      	lsls	r3, r3, #3
 80158a4:	440b      	add	r3, r1
 80158a6:	3312      	adds	r3, #18
 80158a8:	881b      	ldrh	r3, [r3, #0]
 80158aa:	83bb      	strh	r3, [r7, #28]
 80158ac:	e037      	b.n	801591e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80158ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158b2:	496d      	ldr	r1, [pc, #436]	@ (8015a68 <etharp_find_entry+0x2d4>)
 80158b4:	4613      	mov	r3, r2
 80158b6:	005b      	lsls	r3, r3, #1
 80158b8:	4413      	add	r3, r2
 80158ba:	00db      	lsls	r3, r3, #3
 80158bc:	440b      	add	r3, r1
 80158be:	3312      	adds	r3, #18
 80158c0:	881b      	ldrh	r3, [r3, #0]
 80158c2:	8b7a      	ldrh	r2, [r7, #26]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	d82a      	bhi.n	801591e <etharp_find_entry+0x18a>
            old_pending = i;
 80158c8:	8c3b      	ldrh	r3, [r7, #32]
 80158ca:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80158cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158d0:	4965      	ldr	r1, [pc, #404]	@ (8015a68 <etharp_find_entry+0x2d4>)
 80158d2:	4613      	mov	r3, r2
 80158d4:	005b      	lsls	r3, r3, #1
 80158d6:	4413      	add	r3, r2
 80158d8:	00db      	lsls	r3, r3, #3
 80158da:	440b      	add	r3, r1
 80158dc:	3312      	adds	r3, #18
 80158de:	881b      	ldrh	r3, [r3, #0]
 80158e0:	837b      	strh	r3, [r7, #26]
 80158e2:	e01c      	b.n	801591e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80158e4:	7dfb      	ldrb	r3, [r7, #23]
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d919      	bls.n	801591e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80158ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80158ee:	495e      	ldr	r1, [pc, #376]	@ (8015a68 <etharp_find_entry+0x2d4>)
 80158f0:	4613      	mov	r3, r2
 80158f2:	005b      	lsls	r3, r3, #1
 80158f4:	4413      	add	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	440b      	add	r3, r1
 80158fa:	3312      	adds	r3, #18
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	8b3a      	ldrh	r2, [r7, #24]
 8015900:	429a      	cmp	r2, r3
 8015902:	d80c      	bhi.n	801591e <etharp_find_entry+0x18a>
            old_stable = i;
 8015904:	8c3b      	ldrh	r3, [r7, #32]
 8015906:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8015908:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801590c:	4956      	ldr	r1, [pc, #344]	@ (8015a68 <etharp_find_entry+0x2d4>)
 801590e:	4613      	mov	r3, r2
 8015910:	005b      	lsls	r3, r3, #1
 8015912:	4413      	add	r3, r2
 8015914:	00db      	lsls	r3, r3, #3
 8015916:	440b      	add	r3, r1
 8015918:	3312      	adds	r3, #18
 801591a:	881b      	ldrh	r3, [r3, #0]
 801591c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801591e:	8c3b      	ldrh	r3, [r7, #32]
 8015920:	3301      	adds	r3, #1
 8015922:	b29b      	uxth	r3, r3
 8015924:	843b      	strh	r3, [r7, #32]
 8015926:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801592a:	2b09      	cmp	r3, #9
 801592c:	f77f af4c 	ble.w	80157c8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015930:	7afb      	ldrb	r3, [r7, #11]
 8015932:	f003 0302 	and.w	r3, r3, #2
 8015936:	2b00      	cmp	r3, #0
 8015938:	d108      	bne.n	801594c <etharp_find_entry+0x1b8>
 801593a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801593e:	2b0a      	cmp	r3, #10
 8015940:	d107      	bne.n	8015952 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015942:	7afb      	ldrb	r3, [r7, #11]
 8015944:	f003 0301 	and.w	r3, r3, #1
 8015948:	2b00      	cmp	r3, #0
 801594a:	d102      	bne.n	8015952 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801594c:	f04f 33ff 	mov.w	r3, #4294967295
 8015950:	e085      	b.n	8015a5e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015952:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8015956:	2b09      	cmp	r3, #9
 8015958:	dc02      	bgt.n	8015960 <etharp_find_entry+0x1cc>
    i = empty;
 801595a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801595c:	843b      	strh	r3, [r7, #32]
 801595e:	e039      	b.n	80159d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015960:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8015964:	2b09      	cmp	r3, #9
 8015966:	dc14      	bgt.n	8015992 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801596a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801596c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015970:	493d      	ldr	r1, [pc, #244]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015972:	4613      	mov	r3, r2
 8015974:	005b      	lsls	r3, r3, #1
 8015976:	4413      	add	r3, r2
 8015978:	00db      	lsls	r3, r3, #3
 801597a:	440b      	add	r3, r1
 801597c:	681b      	ldr	r3, [r3, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d018      	beq.n	80159b4 <etharp_find_entry+0x220>
 8015982:	4b3a      	ldr	r3, [pc, #232]	@ (8015a6c <etharp_find_entry+0x2d8>)
 8015984:	f240 126d 	movw	r2, #365	@ 0x16d
 8015988:	493b      	ldr	r1, [pc, #236]	@ (8015a78 <etharp_find_entry+0x2e4>)
 801598a:	483a      	ldr	r0, [pc, #232]	@ (8015a74 <etharp_find_entry+0x2e0>)
 801598c:	f002 fcb8 	bl	8018300 <iprintf>
 8015990:	e010      	b.n	80159b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015992:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8015996:	2b09      	cmp	r3, #9
 8015998:	dc02      	bgt.n	80159a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801599a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801599c:	843b      	strh	r3, [r7, #32]
 801599e:	e009      	b.n	80159b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80159a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80159a4:	2b09      	cmp	r3, #9
 80159a6:	dc02      	bgt.n	80159ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80159a8:	8bfb      	ldrh	r3, [r7, #30]
 80159aa:	843b      	strh	r3, [r7, #32]
 80159ac:	e002      	b.n	80159b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80159ae:	f04f 33ff 	mov.w	r3, #4294967295
 80159b2:	e054      	b.n	8015a5e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80159b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159b8:	2b09      	cmp	r3, #9
 80159ba:	dd06      	ble.n	80159ca <etharp_find_entry+0x236>
 80159bc:	4b2b      	ldr	r3, [pc, #172]	@ (8015a6c <etharp_find_entry+0x2d8>)
 80159be:	f240 127f 	movw	r2, #383	@ 0x17f
 80159c2:	492e      	ldr	r1, [pc, #184]	@ (8015a7c <etharp_find_entry+0x2e8>)
 80159c4:	482b      	ldr	r0, [pc, #172]	@ (8015a74 <etharp_find_entry+0x2e0>)
 80159c6:	f002 fc9b 	bl	8018300 <iprintf>
    etharp_free_entry(i);
 80159ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7ff fe06 	bl	80155e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80159d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80159d8:	2b09      	cmp	r3, #9
 80159da:	dd06      	ble.n	80159ea <etharp_find_entry+0x256>
 80159dc:	4b23      	ldr	r3, [pc, #140]	@ (8015a6c <etharp_find_entry+0x2d8>)
 80159de:	f240 1283 	movw	r2, #387	@ 0x183
 80159e2:	4926      	ldr	r1, [pc, #152]	@ (8015a7c <etharp_find_entry+0x2e8>)
 80159e4:	4823      	ldr	r0, [pc, #140]	@ (8015a74 <etharp_find_entry+0x2e0>)
 80159e6:	f002 fc8b 	bl	8018300 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80159ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80159ee:	491e      	ldr	r1, [pc, #120]	@ (8015a68 <etharp_find_entry+0x2d4>)
 80159f0:	4613      	mov	r3, r2
 80159f2:	005b      	lsls	r3, r3, #1
 80159f4:	4413      	add	r3, r2
 80159f6:	00db      	lsls	r3, r3, #3
 80159f8:	440b      	add	r3, r1
 80159fa:	3314      	adds	r3, #20
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d006      	beq.n	8015a10 <etharp_find_entry+0x27c>
 8015a02:	4b1a      	ldr	r3, [pc, #104]	@ (8015a6c <etharp_find_entry+0x2d8>)
 8015a04:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8015a08:	491d      	ldr	r1, [pc, #116]	@ (8015a80 <etharp_find_entry+0x2ec>)
 8015a0a:	481a      	ldr	r0, [pc, #104]	@ (8015a74 <etharp_find_entry+0x2e0>)
 8015a0c:	f002 fc78 	bl	8018300 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d00b      	beq.n	8015a2e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	6819      	ldr	r1, [r3, #0]
 8015a1e:	4812      	ldr	r0, [pc, #72]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015a20:	4613      	mov	r3, r2
 8015a22:	005b      	lsls	r3, r3, #1
 8015a24:	4413      	add	r3, r2
 8015a26:	00db      	lsls	r3, r3, #3
 8015a28:	4403      	add	r3, r0
 8015a2a:	3304      	adds	r3, #4
 8015a2c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015a2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a32:	490d      	ldr	r1, [pc, #52]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015a34:	4613      	mov	r3, r2
 8015a36:	005b      	lsls	r3, r3, #1
 8015a38:	4413      	add	r3, r2
 8015a3a:	00db      	lsls	r3, r3, #3
 8015a3c:	440b      	add	r3, r1
 8015a3e:	3312      	adds	r3, #18
 8015a40:	2200      	movs	r2, #0
 8015a42:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015a44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015a48:	4907      	ldr	r1, [pc, #28]	@ (8015a68 <etharp_find_entry+0x2d4>)
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	005b      	lsls	r3, r3, #1
 8015a4e:	4413      	add	r3, r2
 8015a50:	00db      	lsls	r3, r3, #3
 8015a52:	440b      	add	r3, r1
 8015a54:	3308      	adds	r3, #8
 8015a56:	687a      	ldr	r2, [r7, #4]
 8015a58:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015a5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015a5e:	4618      	mov	r0, r3
 8015a60:	3728      	adds	r7, #40	@ 0x28
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	20015138 	.word	0x20015138
 8015a6c:	0801c368 	.word	0x0801c368
 8015a70:	0801c3a0 	.word	0x0801c3a0
 8015a74:	0801c3e0 	.word	0x0801c3e0
 8015a78:	0801c408 	.word	0x0801c408
 8015a7c:	0801c420 	.word	0x0801c420
 8015a80:	0801c434 	.word	0x0801c434

08015a84 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b088      	sub	sp, #32
 8015a88:	af02      	add	r7, sp, #8
 8015a8a:	60f8      	str	r0, [r7, #12]
 8015a8c:	60b9      	str	r1, [r7, #8]
 8015a8e:	607a      	str	r2, [r7, #4]
 8015a90:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8015a98:	2b06      	cmp	r3, #6
 8015a9a:	d006      	beq.n	8015aaa <etharp_update_arp_entry+0x26>
 8015a9c:	4b48      	ldr	r3, [pc, #288]	@ (8015bc0 <etharp_update_arp_entry+0x13c>)
 8015a9e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8015aa2:	4948      	ldr	r1, [pc, #288]	@ (8015bc4 <etharp_update_arp_entry+0x140>)
 8015aa4:	4848      	ldr	r0, [pc, #288]	@ (8015bc8 <etharp_update_arp_entry+0x144>)
 8015aa6:	f002 fc2b 	bl	8018300 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d012      	beq.n	8015ad6 <etharp_update_arp_entry+0x52>
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d00e      	beq.n	8015ad6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68f9      	ldr	r1, [r7, #12]
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f001 f9c0 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 8015ac4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d105      	bne.n	8015ad6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ad2:	2be0      	cmp	r3, #224	@ 0xe0
 8015ad4:	d102      	bne.n	8015adc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015ad6:	f06f 030f 	mvn.w	r3, #15
 8015ada:	e06c      	b.n	8015bb6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015adc:	78fb      	ldrb	r3, [r7, #3]
 8015ade:	68fa      	ldr	r2, [r7, #12]
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	68b8      	ldr	r0, [r7, #8]
 8015ae4:	f7ff fe56 	bl	8015794 <etharp_find_entry>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015aec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	da02      	bge.n	8015afa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015af4:	8afb      	ldrh	r3, [r7, #22]
 8015af6:	b25b      	sxtb	r3, r3
 8015af8:	e05d      	b.n	8015bb6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015afe:	4933      	ldr	r1, [pc, #204]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b00:	4613      	mov	r3, r2
 8015b02:	005b      	lsls	r3, r3, #1
 8015b04:	4413      	add	r3, r2
 8015b06:	00db      	lsls	r3, r3, #3
 8015b08:	440b      	add	r3, r1
 8015b0a:	3314      	adds	r3, #20
 8015b0c:	2202      	movs	r2, #2
 8015b0e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015b10:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b14:	492d      	ldr	r1, [pc, #180]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b16:	4613      	mov	r3, r2
 8015b18:	005b      	lsls	r3, r3, #1
 8015b1a:	4413      	add	r3, r2
 8015b1c:	00db      	lsls	r3, r3, #3
 8015b1e:	440b      	add	r3, r1
 8015b20:	3308      	adds	r3, #8
 8015b22:	68fa      	ldr	r2, [r7, #12]
 8015b24:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015b26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	005b      	lsls	r3, r3, #1
 8015b2e:	4413      	add	r3, r2
 8015b30:	00db      	lsls	r3, r3, #3
 8015b32:	3308      	adds	r3, #8
 8015b34:	4a25      	ldr	r2, [pc, #148]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b36:	4413      	add	r3, r2
 8015b38:	3304      	adds	r3, #4
 8015b3a:	2206      	movs	r2, #6
 8015b3c:	6879      	ldr	r1, [r7, #4]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f002 fcb9 	bl	80184b6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b48:	4920      	ldr	r1, [pc, #128]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	005b      	lsls	r3, r3, #1
 8015b4e:	4413      	add	r3, r2
 8015b50:	00db      	lsls	r3, r3, #3
 8015b52:	440b      	add	r3, r1
 8015b54:	3312      	adds	r3, #18
 8015b56:	2200      	movs	r2, #0
 8015b58:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015b5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b5e:	491b      	ldr	r1, [pc, #108]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b60:	4613      	mov	r3, r2
 8015b62:	005b      	lsls	r3, r3, #1
 8015b64:	4413      	add	r3, r2
 8015b66:	00db      	lsls	r3, r3, #3
 8015b68:	440b      	add	r3, r1
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d021      	beq.n	8015bb4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015b70:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b74:	4915      	ldr	r1, [pc, #84]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b76:	4613      	mov	r3, r2
 8015b78:	005b      	lsls	r3, r3, #1
 8015b7a:	4413      	add	r3, r2
 8015b7c:	00db      	lsls	r3, r3, #3
 8015b7e:	440b      	add	r3, r1
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015b84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015b88:	4910      	ldr	r1, [pc, #64]	@ (8015bcc <etharp_update_arp_entry+0x148>)
 8015b8a:	4613      	mov	r3, r2
 8015b8c:	005b      	lsls	r3, r3, #1
 8015b8e:	4413      	add	r3, r2
 8015b90:	00db      	lsls	r3, r3, #3
 8015b92:	440b      	add	r3, r1
 8015b94:	2200      	movs	r2, #0
 8015b96:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8015b9e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015ba2:	9300      	str	r3, [sp, #0]
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	6939      	ldr	r1, [r7, #16]
 8015ba8:	68f8      	ldr	r0, [r7, #12]
 8015baa:	f002 f869 	bl	8017c80 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015bae:	6938      	ldr	r0, [r7, #16]
 8015bb0:	f7f7 f8dc 	bl	800cd6c <pbuf_free>
  }
  return ERR_OK;
 8015bb4:	2300      	movs	r3, #0
}
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3718      	adds	r7, #24
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	0801c368 	.word	0x0801c368
 8015bc4:	0801c460 	.word	0x0801c460
 8015bc8:	0801c3e0 	.word	0x0801c3e0
 8015bcc:	20015138 	.word	0x20015138

08015bd0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b084      	sub	sp, #16
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bd8:	2300      	movs	r3, #0
 8015bda:	60fb      	str	r3, [r7, #12]
 8015bdc:	e01e      	b.n	8015c1c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015bde:	4913      	ldr	r1, [pc, #76]	@ (8015c2c <etharp_cleanup_netif+0x5c>)
 8015be0:	68fa      	ldr	r2, [r7, #12]
 8015be2:	4613      	mov	r3, r2
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	440b      	add	r3, r1
 8015bec:	3314      	adds	r3, #20
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8015bf2:	7afb      	ldrb	r3, [r7, #11]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d00e      	beq.n	8015c16 <etharp_cleanup_netif+0x46>
 8015bf8:	490c      	ldr	r1, [pc, #48]	@ (8015c2c <etharp_cleanup_netif+0x5c>)
 8015bfa:	68fa      	ldr	r2, [r7, #12]
 8015bfc:	4613      	mov	r3, r2
 8015bfe:	005b      	lsls	r3, r3, #1
 8015c00:	4413      	add	r3, r2
 8015c02:	00db      	lsls	r3, r3, #3
 8015c04:	440b      	add	r3, r1
 8015c06:	3308      	adds	r3, #8
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	687a      	ldr	r2, [r7, #4]
 8015c0c:	429a      	cmp	r2, r3
 8015c0e:	d102      	bne.n	8015c16 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f7ff fce5 	bl	80155e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	3301      	adds	r3, #1
 8015c1a:	60fb      	str	r3, [r7, #12]
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	2b09      	cmp	r3, #9
 8015c20:	dddd      	ble.n	8015bde <etharp_cleanup_netif+0xe>
    }
  }
}
 8015c22:	bf00      	nop
 8015c24:	bf00      	nop
 8015c26:	3710      	adds	r7, #16
 8015c28:	46bd      	mov	sp, r7
 8015c2a:	bd80      	pop	{r7, pc}
 8015c2c:	20015138 	.word	0x20015138

08015c30 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015c30:	b5b0      	push	{r4, r5, r7, lr}
 8015c32:	b08a      	sub	sp, #40	@ 0x28
 8015c34:	af04      	add	r7, sp, #16
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015c3a:	683b      	ldr	r3, [r7, #0]
 8015c3c:	2b00      	cmp	r3, #0
 8015c3e:	d107      	bne.n	8015c50 <etharp_input+0x20>
 8015c40:	4b3f      	ldr	r3, [pc, #252]	@ (8015d40 <etharp_input+0x110>)
 8015c42:	f240 228a 	movw	r2, #650	@ 0x28a
 8015c46:	493f      	ldr	r1, [pc, #252]	@ (8015d44 <etharp_input+0x114>)
 8015c48:	483f      	ldr	r0, [pc, #252]	@ (8015d48 <etharp_input+0x118>)
 8015c4a:	f002 fb59 	bl	8018300 <iprintf>
 8015c4e:	e074      	b.n	8015d3a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	685b      	ldr	r3, [r3, #4]
 8015c54:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c56:	693b      	ldr	r3, [r7, #16]
 8015c58:	881b      	ldrh	r3, [r3, #0]
 8015c5a:	b29b      	uxth	r3, r3
 8015c5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015c60:	d10c      	bne.n	8015c7c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c62:	693b      	ldr	r3, [r7, #16]
 8015c64:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8015c66:	2b06      	cmp	r3, #6
 8015c68:	d108      	bne.n	8015c7c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c6a:	693b      	ldr	r3, [r7, #16]
 8015c6c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015c6e:	2b04      	cmp	r3, #4
 8015c70:	d104      	bne.n	8015c7c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015c72:	693b      	ldr	r3, [r7, #16]
 8015c74:	885b      	ldrh	r3, [r3, #2]
 8015c76:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015c78:	2b08      	cmp	r3, #8
 8015c7a:	d003      	beq.n	8015c84 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7f7 f875 	bl	800cd6c <pbuf_free>
    return;
 8015c82:	e05a      	b.n	8015d3a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	330e      	adds	r3, #14
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	3318      	adds	r3, #24
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c94:	683b      	ldr	r3, [r7, #0]
 8015c96:	3304      	adds	r3, #4
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d102      	bne.n	8015ca4 <etharp_input+0x74>
    for_us = 0;
 8015c9e:	2300      	movs	r3, #0
 8015ca0:	75fb      	strb	r3, [r7, #23]
 8015ca2:	e009      	b.n	8015cb8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	3304      	adds	r3, #4
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	bf0c      	ite	eq
 8015cb0:	2301      	moveq	r3, #1
 8015cb2:	2300      	movne	r3, #0
 8015cb4:	b2db      	uxtb	r3, r3
 8015cb6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	f103 0208 	add.w	r2, r3, #8
 8015cbe:	7dfb      	ldrb	r3, [r7, #23]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d001      	beq.n	8015cc8 <etharp_input+0x98>
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	e000      	b.n	8015cca <etharp_input+0x9a>
 8015cc8:	2302      	movs	r3, #2
 8015cca:	f107 010c 	add.w	r1, r7, #12
 8015cce:	6838      	ldr	r0, [r7, #0]
 8015cd0:	f7ff fed8 	bl	8015a84 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015cd4:	693b      	ldr	r3, [r7, #16]
 8015cd6:	88db      	ldrh	r3, [r3, #6]
 8015cd8:	b29b      	uxth	r3, r3
 8015cda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8015cde:	d003      	beq.n	8015ce8 <etharp_input+0xb8>
 8015ce0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ce4:	d01e      	beq.n	8015d24 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8015ce6:	e025      	b.n	8015d34 <etharp_input+0x104>
      if (for_us) {
 8015ce8:	7dfb      	ldrb	r3, [r7, #23]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d021      	beq.n	8015d32 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015cee:	683b      	ldr	r3, [r7, #0]
 8015cf0:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8015cf4:	693b      	ldr	r3, [r7, #16]
 8015cf6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8015d04:	693a      	ldr	r2, [r7, #16]
 8015d06:	3208      	adds	r2, #8
        etharp_raw(netif,
 8015d08:	2102      	movs	r1, #2
 8015d0a:	9103      	str	r1, [sp, #12]
 8015d0c:	f107 010c 	add.w	r1, r7, #12
 8015d10:	9102      	str	r1, [sp, #8]
 8015d12:	9201      	str	r2, [sp, #4]
 8015d14:	9300      	str	r3, [sp, #0]
 8015d16:	462b      	mov	r3, r5
 8015d18:	4622      	mov	r2, r4
 8015d1a:	4601      	mov	r1, r0
 8015d1c:	6838      	ldr	r0, [r7, #0]
 8015d1e:	f000 faef 	bl	8016300 <etharp_raw>
      break;
 8015d22:	e006      	b.n	8015d32 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8015d24:	f107 030c 	add.w	r3, r7, #12
 8015d28:	4619      	mov	r1, r3
 8015d2a:	6838      	ldr	r0, [r7, #0]
 8015d2c:	f7fe fa02 	bl	8014134 <dhcp_arp_reply>
      break;
 8015d30:	e000      	b.n	8015d34 <etharp_input+0x104>
      break;
 8015d32:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015d34:	6878      	ldr	r0, [r7, #4]
 8015d36:	f7f7 f819 	bl	800cd6c <pbuf_free>
}
 8015d3a:	3718      	adds	r7, #24
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8015d40:	0801c368 	.word	0x0801c368
 8015d44:	0801c4b8 	.word	0x0801c4b8
 8015d48:	0801c3e0 	.word	0x0801c3e0

08015d4c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015d4c:	b580      	push	{r7, lr}
 8015d4e:	b086      	sub	sp, #24
 8015d50:	af02      	add	r7, sp, #8
 8015d52:	60f8      	str	r0, [r7, #12]
 8015d54:	60b9      	str	r1, [r7, #8]
 8015d56:	4613      	mov	r3, r2
 8015d58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015d5a:	79fa      	ldrb	r2, [r7, #7]
 8015d5c:	4944      	ldr	r1, [pc, #272]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015d5e:	4613      	mov	r3, r2
 8015d60:	005b      	lsls	r3, r3, #1
 8015d62:	4413      	add	r3, r2
 8015d64:	00db      	lsls	r3, r3, #3
 8015d66:	440b      	add	r3, r1
 8015d68:	3314      	adds	r3, #20
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	2b01      	cmp	r3, #1
 8015d6e:	d806      	bhi.n	8015d7e <etharp_output_to_arp_index+0x32>
 8015d70:	4b40      	ldr	r3, [pc, #256]	@ (8015e74 <etharp_output_to_arp_index+0x128>)
 8015d72:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015d76:	4940      	ldr	r1, [pc, #256]	@ (8015e78 <etharp_output_to_arp_index+0x12c>)
 8015d78:	4840      	ldr	r0, [pc, #256]	@ (8015e7c <etharp_output_to_arp_index+0x130>)
 8015d7a:	f002 fac1 	bl	8018300 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015d7e:	79fa      	ldrb	r2, [r7, #7]
 8015d80:	493b      	ldr	r1, [pc, #236]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015d82:	4613      	mov	r3, r2
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	4413      	add	r3, r2
 8015d88:	00db      	lsls	r3, r3, #3
 8015d8a:	440b      	add	r3, r1
 8015d8c:	3314      	adds	r3, #20
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	2b02      	cmp	r3, #2
 8015d92:	d153      	bne.n	8015e3c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015d94:	79fa      	ldrb	r2, [r7, #7]
 8015d96:	4936      	ldr	r1, [pc, #216]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015d98:	4613      	mov	r3, r2
 8015d9a:	005b      	lsls	r3, r3, #1
 8015d9c:	4413      	add	r3, r2
 8015d9e:	00db      	lsls	r3, r3, #3
 8015da0:	440b      	add	r3, r1
 8015da2:	3312      	adds	r3, #18
 8015da4:	881b      	ldrh	r3, [r3, #0]
 8015da6:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8015daa:	d919      	bls.n	8015de0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015dac:	79fa      	ldrb	r2, [r7, #7]
 8015dae:	4613      	mov	r3, r2
 8015db0:	005b      	lsls	r3, r3, #1
 8015db2:	4413      	add	r3, r2
 8015db4:	00db      	lsls	r3, r3, #3
 8015db6:	4a2e      	ldr	r2, [pc, #184]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015db8:	4413      	add	r3, r2
 8015dba:	3304      	adds	r3, #4
 8015dbc:	4619      	mov	r1, r3
 8015dbe:	68f8      	ldr	r0, [r7, #12]
 8015dc0:	f000 fb4c 	bl	801645c <etharp_request>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d138      	bne.n	8015e3c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015dca:	79fa      	ldrb	r2, [r7, #7]
 8015dcc:	4928      	ldr	r1, [pc, #160]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015dce:	4613      	mov	r3, r2
 8015dd0:	005b      	lsls	r3, r3, #1
 8015dd2:	4413      	add	r3, r2
 8015dd4:	00db      	lsls	r3, r3, #3
 8015dd6:	440b      	add	r3, r1
 8015dd8:	3314      	adds	r3, #20
 8015dda:	2203      	movs	r2, #3
 8015ddc:	701a      	strb	r2, [r3, #0]
 8015dde:	e02d      	b.n	8015e3c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015de0:	79fa      	ldrb	r2, [r7, #7]
 8015de2:	4923      	ldr	r1, [pc, #140]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015de4:	4613      	mov	r3, r2
 8015de6:	005b      	lsls	r3, r3, #1
 8015de8:	4413      	add	r3, r2
 8015dea:	00db      	lsls	r3, r3, #3
 8015dec:	440b      	add	r3, r1
 8015dee:	3312      	adds	r3, #18
 8015df0:	881b      	ldrh	r3, [r3, #0]
 8015df2:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8015df6:	d321      	bcc.n	8015e3c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015df8:	79fa      	ldrb	r2, [r7, #7]
 8015dfa:	4613      	mov	r3, r2
 8015dfc:	005b      	lsls	r3, r3, #1
 8015dfe:	4413      	add	r3, r2
 8015e00:	00db      	lsls	r3, r3, #3
 8015e02:	4a1b      	ldr	r2, [pc, #108]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015e04:	4413      	add	r3, r2
 8015e06:	1d19      	adds	r1, r3, #4
 8015e08:	79fa      	ldrb	r2, [r7, #7]
 8015e0a:	4613      	mov	r3, r2
 8015e0c:	005b      	lsls	r3, r3, #1
 8015e0e:	4413      	add	r3, r2
 8015e10:	00db      	lsls	r3, r3, #3
 8015e12:	3308      	adds	r3, #8
 8015e14:	4a16      	ldr	r2, [pc, #88]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015e16:	4413      	add	r3, r2
 8015e18:	3304      	adds	r3, #4
 8015e1a:	461a      	mov	r2, r3
 8015e1c:	68f8      	ldr	r0, [r7, #12]
 8015e1e:	f000 fafb 	bl	8016418 <etharp_request_dst>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d109      	bne.n	8015e3c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015e28:	79fa      	ldrb	r2, [r7, #7]
 8015e2a:	4911      	ldr	r1, [pc, #68]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015e2c:	4613      	mov	r3, r2
 8015e2e:	005b      	lsls	r3, r3, #1
 8015e30:	4413      	add	r3, r2
 8015e32:	00db      	lsls	r3, r3, #3
 8015e34:	440b      	add	r3, r1
 8015e36:	3314      	adds	r3, #20
 8015e38:	2203      	movs	r2, #3
 8015e3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 8015e42:	79fa      	ldrb	r2, [r7, #7]
 8015e44:	4613      	mov	r3, r2
 8015e46:	005b      	lsls	r3, r3, #1
 8015e48:	4413      	add	r3, r2
 8015e4a:	00db      	lsls	r3, r3, #3
 8015e4c:	3308      	adds	r3, #8
 8015e4e:	4a08      	ldr	r2, [pc, #32]	@ (8015e70 <etharp_output_to_arp_index+0x124>)
 8015e50:	4413      	add	r3, r2
 8015e52:	3304      	adds	r3, #4
 8015e54:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015e58:	9200      	str	r2, [sp, #0]
 8015e5a:	460a      	mov	r2, r1
 8015e5c:	68b9      	ldr	r1, [r7, #8]
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f001 ff0e 	bl	8017c80 <ethernet_output>
 8015e64:	4603      	mov	r3, r0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3710      	adds	r7, #16
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}
 8015e6e:	bf00      	nop
 8015e70:	20015138 	.word	0x20015138
 8015e74:	0801c368 	.word	0x0801c368
 8015e78:	0801c4d8 	.word	0x0801c4d8
 8015e7c:	0801c3e0 	.word	0x0801c3e0

08015e80 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b08a      	sub	sp, #40	@ 0x28
 8015e84:	af02      	add	r7, sp, #8
 8015e86:	60f8      	str	r0, [r7, #12]
 8015e88:	60b9      	str	r1, [r7, #8]
 8015e8a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015e90:	68fb      	ldr	r3, [r7, #12]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d106      	bne.n	8015ea4 <etharp_output+0x24>
 8015e96:	4b73      	ldr	r3, [pc, #460]	@ (8016064 <etharp_output+0x1e4>)
 8015e98:	f240 321e 	movw	r2, #798	@ 0x31e
 8015e9c:	4972      	ldr	r1, [pc, #456]	@ (8016068 <etharp_output+0x1e8>)
 8015e9e:	4873      	ldr	r0, [pc, #460]	@ (801606c <etharp_output+0x1ec>)
 8015ea0:	f002 fa2e 	bl	8018300 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015ea4:	68bb      	ldr	r3, [r7, #8]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d106      	bne.n	8015eb8 <etharp_output+0x38>
 8015eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8016064 <etharp_output+0x1e4>)
 8015eac:	f240 321f 	movw	r2, #799	@ 0x31f
 8015eb0:	496f      	ldr	r1, [pc, #444]	@ (8016070 <etharp_output+0x1f0>)
 8015eb2:	486e      	ldr	r0, [pc, #440]	@ (801606c <etharp_output+0x1ec>)
 8015eb4:	f002 fa24 	bl	8018300 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d106      	bne.n	8015ecc <etharp_output+0x4c>
 8015ebe:	4b69      	ldr	r3, [pc, #420]	@ (8016064 <etharp_output+0x1e4>)
 8015ec0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8015ec4:	496b      	ldr	r1, [pc, #428]	@ (8016074 <etharp_output+0x1f4>)
 8015ec6:	4869      	ldr	r0, [pc, #420]	@ (801606c <etharp_output+0x1ec>)
 8015ec8:	f002 fa1a 	bl	8018300 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	68f9      	ldr	r1, [r7, #12]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f000 ffb6 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d002      	beq.n	8015ee4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015ede:	4b66      	ldr	r3, [pc, #408]	@ (8016078 <etharp_output+0x1f8>)
 8015ee0:	61fb      	str	r3, [r7, #28]
 8015ee2:	e0af      	b.n	8016044 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015eec:	2be0      	cmp	r3, #224	@ 0xe0
 8015eee:	d118      	bne.n	8015f22 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015ef8:	235e      	movs	r3, #94	@ 0x5e
 8015efa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	3301      	adds	r3, #1
 8015f00:	781b      	ldrb	r3, [r3, #0]
 8015f02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015f06:	b2db      	uxtb	r3, r3
 8015f08:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	3302      	adds	r3, #2
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	3303      	adds	r3, #3
 8015f16:	781b      	ldrb	r3, [r3, #0]
 8015f18:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015f1a:	f107 0310 	add.w	r3, r7, #16
 8015f1e:	61fb      	str	r3, [r7, #28]
 8015f20:	e090      	b.n	8016044 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	681a      	ldr	r2, [r3, #0]
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	3304      	adds	r3, #4
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	405a      	eors	r2, r3
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	3308      	adds	r3, #8
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	4013      	ands	r3, r2
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d012      	beq.n	8015f60 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015f40:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8015f44:	4293      	cmp	r3, r2
 8015f46:	d00b      	beq.n	8015f60 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	330c      	adds	r3, #12
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d003      	beq.n	8015f5a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	330c      	adds	r3, #12
 8015f56:	61bb      	str	r3, [r7, #24]
 8015f58:	e002      	b.n	8015f60 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015f5a:	f06f 0303 	mvn.w	r3, #3
 8015f5e:	e07d      	b.n	801605c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f60:	4b46      	ldr	r3, [pc, #280]	@ (801607c <etharp_output+0x1fc>)
 8015f62:	781b      	ldrb	r3, [r3, #0]
 8015f64:	4619      	mov	r1, r3
 8015f66:	4a46      	ldr	r2, [pc, #280]	@ (8016080 <etharp_output+0x200>)
 8015f68:	460b      	mov	r3, r1
 8015f6a:	005b      	lsls	r3, r3, #1
 8015f6c:	440b      	add	r3, r1
 8015f6e:	00db      	lsls	r3, r3, #3
 8015f70:	4413      	add	r3, r2
 8015f72:	3314      	adds	r3, #20
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	2b01      	cmp	r3, #1
 8015f78:	d925      	bls.n	8015fc6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015f7a:	4b40      	ldr	r3, [pc, #256]	@ (801607c <etharp_output+0x1fc>)
 8015f7c:	781b      	ldrb	r3, [r3, #0]
 8015f7e:	4619      	mov	r1, r3
 8015f80:	4a3f      	ldr	r2, [pc, #252]	@ (8016080 <etharp_output+0x200>)
 8015f82:	460b      	mov	r3, r1
 8015f84:	005b      	lsls	r3, r3, #1
 8015f86:	440b      	add	r3, r1
 8015f88:	00db      	lsls	r3, r3, #3
 8015f8a:	4413      	add	r3, r2
 8015f8c:	3308      	adds	r3, #8
 8015f8e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015f90:	68fa      	ldr	r2, [r7, #12]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	d117      	bne.n	8015fc6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015f96:	69bb      	ldr	r3, [r7, #24]
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	4b38      	ldr	r3, [pc, #224]	@ (801607c <etharp_output+0x1fc>)
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	4937      	ldr	r1, [pc, #220]	@ (8016080 <etharp_output+0x200>)
 8015fa2:	4603      	mov	r3, r0
 8015fa4:	005b      	lsls	r3, r3, #1
 8015fa6:	4403      	add	r3, r0
 8015fa8:	00db      	lsls	r3, r3, #3
 8015faa:	440b      	add	r3, r1
 8015fac:	3304      	adds	r3, #4
 8015fae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015fb0:	429a      	cmp	r2, r3
 8015fb2:	d108      	bne.n	8015fc6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015fb4:	4b31      	ldr	r3, [pc, #196]	@ (801607c <etharp_output+0x1fc>)
 8015fb6:	781b      	ldrb	r3, [r3, #0]
 8015fb8:	461a      	mov	r2, r3
 8015fba:	68b9      	ldr	r1, [r7, #8]
 8015fbc:	68f8      	ldr	r0, [r7, #12]
 8015fbe:	f7ff fec5 	bl	8015d4c <etharp_output_to_arp_index>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	e04a      	b.n	801605c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	75fb      	strb	r3, [r7, #23]
 8015fca:	e031      	b.n	8016030 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015fcc:	7dfa      	ldrb	r2, [r7, #23]
 8015fce:	492c      	ldr	r1, [pc, #176]	@ (8016080 <etharp_output+0x200>)
 8015fd0:	4613      	mov	r3, r2
 8015fd2:	005b      	lsls	r3, r3, #1
 8015fd4:	4413      	add	r3, r2
 8015fd6:	00db      	lsls	r3, r3, #3
 8015fd8:	440b      	add	r3, r1
 8015fda:	3314      	adds	r3, #20
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	2b01      	cmp	r3, #1
 8015fe0:	d923      	bls.n	801602a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015fe2:	7dfa      	ldrb	r2, [r7, #23]
 8015fe4:	4926      	ldr	r1, [pc, #152]	@ (8016080 <etharp_output+0x200>)
 8015fe6:	4613      	mov	r3, r2
 8015fe8:	005b      	lsls	r3, r3, #1
 8015fea:	4413      	add	r3, r2
 8015fec:	00db      	lsls	r3, r3, #3
 8015fee:	440b      	add	r3, r1
 8015ff0:	3308      	adds	r3, #8
 8015ff2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ff4:	68fa      	ldr	r2, [r7, #12]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d117      	bne.n	801602a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015ffa:	69bb      	ldr	r3, [r7, #24]
 8015ffc:	6819      	ldr	r1, [r3, #0]
 8015ffe:	7dfa      	ldrb	r2, [r7, #23]
 8016000:	481f      	ldr	r0, [pc, #124]	@ (8016080 <etharp_output+0x200>)
 8016002:	4613      	mov	r3, r2
 8016004:	005b      	lsls	r3, r3, #1
 8016006:	4413      	add	r3, r2
 8016008:	00db      	lsls	r3, r3, #3
 801600a:	4403      	add	r3, r0
 801600c:	3304      	adds	r3, #4
 801600e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016010:	4299      	cmp	r1, r3
 8016012:	d10a      	bne.n	801602a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016014:	4a19      	ldr	r2, [pc, #100]	@ (801607c <etharp_output+0x1fc>)
 8016016:	7dfb      	ldrb	r3, [r7, #23]
 8016018:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801601a:	7dfb      	ldrb	r3, [r7, #23]
 801601c:	461a      	mov	r2, r3
 801601e:	68b9      	ldr	r1, [r7, #8]
 8016020:	68f8      	ldr	r0, [r7, #12]
 8016022:	f7ff fe93 	bl	8015d4c <etharp_output_to_arp_index>
 8016026:	4603      	mov	r3, r0
 8016028:	e018      	b.n	801605c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801602a:	7dfb      	ldrb	r3, [r7, #23]
 801602c:	3301      	adds	r3, #1
 801602e:	75fb      	strb	r3, [r7, #23]
 8016030:	7dfb      	ldrb	r3, [r7, #23]
 8016032:	2b09      	cmp	r3, #9
 8016034:	d9ca      	bls.n	8015fcc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016036:	68ba      	ldr	r2, [r7, #8]
 8016038:	69b9      	ldr	r1, [r7, #24]
 801603a:	68f8      	ldr	r0, [r7, #12]
 801603c:	f000 f822 	bl	8016084 <etharp_query>
 8016040:	4603      	mov	r3, r0
 8016042:	e00b      	b.n	801605c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016044:	68fb      	ldr	r3, [r7, #12]
 8016046:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801604a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801604e:	9300      	str	r3, [sp, #0]
 8016050:	69fb      	ldr	r3, [r7, #28]
 8016052:	68b9      	ldr	r1, [r7, #8]
 8016054:	68f8      	ldr	r0, [r7, #12]
 8016056:	f001 fe13 	bl	8017c80 <ethernet_output>
 801605a:	4603      	mov	r3, r0
}
 801605c:	4618      	mov	r0, r3
 801605e:	3720      	adds	r7, #32
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}
 8016064:	0801c368 	.word	0x0801c368
 8016068:	0801c4b8 	.word	0x0801c4b8
 801606c:	0801c3e0 	.word	0x0801c3e0
 8016070:	0801c508 	.word	0x0801c508
 8016074:	0801c4a8 	.word	0x0801c4a8
 8016078:	0801cba0 	.word	0x0801cba0
 801607c:	20015228 	.word	0x20015228
 8016080:	20015138 	.word	0x20015138

08016084 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b08c      	sub	sp, #48	@ 0x30
 8016088:	af02      	add	r7, sp, #8
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016090:	68fb      	ldr	r3, [r7, #12]
 8016092:	332a      	adds	r3, #42	@ 0x2a
 8016094:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016096:	23ff      	movs	r3, #255	@ 0xff
 8016098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801609c:	2300      	movs	r3, #0
 801609e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	681b      	ldr	r3, [r3, #0]
 80160a4:	68f9      	ldr	r1, [r7, #12]
 80160a6:	4618      	mov	r0, r3
 80160a8:	f000 fecc 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 80160ac:	4603      	mov	r3, r0
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d10c      	bne.n	80160cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80160ba:	2be0      	cmp	r3, #224	@ 0xe0
 80160bc:	d006      	beq.n	80160cc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d003      	beq.n	80160cc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d102      	bne.n	80160d2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80160cc:	f06f 030f 	mvn.w	r3, #15
 80160d0:	e101      	b.n	80162d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80160d2:	68fa      	ldr	r2, [r7, #12]
 80160d4:	2101      	movs	r1, #1
 80160d6:	68b8      	ldr	r0, [r7, #8]
 80160d8:	f7ff fb5c 	bl	8015794 <etharp_find_entry>
 80160dc:	4603      	mov	r3, r0
 80160de:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80160e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	da02      	bge.n	80160ee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80160e8:	8a7b      	ldrh	r3, [r7, #18]
 80160ea:	b25b      	sxtb	r3, r3
 80160ec:	e0f3      	b.n	80162d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80160ee:	8a7b      	ldrh	r3, [r7, #18]
 80160f0:	2b7e      	cmp	r3, #126	@ 0x7e
 80160f2:	d906      	bls.n	8016102 <etharp_query+0x7e>
 80160f4:	4b7a      	ldr	r3, [pc, #488]	@ (80162e0 <etharp_query+0x25c>)
 80160f6:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80160fa:	497a      	ldr	r1, [pc, #488]	@ (80162e4 <etharp_query+0x260>)
 80160fc:	487a      	ldr	r0, [pc, #488]	@ (80162e8 <etharp_query+0x264>)
 80160fe:	f002 f8ff 	bl	8018300 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016102:	8a7b      	ldrh	r3, [r7, #18]
 8016104:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016106:	7c7a      	ldrb	r2, [r7, #17]
 8016108:	4978      	ldr	r1, [pc, #480]	@ (80162ec <etharp_query+0x268>)
 801610a:	4613      	mov	r3, r2
 801610c:	005b      	lsls	r3, r3, #1
 801610e:	4413      	add	r3, r2
 8016110:	00db      	lsls	r3, r3, #3
 8016112:	440b      	add	r3, r1
 8016114:	3314      	adds	r3, #20
 8016116:	781b      	ldrb	r3, [r3, #0]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d115      	bne.n	8016148 <etharp_query+0xc4>
    is_new_entry = 1;
 801611c:	2301      	movs	r3, #1
 801611e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016120:	7c7a      	ldrb	r2, [r7, #17]
 8016122:	4972      	ldr	r1, [pc, #456]	@ (80162ec <etharp_query+0x268>)
 8016124:	4613      	mov	r3, r2
 8016126:	005b      	lsls	r3, r3, #1
 8016128:	4413      	add	r3, r2
 801612a:	00db      	lsls	r3, r3, #3
 801612c:	440b      	add	r3, r1
 801612e:	3314      	adds	r3, #20
 8016130:	2201      	movs	r2, #1
 8016132:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016134:	7c7a      	ldrb	r2, [r7, #17]
 8016136:	496d      	ldr	r1, [pc, #436]	@ (80162ec <etharp_query+0x268>)
 8016138:	4613      	mov	r3, r2
 801613a:	005b      	lsls	r3, r3, #1
 801613c:	4413      	add	r3, r2
 801613e:	00db      	lsls	r3, r3, #3
 8016140:	440b      	add	r3, r1
 8016142:	3308      	adds	r3, #8
 8016144:	68fa      	ldr	r2, [r7, #12]
 8016146:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016148:	7c7a      	ldrb	r2, [r7, #17]
 801614a:	4968      	ldr	r1, [pc, #416]	@ (80162ec <etharp_query+0x268>)
 801614c:	4613      	mov	r3, r2
 801614e:	005b      	lsls	r3, r3, #1
 8016150:	4413      	add	r3, r2
 8016152:	00db      	lsls	r3, r3, #3
 8016154:	440b      	add	r3, r1
 8016156:	3314      	adds	r3, #20
 8016158:	781b      	ldrb	r3, [r3, #0]
 801615a:	2b01      	cmp	r3, #1
 801615c:	d011      	beq.n	8016182 <etharp_query+0xfe>
 801615e:	7c7a      	ldrb	r2, [r7, #17]
 8016160:	4962      	ldr	r1, [pc, #392]	@ (80162ec <etharp_query+0x268>)
 8016162:	4613      	mov	r3, r2
 8016164:	005b      	lsls	r3, r3, #1
 8016166:	4413      	add	r3, r2
 8016168:	00db      	lsls	r3, r3, #3
 801616a:	440b      	add	r3, r1
 801616c:	3314      	adds	r3, #20
 801616e:	781b      	ldrb	r3, [r3, #0]
 8016170:	2b01      	cmp	r3, #1
 8016172:	d806      	bhi.n	8016182 <etharp_query+0xfe>
 8016174:	4b5a      	ldr	r3, [pc, #360]	@ (80162e0 <etharp_query+0x25c>)
 8016176:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801617a:	495d      	ldr	r1, [pc, #372]	@ (80162f0 <etharp_query+0x26c>)
 801617c:	485a      	ldr	r0, [pc, #360]	@ (80162e8 <etharp_query+0x264>)
 801617e:	f002 f8bf 	bl	8018300 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016182:	6a3b      	ldr	r3, [r7, #32]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d102      	bne.n	801618e <etharp_query+0x10a>
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d10c      	bne.n	80161a8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801618e:	68b9      	ldr	r1, [r7, #8]
 8016190:	68f8      	ldr	r0, [r7, #12]
 8016192:	f000 f963 	bl	801645c <etharp_request>
 8016196:	4603      	mov	r3, r0
 8016198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d102      	bne.n	80161a8 <etharp_query+0x124>
      return result;
 80161a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80161a6:	e096      	b.n	80162d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d106      	bne.n	80161bc <etharp_query+0x138>
 80161ae:	4b4c      	ldr	r3, [pc, #304]	@ (80162e0 <etharp_query+0x25c>)
 80161b0:	f240 32e1 	movw	r2, #993	@ 0x3e1
 80161b4:	494f      	ldr	r1, [pc, #316]	@ (80162f4 <etharp_query+0x270>)
 80161b6:	484c      	ldr	r0, [pc, #304]	@ (80162e8 <etharp_query+0x264>)
 80161b8:	f002 f8a2 	bl	8018300 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80161bc:	7c7a      	ldrb	r2, [r7, #17]
 80161be:	494b      	ldr	r1, [pc, #300]	@ (80162ec <etharp_query+0x268>)
 80161c0:	4613      	mov	r3, r2
 80161c2:	005b      	lsls	r3, r3, #1
 80161c4:	4413      	add	r3, r2
 80161c6:	00db      	lsls	r3, r3, #3
 80161c8:	440b      	add	r3, r1
 80161ca:	3314      	adds	r3, #20
 80161cc:	781b      	ldrb	r3, [r3, #0]
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	d917      	bls.n	8016202 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80161d2:	4a49      	ldr	r2, [pc, #292]	@ (80162f8 <etharp_query+0x274>)
 80161d4:	7c7b      	ldrb	r3, [r7, #17]
 80161d6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80161d8:	7c7a      	ldrb	r2, [r7, #17]
 80161da:	4613      	mov	r3, r2
 80161dc:	005b      	lsls	r3, r3, #1
 80161de:	4413      	add	r3, r2
 80161e0:	00db      	lsls	r3, r3, #3
 80161e2:	3308      	adds	r3, #8
 80161e4:	4a41      	ldr	r2, [pc, #260]	@ (80162ec <etharp_query+0x268>)
 80161e6:	4413      	add	r3, r2
 80161e8:	3304      	adds	r3, #4
 80161ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80161ee:	9200      	str	r2, [sp, #0]
 80161f0:	697a      	ldr	r2, [r7, #20]
 80161f2:	6879      	ldr	r1, [r7, #4]
 80161f4:	68f8      	ldr	r0, [r7, #12]
 80161f6:	f001 fd43 	bl	8017c80 <ethernet_output>
 80161fa:	4603      	mov	r3, r0
 80161fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016200:	e067      	b.n	80162d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016202:	7c7a      	ldrb	r2, [r7, #17]
 8016204:	4939      	ldr	r1, [pc, #228]	@ (80162ec <etharp_query+0x268>)
 8016206:	4613      	mov	r3, r2
 8016208:	005b      	lsls	r3, r3, #1
 801620a:	4413      	add	r3, r2
 801620c:	00db      	lsls	r3, r3, #3
 801620e:	440b      	add	r3, r1
 8016210:	3314      	adds	r3, #20
 8016212:	781b      	ldrb	r3, [r3, #0]
 8016214:	2b01      	cmp	r3, #1
 8016216:	d15c      	bne.n	80162d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016218:	2300      	movs	r3, #0
 801621a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016220:	e01c      	b.n	801625c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016222:	69fb      	ldr	r3, [r7, #28]
 8016224:	895a      	ldrh	r2, [r3, #10]
 8016226:	69fb      	ldr	r3, [r7, #28]
 8016228:	891b      	ldrh	r3, [r3, #8]
 801622a:	429a      	cmp	r2, r3
 801622c:	d10a      	bne.n	8016244 <etharp_query+0x1c0>
 801622e:	69fb      	ldr	r3, [r7, #28]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d006      	beq.n	8016244 <etharp_query+0x1c0>
 8016236:	4b2a      	ldr	r3, [pc, #168]	@ (80162e0 <etharp_query+0x25c>)
 8016238:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801623c:	492f      	ldr	r1, [pc, #188]	@ (80162fc <etharp_query+0x278>)
 801623e:	482a      	ldr	r0, [pc, #168]	@ (80162e8 <etharp_query+0x264>)
 8016240:	f002 f85e 	bl	8018300 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016244:	69fb      	ldr	r3, [r7, #28]
 8016246:	7b1b      	ldrb	r3, [r3, #12]
 8016248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801624c:	2b00      	cmp	r3, #0
 801624e:	d002      	beq.n	8016256 <etharp_query+0x1d2>
        copy_needed = 1;
 8016250:	2301      	movs	r3, #1
 8016252:	61bb      	str	r3, [r7, #24]
        break;
 8016254:	e005      	b.n	8016262 <etharp_query+0x1de>
      }
      p = p->next;
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801625c:	69fb      	ldr	r3, [r7, #28]
 801625e:	2b00      	cmp	r3, #0
 8016260:	d1df      	bne.n	8016222 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016262:	69bb      	ldr	r3, [r7, #24]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d007      	beq.n	8016278 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016268:	687a      	ldr	r2, [r7, #4]
 801626a:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801626e:	200e      	movs	r0, #14
 8016270:	f7f6 fff4 	bl	800d25c <pbuf_clone>
 8016274:	61f8      	str	r0, [r7, #28]
 8016276:	e004      	b.n	8016282 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801627c:	69f8      	ldr	r0, [r7, #28]
 801627e:	f7f6 fe1b 	bl	800ceb8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d021      	beq.n	80162cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016288:	7c7a      	ldrb	r2, [r7, #17]
 801628a:	4918      	ldr	r1, [pc, #96]	@ (80162ec <etharp_query+0x268>)
 801628c:	4613      	mov	r3, r2
 801628e:	005b      	lsls	r3, r3, #1
 8016290:	4413      	add	r3, r2
 8016292:	00db      	lsls	r3, r3, #3
 8016294:	440b      	add	r3, r1
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d00a      	beq.n	80162b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801629c:	7c7a      	ldrb	r2, [r7, #17]
 801629e:	4913      	ldr	r1, [pc, #76]	@ (80162ec <etharp_query+0x268>)
 80162a0:	4613      	mov	r3, r2
 80162a2:	005b      	lsls	r3, r3, #1
 80162a4:	4413      	add	r3, r2
 80162a6:	00db      	lsls	r3, r3, #3
 80162a8:	440b      	add	r3, r1
 80162aa:	681b      	ldr	r3, [r3, #0]
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7f6 fd5d 	bl	800cd6c <pbuf_free>
      }
      arp_table[i].q = p;
 80162b2:	7c7a      	ldrb	r2, [r7, #17]
 80162b4:	490d      	ldr	r1, [pc, #52]	@ (80162ec <etharp_query+0x268>)
 80162b6:	4613      	mov	r3, r2
 80162b8:	005b      	lsls	r3, r3, #1
 80162ba:	4413      	add	r3, r2
 80162bc:	00db      	lsls	r3, r3, #3
 80162be:	440b      	add	r3, r1
 80162c0:	69fa      	ldr	r2, [r7, #28]
 80162c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80162c4:	2300      	movs	r3, #0
 80162c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80162ca:	e002      	b.n	80162d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80162cc:	23ff      	movs	r3, #255	@ 0xff
 80162ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 80162d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3728      	adds	r7, #40	@ 0x28
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
 80162de:	bf00      	nop
 80162e0:	0801c368 	.word	0x0801c368
 80162e4:	0801c514 	.word	0x0801c514
 80162e8:	0801c3e0 	.word	0x0801c3e0
 80162ec:	20015138 	.word	0x20015138
 80162f0:	0801c524 	.word	0x0801c524
 80162f4:	0801c508 	.word	0x0801c508
 80162f8:	20015228 	.word	0x20015228
 80162fc:	0801c54c 	.word	0x0801c54c

08016300 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b08a      	sub	sp, #40	@ 0x28
 8016304:	af02      	add	r7, sp, #8
 8016306:	60f8      	str	r0, [r7, #12]
 8016308:	60b9      	str	r1, [r7, #8]
 801630a:	607a      	str	r2, [r7, #4]
 801630c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801630e:	2300      	movs	r3, #0
 8016310:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d106      	bne.n	8016326 <etharp_raw+0x26>
 8016318:	4b3a      	ldr	r3, [pc, #232]	@ (8016404 <etharp_raw+0x104>)
 801631a:	f240 4257 	movw	r2, #1111	@ 0x457
 801631e:	493a      	ldr	r1, [pc, #232]	@ (8016408 <etharp_raw+0x108>)
 8016320:	483a      	ldr	r0, [pc, #232]	@ (801640c <etharp_raw+0x10c>)
 8016322:	f001 ffed 	bl	8018300 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016326:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801632a:	211c      	movs	r1, #28
 801632c:	200e      	movs	r0, #14
 801632e:	f7f6 fa39 	bl	800c7a4 <pbuf_alloc>
 8016332:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016334:	69bb      	ldr	r3, [r7, #24]
 8016336:	2b00      	cmp	r3, #0
 8016338:	d102      	bne.n	8016340 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801633a:	f04f 33ff 	mov.w	r3, #4294967295
 801633e:	e05d      	b.n	80163fc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016340:	69bb      	ldr	r3, [r7, #24]
 8016342:	895b      	ldrh	r3, [r3, #10]
 8016344:	2b1b      	cmp	r3, #27
 8016346:	d806      	bhi.n	8016356 <etharp_raw+0x56>
 8016348:	4b2e      	ldr	r3, [pc, #184]	@ (8016404 <etharp_raw+0x104>)
 801634a:	f240 4262 	movw	r2, #1122	@ 0x462
 801634e:	4930      	ldr	r1, [pc, #192]	@ (8016410 <etharp_raw+0x110>)
 8016350:	482e      	ldr	r0, [pc, #184]	@ (801640c <etharp_raw+0x10c>)
 8016352:	f001 ffd5 	bl	8018300 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016356:	69bb      	ldr	r3, [r7, #24]
 8016358:	685b      	ldr	r3, [r3, #4]
 801635a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801635c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801635e:	4618      	mov	r0, r3
 8016360:	f7f5 f82e 	bl	800b3c0 <lwip_htons>
 8016364:	4603      	mov	r3, r0
 8016366:	461a      	mov	r2, r3
 8016368:	697b      	ldr	r3, [r7, #20]
 801636a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8016372:	2b06      	cmp	r3, #6
 8016374:	d006      	beq.n	8016384 <etharp_raw+0x84>
 8016376:	4b23      	ldr	r3, [pc, #140]	@ (8016404 <etharp_raw+0x104>)
 8016378:	f240 4269 	movw	r2, #1129	@ 0x469
 801637c:	4925      	ldr	r1, [pc, #148]	@ (8016414 <etharp_raw+0x114>)
 801637e:	4823      	ldr	r0, [pc, #140]	@ (801640c <etharp_raw+0x10c>)
 8016380:	f001 ffbe 	bl	8018300 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016384:	697b      	ldr	r3, [r7, #20]
 8016386:	3308      	adds	r3, #8
 8016388:	2206      	movs	r2, #6
 801638a:	6839      	ldr	r1, [r7, #0]
 801638c:	4618      	mov	r0, r3
 801638e:	f002 f892 	bl	80184b6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	3312      	adds	r3, #18
 8016396:	2206      	movs	r2, #6
 8016398:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801639a:	4618      	mov	r0, r3
 801639c:	f002 f88b 	bl	80184b6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80163a0:	697b      	ldr	r3, [r7, #20]
 80163a2:	330e      	adds	r3, #14
 80163a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163a6:	6812      	ldr	r2, [r2, #0]
 80163a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80163aa:	697b      	ldr	r3, [r7, #20]
 80163ac:	3318      	adds	r3, #24
 80163ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80163b0:	6812      	ldr	r2, [r2, #0]
 80163b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80163b4:	697b      	ldr	r3, [r7, #20]
 80163b6:	2200      	movs	r2, #0
 80163b8:	701a      	strb	r2, [r3, #0]
 80163ba:	2200      	movs	r2, #0
 80163bc:	f042 0201 	orr.w	r2, r2, #1
 80163c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80163c2:	697b      	ldr	r3, [r7, #20]
 80163c4:	2200      	movs	r2, #0
 80163c6:	f042 0208 	orr.w	r2, r2, #8
 80163ca:	709a      	strb	r2, [r3, #2]
 80163cc:	2200      	movs	r2, #0
 80163ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80163d0:	697b      	ldr	r3, [r7, #20]
 80163d2:	2206      	movs	r2, #6
 80163d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	2204      	movs	r2, #4
 80163da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80163dc:	f640 0306 	movw	r3, #2054	@ 0x806
 80163e0:	9300      	str	r3, [sp, #0]
 80163e2:	687b      	ldr	r3, [r7, #4]
 80163e4:	68ba      	ldr	r2, [r7, #8]
 80163e6:	69b9      	ldr	r1, [r7, #24]
 80163e8:	68f8      	ldr	r0, [r7, #12]
 80163ea:	f001 fc49 	bl	8017c80 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80163ee:	69b8      	ldr	r0, [r7, #24]
 80163f0:	f7f6 fcbc 	bl	800cd6c <pbuf_free>
  p = NULL;
 80163f4:	2300      	movs	r3, #0
 80163f6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80163f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3720      	adds	r7, #32
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}
 8016404:	0801c368 	.word	0x0801c368
 8016408:	0801c4b8 	.word	0x0801c4b8
 801640c:	0801c3e0 	.word	0x0801c3e0
 8016410:	0801c568 	.word	0x0801c568
 8016414:	0801c59c 	.word	0x0801c59c

08016418 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016418:	b580      	push	{r7, lr}
 801641a:	b088      	sub	sp, #32
 801641c:	af04      	add	r7, sp, #16
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	60b9      	str	r1, [r7, #8]
 8016422:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016434:	2201      	movs	r2, #1
 8016436:	9203      	str	r2, [sp, #12]
 8016438:	68ba      	ldr	r2, [r7, #8]
 801643a:	9202      	str	r2, [sp, #8]
 801643c:	4a06      	ldr	r2, [pc, #24]	@ (8016458 <etharp_request_dst+0x40>)
 801643e:	9201      	str	r2, [sp, #4]
 8016440:	9300      	str	r3, [sp, #0]
 8016442:	4603      	mov	r3, r0
 8016444:	687a      	ldr	r2, [r7, #4]
 8016446:	68f8      	ldr	r0, [r7, #12]
 8016448:	f7ff ff5a 	bl	8016300 <etharp_raw>
 801644c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801644e:	4618      	mov	r0, r3
 8016450:	3710      	adds	r7, #16
 8016452:	46bd      	mov	sp, r7
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	0801cba8 	.word	0x0801cba8

0801645c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b082      	sub	sp, #8
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
 8016464:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016466:	4a05      	ldr	r2, [pc, #20]	@ (801647c <etharp_request+0x20>)
 8016468:	6839      	ldr	r1, [r7, #0]
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7ff ffd4 	bl	8016418 <etharp_request_dst>
 8016470:	4603      	mov	r3, r0
}
 8016472:	4618      	mov	r0, r3
 8016474:	3708      	adds	r7, #8
 8016476:	46bd      	mov	sp, r7
 8016478:	bd80      	pop	{r7, pc}
 801647a:	bf00      	nop
 801647c:	0801cba0 	.word	0x0801cba0

08016480 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b08e      	sub	sp, #56	@ 0x38
 8016484:	af04      	add	r7, sp, #16
 8016486:	6078      	str	r0, [r7, #4]
 8016488:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801648a:	4b8b      	ldr	r3, [pc, #556]	@ (80166b8 <icmp_input+0x238>)
 801648c:	689b      	ldr	r3, [r3, #8]
 801648e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016492:	781b      	ldrb	r3, [r3, #0]
 8016494:	f003 030f 	and.w	r3, r3, #15
 8016498:	b2db      	uxtb	r3, r3
 801649a:	009b      	lsls	r3, r3, #2
 801649c:	b2db      	uxtb	r3, r3
 801649e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80164a0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80164a2:	2b13      	cmp	r3, #19
 80164a4:	f240 80f1 	bls.w	801668a <icmp_input+0x20a>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	895b      	ldrh	r3, [r3, #10]
 80164ac:	2b03      	cmp	r3, #3
 80164ae:	f240 80ee 	bls.w	801668e <icmp_input+0x20e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	685b      	ldr	r3, [r3, #4]
 80164b6:	781b      	ldrb	r3, [r3, #0]
 80164b8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80164bc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	f000 80db 	beq.w	801667c <icmp_input+0x1fc>
 80164c6:	2b08      	cmp	r3, #8
 80164c8:	f040 80db 	bne.w	8016682 <icmp_input+0x202>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80164cc:	4b7b      	ldr	r3, [pc, #492]	@ (80166bc <icmp_input+0x23c>)
 80164ce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80164d0:	4b79      	ldr	r3, [pc, #484]	@ (80166b8 <icmp_input+0x238>)
 80164d2:	695b      	ldr	r3, [r3, #20]
 80164d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80164d8:	2be0      	cmp	r3, #224	@ 0xe0
 80164da:	f000 80df 	beq.w	801669c <icmp_input+0x21c>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80164de:	4b76      	ldr	r3, [pc, #472]	@ (80166b8 <icmp_input+0x238>)
 80164e0:	695b      	ldr	r3, [r3, #20]
 80164e2:	4a75      	ldr	r2, [pc, #468]	@ (80166b8 <icmp_input+0x238>)
 80164e4:	6812      	ldr	r2, [r2, #0]
 80164e6:	4611      	mov	r1, r2
 80164e8:	4618      	mov	r0, r3
 80164ea:	f000 fcab 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	f040 80d5 	bne.w	80166a0 <icmp_input+0x220>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	891b      	ldrh	r3, [r3, #8]
 80164fa:	2b07      	cmp	r3, #7
 80164fc:	f240 80c9 	bls.w	8016692 <icmp_input+0x212>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016500:	6878      	ldr	r0, [r7, #4]
 8016502:	f7f5 f8b7 	bl	800b674 <inet_chksum_pbuf>
 8016506:	4603      	mov	r3, r0
 8016508:	2b00      	cmp	r3, #0
 801650a:	d003      	beq.n	8016514 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f7f6 fc2d 	bl	800cd6c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016512:	e0ce      	b.n	80166b2 <icmp_input+0x232>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016514:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016516:	330e      	adds	r3, #14
 8016518:	4619      	mov	r1, r3
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f7f6 fb90 	bl	800cc40 <pbuf_add_header>
 8016520:	4603      	mov	r3, r0
 8016522:	2b00      	cmp	r3, #0
 8016524:	d04b      	beq.n	80165be <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	891a      	ldrh	r2, [r3, #8]
 801652a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801652c:	4413      	add	r3, r2
 801652e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	891b      	ldrh	r3, [r3, #8]
 8016534:	8b7a      	ldrh	r2, [r7, #26]
 8016536:	429a      	cmp	r2, r3
 8016538:	f0c0 80b4 	bcc.w	80166a4 <icmp_input+0x224>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801653c:	8b7b      	ldrh	r3, [r7, #26]
 801653e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016542:	4619      	mov	r1, r3
 8016544:	200e      	movs	r0, #14
 8016546:	f7f6 f92d 	bl	800c7a4 <pbuf_alloc>
 801654a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801654c:	697b      	ldr	r3, [r7, #20]
 801654e:	2b00      	cmp	r3, #0
 8016550:	f000 80aa 	beq.w	80166a8 <icmp_input+0x228>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	895b      	ldrh	r3, [r3, #10]
 8016558:	461a      	mov	r2, r3
 801655a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801655c:	3308      	adds	r3, #8
 801655e:	429a      	cmp	r2, r3
 8016560:	d203      	bcs.n	801656a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016562:	6978      	ldr	r0, [r7, #20]
 8016564:	f7f6 fc02 	bl	800cd6c <pbuf_free>
          goto icmperr;
 8016568:	e09f      	b.n	80166aa <icmp_input+0x22a>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801656a:	697b      	ldr	r3, [r7, #20]
 801656c:	685b      	ldr	r3, [r3, #4]
 801656e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016570:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016572:	4618      	mov	r0, r3
 8016574:	f001 ff9f 	bl	80184b6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016578:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801657a:	4619      	mov	r1, r3
 801657c:	6978      	ldr	r0, [r7, #20]
 801657e:	f7f6 fb6f 	bl	800cc60 <pbuf_remove_header>
 8016582:	4603      	mov	r3, r0
 8016584:	2b00      	cmp	r3, #0
 8016586:	d009      	beq.n	801659c <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016588:	4b4d      	ldr	r3, [pc, #308]	@ (80166c0 <icmp_input+0x240>)
 801658a:	22b6      	movs	r2, #182	@ 0xb6
 801658c:	494d      	ldr	r1, [pc, #308]	@ (80166c4 <icmp_input+0x244>)
 801658e:	484e      	ldr	r0, [pc, #312]	@ (80166c8 <icmp_input+0x248>)
 8016590:	f001 feb6 	bl	8018300 <iprintf>
          pbuf_free(r);
 8016594:	6978      	ldr	r0, [r7, #20]
 8016596:	f7f6 fbe9 	bl	800cd6c <pbuf_free>
          goto icmperr;
 801659a:	e086      	b.n	80166aa <icmp_input+0x22a>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801659c:	6879      	ldr	r1, [r7, #4]
 801659e:	6978      	ldr	r0, [r7, #20]
 80165a0:	f7f6 fd18 	bl	800cfd4 <pbuf_copy>
 80165a4:	4603      	mov	r3, r0
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d003      	beq.n	80165b2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80165aa:	6978      	ldr	r0, [r7, #20]
 80165ac:	f7f6 fbde 	bl	800cd6c <pbuf_free>
          goto icmperr;
 80165b0:	e07b      	b.n	80166aa <icmp_input+0x22a>
        }
        /* free the original p */
        pbuf_free(p);
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7f6 fbda 	bl	800cd6c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	607b      	str	r3, [r7, #4]
 80165bc:	e00f      	b.n	80165de <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80165be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80165c0:	330e      	adds	r3, #14
 80165c2:	4619      	mov	r1, r3
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f7f6 fb4b 	bl	800cc60 <pbuf_remove_header>
 80165ca:	4603      	mov	r3, r0
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d006      	beq.n	80165de <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80165d0:	4b3b      	ldr	r3, [pc, #236]	@ (80166c0 <icmp_input+0x240>)
 80165d2:	22c7      	movs	r2, #199	@ 0xc7
 80165d4:	493d      	ldr	r1, [pc, #244]	@ (80166cc <icmp_input+0x24c>)
 80165d6:	483c      	ldr	r0, [pc, #240]	@ (80166c8 <icmp_input+0x248>)
 80165d8:	f001 fe92 	bl	8018300 <iprintf>
          goto icmperr;
 80165dc:	e065      	b.n	80166aa <icmp_input+0x22a>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	685b      	ldr	r3, [r3, #4]
 80165e2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80165e4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80165e6:	4619      	mov	r1, r3
 80165e8:	6878      	ldr	r0, [r7, #4]
 80165ea:	f7f6 fb29 	bl	800cc40 <pbuf_add_header>
 80165ee:	4603      	mov	r3, r0
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d145      	bne.n	8016680 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	685b      	ldr	r3, [r3, #4]
 80165f8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80165fa:	69fb      	ldr	r3, [r7, #28]
 80165fc:	681a      	ldr	r2, [r3, #0]
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016602:	4b2d      	ldr	r3, [pc, #180]	@ (80166b8 <icmp_input+0x238>)
 8016604:	691a      	ldr	r2, [r3, #16]
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801660a:	693b      	ldr	r3, [r7, #16]
 801660c:	2200      	movs	r2, #0
 801660e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016610:	693b      	ldr	r3, [r7, #16]
 8016612:	885b      	ldrh	r3, [r3, #2]
 8016614:	b29b      	uxth	r3, r3
 8016616:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801661a:	4293      	cmp	r3, r2
 801661c:	d907      	bls.n	801662e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801661e:	693b      	ldr	r3, [r7, #16]
 8016620:	885b      	ldrh	r3, [r3, #2]
 8016622:	b29b      	uxth	r3, r3
 8016624:	3309      	adds	r3, #9
 8016626:	b29a      	uxth	r2, r3
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	805a      	strh	r2, [r3, #2]
 801662c:	e006      	b.n	801663c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801662e:	693b      	ldr	r3, [r7, #16]
 8016630:	885b      	ldrh	r3, [r3, #2]
 8016632:	b29b      	uxth	r3, r3
 8016634:	3308      	adds	r3, #8
 8016636:	b29a      	uxth	r2, r3
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	22ff      	movs	r2, #255	@ 0xff
 8016640:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016642:	68fb      	ldr	r3, [r7, #12]
 8016644:	2200      	movs	r2, #0
 8016646:	729a      	strb	r2, [r3, #10]
 8016648:	2200      	movs	r2, #0
 801664a:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 801664c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801664e:	4619      	mov	r1, r3
 8016650:	68f8      	ldr	r0, [r7, #12]
 8016652:	f7f4 fffd 	bl	800b650 <inet_chksum>
 8016656:	4603      	mov	r3, r0
 8016658:	461a      	mov	r2, r3
 801665a:	68fb      	ldr	r3, [r7, #12]
 801665c:	815a      	strh	r2, [r3, #10]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	9302      	str	r3, [sp, #8]
 8016662:	2301      	movs	r3, #1
 8016664:	9301      	str	r3, [sp, #4]
 8016666:	2300      	movs	r3, #0
 8016668:	9300      	str	r3, [sp, #0]
 801666a:	23ff      	movs	r3, #255	@ 0xff
 801666c:	2200      	movs	r2, #0
 801666e:	69f9      	ldr	r1, [r7, #28]
 8016670:	6878      	ldr	r0, [r7, #4]
 8016672:	f000 faa9 	bl	8016bc8 <ip4_output_if>
 8016676:	4603      	mov	r3, r0
 8016678:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801667a:	e001      	b.n	8016680 <icmp_input+0x200>
      break;
 801667c:	bf00      	nop
 801667e:	e000      	b.n	8016682 <icmp_input+0x202>
      break;
 8016680:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016682:	6878      	ldr	r0, [r7, #4]
 8016684:	f7f6 fb72 	bl	800cd6c <pbuf_free>
  return;
 8016688:	e013      	b.n	80166b2 <icmp_input+0x232>
    goto lenerr;
 801668a:	bf00      	nop
 801668c:	e002      	b.n	8016694 <icmp_input+0x214>
    goto lenerr;
 801668e:	bf00      	nop
 8016690:	e000      	b.n	8016694 <icmp_input+0x214>
        goto lenerr;
 8016692:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016694:	6878      	ldr	r0, [r7, #4]
 8016696:	f7f6 fb69 	bl	800cd6c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801669a:	e00a      	b.n	80166b2 <icmp_input+0x232>
        goto icmperr;
 801669c:	bf00      	nop
 801669e:	e004      	b.n	80166aa <icmp_input+0x22a>
        goto icmperr;
 80166a0:	bf00      	nop
 80166a2:	e002      	b.n	80166aa <icmp_input+0x22a>
          goto icmperr;
 80166a4:	bf00      	nop
 80166a6:	e000      	b.n	80166aa <icmp_input+0x22a>
          goto icmperr;
 80166a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80166aa:	6878      	ldr	r0, [r7, #4]
 80166ac:	f7f6 fb5e 	bl	800cd6c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80166b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80166b2:	3728      	adds	r7, #40	@ 0x28
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	20009320 	.word	0x20009320
 80166bc:	20009334 	.word	0x20009334
 80166c0:	0801c5e0 	.word	0x0801c5e0
 80166c4:	0801c618 	.word	0x0801c618
 80166c8:	0801c650 	.word	0x0801c650
 80166cc:	0801c678 	.word	0x0801c678

080166d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b082      	sub	sp, #8
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	6078      	str	r0, [r7, #4]
 80166d8:	460b      	mov	r3, r1
 80166da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80166dc:	78fb      	ldrb	r3, [r7, #3]
 80166de:	461a      	mov	r2, r3
 80166e0:	2103      	movs	r1, #3
 80166e2:	6878      	ldr	r0, [r7, #4]
 80166e4:	f000 f814 	bl	8016710 <icmp_send_response>
}
 80166e8:	bf00      	nop
 80166ea:	3708      	adds	r7, #8
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b082      	sub	sp, #8
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	460b      	mov	r3, r1
 80166fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80166fc:	78fb      	ldrb	r3, [r7, #3]
 80166fe:	461a      	mov	r2, r3
 8016700:	210b      	movs	r1, #11
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 f804 	bl	8016710 <icmp_send_response>
}
 8016708:	bf00      	nop
 801670a:	3708      	adds	r7, #8
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}

08016710 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016710:	b580      	push	{r7, lr}
 8016712:	b08c      	sub	sp, #48	@ 0x30
 8016714:	af04      	add	r7, sp, #16
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	460b      	mov	r3, r1
 801671a:	70fb      	strb	r3, [r7, #3]
 801671c:	4613      	mov	r3, r2
 801671e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016720:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016724:	2124      	movs	r1, #36	@ 0x24
 8016726:	2022      	movs	r0, #34	@ 0x22
 8016728:	f7f6 f83c 	bl	800c7a4 <pbuf_alloc>
 801672c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801672e:	69fb      	ldr	r3, [r7, #28]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d056      	beq.n	80167e2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016734:	69fb      	ldr	r3, [r7, #28]
 8016736:	895b      	ldrh	r3, [r3, #10]
 8016738:	2b23      	cmp	r3, #35	@ 0x23
 801673a:	d806      	bhi.n	801674a <icmp_send_response+0x3a>
 801673c:	4b2b      	ldr	r3, [pc, #172]	@ (80167ec <icmp_send_response+0xdc>)
 801673e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8016742:	492b      	ldr	r1, [pc, #172]	@ (80167f0 <icmp_send_response+0xe0>)
 8016744:	482b      	ldr	r0, [pc, #172]	@ (80167f4 <icmp_send_response+0xe4>)
 8016746:	f001 fddb 	bl	8018300 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	685b      	ldr	r3, [r3, #4]
 801674e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016750:	69fb      	ldr	r3, [r7, #28]
 8016752:	685b      	ldr	r3, [r3, #4]
 8016754:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016756:	697b      	ldr	r3, [r7, #20]
 8016758:	78fa      	ldrb	r2, [r7, #3]
 801675a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	78ba      	ldrb	r2, [r7, #2]
 8016760:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	2200      	movs	r2, #0
 8016766:	711a      	strb	r2, [r3, #4]
 8016768:	2200      	movs	r2, #0
 801676a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	2200      	movs	r2, #0
 8016770:	719a      	strb	r2, [r3, #6]
 8016772:	2200      	movs	r2, #0
 8016774:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016776:	69fb      	ldr	r3, [r7, #28]
 8016778:	685b      	ldr	r3, [r3, #4]
 801677a:	f103 0008 	add.w	r0, r3, #8
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	221c      	movs	r2, #28
 8016784:	4619      	mov	r1, r3
 8016786:	f001 fe96 	bl	80184b6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801678a:	69bb      	ldr	r3, [r7, #24]
 801678c:	68db      	ldr	r3, [r3, #12]
 801678e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016790:	f107 030c 	add.w	r3, r7, #12
 8016794:	4618      	mov	r0, r3
 8016796:	f000 f82f 	bl	80167f8 <ip4_route>
 801679a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801679c:	693b      	ldr	r3, [r7, #16]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d01b      	beq.n	80167da <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	2200      	movs	r2, #0
 80167a6:	709a      	strb	r2, [r3, #2]
 80167a8:	2200      	movs	r2, #0
 80167aa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80167ac:	69fb      	ldr	r3, [r7, #28]
 80167ae:	895b      	ldrh	r3, [r3, #10]
 80167b0:	4619      	mov	r1, r3
 80167b2:	6978      	ldr	r0, [r7, #20]
 80167b4:	f7f4 ff4c 	bl	800b650 <inet_chksum>
 80167b8:	4603      	mov	r3, r0
 80167ba:	461a      	mov	r2, r3
 80167bc:	697b      	ldr	r3, [r7, #20]
 80167be:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80167c0:	f107 020c 	add.w	r2, r7, #12
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	9302      	str	r3, [sp, #8]
 80167c8:	2301      	movs	r3, #1
 80167ca:	9301      	str	r3, [sp, #4]
 80167cc:	2300      	movs	r3, #0
 80167ce:	9300      	str	r3, [sp, #0]
 80167d0:	23ff      	movs	r3, #255	@ 0xff
 80167d2:	2100      	movs	r1, #0
 80167d4:	69f8      	ldr	r0, [r7, #28]
 80167d6:	f000 f9f7 	bl	8016bc8 <ip4_output_if>
  }
  pbuf_free(q);
 80167da:	69f8      	ldr	r0, [r7, #28]
 80167dc:	f7f6 fac6 	bl	800cd6c <pbuf_free>
 80167e0:	e000      	b.n	80167e4 <icmp_send_response+0xd4>
    return;
 80167e2:	bf00      	nop
}
 80167e4:	3720      	adds	r7, #32
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	0801c5e0 	.word	0x0801c5e0
 80167f0:	0801c6ac 	.word	0x0801c6ac
 80167f4:	0801c650 	.word	0x0801c650

080167f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80167f8:	b480      	push	{r7}
 80167fa:	b085      	sub	sp, #20
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016800:	4b33      	ldr	r3, [pc, #204]	@ (80168d0 <ip4_route+0xd8>)
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	60fb      	str	r3, [r7, #12]
 8016806:	e036      	b.n	8016876 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801680e:	f003 0301 	and.w	r3, r3, #1
 8016812:	b2db      	uxtb	r3, r3
 8016814:	2b00      	cmp	r3, #0
 8016816:	d02b      	beq.n	8016870 <ip4_route+0x78>
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801681e:	089b      	lsrs	r3, r3, #2
 8016820:	f003 0301 	and.w	r3, r3, #1
 8016824:	b2db      	uxtb	r3, r3
 8016826:	2b00      	cmp	r3, #0
 8016828:	d022      	beq.n	8016870 <ip4_route+0x78>
 801682a:	68fb      	ldr	r3, [r7, #12]
 801682c:	3304      	adds	r3, #4
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	d01d      	beq.n	8016870 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	3304      	adds	r3, #4
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	405a      	eors	r2, r3
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	3308      	adds	r3, #8
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	4013      	ands	r3, r2
 8016848:	2b00      	cmp	r3, #0
 801684a:	d101      	bne.n	8016850 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	e038      	b.n	80168c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016856:	f003 0302 	and.w	r3, r3, #2
 801685a:	2b00      	cmp	r3, #0
 801685c:	d108      	bne.n	8016870 <ip4_route+0x78>
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	681a      	ldr	r2, [r3, #0]
 8016862:	68fb      	ldr	r3, [r7, #12]
 8016864:	330c      	adds	r3, #12
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	429a      	cmp	r2, r3
 801686a:	d101      	bne.n	8016870 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	e028      	b.n	80168c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	60fb      	str	r3, [r7, #12]
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d1c5      	bne.n	8016808 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801687c:	4b15      	ldr	r3, [pc, #84]	@ (80168d4 <ip4_route+0xdc>)
 801687e:	681b      	ldr	r3, [r3, #0]
 8016880:	2b00      	cmp	r3, #0
 8016882:	d01a      	beq.n	80168ba <ip4_route+0xc2>
 8016884:	4b13      	ldr	r3, [pc, #76]	@ (80168d4 <ip4_route+0xdc>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801688c:	f003 0301 	and.w	r3, r3, #1
 8016890:	2b00      	cmp	r3, #0
 8016892:	d012      	beq.n	80168ba <ip4_route+0xc2>
 8016894:	4b0f      	ldr	r3, [pc, #60]	@ (80168d4 <ip4_route+0xdc>)
 8016896:	681b      	ldr	r3, [r3, #0]
 8016898:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801689c:	f003 0304 	and.w	r3, r3, #4
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d00a      	beq.n	80168ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80168a4:	4b0b      	ldr	r3, [pc, #44]	@ (80168d4 <ip4_route+0xdc>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	3304      	adds	r3, #4
 80168aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d004      	beq.n	80168ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	b2db      	uxtb	r3, r3
 80168b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80168b8:	d101      	bne.n	80168be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80168ba:	2300      	movs	r3, #0
 80168bc:	e001      	b.n	80168c2 <ip4_route+0xca>
  }

  return netif_default;
 80168be:	4b05      	ldr	r3, [pc, #20]	@ (80168d4 <ip4_route+0xdc>)
 80168c0:	681b      	ldr	r3, [r3, #0]
}
 80168c2:	4618      	mov	r0, r3
 80168c4:	3714      	adds	r7, #20
 80168c6:	46bd      	mov	sp, r7
 80168c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168cc:	4770      	bx	lr
 80168ce:	bf00      	nop
 80168d0:	20015098 	.word	0x20015098
 80168d4:	2001509c 	.word	0x2001509c

080168d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80168e6:	f003 0301 	and.w	r3, r3, #1
 80168ea:	b2db      	uxtb	r3, r3
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d016      	beq.n	801691e <ip4_input_accept+0x46>
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	3304      	adds	r3, #4
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d011      	beq.n	801691e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80168fa:	4b0b      	ldr	r3, [pc, #44]	@ (8016928 <ip4_input_accept+0x50>)
 80168fc:	695a      	ldr	r2, [r3, #20]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	3304      	adds	r3, #4
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	429a      	cmp	r2, r3
 8016906:	d008      	beq.n	801691a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016908:	4b07      	ldr	r3, [pc, #28]	@ (8016928 <ip4_input_accept+0x50>)
 801690a:	695b      	ldr	r3, [r3, #20]
 801690c:	6879      	ldr	r1, [r7, #4]
 801690e:	4618      	mov	r0, r3
 8016910:	f000 fa98 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 8016914:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016916:	2b00      	cmp	r3, #0
 8016918:	d001      	beq.n	801691e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801691a:	2301      	movs	r3, #1
 801691c:	e000      	b.n	8016920 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801691e:	2300      	movs	r3, #0
}
 8016920:	4618      	mov	r0, r3
 8016922:	3708      	adds	r7, #8
 8016924:	46bd      	mov	sp, r7
 8016926:	bd80      	pop	{r7, pc}
 8016928:	20009320 	.word	0x20009320

0801692c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b088      	sub	sp, #32
 8016930:	af00      	add	r7, sp, #0
 8016932:	6078      	str	r0, [r7, #4]
 8016934:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8016936:	2301      	movs	r3, #1
 8016938:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	781b      	ldrb	r3, [r3, #0]
 8016944:	091b      	lsrs	r3, r3, #4
 8016946:	b2db      	uxtb	r3, r3
 8016948:	2b04      	cmp	r3, #4
 801694a:	d004      	beq.n	8016956 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801694c:	6878      	ldr	r0, [r7, #4]
 801694e:	f7f6 fa0d 	bl	800cd6c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016952:	2300      	movs	r3, #0
 8016954:	e130      	b.n	8016bb8 <ip4_input+0x28c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	f003 030f 	and.w	r3, r3, #15
 801695e:	b2db      	uxtb	r3, r3
 8016960:	009b      	lsls	r3, r3, #2
 8016962:	b2db      	uxtb	r3, r3
 8016964:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016966:	69fb      	ldr	r3, [r7, #28]
 8016968:	885b      	ldrh	r3, [r3, #2]
 801696a:	b29b      	uxth	r3, r3
 801696c:	4618      	mov	r0, r3
 801696e:	f7f4 fd27 	bl	800b3c0 <lwip_htons>
 8016972:	4603      	mov	r3, r0
 8016974:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	891b      	ldrh	r3, [r3, #8]
 801697a:	8a3a      	ldrh	r2, [r7, #16]
 801697c:	429a      	cmp	r2, r3
 801697e:	d204      	bcs.n	801698a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8016980:	8a3b      	ldrh	r3, [r7, #16]
 8016982:	4619      	mov	r1, r3
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	f7f6 f86b 	bl	800ca60 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	895b      	ldrh	r3, [r3, #10]
 801698e:	8a7a      	ldrh	r2, [r7, #18]
 8016990:	429a      	cmp	r2, r3
 8016992:	d807      	bhi.n	80169a4 <ip4_input+0x78>
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	891b      	ldrh	r3, [r3, #8]
 8016998:	8a3a      	ldrh	r2, [r7, #16]
 801699a:	429a      	cmp	r2, r3
 801699c:	d802      	bhi.n	80169a4 <ip4_input+0x78>
 801699e:	8a7b      	ldrh	r3, [r7, #18]
 80169a0:	2b13      	cmp	r3, #19
 80169a2:	d804      	bhi.n	80169ae <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f7f6 f9e1 	bl	800cd6c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80169aa:	2300      	movs	r3, #0
 80169ac:	e104      	b.n	8016bb8 <ip4_input+0x28c>
  }

  /* verify checksum */
#if CHECKSUM_CHECK_IP
  IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
    if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 80169ae:	8a7b      	ldrh	r3, [r7, #18]
 80169b0:	4619      	mov	r1, r3
 80169b2:	69f8      	ldr	r0, [r7, #28]
 80169b4:	f7f4 fe4c 	bl	800b650 <inet_chksum>
 80169b8:	4603      	mov	r3, r0
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d004      	beq.n	80169c8 <ip4_input+0x9c>

      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_hlen)));
      ip4_debug_print(p);
      pbuf_free(p);
 80169be:	6878      	ldr	r0, [r7, #4]
 80169c0:	f7f6 f9d4 	bl	800cd6c <pbuf_free>
      IP_STATS_INC(ip.chkerr);
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinhdrerrors);
      return ERR_OK;
 80169c4:	2300      	movs	r3, #0
 80169c6:	e0f7      	b.n	8016bb8 <ip4_input+0x28c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	691b      	ldr	r3, [r3, #16]
 80169cc:	4a7c      	ldr	r2, [pc, #496]	@ (8016bc0 <ip4_input+0x294>)
 80169ce:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80169d0:	69fb      	ldr	r3, [r7, #28]
 80169d2:	68db      	ldr	r3, [r3, #12]
 80169d4:	4a7a      	ldr	r2, [pc, #488]	@ (8016bc0 <ip4_input+0x294>)
 80169d6:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80169d8:	4b79      	ldr	r3, [pc, #484]	@ (8016bc0 <ip4_input+0x294>)
 80169da:	695b      	ldr	r3, [r3, #20]
 80169dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80169e0:	2be0      	cmp	r3, #224	@ 0xe0
 80169e2:	d112      	bne.n	8016a0a <ip4_input+0xde>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80169ea:	f003 0301 	and.w	r3, r3, #1
 80169ee:	b2db      	uxtb	r3, r3
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d007      	beq.n	8016a04 <ip4_input+0xd8>
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	3304      	adds	r3, #4
 80169f8:	681b      	ldr	r3, [r3, #0]
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d002      	beq.n	8016a04 <ip4_input+0xd8>
      netif = inp;
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	61bb      	str	r3, [r7, #24]
 8016a02:	e02a      	b.n	8016a5a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8016a04:	2300      	movs	r3, #0
 8016a06:	61bb      	str	r3, [r7, #24]
 8016a08:	e027      	b.n	8016a5a <ip4_input+0x12e>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016a0a:	6838      	ldr	r0, [r7, #0]
 8016a0c:	f7ff ff64 	bl	80168d8 <ip4_input_accept>
 8016a10:	4603      	mov	r3, r0
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d002      	beq.n	8016a1c <ip4_input+0xf0>
      netif = inp;
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	61bb      	str	r3, [r7, #24]
 8016a1a:	e01e      	b.n	8016a5a <ip4_input+0x12e>
    } else {
      netif = NULL;
 8016a1c:	2300      	movs	r3, #0
 8016a1e:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016a20:	4b67      	ldr	r3, [pc, #412]	@ (8016bc0 <ip4_input+0x294>)
 8016a22:	695b      	ldr	r3, [r3, #20]
 8016a24:	b2db      	uxtb	r3, r3
 8016a26:	2b7f      	cmp	r3, #127	@ 0x7f
 8016a28:	d017      	beq.n	8016a5a <ip4_input+0x12e>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016a2a:	4b66      	ldr	r3, [pc, #408]	@ (8016bc4 <ip4_input+0x298>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	61bb      	str	r3, [r7, #24]
 8016a30:	e00e      	b.n	8016a50 <ip4_input+0x124>
          if (netif == inp) {
 8016a32:	69ba      	ldr	r2, [r7, #24]
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d006      	beq.n	8016a48 <ip4_input+0x11c>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016a3a:	69b8      	ldr	r0, [r7, #24]
 8016a3c:	f7ff ff4c 	bl	80168d8 <ip4_input_accept>
 8016a40:	4603      	mov	r3, r0
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d108      	bne.n	8016a58 <ip4_input+0x12c>
 8016a46:	e000      	b.n	8016a4a <ip4_input+0x11e>
            continue;
 8016a48:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016a4a:	69bb      	ldr	r3, [r7, #24]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	61bb      	str	r3, [r7, #24]
 8016a50:	69bb      	ldr	r3, [r7, #24]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d1ed      	bne.n	8016a32 <ip4_input+0x106>
 8016a56:	e000      	b.n	8016a5a <ip4_input+0x12e>
            break;
 8016a58:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d111      	bne.n	8016a84 <ip4_input+0x158>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8016a60:	69fb      	ldr	r3, [r7, #28]
 8016a62:	7a5b      	ldrb	r3, [r3, #9]
 8016a64:	2b11      	cmp	r3, #17
 8016a66:	d10d      	bne.n	8016a84 <ip4_input+0x158>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8016a68:	8a7b      	ldrh	r3, [r7, #18]
 8016a6a:	69fa      	ldr	r2, [r7, #28]
 8016a6c:	4413      	add	r3, r2
 8016a6e:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	885b      	ldrh	r3, [r3, #2]
 8016a74:	b29b      	uxth	r3, r3
 8016a76:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8016a7a:	d103      	bne.n	8016a84 <ip4_input+0x158>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016a7c:	683b      	ldr	r3, [r7, #0]
 8016a7e:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8016a80:	2300      	movs	r3, #0
 8016a82:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8016a84:	697b      	ldr	r3, [r7, #20]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d017      	beq.n	8016aba <ip4_input+0x18e>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016a8a:	4b4d      	ldr	r3, [pc, #308]	@ (8016bc0 <ip4_input+0x294>)
 8016a8c:	691b      	ldr	r3, [r3, #16]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d013      	beq.n	8016aba <ip4_input+0x18e>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016a92:	4b4b      	ldr	r3, [pc, #300]	@ (8016bc0 <ip4_input+0x294>)
 8016a94:	691b      	ldr	r3, [r3, #16]
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f000 f9d3 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d105      	bne.n	8016ab0 <ip4_input+0x184>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016aa4:	4b46      	ldr	r3, [pc, #280]	@ (8016bc0 <ip4_input+0x294>)
 8016aa6:	691b      	ldr	r3, [r3, #16]
 8016aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016aac:	2be0      	cmp	r3, #224	@ 0xe0
 8016aae:	d104      	bne.n	8016aba <ip4_input+0x18e>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f7f6 f95b 	bl	800cd6c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016ab6:	2300      	movs	r3, #0
 8016ab8:	e07e      	b.n	8016bb8 <ip4_input+0x28c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d104      	bne.n	8016aca <ip4_input+0x19e>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f7f6 f953 	bl	800cd6c <pbuf_free>
    return ERR_OK;
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	e076      	b.n	8016bb8 <ip4_input+0x28c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016aca:	69fb      	ldr	r3, [r7, #28]
 8016acc:	88db      	ldrh	r3, [r3, #6]
 8016ace:	b29b      	uxth	r3, r3
 8016ad0:	461a      	mov	r2, r3
 8016ad2:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8016ad6:	4013      	ands	r3, r2
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00b      	beq.n	8016af4 <ip4_input+0x1c8>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f000 fcf7 	bl	80174d0 <ip4_reass>
 8016ae2:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d101      	bne.n	8016aee <ip4_input+0x1c2>
      return ERR_OK;
 8016aea:	2300      	movs	r3, #0
 8016aec:	e064      	b.n	8016bb8 <ip4_input+0x28c>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	685b      	ldr	r3, [r3, #4]
 8016af2:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016af4:	4a32      	ldr	r2, [pc, #200]	@ (8016bc0 <ip4_input+0x294>)
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016afa:	4a31      	ldr	r2, [pc, #196]	@ (8016bc0 <ip4_input+0x294>)
 8016afc:	683b      	ldr	r3, [r7, #0]
 8016afe:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016b00:	4a2f      	ldr	r2, [pc, #188]	@ (8016bc0 <ip4_input+0x294>)
 8016b02:	69fb      	ldr	r3, [r7, #28]
 8016b04:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	781b      	ldrb	r3, [r3, #0]
 8016b0a:	f003 030f 	and.w	r3, r3, #15
 8016b0e:	b2db      	uxtb	r3, r3
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	b2db      	uxtb	r3, r3
 8016b14:	461a      	mov	r2, r3
 8016b16:	4b2a      	ldr	r3, [pc, #168]	@ (8016bc0 <ip4_input+0x294>)
 8016b18:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016b1a:	8a7b      	ldrh	r3, [r7, #18]
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f7f6 f89e 	bl	800cc60 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016b24:	69fb      	ldr	r3, [r7, #28]
 8016b26:	7a5b      	ldrb	r3, [r3, #9]
 8016b28:	2b11      	cmp	r3, #17
 8016b2a:	d006      	beq.n	8016b3a <ip4_input+0x20e>
 8016b2c:	2b11      	cmp	r3, #17
 8016b2e:	dc13      	bgt.n	8016b58 <ip4_input+0x22c>
 8016b30:	2b01      	cmp	r3, #1
 8016b32:	d00c      	beq.n	8016b4e <ip4_input+0x222>
 8016b34:	2b06      	cmp	r3, #6
 8016b36:	d005      	beq.n	8016b44 <ip4_input+0x218>
 8016b38:	e00e      	b.n	8016b58 <ip4_input+0x22c>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016b3a:	6839      	ldr	r1, [r7, #0]
 8016b3c:	6878      	ldr	r0, [r7, #4]
 8016b3e:	f7fc fa77 	bl	8013030 <udp_input>
        break;
 8016b42:	e026      	b.n	8016b92 <ip4_input+0x266>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016b44:	6839      	ldr	r1, [r7, #0]
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f7f8 f9b6 	bl	800eeb8 <tcp_input>
        break;
 8016b4c:	e021      	b.n	8016b92 <ip4_input+0x266>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016b4e:	6839      	ldr	r1, [r7, #0]
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f7ff fc95 	bl	8016480 <icmp_input>
        break;
 8016b56:	e01c      	b.n	8016b92 <ip4_input+0x266>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016b58:	4b19      	ldr	r3, [pc, #100]	@ (8016bc0 <ip4_input+0x294>)
 8016b5a:	695b      	ldr	r3, [r3, #20]
 8016b5c:	69b9      	ldr	r1, [r7, #24]
 8016b5e:	4618      	mov	r0, r3
 8016b60:	f000 f970 	bl	8016e44 <ip4_addr_isbroadcast_u32>
 8016b64:	4603      	mov	r3, r0
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d10f      	bne.n	8016b8a <ip4_input+0x25e>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016b6a:	4b15      	ldr	r3, [pc, #84]	@ (8016bc0 <ip4_input+0x294>)
 8016b6c:	695b      	ldr	r3, [r3, #20]
 8016b6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016b72:	2be0      	cmp	r3, #224	@ 0xe0
 8016b74:	d009      	beq.n	8016b8a <ip4_input+0x25e>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016b76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	6878      	ldr	r0, [r7, #4]
 8016b7e:	f7f6 f8e2 	bl	800cd46 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016b82:	2102      	movs	r1, #2
 8016b84:	6878      	ldr	r0, [r7, #4]
 8016b86:	f7ff fda3 	bl	80166d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f7f6 f8ee 	bl	800cd6c <pbuf_free>
        break;
 8016b90:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016b92:	4b0b      	ldr	r3, [pc, #44]	@ (8016bc0 <ip4_input+0x294>)
 8016b94:	2200      	movs	r2, #0
 8016b96:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016b98:	4b09      	ldr	r3, [pc, #36]	@ (8016bc0 <ip4_input+0x294>)
 8016b9a:	2200      	movs	r2, #0
 8016b9c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016b9e:	4b08      	ldr	r3, [pc, #32]	@ (8016bc0 <ip4_input+0x294>)
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016ba4:	4b06      	ldr	r3, [pc, #24]	@ (8016bc0 <ip4_input+0x294>)
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016baa:	4b05      	ldr	r3, [pc, #20]	@ (8016bc0 <ip4_input+0x294>)
 8016bac:	2200      	movs	r2, #0
 8016bae:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016bb0:	4b03      	ldr	r3, [pc, #12]	@ (8016bc0 <ip4_input+0x294>)
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016bb6:	2300      	movs	r3, #0
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3720      	adds	r7, #32
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}
 8016bc0:	20009320 	.word	0x20009320
 8016bc4:	20015098 	.word	0x20015098

08016bc8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016bc8:	b580      	push	{r7, lr}
 8016bca:	b08a      	sub	sp, #40	@ 0x28
 8016bcc:	af04      	add	r7, sp, #16
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
 8016bd4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d009      	beq.n	8016bf4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016be0:	68bb      	ldr	r3, [r7, #8]
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d003      	beq.n	8016bee <ip4_output_if+0x26>
 8016be6:	68bb      	ldr	r3, [r7, #8]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d102      	bne.n	8016bf4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bf0:	3304      	adds	r3, #4
 8016bf2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016bf4:	78fa      	ldrb	r2, [r7, #3]
 8016bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bf8:	9302      	str	r3, [sp, #8]
 8016bfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8016bfe:	9301      	str	r3, [sp, #4]
 8016c00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016c04:	9300      	str	r3, [sp, #0]
 8016c06:	4613      	mov	r3, r2
 8016c08:	687a      	ldr	r2, [r7, #4]
 8016c0a:	6979      	ldr	r1, [r7, #20]
 8016c0c:	68f8      	ldr	r0, [r7, #12]
 8016c0e:	f000 f805 	bl	8016c1c <ip4_output_if_src>
 8016c12:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016c14:	4618      	mov	r0, r3
 8016c16:	3718      	adds	r7, #24
 8016c18:	46bd      	mov	sp, r7
 8016c1a:	bd80      	pop	{r7, pc}

08016c1c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b088      	sub	sp, #32
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	60f8      	str	r0, [r7, #12]
 8016c24:	60b9      	str	r1, [r7, #8]
 8016c26:	607a      	str	r2, [r7, #4]
 8016c28:	70fb      	strb	r3, [r7, #3]
{
#endif /* IP_OPTIONS_SEND */
  struct ip_hdr *iphdr;
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	7b9b      	ldrb	r3, [r3, #14]
 8016c32:	2b01      	cmp	r3, #1
 8016c34:	d006      	beq.n	8016c44 <ip4_output_if_src+0x28>
 8016c36:	4b7d      	ldr	r3, [pc, #500]	@ (8016e2c <ip4_output_if_src+0x210>)
 8016c38:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8016c3c:	497c      	ldr	r1, [pc, #496]	@ (8016e30 <ip4_output_if_src+0x214>)
 8016c3e:	487d      	ldr	r0, [pc, #500]	@ (8016e34 <ip4_output_if_src+0x218>)
 8016c40:	f001 fb5e 	bl	8018300 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	f000 80c4 	beq.w	8016dd4 <ip4_output_if_src+0x1b8>
    u16_t ip_hlen = IP_HLEN;
 8016c4c:	2314      	movs	r3, #20
 8016c4e:	82fb      	strh	r3, [r7, #22]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016c50:	2114      	movs	r1, #20
 8016c52:	68f8      	ldr	r0, [r7, #12]
 8016c54:	f7f5 fff4 	bl	800cc40 <pbuf_add_header>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d002      	beq.n	8016c64 <ip4_output_if_src+0x48>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016c5e:	f06f 0301 	mvn.w	r3, #1
 8016c62:	e0df      	b.n	8016e24 <ip4_output_if_src+0x208>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	685b      	ldr	r3, [r3, #4]
 8016c68:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	895b      	ldrh	r3, [r3, #10]
 8016c6e:	2b13      	cmp	r3, #19
 8016c70:	d806      	bhi.n	8016c80 <ip4_output_if_src+0x64>
 8016c72:	4b6e      	ldr	r3, [pc, #440]	@ (8016e2c <ip4_output_if_src+0x210>)
 8016c74:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8016c78:	496f      	ldr	r1, [pc, #444]	@ (8016e38 <ip4_output_if_src+0x21c>)
 8016c7a:	486e      	ldr	r0, [pc, #440]	@ (8016e34 <ip4_output_if_src+0x218>)
 8016c7c:	f001 fb40 	bl	8018300 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016c80:	69bb      	ldr	r3, [r7, #24]
 8016c82:	78fa      	ldrb	r2, [r7, #3]
 8016c84:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016c86:	69bb      	ldr	r3, [r7, #24]
 8016c88:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016c8c:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8016c8e:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016c92:	78fb      	ldrb	r3, [r7, #3]
 8016c94:	021b      	lsls	r3, r3, #8
 8016c96:	4313      	orrs	r3, r2
 8016c98:	021b      	lsls	r3, r3, #8
 8016c9a:	b21a      	sxth	r2, r3
 8016c9c:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8016ca0:	78fb      	ldrb	r3, [r7, #3]
 8016ca2:	021b      	lsls	r3, r3, #8
 8016ca4:	430b      	orrs	r3, r1
 8016ca6:	121b      	asrs	r3, r3, #8
 8016ca8:	b21b      	sxth	r3, r3
 8016caa:	b2db      	uxtb	r3, r3
 8016cac:	b21b      	sxth	r3, r3
 8016cae:	4313      	orrs	r3, r2
 8016cb0:	b21b      	sxth	r3, r3
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	461a      	mov	r2, r3
 8016cb6:	69fb      	ldr	r3, [r7, #28]
 8016cb8:	4413      	add	r3, r2
 8016cba:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681a      	ldr	r2, [r3, #0]
 8016cc0:	69bb      	ldr	r3, [r7, #24]
 8016cc2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 8016cc4:	69bb      	ldr	r3, [r7, #24]
 8016cc6:	691b      	ldr	r3, [r3, #16]
 8016cc8:	b29b      	uxth	r3, r3
 8016cca:	69fa      	ldr	r2, [r7, #28]
 8016ccc:	4413      	add	r3, r2
 8016cce:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8016cd0:	69bb      	ldr	r3, [r7, #24]
 8016cd2:	691b      	ldr	r3, [r3, #16]
 8016cd4:	0c1b      	lsrs	r3, r3, #16
 8016cd6:	69fa      	ldr	r2, [r7, #28]
 8016cd8:	4413      	add	r3, r2
 8016cda:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016cdc:	8afb      	ldrh	r3, [r7, #22]
 8016cde:	089b      	lsrs	r3, r3, #2
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	b2db      	uxtb	r3, r3
 8016ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016ce8:	b2da      	uxtb	r2, r3
 8016cea:	69bb      	ldr	r3, [r7, #24]
 8016cec:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016cee:	69bb      	ldr	r3, [r7, #24]
 8016cf0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016cf4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8016cf6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016cfa:	69bb      	ldr	r3, [r7, #24]
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	021b      	lsls	r3, r3, #8
 8016d00:	4313      	orrs	r3, r2
 8016d02:	021b      	lsls	r3, r3, #8
 8016d04:	b21a      	sxth	r2, r3
 8016d06:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8016d0a:	69bb      	ldr	r3, [r7, #24]
 8016d0c:	781b      	ldrb	r3, [r3, #0]
 8016d0e:	021b      	lsls	r3, r3, #8
 8016d10:	430b      	orrs	r3, r1
 8016d12:	121b      	asrs	r3, r3, #8
 8016d14:	b21b      	sxth	r3, r3
 8016d16:	b2db      	uxtb	r3, r3
 8016d18:	b21b      	sxth	r3, r3
 8016d1a:	4313      	orrs	r3, r2
 8016d1c:	b21b      	sxth	r3, r3
 8016d1e:	b29b      	uxth	r3, r3
 8016d20:	461a      	mov	r2, r3
 8016d22:	69fb      	ldr	r3, [r7, #28]
 8016d24:	4413      	add	r3, r2
 8016d26:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8016d28:	68fb      	ldr	r3, [r7, #12]
 8016d2a:	891b      	ldrh	r3, [r3, #8]
 8016d2c:	4618      	mov	r0, r3
 8016d2e:	f7f4 fb47 	bl	800b3c0 <lwip_htons>
 8016d32:	4603      	mov	r3, r0
 8016d34:	461a      	mov	r2, r3
 8016d36:	69bb      	ldr	r3, [r7, #24]
 8016d38:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	885b      	ldrh	r3, [r3, #2]
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	461a      	mov	r2, r3
 8016d42:	69fb      	ldr	r3, [r7, #28]
 8016d44:	4413      	add	r3, r2
 8016d46:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8016d48:	69bb      	ldr	r3, [r7, #24]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	719a      	strb	r2, [r3, #6]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016d52:	4b3a      	ldr	r3, [pc, #232]	@ (8016e3c <ip4_output_if_src+0x220>)
 8016d54:	881b      	ldrh	r3, [r3, #0]
 8016d56:	4618      	mov	r0, r3
 8016d58:	f7f4 fb32 	bl	800b3c0 <lwip_htons>
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	461a      	mov	r2, r3
 8016d60:	69bb      	ldr	r3, [r7, #24]
 8016d62:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
 8016d64:	69bb      	ldr	r3, [r7, #24]
 8016d66:	889b      	ldrh	r3, [r3, #4]
 8016d68:	b29b      	uxth	r3, r3
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	69fb      	ldr	r3, [r7, #28]
 8016d6e:	4413      	add	r3, r2
 8016d70:	61fb      	str	r3, [r7, #28]
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016d72:	4b32      	ldr	r3, [pc, #200]	@ (8016e3c <ip4_output_if_src+0x220>)
 8016d74:	881b      	ldrh	r3, [r3, #0]
 8016d76:	3301      	adds	r3, #1
 8016d78:	b29a      	uxth	r2, r3
 8016d7a:	4b30      	ldr	r3, [pc, #192]	@ (8016e3c <ip4_output_if_src+0x220>)
 8016d7c:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d104      	bne.n	8016d8e <ip4_output_if_src+0x172>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8016d84:	4b2e      	ldr	r3, [pc, #184]	@ (8016e40 <ip4_output_if_src+0x224>)
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	69bb      	ldr	r3, [r7, #24]
 8016d8a:	60da      	str	r2, [r3, #12]
 8016d8c:	e003      	b.n	8016d96 <ip4_output_if_src+0x17a>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	681a      	ldr	r2, [r3, #0]
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	60da      	str	r2, [r3, #12]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8016d96:	69bb      	ldr	r3, [r7, #24]
 8016d98:	68db      	ldr	r3, [r3, #12]
 8016d9a:	b29b      	uxth	r3, r3
 8016d9c:	69fa      	ldr	r2, [r7, #28]
 8016d9e:	4413      	add	r3, r2
 8016da0:	61fb      	str	r3, [r7, #28]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8016da2:	69bb      	ldr	r3, [r7, #24]
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	0c1b      	lsrs	r3, r3, #16
 8016da8:	69fa      	ldr	r2, [r7, #28]
 8016daa:	4413      	add	r3, r2
 8016dac:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	0c1a      	lsrs	r2, r3, #16
 8016db2:	69fb      	ldr	r3, [r7, #28]
 8016db4:	b29b      	uxth	r3, r3
 8016db6:	4413      	add	r3, r2
 8016db8:	61fb      	str	r3, [r7, #28]
    chk_sum = (chk_sum >> 16) + chk_sum;
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	0c1b      	lsrs	r3, r3, #16
 8016dbe:	69fa      	ldr	r2, [r7, #28]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	61fb      	str	r3, [r7, #28]
    chk_sum = ~chk_sum;
 8016dc4:	69fb      	ldr	r3, [r7, #28]
 8016dc6:	43db      	mvns	r3, r3
 8016dc8:	61fb      	str	r3, [r7, #28]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8016dca:	69fb      	ldr	r3, [r7, #28]
 8016dcc:	b29a      	uxth	r2, r3
 8016dce:	69bb      	ldr	r3, [r7, #24]
 8016dd0:	815a      	strh	r2, [r3, #10]
 8016dd2:	e00f      	b.n	8016df4 <ip4_output_if_src+0x1d8>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	895b      	ldrh	r3, [r3, #10]
 8016dd8:	2b13      	cmp	r3, #19
 8016dda:	d802      	bhi.n	8016de2 <ip4_output_if_src+0x1c6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016ddc:	f06f 0301 	mvn.w	r3, #1
 8016de0:	e020      	b.n	8016e24 <ip4_output_if_src+0x208>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	685b      	ldr	r3, [r3, #4]
 8016de6:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016de8:	69bb      	ldr	r3, [r7, #24]
 8016dea:	691b      	ldr	r3, [r3, #16]
 8016dec:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8016dee:	f107 0310 	add.w	r3, r7, #16
 8016df2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d00c      	beq.n	8016e16 <ip4_output_if_src+0x1fa>
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	891a      	ldrh	r2, [r3, #8]
 8016e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016e04:	429a      	cmp	r2, r3
 8016e06:	d906      	bls.n	8016e16 <ip4_output_if_src+0x1fa>
    return ip4_frag(p, netif, dest);
 8016e08:	687a      	ldr	r2, [r7, #4]
 8016e0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016e0c:	68f8      	ldr	r0, [r7, #12]
 8016e0e:	f000 fd5b 	bl	80178c8 <ip4_frag>
 8016e12:	4603      	mov	r3, r0
 8016e14:	e006      	b.n	8016e24 <ip4_output_if_src+0x208>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016e18:	695b      	ldr	r3, [r3, #20]
 8016e1a:	687a      	ldr	r2, [r7, #4]
 8016e1c:	68f9      	ldr	r1, [r7, #12]
 8016e1e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016e20:	4798      	blx	r3
 8016e22:	4603      	mov	r3, r0
}
 8016e24:	4618      	mov	r0, r3
 8016e26:	3720      	adds	r7, #32
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd80      	pop	{r7, pc}
 8016e2c:	0801c6d8 	.word	0x0801c6d8
 8016e30:	0801c70c 	.word	0x0801c70c
 8016e34:	0801c718 	.word	0x0801c718
 8016e38:	0801c740 	.word	0x0801c740
 8016e3c:	2001522a 	.word	0x2001522a
 8016e40:	0801cb98 	.word	0x0801cb98

08016e44 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b085      	sub	sp, #20
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	6078      	str	r0, [r7, #4]
 8016e4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e58:	d002      	beq.n	8016e60 <ip4_addr_isbroadcast_u32+0x1c>
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d101      	bne.n	8016e64 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016e60:	2301      	movs	r3, #1
 8016e62:	e02a      	b.n	8016eba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8016e6a:	f003 0302 	and.w	r3, r3, #2
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d101      	bne.n	8016e76 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016e72:	2300      	movs	r3, #0
 8016e74:	e021      	b.n	8016eba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016e76:	683b      	ldr	r3, [r7, #0]
 8016e78:	3304      	adds	r3, #4
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	687a      	ldr	r2, [r7, #4]
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	d101      	bne.n	8016e86 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016e82:	2300      	movs	r3, #0
 8016e84:	e019      	b.n	8016eba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016e86:	68fa      	ldr	r2, [r7, #12]
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	3304      	adds	r3, #4
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	405a      	eors	r2, r3
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	3308      	adds	r3, #8
 8016e94:	681b      	ldr	r3, [r3, #0]
 8016e96:	4013      	ands	r3, r2
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d10d      	bne.n	8016eb8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	3308      	adds	r3, #8
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	43da      	mvns	r2, r3
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	3308      	adds	r3, #8
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d101      	bne.n	8016eb8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	e000      	b.n	8016eba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016eb8:	2300      	movs	r3, #0
  }
}
 8016eba:	4618      	mov	r0, r3
 8016ebc:	3714      	adds	r7, #20
 8016ebe:	46bd      	mov	sp, r7
 8016ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ec4:	4770      	bx	lr
	...

08016ec8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016ec8:	b580      	push	{r7, lr}
 8016eca:	b084      	sub	sp, #16
 8016ecc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016ece:	2300      	movs	r3, #0
 8016ed0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016ed2:	4b12      	ldr	r3, [pc, #72]	@ (8016f1c <ip_reass_tmr+0x54>)
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016ed8:	e018      	b.n	8016f0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	7fdb      	ldrb	r3, [r3, #31]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d00b      	beq.n	8016efa <ip_reass_tmr+0x32>
      r->timer--;
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	7fdb      	ldrb	r3, [r3, #31]
 8016ee6:	3b01      	subs	r3, #1
 8016ee8:	b2da      	uxtb	r2, r3
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	60fb      	str	r3, [r7, #12]
 8016ef8:	e008      	b.n	8016f0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016f04:	68b9      	ldr	r1, [r7, #8]
 8016f06:	6878      	ldr	r0, [r7, #4]
 8016f08:	f000 f80a 	bl	8016f20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d1e3      	bne.n	8016eda <ip_reass_tmr+0x12>
    }
  }
}
 8016f12:	bf00      	nop
 8016f14:	bf00      	nop
 8016f16:	3710      	adds	r7, #16
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	2001522c 	.word	0x2001522c

08016f20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b088      	sub	sp, #32
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	6078      	str	r0, [r7, #4]
 8016f28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016f2a:	2300      	movs	r3, #0
 8016f2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016f2e:	683a      	ldr	r2, [r7, #0]
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d105      	bne.n	8016f42 <ip_reass_free_complete_datagram+0x22>
 8016f36:	4b45      	ldr	r3, [pc, #276]	@ (801704c <ip_reass_free_complete_datagram+0x12c>)
 8016f38:	22ab      	movs	r2, #171	@ 0xab
 8016f3a:	4945      	ldr	r1, [pc, #276]	@ (8017050 <ip_reass_free_complete_datagram+0x130>)
 8016f3c:	4845      	ldr	r0, [pc, #276]	@ (8017054 <ip_reass_free_complete_datagram+0x134>)
 8016f3e:	f001 f9df 	bl	8018300 <iprintf>
  if (prev != NULL) {
 8016f42:	683b      	ldr	r3, [r7, #0]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d00a      	beq.n	8016f5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	687a      	ldr	r2, [r7, #4]
 8016f4e:	429a      	cmp	r2, r3
 8016f50:	d005      	beq.n	8016f5e <ip_reass_free_complete_datagram+0x3e>
 8016f52:	4b3e      	ldr	r3, [pc, #248]	@ (801704c <ip_reass_free_complete_datagram+0x12c>)
 8016f54:	22ad      	movs	r2, #173	@ 0xad
 8016f56:	4940      	ldr	r1, [pc, #256]	@ (8017058 <ip_reass_free_complete_datagram+0x138>)
 8016f58:	483e      	ldr	r0, [pc, #248]	@ (8017054 <ip_reass_free_complete_datagram+0x134>)
 8016f5a:	f001 f9d1 	bl	8018300 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	685b      	ldr	r3, [r3, #4]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	889b      	ldrh	r3, [r3, #4]
 8016f6a:	b29b      	uxth	r3, r3
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d12a      	bne.n	8016fc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016f76:	697b      	ldr	r3, [r7, #20]
 8016f78:	681a      	ldr	r2, [r3, #0]
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016f7e:	69bb      	ldr	r3, [r7, #24]
 8016f80:	6858      	ldr	r0, [r3, #4]
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	3308      	adds	r3, #8
 8016f86:	2214      	movs	r2, #20
 8016f88:	4619      	mov	r1, r3
 8016f8a:	f001 fa94 	bl	80184b6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016f8e:	2101      	movs	r1, #1
 8016f90:	69b8      	ldr	r0, [r7, #24]
 8016f92:	f7ff fbad 	bl	80166f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016f96:	69b8      	ldr	r0, [r7, #24]
 8016f98:	f7f5 ff76 	bl	800ce88 <pbuf_clen>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016fa0:	8bfa      	ldrh	r2, [r7, #30]
 8016fa2:	8a7b      	ldrh	r3, [r7, #18]
 8016fa4:	4413      	add	r3, r2
 8016fa6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016faa:	db05      	blt.n	8016fb8 <ip_reass_free_complete_datagram+0x98>
 8016fac:	4b27      	ldr	r3, [pc, #156]	@ (801704c <ip_reass_free_complete_datagram+0x12c>)
 8016fae:	22bc      	movs	r2, #188	@ 0xbc
 8016fb0:	492a      	ldr	r1, [pc, #168]	@ (801705c <ip_reass_free_complete_datagram+0x13c>)
 8016fb2:	4828      	ldr	r0, [pc, #160]	@ (8017054 <ip_reass_free_complete_datagram+0x134>)
 8016fb4:	f001 f9a4 	bl	8018300 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016fb8:	8bfa      	ldrh	r2, [r7, #30]
 8016fba:	8a7b      	ldrh	r3, [r7, #18]
 8016fbc:	4413      	add	r3, r2
 8016fbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016fc0:	69b8      	ldr	r0, [r7, #24]
 8016fc2:	f7f5 fed3 	bl	800cd6c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	685b      	ldr	r3, [r3, #4]
 8016fca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016fcc:	e01f      	b.n	801700e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016fce:	69bb      	ldr	r3, [r7, #24]
 8016fd0:	685b      	ldr	r3, [r3, #4]
 8016fd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016fd4:	69bb      	ldr	r3, [r7, #24]
 8016fd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016fd8:	697b      	ldr	r3, [r7, #20]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016fde:	68f8      	ldr	r0, [r7, #12]
 8016fe0:	f7f5 ff52 	bl	800ce88 <pbuf_clen>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016fe8:	8bfa      	ldrh	r2, [r7, #30]
 8016fea:	8a7b      	ldrh	r3, [r7, #18]
 8016fec:	4413      	add	r3, r2
 8016fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016ff2:	db05      	blt.n	8017000 <ip_reass_free_complete_datagram+0xe0>
 8016ff4:	4b15      	ldr	r3, [pc, #84]	@ (801704c <ip_reass_free_complete_datagram+0x12c>)
 8016ff6:	22cc      	movs	r2, #204	@ 0xcc
 8016ff8:	4918      	ldr	r1, [pc, #96]	@ (801705c <ip_reass_free_complete_datagram+0x13c>)
 8016ffa:	4816      	ldr	r0, [pc, #88]	@ (8017054 <ip_reass_free_complete_datagram+0x134>)
 8016ffc:	f001 f980 	bl	8018300 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017000:	8bfa      	ldrh	r2, [r7, #30]
 8017002:	8a7b      	ldrh	r3, [r7, #18]
 8017004:	4413      	add	r3, r2
 8017006:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017008:	68f8      	ldr	r0, [r7, #12]
 801700a:	f7f5 feaf 	bl	800cd6c <pbuf_free>
  while (p != NULL) {
 801700e:	69bb      	ldr	r3, [r7, #24]
 8017010:	2b00      	cmp	r3, #0
 8017012:	d1dc      	bne.n	8016fce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017014:	6839      	ldr	r1, [r7, #0]
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f000 f8c2 	bl	80171a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801701c:	4b10      	ldr	r3, [pc, #64]	@ (8017060 <ip_reass_free_complete_datagram+0x140>)
 801701e:	881b      	ldrh	r3, [r3, #0]
 8017020:	8bfa      	ldrh	r2, [r7, #30]
 8017022:	429a      	cmp	r2, r3
 8017024:	d905      	bls.n	8017032 <ip_reass_free_complete_datagram+0x112>
 8017026:	4b09      	ldr	r3, [pc, #36]	@ (801704c <ip_reass_free_complete_datagram+0x12c>)
 8017028:	22d2      	movs	r2, #210	@ 0xd2
 801702a:	490e      	ldr	r1, [pc, #56]	@ (8017064 <ip_reass_free_complete_datagram+0x144>)
 801702c:	4809      	ldr	r0, [pc, #36]	@ (8017054 <ip_reass_free_complete_datagram+0x134>)
 801702e:	f001 f967 	bl	8018300 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017032:	4b0b      	ldr	r3, [pc, #44]	@ (8017060 <ip_reass_free_complete_datagram+0x140>)
 8017034:	881a      	ldrh	r2, [r3, #0]
 8017036:	8bfb      	ldrh	r3, [r7, #30]
 8017038:	1ad3      	subs	r3, r2, r3
 801703a:	b29a      	uxth	r2, r3
 801703c:	4b08      	ldr	r3, [pc, #32]	@ (8017060 <ip_reass_free_complete_datagram+0x140>)
 801703e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017040:	8bfb      	ldrh	r3, [r7, #30]
}
 8017042:	4618      	mov	r0, r3
 8017044:	3720      	adds	r7, #32
 8017046:	46bd      	mov	sp, r7
 8017048:	bd80      	pop	{r7, pc}
 801704a:	bf00      	nop
 801704c:	0801c770 	.word	0x0801c770
 8017050:	0801c7ac 	.word	0x0801c7ac
 8017054:	0801c7b8 	.word	0x0801c7b8
 8017058:	0801c7e0 	.word	0x0801c7e0
 801705c:	0801c7f4 	.word	0x0801c7f4
 8017060:	20015230 	.word	0x20015230
 8017064:	0801c814 	.word	0x0801c814

08017068 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b08a      	sub	sp, #40	@ 0x28
 801706c:	af00      	add	r7, sp, #0
 801706e:	6078      	str	r0, [r7, #4]
 8017070:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017072:	2300      	movs	r3, #0
 8017074:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017076:	2300      	movs	r3, #0
 8017078:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801707a:	2300      	movs	r3, #0
 801707c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801707e:	2300      	movs	r3, #0
 8017080:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017082:	2300      	movs	r3, #0
 8017084:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017086:	4b28      	ldr	r3, [pc, #160]	@ (8017128 <ip_reass_remove_oldest_datagram+0xc0>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801708c:	e030      	b.n	80170f0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801708e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017090:	695a      	ldr	r2, [r3, #20]
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	68db      	ldr	r3, [r3, #12]
 8017096:	429a      	cmp	r2, r3
 8017098:	d10c      	bne.n	80170b4 <ip_reass_remove_oldest_datagram+0x4c>
 801709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801709c:	699a      	ldr	r2, [r3, #24]
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	691b      	ldr	r3, [r3, #16]
 80170a2:	429a      	cmp	r2, r3
 80170a4:	d106      	bne.n	80170b4 <ip_reass_remove_oldest_datagram+0x4c>
 80170a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170a8:	899a      	ldrh	r2, [r3, #12]
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	889b      	ldrh	r3, [r3, #4]
 80170ae:	b29b      	uxth	r3, r3
 80170b0:	429a      	cmp	r2, r3
 80170b2:	d014      	beq.n	80170de <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80170b4:	693b      	ldr	r3, [r7, #16]
 80170b6:	3301      	adds	r3, #1
 80170b8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80170ba:	6a3b      	ldr	r3, [r7, #32]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d104      	bne.n	80170ca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80170c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170c2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80170c4:	69fb      	ldr	r3, [r7, #28]
 80170c6:	61bb      	str	r3, [r7, #24]
 80170c8:	e009      	b.n	80170de <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80170ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170cc:	7fda      	ldrb	r2, [r3, #31]
 80170ce:	6a3b      	ldr	r3, [r7, #32]
 80170d0:	7fdb      	ldrb	r3, [r3, #31]
 80170d2:	429a      	cmp	r2, r3
 80170d4:	d803      	bhi.n	80170de <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80170d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170d8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80170da:	69fb      	ldr	r3, [r7, #28]
 80170dc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80170de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d001      	beq.n	80170ea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80170e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170e8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80170ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 80170f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d1cb      	bne.n	801708e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80170f6:	6a3b      	ldr	r3, [r7, #32]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d008      	beq.n	801710e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80170fc:	69b9      	ldr	r1, [r7, #24]
 80170fe:	6a38      	ldr	r0, [r7, #32]
 8017100:	f7ff ff0e 	bl	8016f20 <ip_reass_free_complete_datagram>
 8017104:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017106:	697a      	ldr	r2, [r7, #20]
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	4413      	add	r3, r2
 801710c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801710e:	697a      	ldr	r2, [r7, #20]
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	429a      	cmp	r2, r3
 8017114:	da02      	bge.n	801711c <ip_reass_remove_oldest_datagram+0xb4>
 8017116:	693b      	ldr	r3, [r7, #16]
 8017118:	2b01      	cmp	r3, #1
 801711a:	dcac      	bgt.n	8017076 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801711c:	697b      	ldr	r3, [r7, #20]
}
 801711e:	4618      	mov	r0, r3
 8017120:	3728      	adds	r7, #40	@ 0x28
 8017122:	46bd      	mov	sp, r7
 8017124:	bd80      	pop	{r7, pc}
 8017126:	bf00      	nop
 8017128:	2001522c 	.word	0x2001522c

0801712c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b084      	sub	sp, #16
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017136:	2004      	movs	r0, #4
 8017138:	f7f4 ff70 	bl	800c01c <memp_malloc>
 801713c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d110      	bne.n	8017166 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017144:	6839      	ldr	r1, [r7, #0]
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f7ff ff8e 	bl	8017068 <ip_reass_remove_oldest_datagram>
 801714c:	4602      	mov	r2, r0
 801714e:	683b      	ldr	r3, [r7, #0]
 8017150:	4293      	cmp	r3, r2
 8017152:	dc03      	bgt.n	801715c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017154:	2004      	movs	r0, #4
 8017156:	f7f4 ff61 	bl	800c01c <memp_malloc>
 801715a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d101      	bne.n	8017166 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017162:	2300      	movs	r3, #0
 8017164:	e016      	b.n	8017194 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017166:	2220      	movs	r2, #32
 8017168:	2100      	movs	r1, #0
 801716a:	68f8      	ldr	r0, [r7, #12]
 801716c:	f001 f92d 	bl	80183ca <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	220f      	movs	r2, #15
 8017174:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017176:	4b09      	ldr	r3, [pc, #36]	@ (801719c <ip_reass_enqueue_new_datagram+0x70>)
 8017178:	681a      	ldr	r2, [r3, #0]
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801717e:	4a07      	ldr	r2, [pc, #28]	@ (801719c <ip_reass_enqueue_new_datagram+0x70>)
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	3308      	adds	r3, #8
 8017188:	2214      	movs	r2, #20
 801718a:	6879      	ldr	r1, [r7, #4]
 801718c:	4618      	mov	r0, r3
 801718e:	f001 f992 	bl	80184b6 <memcpy>
  return ipr;
 8017192:	68fb      	ldr	r3, [r7, #12]
}
 8017194:	4618      	mov	r0, r3
 8017196:	3710      	adds	r7, #16
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	2001522c 	.word	0x2001522c

080171a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80171aa:	4b10      	ldr	r3, [pc, #64]	@ (80171ec <ip_reass_dequeue_datagram+0x4c>)
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	687a      	ldr	r2, [r7, #4]
 80171b0:	429a      	cmp	r2, r3
 80171b2:	d104      	bne.n	80171be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	4a0c      	ldr	r2, [pc, #48]	@ (80171ec <ip_reass_dequeue_datagram+0x4c>)
 80171ba:	6013      	str	r3, [r2, #0]
 80171bc:	e00d      	b.n	80171da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d106      	bne.n	80171d2 <ip_reass_dequeue_datagram+0x32>
 80171c4:	4b0a      	ldr	r3, [pc, #40]	@ (80171f0 <ip_reass_dequeue_datagram+0x50>)
 80171c6:	f240 1245 	movw	r2, #325	@ 0x145
 80171ca:	490a      	ldr	r1, [pc, #40]	@ (80171f4 <ip_reass_dequeue_datagram+0x54>)
 80171cc:	480a      	ldr	r0, [pc, #40]	@ (80171f8 <ip_reass_dequeue_datagram+0x58>)
 80171ce:	f001 f897 	bl	8018300 <iprintf>
    prev->next = ipr->next;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681a      	ldr	r2, [r3, #0]
 80171d6:	683b      	ldr	r3, [r7, #0]
 80171d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80171da:	6879      	ldr	r1, [r7, #4]
 80171dc:	2004      	movs	r0, #4
 80171de:	f7f4 ff6f 	bl	800c0c0 <memp_free>
}
 80171e2:	bf00      	nop
 80171e4:	3708      	adds	r7, #8
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}
 80171ea:	bf00      	nop
 80171ec:	2001522c 	.word	0x2001522c
 80171f0:	0801c770 	.word	0x0801c770
 80171f4:	0801c838 	.word	0x0801c838
 80171f8:	0801c7b8 	.word	0x0801c7b8

080171fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b08c      	sub	sp, #48	@ 0x30
 8017200:	af00      	add	r7, sp, #0
 8017202:	60f8      	str	r0, [r7, #12]
 8017204:	60b9      	str	r1, [r7, #8]
 8017206:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017208:	2300      	movs	r3, #0
 801720a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801720c:	2301      	movs	r3, #1
 801720e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017210:	68bb      	ldr	r3, [r7, #8]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	885b      	ldrh	r3, [r3, #2]
 801721a:	b29b      	uxth	r3, r3
 801721c:	4618      	mov	r0, r3
 801721e:	f7f4 f8cf 	bl	800b3c0 <lwip_htons>
 8017222:	4603      	mov	r3, r0
 8017224:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	f003 030f 	and.w	r3, r3, #15
 801722e:	b2db      	uxtb	r3, r3
 8017230:	009b      	lsls	r3, r3, #2
 8017232:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017234:	7e7b      	ldrb	r3, [r7, #25]
 8017236:	b29b      	uxth	r3, r3
 8017238:	8b7a      	ldrh	r2, [r7, #26]
 801723a:	429a      	cmp	r2, r3
 801723c:	d202      	bcs.n	8017244 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801723e:	f04f 33ff 	mov.w	r3, #4294967295
 8017242:	e135      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017244:	7e7b      	ldrb	r3, [r7, #25]
 8017246:	b29b      	uxth	r3, r3
 8017248:	8b7a      	ldrh	r2, [r7, #26]
 801724a:	1ad3      	subs	r3, r2, r3
 801724c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801724e:	69fb      	ldr	r3, [r7, #28]
 8017250:	88db      	ldrh	r3, [r3, #6]
 8017252:	b29b      	uxth	r3, r3
 8017254:	4618      	mov	r0, r3
 8017256:	f7f4 f8b3 	bl	800b3c0 <lwip_htons>
 801725a:	4603      	mov	r3, r0
 801725c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017260:	b29b      	uxth	r3, r3
 8017262:	00db      	lsls	r3, r3, #3
 8017264:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	685b      	ldr	r3, [r3, #4]
 801726a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801726c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801726e:	2200      	movs	r2, #0
 8017270:	701a      	strb	r2, [r3, #0]
 8017272:	2200      	movs	r2, #0
 8017274:	705a      	strb	r2, [r3, #1]
 8017276:	2200      	movs	r2, #0
 8017278:	709a      	strb	r2, [r3, #2]
 801727a:	2200      	movs	r2, #0
 801727c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017280:	8afa      	ldrh	r2, [r7, #22]
 8017282:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017284:	8afa      	ldrh	r2, [r7, #22]
 8017286:	8b7b      	ldrh	r3, [r7, #26]
 8017288:	4413      	add	r3, r2
 801728a:	b29a      	uxth	r2, r3
 801728c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801728e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017292:	88db      	ldrh	r3, [r3, #6]
 8017294:	b29b      	uxth	r3, r3
 8017296:	8afa      	ldrh	r2, [r7, #22]
 8017298:	429a      	cmp	r2, r3
 801729a:	d902      	bls.n	80172a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801729c:	f04f 33ff 	mov.w	r3, #4294967295
 80172a0:	e106      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	685b      	ldr	r3, [r3, #4]
 80172a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80172a8:	e068      	b.n	801737c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80172aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80172b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172b2:	889b      	ldrh	r3, [r3, #4]
 80172b4:	b29a      	uxth	r2, r3
 80172b6:	693b      	ldr	r3, [r7, #16]
 80172b8:	889b      	ldrh	r3, [r3, #4]
 80172ba:	b29b      	uxth	r3, r3
 80172bc:	429a      	cmp	r2, r3
 80172be:	d235      	bcs.n	801732c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80172c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80172c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80172c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d020      	beq.n	801730e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80172cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172ce:	889b      	ldrh	r3, [r3, #4]
 80172d0:	b29a      	uxth	r2, r3
 80172d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172d4:	88db      	ldrh	r3, [r3, #6]
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	429a      	cmp	r2, r3
 80172da:	d307      	bcc.n	80172ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80172dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80172de:	88db      	ldrh	r3, [r3, #6]
 80172e0:	b29a      	uxth	r2, r3
 80172e2:	693b      	ldr	r3, [r7, #16]
 80172e4:	889b      	ldrh	r3, [r3, #4]
 80172e6:	b29b      	uxth	r3, r3
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d902      	bls.n	80172f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80172ec:	f04f 33ff 	mov.w	r3, #4294967295
 80172f0:	e0de      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80172f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172f4:	68ba      	ldr	r2, [r7, #8]
 80172f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80172f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80172fa:	88db      	ldrh	r3, [r3, #6]
 80172fc:	b29a      	uxth	r2, r3
 80172fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017300:	889b      	ldrh	r3, [r3, #4]
 8017302:	b29b      	uxth	r3, r3
 8017304:	429a      	cmp	r2, r3
 8017306:	d03d      	beq.n	8017384 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017308:	2300      	movs	r3, #0
 801730a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801730c:	e03a      	b.n	8017384 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801730e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017310:	88db      	ldrh	r3, [r3, #6]
 8017312:	b29a      	uxth	r2, r3
 8017314:	693b      	ldr	r3, [r7, #16]
 8017316:	889b      	ldrh	r3, [r3, #4]
 8017318:	b29b      	uxth	r3, r3
 801731a:	429a      	cmp	r2, r3
 801731c:	d902      	bls.n	8017324 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801731e:	f04f 33ff 	mov.w	r3, #4294967295
 8017322:	e0c5      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017324:	68fb      	ldr	r3, [r7, #12]
 8017326:	68ba      	ldr	r2, [r7, #8]
 8017328:	605a      	str	r2, [r3, #4]
      break;
 801732a:	e02b      	b.n	8017384 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801732c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801732e:	889b      	ldrh	r3, [r3, #4]
 8017330:	b29a      	uxth	r2, r3
 8017332:	693b      	ldr	r3, [r7, #16]
 8017334:	889b      	ldrh	r3, [r3, #4]
 8017336:	b29b      	uxth	r3, r3
 8017338:	429a      	cmp	r2, r3
 801733a:	d102      	bne.n	8017342 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801733c:	f04f 33ff 	mov.w	r3, #4294967295
 8017340:	e0b6      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017344:	889b      	ldrh	r3, [r3, #4]
 8017346:	b29a      	uxth	r2, r3
 8017348:	693b      	ldr	r3, [r7, #16]
 801734a:	88db      	ldrh	r3, [r3, #6]
 801734c:	b29b      	uxth	r3, r3
 801734e:	429a      	cmp	r2, r3
 8017350:	d202      	bcs.n	8017358 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017352:	f04f 33ff 	mov.w	r3, #4294967295
 8017356:	e0ab      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801735a:	2b00      	cmp	r3, #0
 801735c:	d009      	beq.n	8017372 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801735e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017360:	88db      	ldrh	r3, [r3, #6]
 8017362:	b29a      	uxth	r2, r3
 8017364:	693b      	ldr	r3, [r7, #16]
 8017366:	889b      	ldrh	r3, [r3, #4]
 8017368:	b29b      	uxth	r3, r3
 801736a:	429a      	cmp	r2, r3
 801736c:	d001      	beq.n	8017372 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801736e:	2300      	movs	r3, #0
 8017370:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017378:	693b      	ldr	r3, [r7, #16]
 801737a:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801737e:	2b00      	cmp	r3, #0
 8017380:	d193      	bne.n	80172aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017382:	e000      	b.n	8017386 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017384:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017388:	2b00      	cmp	r3, #0
 801738a:	d12d      	bne.n	80173e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801738c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801738e:	2b00      	cmp	r3, #0
 8017390:	d01c      	beq.n	80173cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017394:	88db      	ldrh	r3, [r3, #6]
 8017396:	b29a      	uxth	r2, r3
 8017398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801739a:	889b      	ldrh	r3, [r3, #4]
 801739c:	b29b      	uxth	r3, r3
 801739e:	429a      	cmp	r2, r3
 80173a0:	d906      	bls.n	80173b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80173a2:	4b45      	ldr	r3, [pc, #276]	@ (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173a4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80173a8:	4944      	ldr	r1, [pc, #272]	@ (80174bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80173aa:	4845      	ldr	r0, [pc, #276]	@ (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173ac:	f000 ffa8 	bl	8018300 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80173b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173b2:	68ba      	ldr	r2, [r7, #8]
 80173b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80173b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173b8:	88db      	ldrh	r3, [r3, #6]
 80173ba:	b29a      	uxth	r2, r3
 80173bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80173be:	889b      	ldrh	r3, [r3, #4]
 80173c0:	b29b      	uxth	r3, r3
 80173c2:	429a      	cmp	r2, r3
 80173c4:	d010      	beq.n	80173e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80173c6:	2300      	movs	r3, #0
 80173c8:	623b      	str	r3, [r7, #32]
 80173ca:	e00d      	b.n	80173e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	685b      	ldr	r3, [r3, #4]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d006      	beq.n	80173e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80173d4:	4b38      	ldr	r3, [pc, #224]	@ (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80173d6:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 80173da:	493a      	ldr	r1, [pc, #232]	@ (80174c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80173dc:	4838      	ldr	r0, [pc, #224]	@ (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80173de:	f000 ff8f 	bl	8018300 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80173e2:	68fb      	ldr	r3, [r7, #12]
 80173e4:	68ba      	ldr	r2, [r7, #8]
 80173e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d105      	bne.n	80173fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80173ee:	68fb      	ldr	r3, [r7, #12]
 80173f0:	7f9b      	ldrb	r3, [r3, #30]
 80173f2:	f003 0301 	and.w	r3, r3, #1
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d059      	beq.n	80174ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80173fa:	6a3b      	ldr	r3, [r7, #32]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d04f      	beq.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	685b      	ldr	r3, [r3, #4]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d006      	beq.n	8017416 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	685b      	ldr	r3, [r3, #4]
 801740e:	889b      	ldrh	r3, [r3, #4]
 8017410:	b29b      	uxth	r3, r3
 8017412:	2b00      	cmp	r3, #0
 8017414:	d002      	beq.n	801741c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017416:	2300      	movs	r3, #0
 8017418:	623b      	str	r3, [r7, #32]
 801741a:	e041      	b.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801741c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801741e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017426:	e012      	b.n	801744e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801742a:	685b      	ldr	r3, [r3, #4]
 801742c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801742e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017430:	88db      	ldrh	r3, [r3, #6]
 8017432:	b29a      	uxth	r2, r3
 8017434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017436:	889b      	ldrh	r3, [r3, #4]
 8017438:	b29b      	uxth	r3, r3
 801743a:	429a      	cmp	r2, r3
 801743c:	d002      	beq.n	8017444 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801743e:	2300      	movs	r3, #0
 8017440:	623b      	str	r3, [r7, #32]
            break;
 8017442:	e007      	b.n	8017454 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017446:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801744e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017450:	2b00      	cmp	r3, #0
 8017452:	d1e9      	bne.n	8017428 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017454:	6a3b      	ldr	r3, [r7, #32]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d022      	beq.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	685b      	ldr	r3, [r3, #4]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d106      	bne.n	8017470 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017462:	4b15      	ldr	r3, [pc, #84]	@ (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017464:	f240 12df 	movw	r2, #479	@ 0x1df
 8017468:	4917      	ldr	r1, [pc, #92]	@ (80174c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801746a:	4815      	ldr	r0, [pc, #84]	@ (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801746c:	f000 ff48 	bl	8018300 <iprintf>
          LWIP_ASSERT("sanity check",
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017478:	429a      	cmp	r2, r3
 801747a:	d106      	bne.n	801748a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801747c:	4b0e      	ldr	r3, [pc, #56]	@ (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801747e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017482:	4911      	ldr	r1, [pc, #68]	@ (80174c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017484:	480e      	ldr	r0, [pc, #56]	@ (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017486:	f000 ff3b 	bl	8018300 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801748a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017492:	4b09      	ldr	r3, [pc, #36]	@ (80174b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017494:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017498:	490c      	ldr	r1, [pc, #48]	@ (80174cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801749a:	4809      	ldr	r0, [pc, #36]	@ (80174c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801749c:	f000 ff30 	bl	8018300 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80174a0:	6a3b      	ldr	r3, [r7, #32]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	bf14      	ite	ne
 80174a6:	2301      	movne	r3, #1
 80174a8:	2300      	moveq	r3, #0
 80174aa:	b2db      	uxtb	r3, r3
 80174ac:	e000      	b.n	80174b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3730      	adds	r7, #48	@ 0x30
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}
 80174b8:	0801c770 	.word	0x0801c770
 80174bc:	0801c854 	.word	0x0801c854
 80174c0:	0801c7b8 	.word	0x0801c7b8
 80174c4:	0801c874 	.word	0x0801c874
 80174c8:	0801c8ac 	.word	0x0801c8ac
 80174cc:	0801c8bc 	.word	0x0801c8bc

080174d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b08e      	sub	sp, #56	@ 0x38
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	685b      	ldr	r3, [r3, #4]
 80174dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80174de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e0:	781b      	ldrb	r3, [r3, #0]
 80174e2:	f003 030f 	and.w	r3, r3, #15
 80174e6:	b2db      	uxtb	r3, r3
 80174e8:	009b      	lsls	r3, r3, #2
 80174ea:	b2db      	uxtb	r3, r3
 80174ec:	2b14      	cmp	r3, #20
 80174ee:	f040 8179 	bne.w	80177e4 <ip4_reass+0x314>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80174f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174f4:	88db      	ldrh	r3, [r3, #6]
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f3 ff61 	bl	800b3c0 <lwip_htons>
 80174fe:	4603      	mov	r3, r0
 8017500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017504:	b29b      	uxth	r3, r3
 8017506:	00db      	lsls	r3, r3, #3
 8017508:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801750a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801750c:	885b      	ldrh	r3, [r3, #2]
 801750e:	b29b      	uxth	r3, r3
 8017510:	4618      	mov	r0, r3
 8017512:	f7f3 ff55 	bl	800b3c0 <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801751a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801751c:	781b      	ldrb	r3, [r3, #0]
 801751e:	f003 030f 	and.w	r3, r3, #15
 8017522:	b2db      	uxtb	r3, r3
 8017524:	009b      	lsls	r3, r3, #2
 8017526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801752a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801752e:	b29b      	uxth	r3, r3
 8017530:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017532:	429a      	cmp	r2, r3
 8017534:	f0c0 8158 	bcc.w	80177e8 <ip4_reass+0x318>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017538:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801753c:	b29b      	uxth	r3, r3
 801753e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017540:	1ad3      	subs	r3, r2, r3
 8017542:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017544:	6878      	ldr	r0, [r7, #4]
 8017546:	f7f5 fc9f 	bl	800ce88 <pbuf_clen>
 801754a:	4603      	mov	r3, r0
 801754c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801754e:	4b90      	ldr	r3, [pc, #576]	@ (8017790 <ip4_reass+0x2c0>)
 8017550:	881b      	ldrh	r3, [r3, #0]
 8017552:	461a      	mov	r2, r3
 8017554:	8c3b      	ldrh	r3, [r7, #32]
 8017556:	4413      	add	r3, r2
 8017558:	2b0a      	cmp	r3, #10
 801755a:	dd10      	ble.n	801757e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801755c:	8c3b      	ldrh	r3, [r7, #32]
 801755e:	4619      	mov	r1, r3
 8017560:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017562:	f7ff fd81 	bl	8017068 <ip_reass_remove_oldest_datagram>
 8017566:	4603      	mov	r3, r0
 8017568:	2b00      	cmp	r3, #0
 801756a:	f000 813f 	beq.w	80177ec <ip4_reass+0x31c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801756e:	4b88      	ldr	r3, [pc, #544]	@ (8017790 <ip4_reass+0x2c0>)
 8017570:	881b      	ldrh	r3, [r3, #0]
 8017572:	461a      	mov	r2, r3
 8017574:	8c3b      	ldrh	r3, [r7, #32]
 8017576:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017578:	2b0a      	cmp	r3, #10
 801757a:	f300 8137 	bgt.w	80177ec <ip4_reass+0x31c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801757e:	4b85      	ldr	r3, [pc, #532]	@ (8017794 <ip4_reass+0x2c4>)
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	633b      	str	r3, [r7, #48]	@ 0x30
 8017584:	e015      	b.n	80175b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017588:	695a      	ldr	r2, [r3, #20]
 801758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801758c:	68db      	ldr	r3, [r3, #12]
 801758e:	429a      	cmp	r2, r3
 8017590:	d10c      	bne.n	80175ac <ip4_reass+0xdc>
 8017592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017594:	699a      	ldr	r2, [r3, #24]
 8017596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017598:	691b      	ldr	r3, [r3, #16]
 801759a:	429a      	cmp	r2, r3
 801759c:	d106      	bne.n	80175ac <ip4_reass+0xdc>
 801759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175a0:	899a      	ldrh	r2, [r3, #12]
 80175a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175a4:	889b      	ldrh	r3, [r3, #4]
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	429a      	cmp	r2, r3
 80175aa:	d006      	beq.n	80175ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80175ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80175b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d1e6      	bne.n	8017586 <ip4_reass+0xb6>
 80175b8:	e000      	b.n	80175bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80175ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80175bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d109      	bne.n	80175d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80175c2:	8c3b      	ldrh	r3, [r7, #32]
 80175c4:	4619      	mov	r1, r3
 80175c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80175c8:	f7ff fdb0 	bl	801712c <ip_reass_enqueue_new_datagram>
 80175cc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80175ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d11c      	bne.n	801760e <ip4_reass+0x13e>
      goto nullreturn;
 80175d4:	e10d      	b.n	80177f2 <ip4_reass+0x322>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175d8:	88db      	ldrh	r3, [r3, #6]
 80175da:	b29b      	uxth	r3, r3
 80175dc:	4618      	mov	r0, r3
 80175de:	f7f3 feef 	bl	800b3c0 <lwip_htons>
 80175e2:	4603      	mov	r3, r0
 80175e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175e8:	2b00      	cmp	r3, #0
 80175ea:	d110      	bne.n	801760e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80175ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175ee:	89db      	ldrh	r3, [r3, #14]
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7f3 fee5 	bl	800b3c0 <lwip_htons>
 80175f6:	4603      	mov	r3, r0
 80175f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d006      	beq.n	801760e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017602:	3308      	adds	r3, #8
 8017604:	2214      	movs	r2, #20
 8017606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017608:	4618      	mov	r0, r3
 801760a:	f000 ff54 	bl	80184b6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801760e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017610:	88db      	ldrh	r3, [r3, #6]
 8017612:	b29b      	uxth	r3, r3
 8017614:	f003 0320 	and.w	r3, r3, #32
 8017618:	2b00      	cmp	r3, #0
 801761a:	bf0c      	ite	eq
 801761c:	2301      	moveq	r3, #1
 801761e:	2300      	movne	r3, #0
 8017620:	b2db      	uxtb	r3, r3
 8017622:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017624:	69fb      	ldr	r3, [r7, #28]
 8017626:	2b00      	cmp	r3, #0
 8017628:	d00e      	beq.n	8017648 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801762a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801762c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801762e:	4413      	add	r3, r2
 8017630:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017632:	8b7a      	ldrh	r2, [r7, #26]
 8017634:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017636:	429a      	cmp	r2, r3
 8017638:	f0c0 80a8 	bcc.w	801778c <ip4_reass+0x2bc>
 801763c:	8b7b      	ldrh	r3, [r7, #26]
 801763e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017642:	4293      	cmp	r3, r2
 8017644:	f200 80a2 	bhi.w	801778c <ip4_reass+0x2bc>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017648:	69fa      	ldr	r2, [r7, #28]
 801764a:	6879      	ldr	r1, [r7, #4]
 801764c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801764e:	f7ff fdd5 	bl	80171fc <ip_reass_chain_frag_into_datagram_and_validate>
 8017652:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017654:	697b      	ldr	r3, [r7, #20]
 8017656:	f1b3 3fff 	cmp.w	r3, #4294967295
 801765a:	f000 80a3 	beq.w	80177a4 <ip4_reass+0x2d4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801765e:	4b4c      	ldr	r3, [pc, #304]	@ (8017790 <ip4_reass+0x2c0>)
 8017660:	881a      	ldrh	r2, [r3, #0]
 8017662:	8c3b      	ldrh	r3, [r7, #32]
 8017664:	4413      	add	r3, r2
 8017666:	b29a      	uxth	r2, r3
 8017668:	4b49      	ldr	r3, [pc, #292]	@ (8017790 <ip4_reass+0x2c0>)
 801766a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	2b00      	cmp	r3, #0
 8017670:	d00d      	beq.n	801768e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017672:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017674:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017676:	4413      	add	r3, r2
 8017678:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801767c:	8a7a      	ldrh	r2, [r7, #18]
 801767e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017682:	7f9b      	ldrb	r3, [r3, #30]
 8017684:	f043 0301 	orr.w	r3, r3, #1
 8017688:	b2da      	uxtb	r2, r3
 801768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801768c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801768e:	697b      	ldr	r3, [r7, #20]
 8017690:	2b01      	cmp	r3, #1
 8017692:	d179      	bne.n	8017788 <ip4_reass+0x2b8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017696:	8b9b      	ldrh	r3, [r3, #28]
 8017698:	3314      	adds	r3, #20
 801769a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801769e:	685b      	ldr	r3, [r3, #4]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	681b      	ldr	r3, [r3, #0]
 80176a4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80176a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176a8:	685b      	ldr	r3, [r3, #4]
 80176aa:	685b      	ldr	r3, [r3, #4]
 80176ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80176ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176b0:	3308      	adds	r3, #8
 80176b2:	2214      	movs	r2, #20
 80176b4:	4619      	mov	r1, r3
 80176b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80176b8:	f000 fefd 	bl	80184b6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80176bc:	8a3b      	ldrh	r3, [r7, #16]
 80176be:	4618      	mov	r0, r3
 80176c0:	f7f3 fe7e 	bl	800b3c0 <lwip_htons>
 80176c4:	4603      	mov	r3, r0
 80176c6:	461a      	mov	r2, r3
 80176c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80176cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176ce:	2200      	movs	r2, #0
 80176d0:	719a      	strb	r2, [r3, #6]
 80176d2:	2200      	movs	r2, #0
 80176d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80176d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176d8:	2200      	movs	r2, #0
 80176da:	729a      	strb	r2, [r3, #10]
 80176dc:	2200      	movs	r2, #0
 80176de:	72da      	strb	r2, [r3, #11]
    /* @todo: do we need to set/calculate the correct checksum? */
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80176e0:	2114      	movs	r1, #20
 80176e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80176e4:	f7f3 ffb4 	bl	800b650 <inet_chksum>
 80176e8:	4603      	mov	r3, r0
 80176ea:	461a      	mov	r2, r3
 80176ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176ee:	815a      	strh	r2, [r3, #10]
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80176f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176f2:	685b      	ldr	r3, [r3, #4]
 80176f4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80176f6:	e00d      	b.n	8017714 <ip4_reass+0x244>
      iprh = (struct ip_reass_helper *)r->payload;
 80176f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80176fa:	685b      	ldr	r3, [r3, #4]
 80176fc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80176fe:	2114      	movs	r1, #20
 8017700:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017702:	f7f5 faad 	bl	800cc60 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017706:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017708:	6878      	ldr	r0, [r7, #4]
 801770a:	f7f5 fbfd 	bl	800cf08 <pbuf_cat>
      r = iprh->next_pbuf;
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017716:	2b00      	cmp	r3, #0
 8017718:	d1ee      	bne.n	80176f8 <ip4_reass+0x228>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801771a:	4b1e      	ldr	r3, [pc, #120]	@ (8017794 <ip4_reass+0x2c4>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017720:	429a      	cmp	r2, r3
 8017722:	d102      	bne.n	801772a <ip4_reass+0x25a>
      ipr_prev = NULL;
 8017724:	2300      	movs	r3, #0
 8017726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017728:	e010      	b.n	801774c <ip4_reass+0x27c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801772a:	4b1a      	ldr	r3, [pc, #104]	@ (8017794 <ip4_reass+0x2c4>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017730:	e007      	b.n	8017742 <ip4_reass+0x272>
        if (ipr_prev->next == ipr) {
 8017732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017738:	429a      	cmp	r2, r3
 801773a:	d006      	beq.n	801774a <ip4_reass+0x27a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017744:	2b00      	cmp	r3, #0
 8017746:	d1f4      	bne.n	8017732 <ip4_reass+0x262>
 8017748:	e000      	b.n	801774c <ip4_reass+0x27c>
          break;
 801774a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801774c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801774e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017750:	f7ff fd26 	bl	80171a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017754:	6878      	ldr	r0, [r7, #4]
 8017756:	f7f5 fb97 	bl	800ce88 <pbuf_clen>
 801775a:	4603      	mov	r3, r0
 801775c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801775e:	4b0c      	ldr	r3, [pc, #48]	@ (8017790 <ip4_reass+0x2c0>)
 8017760:	881b      	ldrh	r3, [r3, #0]
 8017762:	8c3a      	ldrh	r2, [r7, #32]
 8017764:	429a      	cmp	r2, r3
 8017766:	d906      	bls.n	8017776 <ip4_reass+0x2a6>
 8017768:	4b0b      	ldr	r3, [pc, #44]	@ (8017798 <ip4_reass+0x2c8>)
 801776a:	f240 229b 	movw	r2, #667	@ 0x29b
 801776e:	490b      	ldr	r1, [pc, #44]	@ (801779c <ip4_reass+0x2cc>)
 8017770:	480b      	ldr	r0, [pc, #44]	@ (80177a0 <ip4_reass+0x2d0>)
 8017772:	f000 fdc5 	bl	8018300 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017776:	4b06      	ldr	r3, [pc, #24]	@ (8017790 <ip4_reass+0x2c0>)
 8017778:	881a      	ldrh	r2, [r3, #0]
 801777a:	8c3b      	ldrh	r3, [r7, #32]
 801777c:	1ad3      	subs	r3, r2, r3
 801777e:	b29a      	uxth	r2, r3
 8017780:	4b03      	ldr	r3, [pc, #12]	@ (8017790 <ip4_reass+0x2c0>)
 8017782:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	e038      	b.n	80177fa <ip4_reass+0x32a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017788:	2300      	movs	r3, #0
 801778a:	e036      	b.n	80177fa <ip4_reass+0x32a>
      goto nullreturn_ipr;
 801778c:	bf00      	nop
 801778e:	e00a      	b.n	80177a6 <ip4_reass+0x2d6>
 8017790:	20015230 	.word	0x20015230
 8017794:	2001522c 	.word	0x2001522c
 8017798:	0801c770 	.word	0x0801c770
 801779c:	0801c8e0 	.word	0x0801c8e0
 80177a0:	0801c7b8 	.word	0x0801c7b8
    goto nullreturn_ipr;
 80177a4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80177a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d106      	bne.n	80177ba <ip4_reass+0x2ea>
 80177ac:	4b15      	ldr	r3, [pc, #84]	@ (8017804 <ip4_reass+0x334>)
 80177ae:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80177b2:	4915      	ldr	r1, [pc, #84]	@ (8017808 <ip4_reass+0x338>)
 80177b4:	4815      	ldr	r0, [pc, #84]	@ (801780c <ip4_reass+0x33c>)
 80177b6:	f000 fda3 	bl	8018300 <iprintf>
  if (ipr->p == NULL) {
 80177ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177bc:	685b      	ldr	r3, [r3, #4]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d116      	bne.n	80177f0 <ip4_reass+0x320>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80177c2:	4b13      	ldr	r3, [pc, #76]	@ (8017810 <ip4_reass+0x340>)
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80177c8:	429a      	cmp	r2, r3
 80177ca:	d006      	beq.n	80177da <ip4_reass+0x30a>
 80177cc:	4b0d      	ldr	r3, [pc, #52]	@ (8017804 <ip4_reass+0x334>)
 80177ce:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80177d2:	4910      	ldr	r1, [pc, #64]	@ (8017814 <ip4_reass+0x344>)
 80177d4:	480d      	ldr	r0, [pc, #52]	@ (801780c <ip4_reass+0x33c>)
 80177d6:	f000 fd93 	bl	8018300 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80177da:	2100      	movs	r1, #0
 80177dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80177de:	f7ff fcdf 	bl	80171a0 <ip_reass_dequeue_datagram>
 80177e2:	e006      	b.n	80177f2 <ip4_reass+0x322>
    goto nullreturn;
 80177e4:	bf00      	nop
 80177e6:	e004      	b.n	80177f2 <ip4_reass+0x322>
    goto nullreturn;
 80177e8:	bf00      	nop
 80177ea:	e002      	b.n	80177f2 <ip4_reass+0x322>
      goto nullreturn;
 80177ec:	bf00      	nop
 80177ee:	e000      	b.n	80177f2 <ip4_reass+0x322>
  }

nullreturn:
 80177f0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80177f2:	6878      	ldr	r0, [r7, #4]
 80177f4:	f7f5 faba 	bl	800cd6c <pbuf_free>
  return NULL;
 80177f8:	2300      	movs	r3, #0
}
 80177fa:	4618      	mov	r0, r3
 80177fc:	3738      	adds	r7, #56	@ 0x38
 80177fe:	46bd      	mov	sp, r7
 8017800:	bd80      	pop	{r7, pc}
 8017802:	bf00      	nop
 8017804:	0801c770 	.word	0x0801c770
 8017808:	0801c8fc 	.word	0x0801c8fc
 801780c:	0801c7b8 	.word	0x0801c7b8
 8017810:	2001522c 	.word	0x2001522c
 8017814:	0801c908 	.word	0x0801c908

08017818 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017818:	b580      	push	{r7, lr}
 801781a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801781c:	2005      	movs	r0, #5
 801781e:	f7f4 fbfd 	bl	800c01c <memp_malloc>
 8017822:	4603      	mov	r3, r0
}
 8017824:	4618      	mov	r0, r3
 8017826:	bd80      	pop	{r7, pc}

08017828 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017828:	b580      	push	{r7, lr}
 801782a:	b082      	sub	sp, #8
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d106      	bne.n	8017844 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017836:	4b07      	ldr	r3, [pc, #28]	@ (8017854 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017838:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801783c:	4906      	ldr	r1, [pc, #24]	@ (8017858 <ip_frag_free_pbuf_custom_ref+0x30>)
 801783e:	4807      	ldr	r0, [pc, #28]	@ (801785c <ip_frag_free_pbuf_custom_ref+0x34>)
 8017840:	f000 fd5e 	bl	8018300 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017844:	6879      	ldr	r1, [r7, #4]
 8017846:	2005      	movs	r0, #5
 8017848:	f7f4 fc3a 	bl	800c0c0 <memp_free>
}
 801784c:	bf00      	nop
 801784e:	3708      	adds	r7, #8
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}
 8017854:	0801c770 	.word	0x0801c770
 8017858:	0801c928 	.word	0x0801c928
 801785c:	0801c7b8 	.word	0x0801c7b8

08017860 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b084      	sub	sp, #16
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	2b00      	cmp	r3, #0
 8017870:	d106      	bne.n	8017880 <ipfrag_free_pbuf_custom+0x20>
 8017872:	4b11      	ldr	r3, [pc, #68]	@ (80178b8 <ipfrag_free_pbuf_custom+0x58>)
 8017874:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8017878:	4910      	ldr	r1, [pc, #64]	@ (80178bc <ipfrag_free_pbuf_custom+0x5c>)
 801787a:	4811      	ldr	r0, [pc, #68]	@ (80178c0 <ipfrag_free_pbuf_custom+0x60>)
 801787c:	f000 fd40 	bl	8018300 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017880:	68fa      	ldr	r2, [r7, #12]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	429a      	cmp	r2, r3
 8017886:	d006      	beq.n	8017896 <ipfrag_free_pbuf_custom+0x36>
 8017888:	4b0b      	ldr	r3, [pc, #44]	@ (80178b8 <ipfrag_free_pbuf_custom+0x58>)
 801788a:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801788e:	490d      	ldr	r1, [pc, #52]	@ (80178c4 <ipfrag_free_pbuf_custom+0x64>)
 8017890:	480b      	ldr	r0, [pc, #44]	@ (80178c0 <ipfrag_free_pbuf_custom+0x60>)
 8017892:	f000 fd35 	bl	8018300 <iprintf>
  if (pcr->original != NULL) {
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	695b      	ldr	r3, [r3, #20]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d004      	beq.n	80178a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	695b      	ldr	r3, [r3, #20]
 80178a2:	4618      	mov	r0, r3
 80178a4:	f7f5 fa62 	bl	800cd6c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80178a8:	68f8      	ldr	r0, [r7, #12]
 80178aa:	f7ff ffbd 	bl	8017828 <ip_frag_free_pbuf_custom_ref>
}
 80178ae:	bf00      	nop
 80178b0:	3710      	adds	r7, #16
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}
 80178b6:	bf00      	nop
 80178b8:	0801c770 	.word	0x0801c770
 80178bc:	0801c934 	.word	0x0801c934
 80178c0:	0801c7b8 	.word	0x0801c7b8
 80178c4:	0801c940 	.word	0x0801c940

080178c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b094      	sub	sp, #80	@ 0x50
 80178cc:	af02      	add	r7, sp, #8
 80178ce:	60f8      	str	r0, [r7, #12]
 80178d0:	60b9      	str	r1, [r7, #8]
 80178d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80178d4:	2300      	movs	r3, #0
 80178d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80178de:	3b14      	subs	r3, #20
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	da00      	bge.n	80178e6 <ip4_frag+0x1e>
 80178e4:	3307      	adds	r3, #7
 80178e6:	10db      	asrs	r3, r3, #3
 80178e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80178ea:	2314      	movs	r3, #20
 80178ec:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 80178f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80178f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80178fa:	781b      	ldrb	r3, [r3, #0]
 80178fc:	f003 030f 	and.w	r3, r3, #15
 8017900:	b2db      	uxtb	r3, r3
 8017902:	009b      	lsls	r3, r3, #2
 8017904:	b2db      	uxtb	r3, r3
 8017906:	2b14      	cmp	r3, #20
 8017908:	d002      	beq.n	8017910 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801790a:	f06f 0305 	mvn.w	r3, #5
 801790e:	e118      	b.n	8017b42 <ip4_frag+0x27a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017910:	68fb      	ldr	r3, [r7, #12]
 8017912:	895b      	ldrh	r3, [r3, #10]
 8017914:	2b13      	cmp	r3, #19
 8017916:	d809      	bhi.n	801792c <ip4_frag+0x64>
 8017918:	4b8c      	ldr	r3, [pc, #560]	@ (8017b4c <ip4_frag+0x284>)
 801791a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801791e:	498c      	ldr	r1, [pc, #560]	@ (8017b50 <ip4_frag+0x288>)
 8017920:	488c      	ldr	r0, [pc, #560]	@ (8017b54 <ip4_frag+0x28c>)
 8017922:	f000 fced 	bl	8018300 <iprintf>
 8017926:	f06f 0305 	mvn.w	r3, #5
 801792a:	e10a      	b.n	8017b42 <ip4_frag+0x27a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801792c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801792e:	88db      	ldrh	r3, [r3, #6]
 8017930:	b29b      	uxth	r3, r3
 8017932:	4618      	mov	r0, r3
 8017934:	f7f3 fd44 	bl	800b3c0 <lwip_htons>
 8017938:	4603      	mov	r3, r0
 801793a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801793c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801793e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017942:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017946:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801794c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	891b      	ldrh	r3, [r3, #8]
 8017952:	3b14      	subs	r3, #20
 8017954:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8017958:	e0e9      	b.n	8017b2e <ip4_frag+0x266>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801795a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801795c:	00db      	lsls	r3, r3, #3
 801795e:	b29b      	uxth	r3, r3
 8017960:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017964:	4293      	cmp	r3, r2
 8017966:	bf28      	it	cs
 8017968:	4613      	movcs	r3, r2
 801796a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801796c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017970:	2114      	movs	r1, #20
 8017972:	200e      	movs	r0, #14
 8017974:	f7f4 ff16 	bl	800c7a4 <pbuf_alloc>
 8017978:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801797a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801797c:	2b00      	cmp	r3, #0
 801797e:	f000 80dd 	beq.w	8017b3c <ip4_frag+0x274>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017984:	895b      	ldrh	r3, [r3, #10]
 8017986:	2b13      	cmp	r3, #19
 8017988:	d806      	bhi.n	8017998 <ip4_frag+0xd0>
 801798a:	4b70      	ldr	r3, [pc, #448]	@ (8017b4c <ip4_frag+0x284>)
 801798c:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8017990:	4971      	ldr	r1, [pc, #452]	@ (8017b58 <ip4_frag+0x290>)
 8017992:	4870      	ldr	r0, [pc, #448]	@ (8017b54 <ip4_frag+0x28c>)
 8017994:	f000 fcb4 	bl	8018300 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799a:	685b      	ldr	r3, [r3, #4]
 801799c:	2214      	movs	r2, #20
 801799e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80179a0:	4618      	mov	r0, r3
 80179a2:	f000 fd88 	bl	80184b6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80179a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80179ac:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80179ae:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80179b2:	e064      	b.n	8017a7e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80179b4:	68fb      	ldr	r3, [r7, #12]
 80179b6:	895a      	ldrh	r2, [r3, #10]
 80179b8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80179ba:	1ad3      	subs	r3, r2, r3
 80179bc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80179be:	68fb      	ldr	r3, [r7, #12]
 80179c0:	895b      	ldrh	r3, [r3, #10]
 80179c2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80179c4:	429a      	cmp	r2, r3
 80179c6:	d906      	bls.n	80179d6 <ip4_frag+0x10e>
 80179c8:	4b60      	ldr	r3, [pc, #384]	@ (8017b4c <ip4_frag+0x284>)
 80179ca:	f240 322d 	movw	r2, #813	@ 0x32d
 80179ce:	4963      	ldr	r1, [pc, #396]	@ (8017b5c <ip4_frag+0x294>)
 80179d0:	4860      	ldr	r0, [pc, #384]	@ (8017b54 <ip4_frag+0x28c>)
 80179d2:	f000 fc95 	bl	8018300 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80179d6:	8bfa      	ldrh	r2, [r7, #30]
 80179d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80179dc:	4293      	cmp	r3, r2
 80179de:	bf28      	it	cs
 80179e0:	4613      	movcs	r3, r2
 80179e2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80179e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d105      	bne.n	80179fa <ip4_frag+0x132>
        poff = 0;
 80179ee:	2300      	movs	r3, #0
 80179f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 80179f2:	68fb      	ldr	r3, [r7, #12]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	60fb      	str	r3, [r7, #12]
        continue;
 80179f8:	e041      	b.n	8017a7e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80179fa:	f7ff ff0d 	bl	8017818 <ip_frag_alloc_pbuf_custom_ref>
 80179fe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017a00:	69bb      	ldr	r3, [r7, #24]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d103      	bne.n	8017a0e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017a06:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017a08:	f7f5 f9b0 	bl	800cd6c <pbuf_free>
        goto memerr;
 8017a0c:	e097      	b.n	8017b3e <ip4_frag+0x276>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017a0e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017a10:	68fb      	ldr	r3, [r7, #12]
 8017a12:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017a14:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8017a16:	4413      	add	r3, r2
 8017a18:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8017a1c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8017a20:	9201      	str	r2, [sp, #4]
 8017a22:	9300      	str	r3, [sp, #0]
 8017a24:	4603      	mov	r3, r0
 8017a26:	2241      	movs	r2, #65	@ 0x41
 8017a28:	2000      	movs	r0, #0
 8017a2a:	f7f4 ffe5 	bl	800c9f8 <pbuf_alloced_custom>
 8017a2e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d106      	bne.n	8017a44 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017a36:	69b8      	ldr	r0, [r7, #24]
 8017a38:	f7ff fef6 	bl	8017828 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017a3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017a3e:	f7f5 f995 	bl	800cd6c <pbuf_free>
        goto memerr;
 8017a42:	e07c      	b.n	8017b3e <ip4_frag+0x276>
      }
      pbuf_ref(p);
 8017a44:	68f8      	ldr	r0, [r7, #12]
 8017a46:	f7f5 fa37 	bl	800ceb8 <pbuf_ref>
      pcr->original = p;
 8017a4a:	69bb      	ldr	r3, [r7, #24]
 8017a4c:	68fa      	ldr	r2, [r7, #12]
 8017a4e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017a50:	69bb      	ldr	r3, [r7, #24]
 8017a52:	4a43      	ldr	r2, [pc, #268]	@ (8017b60 <ip4_frag+0x298>)
 8017a54:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017a56:	6979      	ldr	r1, [r7, #20]
 8017a58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017a5a:	f7f5 fa55 	bl	800cf08 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017a5e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8017a62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017a66:	1ad3      	subs	r3, r2, r3
 8017a68:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8017a6c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d004      	beq.n	8017a7e <ip4_frag+0x1b6>
        poff = 0;
 8017a74:	2300      	movs	r3, #0
 8017a76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017a7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d196      	bne.n	80179b4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017a86:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8017a88:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8017a8c:	4413      	add	r3, r2
 8017a8e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017a90:	68bb      	ldr	r3, [r7, #8]
 8017a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017a94:	f1a3 0213 	sub.w	r2, r3, #19
 8017a98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	bfcc      	ite	gt
 8017aa0:	2301      	movgt	r3, #1
 8017aa2:	2300      	movle	r3, #0
 8017aa4:	b2db      	uxtb	r3, r3
 8017aa6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017aa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8017aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017ab0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 8017ab2:	6a3b      	ldr	r3, [r7, #32]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d002      	beq.n	8017abe <ip4_frag+0x1f6>
 8017ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d003      	beq.n	8017ac6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017abe:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017ac0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017ac4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017ac6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f7f3 fc79 	bl	800b3c0 <lwip_htons>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	461a      	mov	r2, r3
 8017ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ad4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017ad6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017ad8:	3314      	adds	r3, #20
 8017ada:	b29b      	uxth	r3, r3
 8017adc:	4618      	mov	r0, r3
 8017ade:	f7f3 fc6f 	bl	800b3c0 <lwip_htons>
 8017ae2:	4603      	mov	r3, r0
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017ae8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017aec:	2200      	movs	r2, #0
 8017aee:	729a      	strb	r2, [r3, #10]
 8017af0:	2200      	movs	r2, #0
 8017af2:	72da      	strb	r2, [r3, #11]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8017af4:	2114      	movs	r1, #20
 8017af6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017af8:	f7f3 fdaa 	bl	800b650 <inet_chksum>
 8017afc:	4603      	mov	r3, r0
 8017afe:	461a      	mov	r2, r3
 8017b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017b02:	815a      	strh	r2, [r3, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017b04:	68bb      	ldr	r3, [r7, #8]
 8017b06:	695b      	ldr	r3, [r3, #20]
 8017b08:	687a      	ldr	r2, [r7, #4]
 8017b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017b0c:	68b8      	ldr	r0, [r7, #8]
 8017b0e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017b10:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017b12:	f7f5 f92b 	bl	800cd6c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017b16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8017b1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8017b1c:	1ad3      	subs	r3, r2, r3
 8017b1e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 8017b22:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8017b26:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017b28:	4413      	add	r3, r2
 8017b2a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 8017b2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	f47f af11 	bne.w	801795a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017b38:	2300      	movs	r3, #0
 8017b3a:	e002      	b.n	8017b42 <ip4_frag+0x27a>
      goto memerr;
 8017b3c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017b3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b42:	4618      	mov	r0, r3
 8017b44:	3748      	adds	r7, #72	@ 0x48
 8017b46:	46bd      	mov	sp, r7
 8017b48:	bd80      	pop	{r7, pc}
 8017b4a:	bf00      	nop
 8017b4c:	0801c770 	.word	0x0801c770
 8017b50:	0801c94c 	.word	0x0801c94c
 8017b54:	0801c7b8 	.word	0x0801c7b8
 8017b58:	0801c968 	.word	0x0801c968
 8017b5c:	0801c988 	.word	0x0801c988
 8017b60:	08017861 	.word	0x08017861

08017b64 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017b64:	b580      	push	{r7, lr}
 8017b66:	b086      	sub	sp, #24
 8017b68:	af00      	add	r7, sp, #0
 8017b6a:	6078      	str	r0, [r7, #4]
 8017b6c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017b6e:	230e      	movs	r3, #14
 8017b70:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	895b      	ldrh	r3, [r3, #10]
 8017b76:	2b0e      	cmp	r3, #14
 8017b78:	d96e      	bls.n	8017c58 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	7bdb      	ldrb	r3, [r3, #15]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d106      	bne.n	8017b90 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017b88:	3301      	adds	r3, #1
 8017b8a:	b2da      	uxtb	r2, r3
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	685b      	ldr	r3, [r3, #4]
 8017b94:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017b96:	693b      	ldr	r3, [r7, #16]
 8017b98:	7b1a      	ldrb	r2, [r3, #12]
 8017b9a:	7b5b      	ldrb	r3, [r3, #13]
 8017b9c:	021b      	lsls	r3, r3, #8
 8017b9e:	4313      	orrs	r3, r2
 8017ba0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017ba2:	693b      	ldr	r3, [r7, #16]
 8017ba4:	781b      	ldrb	r3, [r3, #0]
 8017ba6:	f003 0301 	and.w	r3, r3, #1
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d023      	beq.n	8017bf6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017bae:	693b      	ldr	r3, [r7, #16]
 8017bb0:	781b      	ldrb	r3, [r3, #0]
 8017bb2:	2b01      	cmp	r3, #1
 8017bb4:	d10f      	bne.n	8017bd6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017bb6:	693b      	ldr	r3, [r7, #16]
 8017bb8:	785b      	ldrb	r3, [r3, #1]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d11b      	bne.n	8017bf6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017bc2:	2b5e      	cmp	r3, #94	@ 0x5e
 8017bc4:	d117      	bne.n	8017bf6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	7b5b      	ldrb	r3, [r3, #13]
 8017bca:	f043 0310 	orr.w	r3, r3, #16
 8017bce:	b2da      	uxtb	r2, r3
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	735a      	strb	r2, [r3, #13]
 8017bd4:	e00f      	b.n	8017bf6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	2206      	movs	r2, #6
 8017bda:	4928      	ldr	r1, [pc, #160]	@ (8017c7c <ethernet_input+0x118>)
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f000 fbe4 	bl	80183aa <memcmp>
 8017be2:	4603      	mov	r3, r0
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d106      	bne.n	8017bf6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	7b5b      	ldrb	r3, [r3, #13]
 8017bec:	f043 0308 	orr.w	r3, r3, #8
 8017bf0:	b2da      	uxtb	r2, r3
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017bf6:	89fb      	ldrh	r3, [r7, #14]
 8017bf8:	2b08      	cmp	r3, #8
 8017bfa:	d003      	beq.n	8017c04 <ethernet_input+0xa0>
 8017bfc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8017c00:	d014      	beq.n	8017c2c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017c02:	e032      	b.n	8017c6a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017c04:	683b      	ldr	r3, [r7, #0]
 8017c06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017c0a:	f003 0308 	and.w	r3, r3, #8
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d024      	beq.n	8017c5c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017c12:	8afb      	ldrh	r3, [r7, #22]
 8017c14:	4619      	mov	r1, r3
 8017c16:	6878      	ldr	r0, [r7, #4]
 8017c18:	f7f5 f822 	bl	800cc60 <pbuf_remove_header>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d11e      	bne.n	8017c60 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017c22:	6839      	ldr	r1, [r7, #0]
 8017c24:	6878      	ldr	r0, [r7, #4]
 8017c26:	f7fe fe81 	bl	801692c <ip4_input>
      break;
 8017c2a:	e013      	b.n	8017c54 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017c32:	f003 0308 	and.w	r3, r3, #8
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d014      	beq.n	8017c64 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017c3a:	8afb      	ldrh	r3, [r7, #22]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	6878      	ldr	r0, [r7, #4]
 8017c40:	f7f5 f80e 	bl	800cc60 <pbuf_remove_header>
 8017c44:	4603      	mov	r3, r0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d10e      	bne.n	8017c68 <ethernet_input+0x104>
        etharp_input(p, netif);
 8017c4a:	6839      	ldr	r1, [r7, #0]
 8017c4c:	6878      	ldr	r0, [r7, #4]
 8017c4e:	f7fd ffef 	bl	8015c30 <etharp_input>
      break;
 8017c52:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017c54:	2300      	movs	r3, #0
 8017c56:	e00c      	b.n	8017c72 <ethernet_input+0x10e>
    goto free_and_return;
 8017c58:	bf00      	nop
 8017c5a:	e006      	b.n	8017c6a <ethernet_input+0x106>
        goto free_and_return;
 8017c5c:	bf00      	nop
 8017c5e:	e004      	b.n	8017c6a <ethernet_input+0x106>
        goto free_and_return;
 8017c60:	bf00      	nop
 8017c62:	e002      	b.n	8017c6a <ethernet_input+0x106>
        goto free_and_return;
 8017c64:	bf00      	nop
 8017c66:	e000      	b.n	8017c6a <ethernet_input+0x106>
        goto free_and_return;
 8017c68:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017c6a:	6878      	ldr	r0, [r7, #4]
 8017c6c:	f7f5 f87e 	bl	800cd6c <pbuf_free>
  return ERR_OK;
 8017c70:	2300      	movs	r3, #0
}
 8017c72:	4618      	mov	r0, r3
 8017c74:	3718      	adds	r7, #24
 8017c76:	46bd      	mov	sp, r7
 8017c78:	bd80      	pop	{r7, pc}
 8017c7a:	bf00      	nop
 8017c7c:	0801cba0 	.word	0x0801cba0

08017c80 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b086      	sub	sp, #24
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	60f8      	str	r0, [r7, #12]
 8017c88:	60b9      	str	r1, [r7, #8]
 8017c8a:	607a      	str	r2, [r7, #4]
 8017c8c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017c8e:	8c3b      	ldrh	r3, [r7, #32]
 8017c90:	4618      	mov	r0, r3
 8017c92:	f7f3 fb95 	bl	800b3c0 <lwip_htons>
 8017c96:	4603      	mov	r3, r0
 8017c98:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017c9a:	210e      	movs	r1, #14
 8017c9c:	68b8      	ldr	r0, [r7, #8]
 8017c9e:	f7f4 ffcf 	bl	800cc40 <pbuf_add_header>
 8017ca2:	4603      	mov	r3, r0
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d125      	bne.n	8017cf4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017ca8:	68bb      	ldr	r3, [r7, #8]
 8017caa:	685b      	ldr	r3, [r3, #4]
 8017cac:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017cae:	693b      	ldr	r3, [r7, #16]
 8017cb0:	8afa      	ldrh	r2, [r7, #22]
 8017cb2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017cb4:	693b      	ldr	r3, [r7, #16]
 8017cb6:	2206      	movs	r2, #6
 8017cb8:	6839      	ldr	r1, [r7, #0]
 8017cba:	4618      	mov	r0, r3
 8017cbc:	f000 fbfb 	bl	80184b6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017cc0:	693b      	ldr	r3, [r7, #16]
 8017cc2:	3306      	adds	r3, #6
 8017cc4:	2206      	movs	r2, #6
 8017cc6:	6879      	ldr	r1, [r7, #4]
 8017cc8:	4618      	mov	r0, r3
 8017cca:	f000 fbf4 	bl	80184b6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017cce:	68fb      	ldr	r3, [r7, #12]
 8017cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017cd4:	2b06      	cmp	r3, #6
 8017cd6:	d006      	beq.n	8017ce6 <ethernet_output+0x66>
 8017cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8017d04 <ethernet_output+0x84>)
 8017cda:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8017cde:	490a      	ldr	r1, [pc, #40]	@ (8017d08 <ethernet_output+0x88>)
 8017ce0:	480a      	ldr	r0, [pc, #40]	@ (8017d0c <ethernet_output+0x8c>)
 8017ce2:	f000 fb0d 	bl	8018300 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	699b      	ldr	r3, [r3, #24]
 8017cea:	68b9      	ldr	r1, [r7, #8]
 8017cec:	68f8      	ldr	r0, [r7, #12]
 8017cee:	4798      	blx	r3
 8017cf0:	4603      	mov	r3, r0
 8017cf2:	e002      	b.n	8017cfa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017cf4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017cf6:	f06f 0301 	mvn.w	r3, #1
}
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	3718      	adds	r7, #24
 8017cfe:	46bd      	mov	sp, r7
 8017d00:	bd80      	pop	{r7, pc}
 8017d02:	bf00      	nop
 8017d04:	0801c998 	.word	0x0801c998
 8017d08:	0801c9d0 	.word	0x0801c9d0
 8017d0c:	0801ca04 	.word	0x0801ca04

08017d10 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b086      	sub	sp, #24
 8017d14:	af00      	add	r7, sp, #0
 8017d16:	6078      	str	r0, [r7, #4]
 8017d18:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8017d1a:	683b      	ldr	r3, [r7, #0]
 8017d1c:	60bb      	str	r3, [r7, #8]
 8017d1e:	2304      	movs	r3, #4
 8017d20:	60fb      	str	r3, [r7, #12]
 8017d22:	2300      	movs	r3, #0
 8017d24:	613b      	str	r3, [r7, #16]
 8017d26:	2300      	movs	r3, #0
 8017d28:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8017d2a:	f107 0308 	add.w	r3, r7, #8
 8017d2e:	2100      	movs	r1, #0
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7ee f9e4 	bl	80060fe <osMessageCreate>
 8017d36:	4602      	mov	r2, r0
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d102      	bne.n	8017d4a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017d44:	f04f 33ff 	mov.w	r3, #4294967295
 8017d48:	e000      	b.n	8017d4c <sys_mbox_new+0x3c>

  return ERR_OK;
 8017d4a:	2300      	movs	r3, #0
}
 8017d4c:	4618      	mov	r0, r3
 8017d4e:	3718      	adds	r7, #24
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b082      	sub	sp, #8
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	4618      	mov	r0, r3
 8017d62:	f7ee faa9 	bl	80062b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	f7ee faba 	bl	80062e4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8017d70:	bf00      	nop
 8017d72:	3708      	adds	r7, #8
 8017d74:	46bd      	mov	sp, r7
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
 8017d80:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8017d82:	bf00      	nop
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	681b      	ldr	r3, [r3, #0]
 8017d88:	6839      	ldr	r1, [r7, #0]
 8017d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8017d8e:	4618      	mov	r0, r3
 8017d90:	f7ee f9de 	bl	8006150 <osMessagePut>
 8017d94:	4603      	mov	r3, r0
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d1f4      	bne.n	8017d84 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8017d9a:	bf00      	nop
 8017d9c:	bf00      	nop
 8017d9e:	3708      	adds	r7, #8
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}

08017da4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8017da4:	b580      	push	{r7, lr}
 8017da6:	b084      	sub	sp, #16
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
 8017dac:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	6839      	ldr	r1, [r7, #0]
 8017db4:	2200      	movs	r2, #0
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ee f9ca 	bl	8006150 <osMessagePut>
 8017dbc:	4603      	mov	r3, r0
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d102      	bne.n	8017dc8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	73fb      	strb	r3, [r7, #15]
 8017dc6:	e001      	b.n	8017dcc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8017dc8:	23ff      	movs	r3, #255	@ 0xff
 8017dca:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8017dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	3710      	adds	r7, #16
 8017dd4:	46bd      	mov	sp, r7
 8017dd6:	bd80      	pop	{r7, pc}

08017dd8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b08c      	sub	sp, #48	@ 0x30
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	61f8      	str	r0, [r7, #28]
 8017de0:	61b9      	str	r1, [r7, #24]
 8017de2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017de4:	f7ed ff9c 	bl	8005d20 <osKernelSysTick>
 8017de8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017dea:	697b      	ldr	r3, [r7, #20]
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d017      	beq.n	8017e20 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017df0:	69fb      	ldr	r3, [r7, #28]
 8017df2:	6819      	ldr	r1, [r3, #0]
 8017df4:	f107 0320 	add.w	r3, r7, #32
 8017df8:	697a      	ldr	r2, [r7, #20]
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	f7ee f9e8 	bl	80061d0 <osMessageGet>

    if(event.status == osEventMessage)
 8017e00:	6a3b      	ldr	r3, [r7, #32]
 8017e02:	2b10      	cmp	r3, #16
 8017e04:	d109      	bne.n	8017e1a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e08:	461a      	mov	r2, r3
 8017e0a:	69bb      	ldr	r3, [r7, #24]
 8017e0c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017e0e:	f7ed ff87 	bl	8005d20 <osKernelSysTick>
 8017e12:	4602      	mov	r2, r0
 8017e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e16:	1ad3      	subs	r3, r2, r3
 8017e18:	e019      	b.n	8017e4e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017e1e:	e016      	b.n	8017e4e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017e20:	69fb      	ldr	r3, [r7, #28]
 8017e22:	6819      	ldr	r1, [r3, #0]
 8017e24:	463b      	mov	r3, r7
 8017e26:	f04f 32ff 	mov.w	r2, #4294967295
 8017e2a:	4618      	mov	r0, r3
 8017e2c:	f7ee f9d0 	bl	80061d0 <osMessageGet>
 8017e30:	f107 0320 	add.w	r3, r7, #32
 8017e34:	463a      	mov	r2, r7
 8017e36:	ca07      	ldmia	r2, {r0, r1, r2}
 8017e38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e3e:	461a      	mov	r2, r3
 8017e40:	69bb      	ldr	r3, [r7, #24]
 8017e42:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017e44:	f7ed ff6c 	bl	8005d20 <osKernelSysTick>
 8017e48:	4602      	mov	r2, r0
 8017e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017e4c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017e4e:	4618      	mov	r0, r3
 8017e50:	3730      	adds	r7, #48	@ 0x30
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}

08017e56 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8017e56:	b580      	push	{r7, lr}
 8017e58:	b086      	sub	sp, #24
 8017e5a:	af00      	add	r7, sp, #0
 8017e5c:	6078      	str	r0, [r7, #4]
 8017e5e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	6819      	ldr	r1, [r3, #0]
 8017e64:	f107 030c 	add.w	r3, r7, #12
 8017e68:	2200      	movs	r2, #0
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7ee f9b0 	bl	80061d0 <osMessageGet>

  if(event.status == osEventMessage)
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	2b10      	cmp	r3, #16
 8017e74:	d105      	bne.n	8017e82 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8017e76:	693b      	ldr	r3, [r7, #16]
 8017e78:	461a      	mov	r2, r3
 8017e7a:	683b      	ldr	r3, [r7, #0]
 8017e7c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	e001      	b.n	8017e86 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8017e82:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8017e86:	4618      	mov	r0, r3
 8017e88:	3718      	adds	r7, #24
 8017e8a:	46bd      	mov	sp, r7
 8017e8c:	bd80      	pop	{r7, pc}

08017e8e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017e8e:	b480      	push	{r7}
 8017e90:	b083      	sub	sp, #12
 8017e92:	af00      	add	r7, sp, #0
 8017e94:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d101      	bne.n	8017ea2 <sys_mbox_valid+0x14>
    return 0;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	e000      	b.n	8017ea4 <sys_mbox_valid+0x16>
  else
    return 1;
 8017ea2:	2301      	movs	r3, #1
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	370c      	adds	r7, #12
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr

08017eb0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	b083      	sub	sp, #12
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	2200      	movs	r2, #0
 8017ebc:	601a      	str	r2, [r3, #0]
}
 8017ebe:	bf00      	nop
 8017ec0:	370c      	adds	r7, #12
 8017ec2:	46bd      	mov	sp, r7
 8017ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ec8:	4770      	bx	lr

08017eca <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8017eca:	b580      	push	{r7, lr}
 8017ecc:	b084      	sub	sp, #16
 8017ece:	af00      	add	r7, sp, #0
 8017ed0:	6078      	str	r0, [r7, #4]
 8017ed2:	460b      	mov	r3, r1
 8017ed4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	60bb      	str	r3, [r7, #8]
 8017eda:	2300      	movs	r3, #0
 8017edc:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8017ede:	f107 0308 	add.w	r3, r7, #8
 8017ee2:	2101      	movs	r1, #1
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	f7ee f833 	bl	8005f50 <osSemaphoreCreate>
 8017eea:	4602      	mov	r2, r0
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d102      	bne.n	8017efe <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8017efc:	e009      	b.n	8017f12 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8017efe:	78fb      	ldrb	r3, [r7, #3]
 8017f00:	2b00      	cmp	r3, #0
 8017f02:	d105      	bne.n	8017f10 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2100      	movs	r1, #0
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f7ee f860 	bl	8005fd0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8017f10:	2300      	movs	r3, #0
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3710      	adds	r7, #16
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bd80      	pop	{r7, pc}

08017f1a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8017f1a:	b580      	push	{r7, lr}
 8017f1c:	b084      	sub	sp, #16
 8017f1e:	af00      	add	r7, sp, #0
 8017f20:	6078      	str	r0, [r7, #4]
 8017f22:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8017f24:	f7ed fefc 	bl	8005d20 <osKernelSysTick>
 8017f28:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8017f2a:	683b      	ldr	r3, [r7, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d011      	beq.n	8017f54 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	6839      	ldr	r1, [r7, #0]
 8017f36:	4618      	mov	r0, r3
 8017f38:	f7ee f84a 	bl	8005fd0 <osSemaphoreWait>
 8017f3c:	4603      	mov	r3, r0
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d105      	bne.n	8017f4e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8017f42:	f7ed feed 	bl	8005d20 <osKernelSysTick>
 8017f46:	4602      	mov	r2, r0
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	1ad3      	subs	r3, r2, r3
 8017f4c:	e012      	b.n	8017f74 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8017f52:	e00f      	b.n	8017f74 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8017f54:	bf00      	nop
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8017f5e:	4618      	mov	r0, r3
 8017f60:	f7ee f836 	bl	8005fd0 <osSemaphoreWait>
 8017f64:	4603      	mov	r3, r0
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d1f5      	bne.n	8017f56 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8017f6a:	f7ed fed9 	bl	8005d20 <osKernelSysTick>
 8017f6e:	4602      	mov	r2, r0
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017f74:	4618      	mov	r0, r3
 8017f76:	3710      	adds	r7, #16
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd80      	pop	{r7, pc}

08017f7c <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8017f7c:	b580      	push	{r7, lr}
 8017f7e:	b082      	sub	sp, #8
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4618      	mov	r0, r3
 8017f8a:	f7ee f86f 	bl	800606c <osSemaphoreRelease>
}
 8017f8e:	bf00      	nop
 8017f90:	3708      	adds	r7, #8
 8017f92:	46bd      	mov	sp, r7
 8017f94:	bd80      	pop	{r7, pc}

08017f96 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8017f96:	b580      	push	{r7, lr}
 8017f98:	b082      	sub	sp, #8
 8017f9a:	af00      	add	r7, sp, #0
 8017f9c:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7ee f898 	bl	80060d8 <osSemaphoreDelete>
}
 8017fa8:	bf00      	nop
 8017faa:	3708      	adds	r7, #8
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8017fb0:	b480      	push	{r7}
 8017fb2:	b083      	sub	sp, #12
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d101      	bne.n	8017fc4 <sys_sem_valid+0x14>
    return 0;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	e000      	b.n	8017fc6 <sys_sem_valid+0x16>
  else
    return 1;
 8017fc4:	2301      	movs	r3, #1
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	370c      	adds	r7, #12
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd0:	4770      	bx	lr

08017fd2 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8017fd2:	b480      	push	{r7}
 8017fd4:	b083      	sub	sp, #12
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	2200      	movs	r2, #0
 8017fde:	601a      	str	r2, [r3, #0]
}
 8017fe0:	bf00      	nop
 8017fe2:	370c      	adds	r7, #12
 8017fe4:	46bd      	mov	sp, r7
 8017fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fea:	4770      	bx	lr

08017fec <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017ff0:	4803      	ldr	r0, [pc, #12]	@ (8018000 <sys_init+0x14>)
 8017ff2:	f7ed ff11 	bl	8005e18 <osMutexCreate>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	4a02      	ldr	r2, [pc, #8]	@ (8018004 <sys_init+0x18>)
 8017ffa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017ffc:	bf00      	nop
 8017ffe:	bd80      	pop	{r7, pc}
 8018000:	0801cbb0 	.word	0x0801cbb0
 8018004:	20015238 	.word	0x20015238

08018008 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018008:	b580      	push	{r7, lr}
 801800a:	b084      	sub	sp, #16
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018010:	2300      	movs	r3, #0
 8018012:	60bb      	str	r3, [r7, #8]
 8018014:	2300      	movs	r3, #0
 8018016:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018018:	f107 0308 	add.w	r3, r7, #8
 801801c:	4618      	mov	r0, r3
 801801e:	f7ed fefb 	bl	8005e18 <osMutexCreate>
 8018022:	4602      	mov	r2, r0
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d102      	bne.n	8018036 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018030:	f04f 33ff 	mov.w	r3, #4294967295
 8018034:	e000      	b.n	8018038 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018036:	2300      	movs	r3, #0
}
 8018038:	4618      	mov	r0, r3
 801803a:	3710      	adds	r7, #16
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	f04f 31ff 	mov.w	r1, #4294967295
 8018050:	4618      	mov	r0, r3
 8018052:	f7ed fef9 	bl	8005e48 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018056:	bf00      	nop
 8018058:	3708      	adds	r7, #8
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}

0801805e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801805e:	b580      	push	{r7, lr}
 8018060:	b082      	sub	sp, #8
 8018062:	af00      	add	r7, sp, #0
 8018064:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	4618      	mov	r0, r3
 801806c:	f7ed ff3a 	bl	8005ee4 <osMutexRelease>
}
 8018070:	bf00      	nop
 8018072:	3708      	adds	r7, #8
 8018074:	46bd      	mov	sp, r7
 8018076:	bd80      	pop	{r7, pc}

08018078 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b08c      	sub	sp, #48	@ 0x30
 801807c:	af00      	add	r7, sp, #0
 801807e:	60f8      	str	r0, [r7, #12]
 8018080:	60b9      	str	r1, [r7, #8]
 8018082:	607a      	str	r2, [r7, #4]
 8018084:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018086:	f107 0314 	add.w	r3, r7, #20
 801808a:	2200      	movs	r2, #0
 801808c:	601a      	str	r2, [r3, #0]
 801808e:	605a      	str	r2, [r3, #4]
 8018090:	609a      	str	r2, [r3, #8]
 8018092:	60da      	str	r2, [r3, #12]
 8018094:	611a      	str	r2, [r3, #16]
 8018096:	615a      	str	r2, [r3, #20]
 8018098:	619a      	str	r2, [r3, #24]
 801809a:	68fb      	ldr	r3, [r7, #12]
 801809c:	617b      	str	r3, [r7, #20]
 801809e:	68bb      	ldr	r3, [r7, #8]
 80180a0:	61bb      	str	r3, [r7, #24]
 80180a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80180a4:	b21b      	sxth	r3, r3
 80180a6:	83bb      	strh	r3, [r7, #28]
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 80180ac:	f107 0314 	add.w	r3, r7, #20
 80180b0:	6879      	ldr	r1, [r7, #4]
 80180b2:	4618      	mov	r0, r3
 80180b4:	f7ed fe44 	bl	8005d40 <osThreadCreate>
 80180b8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80180ba:	4618      	mov	r0, r3
 80180bc:	3730      	adds	r7, #48	@ 0x30
 80180be:	46bd      	mov	sp, r7
 80180c0:	bd80      	pop	{r7, pc}
	...

080180c4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80180c4:	b580      	push	{r7, lr}
 80180c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80180c8:	4b04      	ldr	r3, [pc, #16]	@ (80180dc <sys_arch_protect+0x18>)
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	f04f 31ff 	mov.w	r1, #4294967295
 80180d0:	4618      	mov	r0, r3
 80180d2:	f7ed feb9 	bl	8005e48 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80180d6:	2301      	movs	r3, #1
}
 80180d8:	4618      	mov	r0, r3
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	20015238 	.word	0x20015238

080180e0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80180e0:	b580      	push	{r7, lr}
 80180e2:	b082      	sub	sp, #8
 80180e4:	af00      	add	r7, sp, #0
 80180e6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80180e8:	4b04      	ldr	r3, [pc, #16]	@ (80180fc <sys_arch_unprotect+0x1c>)
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	4618      	mov	r0, r3
 80180ee:	f7ed fef9 	bl	8005ee4 <osMutexRelease>
}
 80180f2:	bf00      	nop
 80180f4:	3708      	adds	r7, #8
 80180f6:	46bd      	mov	sp, r7
 80180f8:	bd80      	pop	{r7, pc}
 80180fa:	bf00      	nop
 80180fc:	20015238 	.word	0x20015238

08018100 <rand>:
 8018100:	4b16      	ldr	r3, [pc, #88]	@ (801815c <rand+0x5c>)
 8018102:	b510      	push	{r4, lr}
 8018104:	681c      	ldr	r4, [r3, #0]
 8018106:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8018108:	b9b3      	cbnz	r3, 8018138 <rand+0x38>
 801810a:	2018      	movs	r0, #24
 801810c:	f000 fa00 	bl	8018510 <malloc>
 8018110:	4602      	mov	r2, r0
 8018112:	6320      	str	r0, [r4, #48]	@ 0x30
 8018114:	b920      	cbnz	r0, 8018120 <rand+0x20>
 8018116:	4b12      	ldr	r3, [pc, #72]	@ (8018160 <rand+0x60>)
 8018118:	4812      	ldr	r0, [pc, #72]	@ (8018164 <rand+0x64>)
 801811a:	2152      	movs	r1, #82	@ 0x52
 801811c:	f000 f9da 	bl	80184d4 <__assert_func>
 8018120:	4911      	ldr	r1, [pc, #68]	@ (8018168 <rand+0x68>)
 8018122:	4b12      	ldr	r3, [pc, #72]	@ (801816c <rand+0x6c>)
 8018124:	e9c0 1300 	strd	r1, r3, [r0]
 8018128:	4b11      	ldr	r3, [pc, #68]	@ (8018170 <rand+0x70>)
 801812a:	6083      	str	r3, [r0, #8]
 801812c:	230b      	movs	r3, #11
 801812e:	8183      	strh	r3, [r0, #12]
 8018130:	2100      	movs	r1, #0
 8018132:	2001      	movs	r0, #1
 8018134:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018138:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801813a:	480e      	ldr	r0, [pc, #56]	@ (8018174 <rand+0x74>)
 801813c:	690b      	ldr	r3, [r1, #16]
 801813e:	694c      	ldr	r4, [r1, #20]
 8018140:	4a0d      	ldr	r2, [pc, #52]	@ (8018178 <rand+0x78>)
 8018142:	4358      	muls	r0, r3
 8018144:	fb02 0004 	mla	r0, r2, r4, r0
 8018148:	fba3 3202 	umull	r3, r2, r3, r2
 801814c:	3301      	adds	r3, #1
 801814e:	eb40 0002 	adc.w	r0, r0, r2
 8018152:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018156:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801815a:	bd10      	pop	{r4, pc}
 801815c:	20000030 	.word	0x20000030
 8018160:	0801cbb8 	.word	0x0801cbb8
 8018164:	0801cbcf 	.word	0x0801cbcf
 8018168:	abcd330e 	.word	0xabcd330e
 801816c:	e66d1234 	.word	0xe66d1234
 8018170:	0005deec 	.word	0x0005deec
 8018174:	5851f42d 	.word	0x5851f42d
 8018178:	4c957f2d 	.word	0x4c957f2d

0801817c <std>:
 801817c:	2300      	movs	r3, #0
 801817e:	b510      	push	{r4, lr}
 8018180:	4604      	mov	r4, r0
 8018182:	e9c0 3300 	strd	r3, r3, [r0]
 8018186:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801818a:	6083      	str	r3, [r0, #8]
 801818c:	8181      	strh	r1, [r0, #12]
 801818e:	6643      	str	r3, [r0, #100]	@ 0x64
 8018190:	81c2      	strh	r2, [r0, #14]
 8018192:	6183      	str	r3, [r0, #24]
 8018194:	4619      	mov	r1, r3
 8018196:	2208      	movs	r2, #8
 8018198:	305c      	adds	r0, #92	@ 0x5c
 801819a:	f000 f916 	bl	80183ca <memset>
 801819e:	4b0d      	ldr	r3, [pc, #52]	@ (80181d4 <std+0x58>)
 80181a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80181a2:	4b0d      	ldr	r3, [pc, #52]	@ (80181d8 <std+0x5c>)
 80181a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80181a6:	4b0d      	ldr	r3, [pc, #52]	@ (80181dc <std+0x60>)
 80181a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80181aa:	4b0d      	ldr	r3, [pc, #52]	@ (80181e0 <std+0x64>)
 80181ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80181ae:	4b0d      	ldr	r3, [pc, #52]	@ (80181e4 <std+0x68>)
 80181b0:	6224      	str	r4, [r4, #32]
 80181b2:	429c      	cmp	r4, r3
 80181b4:	d006      	beq.n	80181c4 <std+0x48>
 80181b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80181ba:	4294      	cmp	r4, r2
 80181bc:	d002      	beq.n	80181c4 <std+0x48>
 80181be:	33d0      	adds	r3, #208	@ 0xd0
 80181c0:	429c      	cmp	r4, r3
 80181c2:	d105      	bne.n	80181d0 <std+0x54>
 80181c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80181c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80181cc:	f000 b970 	b.w	80184b0 <__retarget_lock_init_recursive>
 80181d0:	bd10      	pop	{r4, pc}
 80181d2:	bf00      	nop
 80181d4:	08018325 	.word	0x08018325
 80181d8:	08018347 	.word	0x08018347
 80181dc:	0801837f 	.word	0x0801837f
 80181e0:	080183a3 	.word	0x080183a3
 80181e4:	2001523c 	.word	0x2001523c

080181e8 <stdio_exit_handler>:
 80181e8:	4a02      	ldr	r2, [pc, #8]	@ (80181f4 <stdio_exit_handler+0xc>)
 80181ea:	4903      	ldr	r1, [pc, #12]	@ (80181f8 <stdio_exit_handler+0x10>)
 80181ec:	4803      	ldr	r0, [pc, #12]	@ (80181fc <stdio_exit_handler+0x14>)
 80181ee:	f000 b869 	b.w	80182c4 <_fwalk_sglue>
 80181f2:	bf00      	nop
 80181f4:	20000024 	.word	0x20000024
 80181f8:	08018d25 	.word	0x08018d25
 80181fc:	20000034 	.word	0x20000034

08018200 <cleanup_stdio>:
 8018200:	6841      	ldr	r1, [r0, #4]
 8018202:	4b0c      	ldr	r3, [pc, #48]	@ (8018234 <cleanup_stdio+0x34>)
 8018204:	4299      	cmp	r1, r3
 8018206:	b510      	push	{r4, lr}
 8018208:	4604      	mov	r4, r0
 801820a:	d001      	beq.n	8018210 <cleanup_stdio+0x10>
 801820c:	f000 fd8a 	bl	8018d24 <_fflush_r>
 8018210:	68a1      	ldr	r1, [r4, #8]
 8018212:	4b09      	ldr	r3, [pc, #36]	@ (8018238 <cleanup_stdio+0x38>)
 8018214:	4299      	cmp	r1, r3
 8018216:	d002      	beq.n	801821e <cleanup_stdio+0x1e>
 8018218:	4620      	mov	r0, r4
 801821a:	f000 fd83 	bl	8018d24 <_fflush_r>
 801821e:	68e1      	ldr	r1, [r4, #12]
 8018220:	4b06      	ldr	r3, [pc, #24]	@ (801823c <cleanup_stdio+0x3c>)
 8018222:	4299      	cmp	r1, r3
 8018224:	d004      	beq.n	8018230 <cleanup_stdio+0x30>
 8018226:	4620      	mov	r0, r4
 8018228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801822c:	f000 bd7a 	b.w	8018d24 <_fflush_r>
 8018230:	bd10      	pop	{r4, pc}
 8018232:	bf00      	nop
 8018234:	2001523c 	.word	0x2001523c
 8018238:	200152a4 	.word	0x200152a4
 801823c:	2001530c 	.word	0x2001530c

08018240 <global_stdio_init.part.0>:
 8018240:	b510      	push	{r4, lr}
 8018242:	4b0b      	ldr	r3, [pc, #44]	@ (8018270 <global_stdio_init.part.0+0x30>)
 8018244:	4c0b      	ldr	r4, [pc, #44]	@ (8018274 <global_stdio_init.part.0+0x34>)
 8018246:	4a0c      	ldr	r2, [pc, #48]	@ (8018278 <global_stdio_init.part.0+0x38>)
 8018248:	601a      	str	r2, [r3, #0]
 801824a:	4620      	mov	r0, r4
 801824c:	2200      	movs	r2, #0
 801824e:	2104      	movs	r1, #4
 8018250:	f7ff ff94 	bl	801817c <std>
 8018254:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8018258:	2201      	movs	r2, #1
 801825a:	2109      	movs	r1, #9
 801825c:	f7ff ff8e 	bl	801817c <std>
 8018260:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018264:	2202      	movs	r2, #2
 8018266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801826a:	2112      	movs	r1, #18
 801826c:	f7ff bf86 	b.w	801817c <std>
 8018270:	20015374 	.word	0x20015374
 8018274:	2001523c 	.word	0x2001523c
 8018278:	080181e9 	.word	0x080181e9

0801827c <__sfp_lock_acquire>:
 801827c:	4801      	ldr	r0, [pc, #4]	@ (8018284 <__sfp_lock_acquire+0x8>)
 801827e:	f000 b918 	b.w	80184b2 <__retarget_lock_acquire_recursive>
 8018282:	bf00      	nop
 8018284:	20015379 	.word	0x20015379

08018288 <__sfp_lock_release>:
 8018288:	4801      	ldr	r0, [pc, #4]	@ (8018290 <__sfp_lock_release+0x8>)
 801828a:	f000 b913 	b.w	80184b4 <__retarget_lock_release_recursive>
 801828e:	bf00      	nop
 8018290:	20015379 	.word	0x20015379

08018294 <__sinit>:
 8018294:	b510      	push	{r4, lr}
 8018296:	4604      	mov	r4, r0
 8018298:	f7ff fff0 	bl	801827c <__sfp_lock_acquire>
 801829c:	6a23      	ldr	r3, [r4, #32]
 801829e:	b11b      	cbz	r3, 80182a8 <__sinit+0x14>
 80182a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80182a4:	f7ff bff0 	b.w	8018288 <__sfp_lock_release>
 80182a8:	4b04      	ldr	r3, [pc, #16]	@ (80182bc <__sinit+0x28>)
 80182aa:	6223      	str	r3, [r4, #32]
 80182ac:	4b04      	ldr	r3, [pc, #16]	@ (80182c0 <__sinit+0x2c>)
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d1f5      	bne.n	80182a0 <__sinit+0xc>
 80182b4:	f7ff ffc4 	bl	8018240 <global_stdio_init.part.0>
 80182b8:	e7f2      	b.n	80182a0 <__sinit+0xc>
 80182ba:	bf00      	nop
 80182bc:	08018201 	.word	0x08018201
 80182c0:	20015374 	.word	0x20015374

080182c4 <_fwalk_sglue>:
 80182c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80182c8:	4607      	mov	r7, r0
 80182ca:	4688      	mov	r8, r1
 80182cc:	4614      	mov	r4, r2
 80182ce:	2600      	movs	r6, #0
 80182d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182d4:	f1b9 0901 	subs.w	r9, r9, #1
 80182d8:	d505      	bpl.n	80182e6 <_fwalk_sglue+0x22>
 80182da:	6824      	ldr	r4, [r4, #0]
 80182dc:	2c00      	cmp	r4, #0
 80182de:	d1f7      	bne.n	80182d0 <_fwalk_sglue+0xc>
 80182e0:	4630      	mov	r0, r6
 80182e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182e6:	89ab      	ldrh	r3, [r5, #12]
 80182e8:	2b01      	cmp	r3, #1
 80182ea:	d907      	bls.n	80182fc <_fwalk_sglue+0x38>
 80182ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182f0:	3301      	adds	r3, #1
 80182f2:	d003      	beq.n	80182fc <_fwalk_sglue+0x38>
 80182f4:	4629      	mov	r1, r5
 80182f6:	4638      	mov	r0, r7
 80182f8:	47c0      	blx	r8
 80182fa:	4306      	orrs	r6, r0
 80182fc:	3568      	adds	r5, #104	@ 0x68
 80182fe:	e7e9      	b.n	80182d4 <_fwalk_sglue+0x10>

08018300 <iprintf>:
 8018300:	b40f      	push	{r0, r1, r2, r3}
 8018302:	b507      	push	{r0, r1, r2, lr}
 8018304:	4906      	ldr	r1, [pc, #24]	@ (8018320 <iprintf+0x20>)
 8018306:	ab04      	add	r3, sp, #16
 8018308:	6808      	ldr	r0, [r1, #0]
 801830a:	f853 2b04 	ldr.w	r2, [r3], #4
 801830e:	6881      	ldr	r1, [r0, #8]
 8018310:	9301      	str	r3, [sp, #4]
 8018312:	f000 f9dd 	bl	80186d0 <_vfiprintf_r>
 8018316:	b003      	add	sp, #12
 8018318:	f85d eb04 	ldr.w	lr, [sp], #4
 801831c:	b004      	add	sp, #16
 801831e:	4770      	bx	lr
 8018320:	20000030 	.word	0x20000030

08018324 <__sread>:
 8018324:	b510      	push	{r4, lr}
 8018326:	460c      	mov	r4, r1
 8018328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801832c:	f000 f878 	bl	8018420 <_read_r>
 8018330:	2800      	cmp	r0, #0
 8018332:	bfab      	itete	ge
 8018334:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8018336:	89a3      	ldrhlt	r3, [r4, #12]
 8018338:	181b      	addge	r3, r3, r0
 801833a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801833e:	bfac      	ite	ge
 8018340:	6563      	strge	r3, [r4, #84]	@ 0x54
 8018342:	81a3      	strhlt	r3, [r4, #12]
 8018344:	bd10      	pop	{r4, pc}

08018346 <__swrite>:
 8018346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801834a:	461f      	mov	r7, r3
 801834c:	898b      	ldrh	r3, [r1, #12]
 801834e:	05db      	lsls	r3, r3, #23
 8018350:	4605      	mov	r5, r0
 8018352:	460c      	mov	r4, r1
 8018354:	4616      	mov	r6, r2
 8018356:	d505      	bpl.n	8018364 <__swrite+0x1e>
 8018358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801835c:	2302      	movs	r3, #2
 801835e:	2200      	movs	r2, #0
 8018360:	f000 f84c 	bl	80183fc <_lseek_r>
 8018364:	89a3      	ldrh	r3, [r4, #12]
 8018366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801836a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801836e:	81a3      	strh	r3, [r4, #12]
 8018370:	4632      	mov	r2, r6
 8018372:	463b      	mov	r3, r7
 8018374:	4628      	mov	r0, r5
 8018376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801837a:	f000 b863 	b.w	8018444 <_write_r>

0801837e <__sseek>:
 801837e:	b510      	push	{r4, lr}
 8018380:	460c      	mov	r4, r1
 8018382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018386:	f000 f839 	bl	80183fc <_lseek_r>
 801838a:	1c43      	adds	r3, r0, #1
 801838c:	89a3      	ldrh	r3, [r4, #12]
 801838e:	bf15      	itete	ne
 8018390:	6560      	strne	r0, [r4, #84]	@ 0x54
 8018392:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8018396:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801839a:	81a3      	strheq	r3, [r4, #12]
 801839c:	bf18      	it	ne
 801839e:	81a3      	strhne	r3, [r4, #12]
 80183a0:	bd10      	pop	{r4, pc}

080183a2 <__sclose>:
 80183a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80183a6:	f000 b819 	b.w	80183dc <_close_r>

080183aa <memcmp>:
 80183aa:	b510      	push	{r4, lr}
 80183ac:	3901      	subs	r1, #1
 80183ae:	4402      	add	r2, r0
 80183b0:	4290      	cmp	r0, r2
 80183b2:	d101      	bne.n	80183b8 <memcmp+0xe>
 80183b4:	2000      	movs	r0, #0
 80183b6:	e005      	b.n	80183c4 <memcmp+0x1a>
 80183b8:	7803      	ldrb	r3, [r0, #0]
 80183ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80183be:	42a3      	cmp	r3, r4
 80183c0:	d001      	beq.n	80183c6 <memcmp+0x1c>
 80183c2:	1b18      	subs	r0, r3, r4
 80183c4:	bd10      	pop	{r4, pc}
 80183c6:	3001      	adds	r0, #1
 80183c8:	e7f2      	b.n	80183b0 <memcmp+0x6>

080183ca <memset>:
 80183ca:	4402      	add	r2, r0
 80183cc:	4603      	mov	r3, r0
 80183ce:	4293      	cmp	r3, r2
 80183d0:	d100      	bne.n	80183d4 <memset+0xa>
 80183d2:	4770      	bx	lr
 80183d4:	f803 1b01 	strb.w	r1, [r3], #1
 80183d8:	e7f9      	b.n	80183ce <memset+0x4>
	...

080183dc <_close_r>:
 80183dc:	b538      	push	{r3, r4, r5, lr}
 80183de:	4d06      	ldr	r5, [pc, #24]	@ (80183f8 <_close_r+0x1c>)
 80183e0:	2300      	movs	r3, #0
 80183e2:	4604      	mov	r4, r0
 80183e4:	4608      	mov	r0, r1
 80183e6:	602b      	str	r3, [r5, #0]
 80183e8:	f7e9 fa4c 	bl	8001884 <_close>
 80183ec:	1c43      	adds	r3, r0, #1
 80183ee:	d102      	bne.n	80183f6 <_close_r+0x1a>
 80183f0:	682b      	ldr	r3, [r5, #0]
 80183f2:	b103      	cbz	r3, 80183f6 <_close_r+0x1a>
 80183f4:	6023      	str	r3, [r4, #0]
 80183f6:	bd38      	pop	{r3, r4, r5, pc}
 80183f8:	20015234 	.word	0x20015234

080183fc <_lseek_r>:
 80183fc:	b538      	push	{r3, r4, r5, lr}
 80183fe:	4d07      	ldr	r5, [pc, #28]	@ (801841c <_lseek_r+0x20>)
 8018400:	4604      	mov	r4, r0
 8018402:	4608      	mov	r0, r1
 8018404:	4611      	mov	r1, r2
 8018406:	2200      	movs	r2, #0
 8018408:	602a      	str	r2, [r5, #0]
 801840a:	461a      	mov	r2, r3
 801840c:	f7e9 fa61 	bl	80018d2 <_lseek>
 8018410:	1c43      	adds	r3, r0, #1
 8018412:	d102      	bne.n	801841a <_lseek_r+0x1e>
 8018414:	682b      	ldr	r3, [r5, #0]
 8018416:	b103      	cbz	r3, 801841a <_lseek_r+0x1e>
 8018418:	6023      	str	r3, [r4, #0]
 801841a:	bd38      	pop	{r3, r4, r5, pc}
 801841c:	20015234 	.word	0x20015234

08018420 <_read_r>:
 8018420:	b538      	push	{r3, r4, r5, lr}
 8018422:	4d07      	ldr	r5, [pc, #28]	@ (8018440 <_read_r+0x20>)
 8018424:	4604      	mov	r4, r0
 8018426:	4608      	mov	r0, r1
 8018428:	4611      	mov	r1, r2
 801842a:	2200      	movs	r2, #0
 801842c:	602a      	str	r2, [r5, #0]
 801842e:	461a      	mov	r2, r3
 8018430:	f7e9 f9ef 	bl	8001812 <_read>
 8018434:	1c43      	adds	r3, r0, #1
 8018436:	d102      	bne.n	801843e <_read_r+0x1e>
 8018438:	682b      	ldr	r3, [r5, #0]
 801843a:	b103      	cbz	r3, 801843e <_read_r+0x1e>
 801843c:	6023      	str	r3, [r4, #0]
 801843e:	bd38      	pop	{r3, r4, r5, pc}
 8018440:	20015234 	.word	0x20015234

08018444 <_write_r>:
 8018444:	b538      	push	{r3, r4, r5, lr}
 8018446:	4d07      	ldr	r5, [pc, #28]	@ (8018464 <_write_r+0x20>)
 8018448:	4604      	mov	r4, r0
 801844a:	4608      	mov	r0, r1
 801844c:	4611      	mov	r1, r2
 801844e:	2200      	movs	r2, #0
 8018450:	602a      	str	r2, [r5, #0]
 8018452:	461a      	mov	r2, r3
 8018454:	f7e9 f9fa 	bl	800184c <_write>
 8018458:	1c43      	adds	r3, r0, #1
 801845a:	d102      	bne.n	8018462 <_write_r+0x1e>
 801845c:	682b      	ldr	r3, [r5, #0]
 801845e:	b103      	cbz	r3, 8018462 <_write_r+0x1e>
 8018460:	6023      	str	r3, [r4, #0]
 8018462:	bd38      	pop	{r3, r4, r5, pc}
 8018464:	20015234 	.word	0x20015234

08018468 <__libc_init_array>:
 8018468:	b570      	push	{r4, r5, r6, lr}
 801846a:	4d0d      	ldr	r5, [pc, #52]	@ (80184a0 <__libc_init_array+0x38>)
 801846c:	4c0d      	ldr	r4, [pc, #52]	@ (80184a4 <__libc_init_array+0x3c>)
 801846e:	1b64      	subs	r4, r4, r5
 8018470:	10a4      	asrs	r4, r4, #2
 8018472:	2600      	movs	r6, #0
 8018474:	42a6      	cmp	r6, r4
 8018476:	d109      	bne.n	801848c <__libc_init_array+0x24>
 8018478:	4d0b      	ldr	r5, [pc, #44]	@ (80184a8 <__libc_init_array+0x40>)
 801847a:	4c0c      	ldr	r4, [pc, #48]	@ (80184ac <__libc_init_array+0x44>)
 801847c:	f000 fe4a 	bl	8019114 <_init>
 8018480:	1b64      	subs	r4, r4, r5
 8018482:	10a4      	asrs	r4, r4, #2
 8018484:	2600      	movs	r6, #0
 8018486:	42a6      	cmp	r6, r4
 8018488:	d105      	bne.n	8018496 <__libc_init_array+0x2e>
 801848a:	bd70      	pop	{r4, r5, r6, pc}
 801848c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018490:	4798      	blx	r3
 8018492:	3601      	adds	r6, #1
 8018494:	e7ee      	b.n	8018474 <__libc_init_array+0xc>
 8018496:	f855 3b04 	ldr.w	r3, [r5], #4
 801849a:	4798      	blx	r3
 801849c:	3601      	adds	r6, #1
 801849e:	e7f2      	b.n	8018486 <__libc_init_array+0x1e>
 80184a0:	0801cca0 	.word	0x0801cca0
 80184a4:	0801cca0 	.word	0x0801cca0
 80184a8:	0801cca0 	.word	0x0801cca0
 80184ac:	0801cca4 	.word	0x0801cca4

080184b0 <__retarget_lock_init_recursive>:
 80184b0:	4770      	bx	lr

080184b2 <__retarget_lock_acquire_recursive>:
 80184b2:	4770      	bx	lr

080184b4 <__retarget_lock_release_recursive>:
 80184b4:	4770      	bx	lr

080184b6 <memcpy>:
 80184b6:	440a      	add	r2, r1
 80184b8:	4291      	cmp	r1, r2
 80184ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80184be:	d100      	bne.n	80184c2 <memcpy+0xc>
 80184c0:	4770      	bx	lr
 80184c2:	b510      	push	{r4, lr}
 80184c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80184cc:	4291      	cmp	r1, r2
 80184ce:	d1f9      	bne.n	80184c4 <memcpy+0xe>
 80184d0:	bd10      	pop	{r4, pc}
	...

080184d4 <__assert_func>:
 80184d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80184d6:	4614      	mov	r4, r2
 80184d8:	461a      	mov	r2, r3
 80184da:	4b09      	ldr	r3, [pc, #36]	@ (8018500 <__assert_func+0x2c>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	4605      	mov	r5, r0
 80184e0:	68d8      	ldr	r0, [r3, #12]
 80184e2:	b954      	cbnz	r4, 80184fa <__assert_func+0x26>
 80184e4:	4b07      	ldr	r3, [pc, #28]	@ (8018504 <__assert_func+0x30>)
 80184e6:	461c      	mov	r4, r3
 80184e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80184ec:	9100      	str	r1, [sp, #0]
 80184ee:	462b      	mov	r3, r5
 80184f0:	4905      	ldr	r1, [pc, #20]	@ (8018508 <__assert_func+0x34>)
 80184f2:	f000 fc3f 	bl	8018d74 <fiprintf>
 80184f6:	f000 fcf3 	bl	8018ee0 <abort>
 80184fa:	4b04      	ldr	r3, [pc, #16]	@ (801850c <__assert_func+0x38>)
 80184fc:	e7f4      	b.n	80184e8 <__assert_func+0x14>
 80184fe:	bf00      	nop
 8018500:	20000030 	.word	0x20000030
 8018504:	0801cc62 	.word	0x0801cc62
 8018508:	0801cc34 	.word	0x0801cc34
 801850c:	0801cc27 	.word	0x0801cc27

08018510 <malloc>:
 8018510:	4b02      	ldr	r3, [pc, #8]	@ (801851c <malloc+0xc>)
 8018512:	4601      	mov	r1, r0
 8018514:	6818      	ldr	r0, [r3, #0]
 8018516:	f000 b825 	b.w	8018564 <_malloc_r>
 801851a:	bf00      	nop
 801851c:	20000030 	.word	0x20000030

08018520 <sbrk_aligned>:
 8018520:	b570      	push	{r4, r5, r6, lr}
 8018522:	4e0f      	ldr	r6, [pc, #60]	@ (8018560 <sbrk_aligned+0x40>)
 8018524:	460c      	mov	r4, r1
 8018526:	6831      	ldr	r1, [r6, #0]
 8018528:	4605      	mov	r5, r0
 801852a:	b911      	cbnz	r1, 8018532 <sbrk_aligned+0x12>
 801852c:	f000 fcc8 	bl	8018ec0 <_sbrk_r>
 8018530:	6030      	str	r0, [r6, #0]
 8018532:	4621      	mov	r1, r4
 8018534:	4628      	mov	r0, r5
 8018536:	f000 fcc3 	bl	8018ec0 <_sbrk_r>
 801853a:	1c43      	adds	r3, r0, #1
 801853c:	d103      	bne.n	8018546 <sbrk_aligned+0x26>
 801853e:	f04f 34ff 	mov.w	r4, #4294967295
 8018542:	4620      	mov	r0, r4
 8018544:	bd70      	pop	{r4, r5, r6, pc}
 8018546:	1cc4      	adds	r4, r0, #3
 8018548:	f024 0403 	bic.w	r4, r4, #3
 801854c:	42a0      	cmp	r0, r4
 801854e:	d0f8      	beq.n	8018542 <sbrk_aligned+0x22>
 8018550:	1a21      	subs	r1, r4, r0
 8018552:	4628      	mov	r0, r5
 8018554:	f000 fcb4 	bl	8018ec0 <_sbrk_r>
 8018558:	3001      	adds	r0, #1
 801855a:	d1f2      	bne.n	8018542 <sbrk_aligned+0x22>
 801855c:	e7ef      	b.n	801853e <sbrk_aligned+0x1e>
 801855e:	bf00      	nop
 8018560:	2001537c 	.word	0x2001537c

08018564 <_malloc_r>:
 8018564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018568:	1ccd      	adds	r5, r1, #3
 801856a:	f025 0503 	bic.w	r5, r5, #3
 801856e:	3508      	adds	r5, #8
 8018570:	2d0c      	cmp	r5, #12
 8018572:	bf38      	it	cc
 8018574:	250c      	movcc	r5, #12
 8018576:	2d00      	cmp	r5, #0
 8018578:	4606      	mov	r6, r0
 801857a:	db01      	blt.n	8018580 <_malloc_r+0x1c>
 801857c:	42a9      	cmp	r1, r5
 801857e:	d904      	bls.n	801858a <_malloc_r+0x26>
 8018580:	230c      	movs	r3, #12
 8018582:	6033      	str	r3, [r6, #0]
 8018584:	2000      	movs	r0, #0
 8018586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801858a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018660 <_malloc_r+0xfc>
 801858e:	f000 f869 	bl	8018664 <__malloc_lock>
 8018592:	f8d8 3000 	ldr.w	r3, [r8]
 8018596:	461c      	mov	r4, r3
 8018598:	bb44      	cbnz	r4, 80185ec <_malloc_r+0x88>
 801859a:	4629      	mov	r1, r5
 801859c:	4630      	mov	r0, r6
 801859e:	f7ff ffbf 	bl	8018520 <sbrk_aligned>
 80185a2:	1c43      	adds	r3, r0, #1
 80185a4:	4604      	mov	r4, r0
 80185a6:	d158      	bne.n	801865a <_malloc_r+0xf6>
 80185a8:	f8d8 4000 	ldr.w	r4, [r8]
 80185ac:	4627      	mov	r7, r4
 80185ae:	2f00      	cmp	r7, #0
 80185b0:	d143      	bne.n	801863a <_malloc_r+0xd6>
 80185b2:	2c00      	cmp	r4, #0
 80185b4:	d04b      	beq.n	801864e <_malloc_r+0xea>
 80185b6:	6823      	ldr	r3, [r4, #0]
 80185b8:	4639      	mov	r1, r7
 80185ba:	4630      	mov	r0, r6
 80185bc:	eb04 0903 	add.w	r9, r4, r3
 80185c0:	f000 fc7e 	bl	8018ec0 <_sbrk_r>
 80185c4:	4581      	cmp	r9, r0
 80185c6:	d142      	bne.n	801864e <_malloc_r+0xea>
 80185c8:	6821      	ldr	r1, [r4, #0]
 80185ca:	1a6d      	subs	r5, r5, r1
 80185cc:	4629      	mov	r1, r5
 80185ce:	4630      	mov	r0, r6
 80185d0:	f7ff ffa6 	bl	8018520 <sbrk_aligned>
 80185d4:	3001      	adds	r0, #1
 80185d6:	d03a      	beq.n	801864e <_malloc_r+0xea>
 80185d8:	6823      	ldr	r3, [r4, #0]
 80185da:	442b      	add	r3, r5
 80185dc:	6023      	str	r3, [r4, #0]
 80185de:	f8d8 3000 	ldr.w	r3, [r8]
 80185e2:	685a      	ldr	r2, [r3, #4]
 80185e4:	bb62      	cbnz	r2, 8018640 <_malloc_r+0xdc>
 80185e6:	f8c8 7000 	str.w	r7, [r8]
 80185ea:	e00f      	b.n	801860c <_malloc_r+0xa8>
 80185ec:	6822      	ldr	r2, [r4, #0]
 80185ee:	1b52      	subs	r2, r2, r5
 80185f0:	d420      	bmi.n	8018634 <_malloc_r+0xd0>
 80185f2:	2a0b      	cmp	r2, #11
 80185f4:	d917      	bls.n	8018626 <_malloc_r+0xc2>
 80185f6:	1961      	adds	r1, r4, r5
 80185f8:	42a3      	cmp	r3, r4
 80185fa:	6025      	str	r5, [r4, #0]
 80185fc:	bf18      	it	ne
 80185fe:	6059      	strne	r1, [r3, #4]
 8018600:	6863      	ldr	r3, [r4, #4]
 8018602:	bf08      	it	eq
 8018604:	f8c8 1000 	streq.w	r1, [r8]
 8018608:	5162      	str	r2, [r4, r5]
 801860a:	604b      	str	r3, [r1, #4]
 801860c:	4630      	mov	r0, r6
 801860e:	f000 f82f 	bl	8018670 <__malloc_unlock>
 8018612:	f104 000b 	add.w	r0, r4, #11
 8018616:	1d23      	adds	r3, r4, #4
 8018618:	f020 0007 	bic.w	r0, r0, #7
 801861c:	1ac2      	subs	r2, r0, r3
 801861e:	bf1c      	itt	ne
 8018620:	1a1b      	subne	r3, r3, r0
 8018622:	50a3      	strne	r3, [r4, r2]
 8018624:	e7af      	b.n	8018586 <_malloc_r+0x22>
 8018626:	6862      	ldr	r2, [r4, #4]
 8018628:	42a3      	cmp	r3, r4
 801862a:	bf0c      	ite	eq
 801862c:	f8c8 2000 	streq.w	r2, [r8]
 8018630:	605a      	strne	r2, [r3, #4]
 8018632:	e7eb      	b.n	801860c <_malloc_r+0xa8>
 8018634:	4623      	mov	r3, r4
 8018636:	6864      	ldr	r4, [r4, #4]
 8018638:	e7ae      	b.n	8018598 <_malloc_r+0x34>
 801863a:	463c      	mov	r4, r7
 801863c:	687f      	ldr	r7, [r7, #4]
 801863e:	e7b6      	b.n	80185ae <_malloc_r+0x4a>
 8018640:	461a      	mov	r2, r3
 8018642:	685b      	ldr	r3, [r3, #4]
 8018644:	42a3      	cmp	r3, r4
 8018646:	d1fb      	bne.n	8018640 <_malloc_r+0xdc>
 8018648:	2300      	movs	r3, #0
 801864a:	6053      	str	r3, [r2, #4]
 801864c:	e7de      	b.n	801860c <_malloc_r+0xa8>
 801864e:	230c      	movs	r3, #12
 8018650:	6033      	str	r3, [r6, #0]
 8018652:	4630      	mov	r0, r6
 8018654:	f000 f80c 	bl	8018670 <__malloc_unlock>
 8018658:	e794      	b.n	8018584 <_malloc_r+0x20>
 801865a:	6005      	str	r5, [r0, #0]
 801865c:	e7d6      	b.n	801860c <_malloc_r+0xa8>
 801865e:	bf00      	nop
 8018660:	20015380 	.word	0x20015380

08018664 <__malloc_lock>:
 8018664:	4801      	ldr	r0, [pc, #4]	@ (801866c <__malloc_lock+0x8>)
 8018666:	f7ff bf24 	b.w	80184b2 <__retarget_lock_acquire_recursive>
 801866a:	bf00      	nop
 801866c:	20015378 	.word	0x20015378

08018670 <__malloc_unlock>:
 8018670:	4801      	ldr	r0, [pc, #4]	@ (8018678 <__malloc_unlock+0x8>)
 8018672:	f7ff bf1f 	b.w	80184b4 <__retarget_lock_release_recursive>
 8018676:	bf00      	nop
 8018678:	20015378 	.word	0x20015378

0801867c <__sfputc_r>:
 801867c:	6893      	ldr	r3, [r2, #8]
 801867e:	3b01      	subs	r3, #1
 8018680:	2b00      	cmp	r3, #0
 8018682:	b410      	push	{r4}
 8018684:	6093      	str	r3, [r2, #8]
 8018686:	da08      	bge.n	801869a <__sfputc_r+0x1e>
 8018688:	6994      	ldr	r4, [r2, #24]
 801868a:	42a3      	cmp	r3, r4
 801868c:	db01      	blt.n	8018692 <__sfputc_r+0x16>
 801868e:	290a      	cmp	r1, #10
 8018690:	d103      	bne.n	801869a <__sfputc_r+0x1e>
 8018692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018696:	f000 bb7f 	b.w	8018d98 <__swbuf_r>
 801869a:	6813      	ldr	r3, [r2, #0]
 801869c:	1c58      	adds	r0, r3, #1
 801869e:	6010      	str	r0, [r2, #0]
 80186a0:	7019      	strb	r1, [r3, #0]
 80186a2:	4608      	mov	r0, r1
 80186a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80186a8:	4770      	bx	lr

080186aa <__sfputs_r>:
 80186aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186ac:	4606      	mov	r6, r0
 80186ae:	460f      	mov	r7, r1
 80186b0:	4614      	mov	r4, r2
 80186b2:	18d5      	adds	r5, r2, r3
 80186b4:	42ac      	cmp	r4, r5
 80186b6:	d101      	bne.n	80186bc <__sfputs_r+0x12>
 80186b8:	2000      	movs	r0, #0
 80186ba:	e007      	b.n	80186cc <__sfputs_r+0x22>
 80186bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80186c0:	463a      	mov	r2, r7
 80186c2:	4630      	mov	r0, r6
 80186c4:	f7ff ffda 	bl	801867c <__sfputc_r>
 80186c8:	1c43      	adds	r3, r0, #1
 80186ca:	d1f3      	bne.n	80186b4 <__sfputs_r+0xa>
 80186cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080186d0 <_vfiprintf_r>:
 80186d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d4:	460d      	mov	r5, r1
 80186d6:	b09d      	sub	sp, #116	@ 0x74
 80186d8:	4614      	mov	r4, r2
 80186da:	4698      	mov	r8, r3
 80186dc:	4606      	mov	r6, r0
 80186de:	b118      	cbz	r0, 80186e8 <_vfiprintf_r+0x18>
 80186e0:	6a03      	ldr	r3, [r0, #32]
 80186e2:	b90b      	cbnz	r3, 80186e8 <_vfiprintf_r+0x18>
 80186e4:	f7ff fdd6 	bl	8018294 <__sinit>
 80186e8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80186ea:	07d9      	lsls	r1, r3, #31
 80186ec:	d405      	bmi.n	80186fa <_vfiprintf_r+0x2a>
 80186ee:	89ab      	ldrh	r3, [r5, #12]
 80186f0:	059a      	lsls	r2, r3, #22
 80186f2:	d402      	bmi.n	80186fa <_vfiprintf_r+0x2a>
 80186f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80186f6:	f7ff fedc 	bl	80184b2 <__retarget_lock_acquire_recursive>
 80186fa:	89ab      	ldrh	r3, [r5, #12]
 80186fc:	071b      	lsls	r3, r3, #28
 80186fe:	d501      	bpl.n	8018704 <_vfiprintf_r+0x34>
 8018700:	692b      	ldr	r3, [r5, #16]
 8018702:	b99b      	cbnz	r3, 801872c <_vfiprintf_r+0x5c>
 8018704:	4629      	mov	r1, r5
 8018706:	4630      	mov	r0, r6
 8018708:	f000 fb84 	bl	8018e14 <__swsetup_r>
 801870c:	b170      	cbz	r0, 801872c <_vfiprintf_r+0x5c>
 801870e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018710:	07dc      	lsls	r4, r3, #31
 8018712:	d504      	bpl.n	801871e <_vfiprintf_r+0x4e>
 8018714:	f04f 30ff 	mov.w	r0, #4294967295
 8018718:	b01d      	add	sp, #116	@ 0x74
 801871a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801871e:	89ab      	ldrh	r3, [r5, #12]
 8018720:	0598      	lsls	r0, r3, #22
 8018722:	d4f7      	bmi.n	8018714 <_vfiprintf_r+0x44>
 8018724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018726:	f7ff fec5 	bl	80184b4 <__retarget_lock_release_recursive>
 801872a:	e7f3      	b.n	8018714 <_vfiprintf_r+0x44>
 801872c:	2300      	movs	r3, #0
 801872e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018730:	2320      	movs	r3, #32
 8018732:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018736:	f8cd 800c 	str.w	r8, [sp, #12]
 801873a:	2330      	movs	r3, #48	@ 0x30
 801873c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80188ec <_vfiprintf_r+0x21c>
 8018740:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018744:	f04f 0901 	mov.w	r9, #1
 8018748:	4623      	mov	r3, r4
 801874a:	469a      	mov	sl, r3
 801874c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018750:	b10a      	cbz	r2, 8018756 <_vfiprintf_r+0x86>
 8018752:	2a25      	cmp	r2, #37	@ 0x25
 8018754:	d1f9      	bne.n	801874a <_vfiprintf_r+0x7a>
 8018756:	ebba 0b04 	subs.w	fp, sl, r4
 801875a:	d00b      	beq.n	8018774 <_vfiprintf_r+0xa4>
 801875c:	465b      	mov	r3, fp
 801875e:	4622      	mov	r2, r4
 8018760:	4629      	mov	r1, r5
 8018762:	4630      	mov	r0, r6
 8018764:	f7ff ffa1 	bl	80186aa <__sfputs_r>
 8018768:	3001      	adds	r0, #1
 801876a:	f000 80a7 	beq.w	80188bc <_vfiprintf_r+0x1ec>
 801876e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018770:	445a      	add	r2, fp
 8018772:	9209      	str	r2, [sp, #36]	@ 0x24
 8018774:	f89a 3000 	ldrb.w	r3, [sl]
 8018778:	2b00      	cmp	r3, #0
 801877a:	f000 809f 	beq.w	80188bc <_vfiprintf_r+0x1ec>
 801877e:	2300      	movs	r3, #0
 8018780:	f04f 32ff 	mov.w	r2, #4294967295
 8018784:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018788:	f10a 0a01 	add.w	sl, sl, #1
 801878c:	9304      	str	r3, [sp, #16]
 801878e:	9307      	str	r3, [sp, #28]
 8018790:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018794:	931a      	str	r3, [sp, #104]	@ 0x68
 8018796:	4654      	mov	r4, sl
 8018798:	2205      	movs	r2, #5
 801879a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801879e:	4853      	ldr	r0, [pc, #332]	@ (80188ec <_vfiprintf_r+0x21c>)
 80187a0:	f7e7 fd16 	bl	80001d0 <memchr>
 80187a4:	9a04      	ldr	r2, [sp, #16]
 80187a6:	b9d8      	cbnz	r0, 80187e0 <_vfiprintf_r+0x110>
 80187a8:	06d1      	lsls	r1, r2, #27
 80187aa:	bf44      	itt	mi
 80187ac:	2320      	movmi	r3, #32
 80187ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80187b2:	0713      	lsls	r3, r2, #28
 80187b4:	bf44      	itt	mi
 80187b6:	232b      	movmi	r3, #43	@ 0x2b
 80187b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80187bc:	f89a 3000 	ldrb.w	r3, [sl]
 80187c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80187c2:	d015      	beq.n	80187f0 <_vfiprintf_r+0x120>
 80187c4:	9a07      	ldr	r2, [sp, #28]
 80187c6:	4654      	mov	r4, sl
 80187c8:	2000      	movs	r0, #0
 80187ca:	f04f 0c0a 	mov.w	ip, #10
 80187ce:	4621      	mov	r1, r4
 80187d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80187d4:	3b30      	subs	r3, #48	@ 0x30
 80187d6:	2b09      	cmp	r3, #9
 80187d8:	d94b      	bls.n	8018872 <_vfiprintf_r+0x1a2>
 80187da:	b1b0      	cbz	r0, 801880a <_vfiprintf_r+0x13a>
 80187dc:	9207      	str	r2, [sp, #28]
 80187de:	e014      	b.n	801880a <_vfiprintf_r+0x13a>
 80187e0:	eba0 0308 	sub.w	r3, r0, r8
 80187e4:	fa09 f303 	lsl.w	r3, r9, r3
 80187e8:	4313      	orrs	r3, r2
 80187ea:	9304      	str	r3, [sp, #16]
 80187ec:	46a2      	mov	sl, r4
 80187ee:	e7d2      	b.n	8018796 <_vfiprintf_r+0xc6>
 80187f0:	9b03      	ldr	r3, [sp, #12]
 80187f2:	1d19      	adds	r1, r3, #4
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	9103      	str	r1, [sp, #12]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	bfbb      	ittet	lt
 80187fc:	425b      	neglt	r3, r3
 80187fe:	f042 0202 	orrlt.w	r2, r2, #2
 8018802:	9307      	strge	r3, [sp, #28]
 8018804:	9307      	strlt	r3, [sp, #28]
 8018806:	bfb8      	it	lt
 8018808:	9204      	strlt	r2, [sp, #16]
 801880a:	7823      	ldrb	r3, [r4, #0]
 801880c:	2b2e      	cmp	r3, #46	@ 0x2e
 801880e:	d10a      	bne.n	8018826 <_vfiprintf_r+0x156>
 8018810:	7863      	ldrb	r3, [r4, #1]
 8018812:	2b2a      	cmp	r3, #42	@ 0x2a
 8018814:	d132      	bne.n	801887c <_vfiprintf_r+0x1ac>
 8018816:	9b03      	ldr	r3, [sp, #12]
 8018818:	1d1a      	adds	r2, r3, #4
 801881a:	681b      	ldr	r3, [r3, #0]
 801881c:	9203      	str	r2, [sp, #12]
 801881e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018822:	3402      	adds	r4, #2
 8018824:	9305      	str	r3, [sp, #20]
 8018826:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80188fc <_vfiprintf_r+0x22c>
 801882a:	7821      	ldrb	r1, [r4, #0]
 801882c:	2203      	movs	r2, #3
 801882e:	4650      	mov	r0, sl
 8018830:	f7e7 fcce 	bl	80001d0 <memchr>
 8018834:	b138      	cbz	r0, 8018846 <_vfiprintf_r+0x176>
 8018836:	9b04      	ldr	r3, [sp, #16]
 8018838:	eba0 000a 	sub.w	r0, r0, sl
 801883c:	2240      	movs	r2, #64	@ 0x40
 801883e:	4082      	lsls	r2, r0
 8018840:	4313      	orrs	r3, r2
 8018842:	3401      	adds	r4, #1
 8018844:	9304      	str	r3, [sp, #16]
 8018846:	f814 1b01 	ldrb.w	r1, [r4], #1
 801884a:	4829      	ldr	r0, [pc, #164]	@ (80188f0 <_vfiprintf_r+0x220>)
 801884c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018850:	2206      	movs	r2, #6
 8018852:	f7e7 fcbd 	bl	80001d0 <memchr>
 8018856:	2800      	cmp	r0, #0
 8018858:	d03f      	beq.n	80188da <_vfiprintf_r+0x20a>
 801885a:	4b26      	ldr	r3, [pc, #152]	@ (80188f4 <_vfiprintf_r+0x224>)
 801885c:	bb1b      	cbnz	r3, 80188a6 <_vfiprintf_r+0x1d6>
 801885e:	9b03      	ldr	r3, [sp, #12]
 8018860:	3307      	adds	r3, #7
 8018862:	f023 0307 	bic.w	r3, r3, #7
 8018866:	3308      	adds	r3, #8
 8018868:	9303      	str	r3, [sp, #12]
 801886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801886c:	443b      	add	r3, r7
 801886e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018870:	e76a      	b.n	8018748 <_vfiprintf_r+0x78>
 8018872:	fb0c 3202 	mla	r2, ip, r2, r3
 8018876:	460c      	mov	r4, r1
 8018878:	2001      	movs	r0, #1
 801887a:	e7a8      	b.n	80187ce <_vfiprintf_r+0xfe>
 801887c:	2300      	movs	r3, #0
 801887e:	3401      	adds	r4, #1
 8018880:	9305      	str	r3, [sp, #20]
 8018882:	4619      	mov	r1, r3
 8018884:	f04f 0c0a 	mov.w	ip, #10
 8018888:	4620      	mov	r0, r4
 801888a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801888e:	3a30      	subs	r2, #48	@ 0x30
 8018890:	2a09      	cmp	r2, #9
 8018892:	d903      	bls.n	801889c <_vfiprintf_r+0x1cc>
 8018894:	2b00      	cmp	r3, #0
 8018896:	d0c6      	beq.n	8018826 <_vfiprintf_r+0x156>
 8018898:	9105      	str	r1, [sp, #20]
 801889a:	e7c4      	b.n	8018826 <_vfiprintf_r+0x156>
 801889c:	fb0c 2101 	mla	r1, ip, r1, r2
 80188a0:	4604      	mov	r4, r0
 80188a2:	2301      	movs	r3, #1
 80188a4:	e7f0      	b.n	8018888 <_vfiprintf_r+0x1b8>
 80188a6:	ab03      	add	r3, sp, #12
 80188a8:	9300      	str	r3, [sp, #0]
 80188aa:	462a      	mov	r2, r5
 80188ac:	4b12      	ldr	r3, [pc, #72]	@ (80188f8 <_vfiprintf_r+0x228>)
 80188ae:	a904      	add	r1, sp, #16
 80188b0:	4630      	mov	r0, r6
 80188b2:	f3af 8000 	nop.w
 80188b6:	4607      	mov	r7, r0
 80188b8:	1c78      	adds	r0, r7, #1
 80188ba:	d1d6      	bne.n	801886a <_vfiprintf_r+0x19a>
 80188bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80188be:	07d9      	lsls	r1, r3, #31
 80188c0:	d405      	bmi.n	80188ce <_vfiprintf_r+0x1fe>
 80188c2:	89ab      	ldrh	r3, [r5, #12]
 80188c4:	059a      	lsls	r2, r3, #22
 80188c6:	d402      	bmi.n	80188ce <_vfiprintf_r+0x1fe>
 80188c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80188ca:	f7ff fdf3 	bl	80184b4 <__retarget_lock_release_recursive>
 80188ce:	89ab      	ldrh	r3, [r5, #12]
 80188d0:	065b      	lsls	r3, r3, #25
 80188d2:	f53f af1f 	bmi.w	8018714 <_vfiprintf_r+0x44>
 80188d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80188d8:	e71e      	b.n	8018718 <_vfiprintf_r+0x48>
 80188da:	ab03      	add	r3, sp, #12
 80188dc:	9300      	str	r3, [sp, #0]
 80188de:	462a      	mov	r2, r5
 80188e0:	4b05      	ldr	r3, [pc, #20]	@ (80188f8 <_vfiprintf_r+0x228>)
 80188e2:	a904      	add	r1, sp, #16
 80188e4:	4630      	mov	r0, r6
 80188e6:	f000 f879 	bl	80189dc <_printf_i>
 80188ea:	e7e4      	b.n	80188b6 <_vfiprintf_r+0x1e6>
 80188ec:	0801cc63 	.word	0x0801cc63
 80188f0:	0801cc6d 	.word	0x0801cc6d
 80188f4:	00000000 	.word	0x00000000
 80188f8:	080186ab 	.word	0x080186ab
 80188fc:	0801cc69 	.word	0x0801cc69

08018900 <_printf_common>:
 8018900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018904:	4616      	mov	r6, r2
 8018906:	4698      	mov	r8, r3
 8018908:	688a      	ldr	r2, [r1, #8]
 801890a:	690b      	ldr	r3, [r1, #16]
 801890c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018910:	4293      	cmp	r3, r2
 8018912:	bfb8      	it	lt
 8018914:	4613      	movlt	r3, r2
 8018916:	6033      	str	r3, [r6, #0]
 8018918:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801891c:	4607      	mov	r7, r0
 801891e:	460c      	mov	r4, r1
 8018920:	b10a      	cbz	r2, 8018926 <_printf_common+0x26>
 8018922:	3301      	adds	r3, #1
 8018924:	6033      	str	r3, [r6, #0]
 8018926:	6823      	ldr	r3, [r4, #0]
 8018928:	0699      	lsls	r1, r3, #26
 801892a:	bf42      	ittt	mi
 801892c:	6833      	ldrmi	r3, [r6, #0]
 801892e:	3302      	addmi	r3, #2
 8018930:	6033      	strmi	r3, [r6, #0]
 8018932:	6825      	ldr	r5, [r4, #0]
 8018934:	f015 0506 	ands.w	r5, r5, #6
 8018938:	d106      	bne.n	8018948 <_printf_common+0x48>
 801893a:	f104 0a19 	add.w	sl, r4, #25
 801893e:	68e3      	ldr	r3, [r4, #12]
 8018940:	6832      	ldr	r2, [r6, #0]
 8018942:	1a9b      	subs	r3, r3, r2
 8018944:	42ab      	cmp	r3, r5
 8018946:	dc26      	bgt.n	8018996 <_printf_common+0x96>
 8018948:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801894c:	6822      	ldr	r2, [r4, #0]
 801894e:	3b00      	subs	r3, #0
 8018950:	bf18      	it	ne
 8018952:	2301      	movne	r3, #1
 8018954:	0692      	lsls	r2, r2, #26
 8018956:	d42b      	bmi.n	80189b0 <_printf_common+0xb0>
 8018958:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801895c:	4641      	mov	r1, r8
 801895e:	4638      	mov	r0, r7
 8018960:	47c8      	blx	r9
 8018962:	3001      	adds	r0, #1
 8018964:	d01e      	beq.n	80189a4 <_printf_common+0xa4>
 8018966:	6823      	ldr	r3, [r4, #0]
 8018968:	6922      	ldr	r2, [r4, #16]
 801896a:	f003 0306 	and.w	r3, r3, #6
 801896e:	2b04      	cmp	r3, #4
 8018970:	bf02      	ittt	eq
 8018972:	68e5      	ldreq	r5, [r4, #12]
 8018974:	6833      	ldreq	r3, [r6, #0]
 8018976:	1aed      	subeq	r5, r5, r3
 8018978:	68a3      	ldr	r3, [r4, #8]
 801897a:	bf0c      	ite	eq
 801897c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018980:	2500      	movne	r5, #0
 8018982:	4293      	cmp	r3, r2
 8018984:	bfc4      	itt	gt
 8018986:	1a9b      	subgt	r3, r3, r2
 8018988:	18ed      	addgt	r5, r5, r3
 801898a:	2600      	movs	r6, #0
 801898c:	341a      	adds	r4, #26
 801898e:	42b5      	cmp	r5, r6
 8018990:	d11a      	bne.n	80189c8 <_printf_common+0xc8>
 8018992:	2000      	movs	r0, #0
 8018994:	e008      	b.n	80189a8 <_printf_common+0xa8>
 8018996:	2301      	movs	r3, #1
 8018998:	4652      	mov	r2, sl
 801899a:	4641      	mov	r1, r8
 801899c:	4638      	mov	r0, r7
 801899e:	47c8      	blx	r9
 80189a0:	3001      	adds	r0, #1
 80189a2:	d103      	bne.n	80189ac <_printf_common+0xac>
 80189a4:	f04f 30ff 	mov.w	r0, #4294967295
 80189a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80189ac:	3501      	adds	r5, #1
 80189ae:	e7c6      	b.n	801893e <_printf_common+0x3e>
 80189b0:	18e1      	adds	r1, r4, r3
 80189b2:	1c5a      	adds	r2, r3, #1
 80189b4:	2030      	movs	r0, #48	@ 0x30
 80189b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80189ba:	4422      	add	r2, r4
 80189bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80189c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80189c4:	3302      	adds	r3, #2
 80189c6:	e7c7      	b.n	8018958 <_printf_common+0x58>
 80189c8:	2301      	movs	r3, #1
 80189ca:	4622      	mov	r2, r4
 80189cc:	4641      	mov	r1, r8
 80189ce:	4638      	mov	r0, r7
 80189d0:	47c8      	blx	r9
 80189d2:	3001      	adds	r0, #1
 80189d4:	d0e6      	beq.n	80189a4 <_printf_common+0xa4>
 80189d6:	3601      	adds	r6, #1
 80189d8:	e7d9      	b.n	801898e <_printf_common+0x8e>
	...

080189dc <_printf_i>:
 80189dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80189e0:	7e0f      	ldrb	r7, [r1, #24]
 80189e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80189e4:	2f78      	cmp	r7, #120	@ 0x78
 80189e6:	4691      	mov	r9, r2
 80189e8:	4680      	mov	r8, r0
 80189ea:	460c      	mov	r4, r1
 80189ec:	469a      	mov	sl, r3
 80189ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80189f2:	d807      	bhi.n	8018a04 <_printf_i+0x28>
 80189f4:	2f62      	cmp	r7, #98	@ 0x62
 80189f6:	d80a      	bhi.n	8018a0e <_printf_i+0x32>
 80189f8:	2f00      	cmp	r7, #0
 80189fa:	f000 80d2 	beq.w	8018ba2 <_printf_i+0x1c6>
 80189fe:	2f58      	cmp	r7, #88	@ 0x58
 8018a00:	f000 80b9 	beq.w	8018b76 <_printf_i+0x19a>
 8018a04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018a08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018a0c:	e03a      	b.n	8018a84 <_printf_i+0xa8>
 8018a0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018a12:	2b15      	cmp	r3, #21
 8018a14:	d8f6      	bhi.n	8018a04 <_printf_i+0x28>
 8018a16:	a101      	add	r1, pc, #4	@ (adr r1, 8018a1c <_printf_i+0x40>)
 8018a18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018a1c:	08018a75 	.word	0x08018a75
 8018a20:	08018a89 	.word	0x08018a89
 8018a24:	08018a05 	.word	0x08018a05
 8018a28:	08018a05 	.word	0x08018a05
 8018a2c:	08018a05 	.word	0x08018a05
 8018a30:	08018a05 	.word	0x08018a05
 8018a34:	08018a89 	.word	0x08018a89
 8018a38:	08018a05 	.word	0x08018a05
 8018a3c:	08018a05 	.word	0x08018a05
 8018a40:	08018a05 	.word	0x08018a05
 8018a44:	08018a05 	.word	0x08018a05
 8018a48:	08018b89 	.word	0x08018b89
 8018a4c:	08018ab3 	.word	0x08018ab3
 8018a50:	08018b43 	.word	0x08018b43
 8018a54:	08018a05 	.word	0x08018a05
 8018a58:	08018a05 	.word	0x08018a05
 8018a5c:	08018bab 	.word	0x08018bab
 8018a60:	08018a05 	.word	0x08018a05
 8018a64:	08018ab3 	.word	0x08018ab3
 8018a68:	08018a05 	.word	0x08018a05
 8018a6c:	08018a05 	.word	0x08018a05
 8018a70:	08018b4b 	.word	0x08018b4b
 8018a74:	6833      	ldr	r3, [r6, #0]
 8018a76:	1d1a      	adds	r2, r3, #4
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	6032      	str	r2, [r6, #0]
 8018a7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8018a80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8018a84:	2301      	movs	r3, #1
 8018a86:	e09d      	b.n	8018bc4 <_printf_i+0x1e8>
 8018a88:	6833      	ldr	r3, [r6, #0]
 8018a8a:	6820      	ldr	r0, [r4, #0]
 8018a8c:	1d19      	adds	r1, r3, #4
 8018a8e:	6031      	str	r1, [r6, #0]
 8018a90:	0606      	lsls	r6, r0, #24
 8018a92:	d501      	bpl.n	8018a98 <_printf_i+0xbc>
 8018a94:	681d      	ldr	r5, [r3, #0]
 8018a96:	e003      	b.n	8018aa0 <_printf_i+0xc4>
 8018a98:	0645      	lsls	r5, r0, #25
 8018a9a:	d5fb      	bpl.n	8018a94 <_printf_i+0xb8>
 8018a9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8018aa0:	2d00      	cmp	r5, #0
 8018aa2:	da03      	bge.n	8018aac <_printf_i+0xd0>
 8018aa4:	232d      	movs	r3, #45	@ 0x2d
 8018aa6:	426d      	negs	r5, r5
 8018aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018aac:	4859      	ldr	r0, [pc, #356]	@ (8018c14 <_printf_i+0x238>)
 8018aae:	230a      	movs	r3, #10
 8018ab0:	e011      	b.n	8018ad6 <_printf_i+0xfa>
 8018ab2:	6821      	ldr	r1, [r4, #0]
 8018ab4:	6833      	ldr	r3, [r6, #0]
 8018ab6:	0608      	lsls	r0, r1, #24
 8018ab8:	f853 5b04 	ldr.w	r5, [r3], #4
 8018abc:	d402      	bmi.n	8018ac4 <_printf_i+0xe8>
 8018abe:	0649      	lsls	r1, r1, #25
 8018ac0:	bf48      	it	mi
 8018ac2:	b2ad      	uxthmi	r5, r5
 8018ac4:	2f6f      	cmp	r7, #111	@ 0x6f
 8018ac6:	4853      	ldr	r0, [pc, #332]	@ (8018c14 <_printf_i+0x238>)
 8018ac8:	6033      	str	r3, [r6, #0]
 8018aca:	bf14      	ite	ne
 8018acc:	230a      	movne	r3, #10
 8018ace:	2308      	moveq	r3, #8
 8018ad0:	2100      	movs	r1, #0
 8018ad2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8018ad6:	6866      	ldr	r6, [r4, #4]
 8018ad8:	60a6      	str	r6, [r4, #8]
 8018ada:	2e00      	cmp	r6, #0
 8018adc:	bfa2      	ittt	ge
 8018ade:	6821      	ldrge	r1, [r4, #0]
 8018ae0:	f021 0104 	bicge.w	r1, r1, #4
 8018ae4:	6021      	strge	r1, [r4, #0]
 8018ae6:	b90d      	cbnz	r5, 8018aec <_printf_i+0x110>
 8018ae8:	2e00      	cmp	r6, #0
 8018aea:	d04b      	beq.n	8018b84 <_printf_i+0x1a8>
 8018aec:	4616      	mov	r6, r2
 8018aee:	fbb5 f1f3 	udiv	r1, r5, r3
 8018af2:	fb03 5711 	mls	r7, r3, r1, r5
 8018af6:	5dc7      	ldrb	r7, [r0, r7]
 8018af8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018afc:	462f      	mov	r7, r5
 8018afe:	42bb      	cmp	r3, r7
 8018b00:	460d      	mov	r5, r1
 8018b02:	d9f4      	bls.n	8018aee <_printf_i+0x112>
 8018b04:	2b08      	cmp	r3, #8
 8018b06:	d10b      	bne.n	8018b20 <_printf_i+0x144>
 8018b08:	6823      	ldr	r3, [r4, #0]
 8018b0a:	07df      	lsls	r7, r3, #31
 8018b0c:	d508      	bpl.n	8018b20 <_printf_i+0x144>
 8018b0e:	6923      	ldr	r3, [r4, #16]
 8018b10:	6861      	ldr	r1, [r4, #4]
 8018b12:	4299      	cmp	r1, r3
 8018b14:	bfde      	ittt	le
 8018b16:	2330      	movle	r3, #48	@ 0x30
 8018b18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018b1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018b20:	1b92      	subs	r2, r2, r6
 8018b22:	6122      	str	r2, [r4, #16]
 8018b24:	f8cd a000 	str.w	sl, [sp]
 8018b28:	464b      	mov	r3, r9
 8018b2a:	aa03      	add	r2, sp, #12
 8018b2c:	4621      	mov	r1, r4
 8018b2e:	4640      	mov	r0, r8
 8018b30:	f7ff fee6 	bl	8018900 <_printf_common>
 8018b34:	3001      	adds	r0, #1
 8018b36:	d14a      	bne.n	8018bce <_printf_i+0x1f2>
 8018b38:	f04f 30ff 	mov.w	r0, #4294967295
 8018b3c:	b004      	add	sp, #16
 8018b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b42:	6823      	ldr	r3, [r4, #0]
 8018b44:	f043 0320 	orr.w	r3, r3, #32
 8018b48:	6023      	str	r3, [r4, #0]
 8018b4a:	4833      	ldr	r0, [pc, #204]	@ (8018c18 <_printf_i+0x23c>)
 8018b4c:	2778      	movs	r7, #120	@ 0x78
 8018b4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8018b52:	6823      	ldr	r3, [r4, #0]
 8018b54:	6831      	ldr	r1, [r6, #0]
 8018b56:	061f      	lsls	r7, r3, #24
 8018b58:	f851 5b04 	ldr.w	r5, [r1], #4
 8018b5c:	d402      	bmi.n	8018b64 <_printf_i+0x188>
 8018b5e:	065f      	lsls	r7, r3, #25
 8018b60:	bf48      	it	mi
 8018b62:	b2ad      	uxthmi	r5, r5
 8018b64:	6031      	str	r1, [r6, #0]
 8018b66:	07d9      	lsls	r1, r3, #31
 8018b68:	bf44      	itt	mi
 8018b6a:	f043 0320 	orrmi.w	r3, r3, #32
 8018b6e:	6023      	strmi	r3, [r4, #0]
 8018b70:	b11d      	cbz	r5, 8018b7a <_printf_i+0x19e>
 8018b72:	2310      	movs	r3, #16
 8018b74:	e7ac      	b.n	8018ad0 <_printf_i+0xf4>
 8018b76:	4827      	ldr	r0, [pc, #156]	@ (8018c14 <_printf_i+0x238>)
 8018b78:	e7e9      	b.n	8018b4e <_printf_i+0x172>
 8018b7a:	6823      	ldr	r3, [r4, #0]
 8018b7c:	f023 0320 	bic.w	r3, r3, #32
 8018b80:	6023      	str	r3, [r4, #0]
 8018b82:	e7f6      	b.n	8018b72 <_printf_i+0x196>
 8018b84:	4616      	mov	r6, r2
 8018b86:	e7bd      	b.n	8018b04 <_printf_i+0x128>
 8018b88:	6833      	ldr	r3, [r6, #0]
 8018b8a:	6825      	ldr	r5, [r4, #0]
 8018b8c:	6961      	ldr	r1, [r4, #20]
 8018b8e:	1d18      	adds	r0, r3, #4
 8018b90:	6030      	str	r0, [r6, #0]
 8018b92:	062e      	lsls	r6, r5, #24
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	d501      	bpl.n	8018b9c <_printf_i+0x1c0>
 8018b98:	6019      	str	r1, [r3, #0]
 8018b9a:	e002      	b.n	8018ba2 <_printf_i+0x1c6>
 8018b9c:	0668      	lsls	r0, r5, #25
 8018b9e:	d5fb      	bpl.n	8018b98 <_printf_i+0x1bc>
 8018ba0:	8019      	strh	r1, [r3, #0]
 8018ba2:	2300      	movs	r3, #0
 8018ba4:	6123      	str	r3, [r4, #16]
 8018ba6:	4616      	mov	r6, r2
 8018ba8:	e7bc      	b.n	8018b24 <_printf_i+0x148>
 8018baa:	6833      	ldr	r3, [r6, #0]
 8018bac:	1d1a      	adds	r2, r3, #4
 8018bae:	6032      	str	r2, [r6, #0]
 8018bb0:	681e      	ldr	r6, [r3, #0]
 8018bb2:	6862      	ldr	r2, [r4, #4]
 8018bb4:	2100      	movs	r1, #0
 8018bb6:	4630      	mov	r0, r6
 8018bb8:	f7e7 fb0a 	bl	80001d0 <memchr>
 8018bbc:	b108      	cbz	r0, 8018bc2 <_printf_i+0x1e6>
 8018bbe:	1b80      	subs	r0, r0, r6
 8018bc0:	6060      	str	r0, [r4, #4]
 8018bc2:	6863      	ldr	r3, [r4, #4]
 8018bc4:	6123      	str	r3, [r4, #16]
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018bcc:	e7aa      	b.n	8018b24 <_printf_i+0x148>
 8018bce:	6923      	ldr	r3, [r4, #16]
 8018bd0:	4632      	mov	r2, r6
 8018bd2:	4649      	mov	r1, r9
 8018bd4:	4640      	mov	r0, r8
 8018bd6:	47d0      	blx	sl
 8018bd8:	3001      	adds	r0, #1
 8018bda:	d0ad      	beq.n	8018b38 <_printf_i+0x15c>
 8018bdc:	6823      	ldr	r3, [r4, #0]
 8018bde:	079b      	lsls	r3, r3, #30
 8018be0:	d413      	bmi.n	8018c0a <_printf_i+0x22e>
 8018be2:	68e0      	ldr	r0, [r4, #12]
 8018be4:	9b03      	ldr	r3, [sp, #12]
 8018be6:	4298      	cmp	r0, r3
 8018be8:	bfb8      	it	lt
 8018bea:	4618      	movlt	r0, r3
 8018bec:	e7a6      	b.n	8018b3c <_printf_i+0x160>
 8018bee:	2301      	movs	r3, #1
 8018bf0:	4632      	mov	r2, r6
 8018bf2:	4649      	mov	r1, r9
 8018bf4:	4640      	mov	r0, r8
 8018bf6:	47d0      	blx	sl
 8018bf8:	3001      	adds	r0, #1
 8018bfa:	d09d      	beq.n	8018b38 <_printf_i+0x15c>
 8018bfc:	3501      	adds	r5, #1
 8018bfe:	68e3      	ldr	r3, [r4, #12]
 8018c00:	9903      	ldr	r1, [sp, #12]
 8018c02:	1a5b      	subs	r3, r3, r1
 8018c04:	42ab      	cmp	r3, r5
 8018c06:	dcf2      	bgt.n	8018bee <_printf_i+0x212>
 8018c08:	e7eb      	b.n	8018be2 <_printf_i+0x206>
 8018c0a:	2500      	movs	r5, #0
 8018c0c:	f104 0619 	add.w	r6, r4, #25
 8018c10:	e7f5      	b.n	8018bfe <_printf_i+0x222>
 8018c12:	bf00      	nop
 8018c14:	0801cc74 	.word	0x0801cc74
 8018c18:	0801cc85 	.word	0x0801cc85

08018c1c <__sflush_r>:
 8018c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c24:	0716      	lsls	r6, r2, #28
 8018c26:	4605      	mov	r5, r0
 8018c28:	460c      	mov	r4, r1
 8018c2a:	d454      	bmi.n	8018cd6 <__sflush_r+0xba>
 8018c2c:	684b      	ldr	r3, [r1, #4]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	dc02      	bgt.n	8018c38 <__sflush_r+0x1c>
 8018c32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	dd48      	ble.n	8018cca <__sflush_r+0xae>
 8018c38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c3a:	2e00      	cmp	r6, #0
 8018c3c:	d045      	beq.n	8018cca <__sflush_r+0xae>
 8018c3e:	2300      	movs	r3, #0
 8018c40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018c44:	682f      	ldr	r7, [r5, #0]
 8018c46:	6a21      	ldr	r1, [r4, #32]
 8018c48:	602b      	str	r3, [r5, #0]
 8018c4a:	d030      	beq.n	8018cae <__sflush_r+0x92>
 8018c4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8018c4e:	89a3      	ldrh	r3, [r4, #12]
 8018c50:	0759      	lsls	r1, r3, #29
 8018c52:	d505      	bpl.n	8018c60 <__sflush_r+0x44>
 8018c54:	6863      	ldr	r3, [r4, #4]
 8018c56:	1ad2      	subs	r2, r2, r3
 8018c58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8018c5a:	b10b      	cbz	r3, 8018c60 <__sflush_r+0x44>
 8018c5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8018c5e:	1ad2      	subs	r2, r2, r3
 8018c60:	2300      	movs	r3, #0
 8018c62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8018c64:	6a21      	ldr	r1, [r4, #32]
 8018c66:	4628      	mov	r0, r5
 8018c68:	47b0      	blx	r6
 8018c6a:	1c43      	adds	r3, r0, #1
 8018c6c:	89a3      	ldrh	r3, [r4, #12]
 8018c6e:	d106      	bne.n	8018c7e <__sflush_r+0x62>
 8018c70:	6829      	ldr	r1, [r5, #0]
 8018c72:	291d      	cmp	r1, #29
 8018c74:	d82b      	bhi.n	8018cce <__sflush_r+0xb2>
 8018c76:	4a2a      	ldr	r2, [pc, #168]	@ (8018d20 <__sflush_r+0x104>)
 8018c78:	410a      	asrs	r2, r1
 8018c7a:	07d6      	lsls	r6, r2, #31
 8018c7c:	d427      	bmi.n	8018cce <__sflush_r+0xb2>
 8018c7e:	2200      	movs	r2, #0
 8018c80:	6062      	str	r2, [r4, #4]
 8018c82:	04d9      	lsls	r1, r3, #19
 8018c84:	6922      	ldr	r2, [r4, #16]
 8018c86:	6022      	str	r2, [r4, #0]
 8018c88:	d504      	bpl.n	8018c94 <__sflush_r+0x78>
 8018c8a:	1c42      	adds	r2, r0, #1
 8018c8c:	d101      	bne.n	8018c92 <__sflush_r+0x76>
 8018c8e:	682b      	ldr	r3, [r5, #0]
 8018c90:	b903      	cbnz	r3, 8018c94 <__sflush_r+0x78>
 8018c92:	6560      	str	r0, [r4, #84]	@ 0x54
 8018c94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018c96:	602f      	str	r7, [r5, #0]
 8018c98:	b1b9      	cbz	r1, 8018cca <__sflush_r+0xae>
 8018c9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018c9e:	4299      	cmp	r1, r3
 8018ca0:	d002      	beq.n	8018ca8 <__sflush_r+0x8c>
 8018ca2:	4628      	mov	r0, r5
 8018ca4:	f000 f924 	bl	8018ef0 <_free_r>
 8018ca8:	2300      	movs	r3, #0
 8018caa:	6363      	str	r3, [r4, #52]	@ 0x34
 8018cac:	e00d      	b.n	8018cca <__sflush_r+0xae>
 8018cae:	2301      	movs	r3, #1
 8018cb0:	4628      	mov	r0, r5
 8018cb2:	47b0      	blx	r6
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	1c50      	adds	r0, r2, #1
 8018cb8:	d1c9      	bne.n	8018c4e <__sflush_r+0x32>
 8018cba:	682b      	ldr	r3, [r5, #0]
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d0c6      	beq.n	8018c4e <__sflush_r+0x32>
 8018cc0:	2b1d      	cmp	r3, #29
 8018cc2:	d001      	beq.n	8018cc8 <__sflush_r+0xac>
 8018cc4:	2b16      	cmp	r3, #22
 8018cc6:	d11e      	bne.n	8018d06 <__sflush_r+0xea>
 8018cc8:	602f      	str	r7, [r5, #0]
 8018cca:	2000      	movs	r0, #0
 8018ccc:	e022      	b.n	8018d14 <__sflush_r+0xf8>
 8018cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018cd2:	b21b      	sxth	r3, r3
 8018cd4:	e01b      	b.n	8018d0e <__sflush_r+0xf2>
 8018cd6:	690f      	ldr	r7, [r1, #16]
 8018cd8:	2f00      	cmp	r7, #0
 8018cda:	d0f6      	beq.n	8018cca <__sflush_r+0xae>
 8018cdc:	0793      	lsls	r3, r2, #30
 8018cde:	680e      	ldr	r6, [r1, #0]
 8018ce0:	bf08      	it	eq
 8018ce2:	694b      	ldreq	r3, [r1, #20]
 8018ce4:	600f      	str	r7, [r1, #0]
 8018ce6:	bf18      	it	ne
 8018ce8:	2300      	movne	r3, #0
 8018cea:	eba6 0807 	sub.w	r8, r6, r7
 8018cee:	608b      	str	r3, [r1, #8]
 8018cf0:	f1b8 0f00 	cmp.w	r8, #0
 8018cf4:	dde9      	ble.n	8018cca <__sflush_r+0xae>
 8018cf6:	6a21      	ldr	r1, [r4, #32]
 8018cf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8018cfa:	4643      	mov	r3, r8
 8018cfc:	463a      	mov	r2, r7
 8018cfe:	4628      	mov	r0, r5
 8018d00:	47b0      	blx	r6
 8018d02:	2800      	cmp	r0, #0
 8018d04:	dc08      	bgt.n	8018d18 <__sflush_r+0xfc>
 8018d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018d0e:	81a3      	strh	r3, [r4, #12]
 8018d10:	f04f 30ff 	mov.w	r0, #4294967295
 8018d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d18:	4407      	add	r7, r0
 8018d1a:	eba8 0800 	sub.w	r8, r8, r0
 8018d1e:	e7e7      	b.n	8018cf0 <__sflush_r+0xd4>
 8018d20:	dfbffffe 	.word	0xdfbffffe

08018d24 <_fflush_r>:
 8018d24:	b538      	push	{r3, r4, r5, lr}
 8018d26:	690b      	ldr	r3, [r1, #16]
 8018d28:	4605      	mov	r5, r0
 8018d2a:	460c      	mov	r4, r1
 8018d2c:	b913      	cbnz	r3, 8018d34 <_fflush_r+0x10>
 8018d2e:	2500      	movs	r5, #0
 8018d30:	4628      	mov	r0, r5
 8018d32:	bd38      	pop	{r3, r4, r5, pc}
 8018d34:	b118      	cbz	r0, 8018d3e <_fflush_r+0x1a>
 8018d36:	6a03      	ldr	r3, [r0, #32]
 8018d38:	b90b      	cbnz	r3, 8018d3e <_fflush_r+0x1a>
 8018d3a:	f7ff faab 	bl	8018294 <__sinit>
 8018d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018d42:	2b00      	cmp	r3, #0
 8018d44:	d0f3      	beq.n	8018d2e <_fflush_r+0xa>
 8018d46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8018d48:	07d0      	lsls	r0, r2, #31
 8018d4a:	d404      	bmi.n	8018d56 <_fflush_r+0x32>
 8018d4c:	0599      	lsls	r1, r3, #22
 8018d4e:	d402      	bmi.n	8018d56 <_fflush_r+0x32>
 8018d50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d52:	f7ff fbae 	bl	80184b2 <__retarget_lock_acquire_recursive>
 8018d56:	4628      	mov	r0, r5
 8018d58:	4621      	mov	r1, r4
 8018d5a:	f7ff ff5f 	bl	8018c1c <__sflush_r>
 8018d5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8018d60:	07da      	lsls	r2, r3, #31
 8018d62:	4605      	mov	r5, r0
 8018d64:	d4e4      	bmi.n	8018d30 <_fflush_r+0xc>
 8018d66:	89a3      	ldrh	r3, [r4, #12]
 8018d68:	059b      	lsls	r3, r3, #22
 8018d6a:	d4e1      	bmi.n	8018d30 <_fflush_r+0xc>
 8018d6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8018d6e:	f7ff fba1 	bl	80184b4 <__retarget_lock_release_recursive>
 8018d72:	e7dd      	b.n	8018d30 <_fflush_r+0xc>

08018d74 <fiprintf>:
 8018d74:	b40e      	push	{r1, r2, r3}
 8018d76:	b503      	push	{r0, r1, lr}
 8018d78:	4601      	mov	r1, r0
 8018d7a:	ab03      	add	r3, sp, #12
 8018d7c:	4805      	ldr	r0, [pc, #20]	@ (8018d94 <fiprintf+0x20>)
 8018d7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018d82:	6800      	ldr	r0, [r0, #0]
 8018d84:	9301      	str	r3, [sp, #4]
 8018d86:	f7ff fca3 	bl	80186d0 <_vfiprintf_r>
 8018d8a:	b002      	add	sp, #8
 8018d8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d90:	b003      	add	sp, #12
 8018d92:	4770      	bx	lr
 8018d94:	20000030 	.word	0x20000030

08018d98 <__swbuf_r>:
 8018d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d9a:	460e      	mov	r6, r1
 8018d9c:	4614      	mov	r4, r2
 8018d9e:	4605      	mov	r5, r0
 8018da0:	b118      	cbz	r0, 8018daa <__swbuf_r+0x12>
 8018da2:	6a03      	ldr	r3, [r0, #32]
 8018da4:	b90b      	cbnz	r3, 8018daa <__swbuf_r+0x12>
 8018da6:	f7ff fa75 	bl	8018294 <__sinit>
 8018daa:	69a3      	ldr	r3, [r4, #24]
 8018dac:	60a3      	str	r3, [r4, #8]
 8018dae:	89a3      	ldrh	r3, [r4, #12]
 8018db0:	071a      	lsls	r2, r3, #28
 8018db2:	d501      	bpl.n	8018db8 <__swbuf_r+0x20>
 8018db4:	6923      	ldr	r3, [r4, #16]
 8018db6:	b943      	cbnz	r3, 8018dca <__swbuf_r+0x32>
 8018db8:	4621      	mov	r1, r4
 8018dba:	4628      	mov	r0, r5
 8018dbc:	f000 f82a 	bl	8018e14 <__swsetup_r>
 8018dc0:	b118      	cbz	r0, 8018dca <__swbuf_r+0x32>
 8018dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8018dc6:	4638      	mov	r0, r7
 8018dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018dca:	6823      	ldr	r3, [r4, #0]
 8018dcc:	6922      	ldr	r2, [r4, #16]
 8018dce:	1a98      	subs	r0, r3, r2
 8018dd0:	6963      	ldr	r3, [r4, #20]
 8018dd2:	b2f6      	uxtb	r6, r6
 8018dd4:	4283      	cmp	r3, r0
 8018dd6:	4637      	mov	r7, r6
 8018dd8:	dc05      	bgt.n	8018de6 <__swbuf_r+0x4e>
 8018dda:	4621      	mov	r1, r4
 8018ddc:	4628      	mov	r0, r5
 8018dde:	f7ff ffa1 	bl	8018d24 <_fflush_r>
 8018de2:	2800      	cmp	r0, #0
 8018de4:	d1ed      	bne.n	8018dc2 <__swbuf_r+0x2a>
 8018de6:	68a3      	ldr	r3, [r4, #8]
 8018de8:	3b01      	subs	r3, #1
 8018dea:	60a3      	str	r3, [r4, #8]
 8018dec:	6823      	ldr	r3, [r4, #0]
 8018dee:	1c5a      	adds	r2, r3, #1
 8018df0:	6022      	str	r2, [r4, #0]
 8018df2:	701e      	strb	r6, [r3, #0]
 8018df4:	6962      	ldr	r2, [r4, #20]
 8018df6:	1c43      	adds	r3, r0, #1
 8018df8:	429a      	cmp	r2, r3
 8018dfa:	d004      	beq.n	8018e06 <__swbuf_r+0x6e>
 8018dfc:	89a3      	ldrh	r3, [r4, #12]
 8018dfe:	07db      	lsls	r3, r3, #31
 8018e00:	d5e1      	bpl.n	8018dc6 <__swbuf_r+0x2e>
 8018e02:	2e0a      	cmp	r6, #10
 8018e04:	d1df      	bne.n	8018dc6 <__swbuf_r+0x2e>
 8018e06:	4621      	mov	r1, r4
 8018e08:	4628      	mov	r0, r5
 8018e0a:	f7ff ff8b 	bl	8018d24 <_fflush_r>
 8018e0e:	2800      	cmp	r0, #0
 8018e10:	d0d9      	beq.n	8018dc6 <__swbuf_r+0x2e>
 8018e12:	e7d6      	b.n	8018dc2 <__swbuf_r+0x2a>

08018e14 <__swsetup_r>:
 8018e14:	b538      	push	{r3, r4, r5, lr}
 8018e16:	4b29      	ldr	r3, [pc, #164]	@ (8018ebc <__swsetup_r+0xa8>)
 8018e18:	4605      	mov	r5, r0
 8018e1a:	6818      	ldr	r0, [r3, #0]
 8018e1c:	460c      	mov	r4, r1
 8018e1e:	b118      	cbz	r0, 8018e28 <__swsetup_r+0x14>
 8018e20:	6a03      	ldr	r3, [r0, #32]
 8018e22:	b90b      	cbnz	r3, 8018e28 <__swsetup_r+0x14>
 8018e24:	f7ff fa36 	bl	8018294 <__sinit>
 8018e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e2c:	0719      	lsls	r1, r3, #28
 8018e2e:	d422      	bmi.n	8018e76 <__swsetup_r+0x62>
 8018e30:	06da      	lsls	r2, r3, #27
 8018e32:	d407      	bmi.n	8018e44 <__swsetup_r+0x30>
 8018e34:	2209      	movs	r2, #9
 8018e36:	602a      	str	r2, [r5, #0]
 8018e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018e3c:	81a3      	strh	r3, [r4, #12]
 8018e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8018e42:	e033      	b.n	8018eac <__swsetup_r+0x98>
 8018e44:	0758      	lsls	r0, r3, #29
 8018e46:	d512      	bpl.n	8018e6e <__swsetup_r+0x5a>
 8018e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018e4a:	b141      	cbz	r1, 8018e5e <__swsetup_r+0x4a>
 8018e4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8018e50:	4299      	cmp	r1, r3
 8018e52:	d002      	beq.n	8018e5a <__swsetup_r+0x46>
 8018e54:	4628      	mov	r0, r5
 8018e56:	f000 f84b 	bl	8018ef0 <_free_r>
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8018e5e:	89a3      	ldrh	r3, [r4, #12]
 8018e60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8018e64:	81a3      	strh	r3, [r4, #12]
 8018e66:	2300      	movs	r3, #0
 8018e68:	6063      	str	r3, [r4, #4]
 8018e6a:	6923      	ldr	r3, [r4, #16]
 8018e6c:	6023      	str	r3, [r4, #0]
 8018e6e:	89a3      	ldrh	r3, [r4, #12]
 8018e70:	f043 0308 	orr.w	r3, r3, #8
 8018e74:	81a3      	strh	r3, [r4, #12]
 8018e76:	6923      	ldr	r3, [r4, #16]
 8018e78:	b94b      	cbnz	r3, 8018e8e <__swsetup_r+0x7a>
 8018e7a:	89a3      	ldrh	r3, [r4, #12]
 8018e7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8018e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018e84:	d003      	beq.n	8018e8e <__swsetup_r+0x7a>
 8018e86:	4621      	mov	r1, r4
 8018e88:	4628      	mov	r0, r5
 8018e8a:	f000 f8a1 	bl	8018fd0 <__smakebuf_r>
 8018e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018e92:	f013 0201 	ands.w	r2, r3, #1
 8018e96:	d00a      	beq.n	8018eae <__swsetup_r+0x9a>
 8018e98:	2200      	movs	r2, #0
 8018e9a:	60a2      	str	r2, [r4, #8]
 8018e9c:	6962      	ldr	r2, [r4, #20]
 8018e9e:	4252      	negs	r2, r2
 8018ea0:	61a2      	str	r2, [r4, #24]
 8018ea2:	6922      	ldr	r2, [r4, #16]
 8018ea4:	b942      	cbnz	r2, 8018eb8 <__swsetup_r+0xa4>
 8018ea6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8018eaa:	d1c5      	bne.n	8018e38 <__swsetup_r+0x24>
 8018eac:	bd38      	pop	{r3, r4, r5, pc}
 8018eae:	0799      	lsls	r1, r3, #30
 8018eb0:	bf58      	it	pl
 8018eb2:	6962      	ldrpl	r2, [r4, #20]
 8018eb4:	60a2      	str	r2, [r4, #8]
 8018eb6:	e7f4      	b.n	8018ea2 <__swsetup_r+0x8e>
 8018eb8:	2000      	movs	r0, #0
 8018eba:	e7f7      	b.n	8018eac <__swsetup_r+0x98>
 8018ebc:	20000030 	.word	0x20000030

08018ec0 <_sbrk_r>:
 8018ec0:	b538      	push	{r3, r4, r5, lr}
 8018ec2:	4d06      	ldr	r5, [pc, #24]	@ (8018edc <_sbrk_r+0x1c>)
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	4604      	mov	r4, r0
 8018ec8:	4608      	mov	r0, r1
 8018eca:	602b      	str	r3, [r5, #0]
 8018ecc:	f7e8 fd0e 	bl	80018ec <_sbrk>
 8018ed0:	1c43      	adds	r3, r0, #1
 8018ed2:	d102      	bne.n	8018eda <_sbrk_r+0x1a>
 8018ed4:	682b      	ldr	r3, [r5, #0]
 8018ed6:	b103      	cbz	r3, 8018eda <_sbrk_r+0x1a>
 8018ed8:	6023      	str	r3, [r4, #0]
 8018eda:	bd38      	pop	{r3, r4, r5, pc}
 8018edc:	20015234 	.word	0x20015234

08018ee0 <abort>:
 8018ee0:	b508      	push	{r3, lr}
 8018ee2:	2006      	movs	r0, #6
 8018ee4:	f000 f8d8 	bl	8019098 <raise>
 8018ee8:	2001      	movs	r0, #1
 8018eea:	f7e8 fc87 	bl	80017fc <_exit>
	...

08018ef0 <_free_r>:
 8018ef0:	b538      	push	{r3, r4, r5, lr}
 8018ef2:	4605      	mov	r5, r0
 8018ef4:	2900      	cmp	r1, #0
 8018ef6:	d041      	beq.n	8018f7c <_free_r+0x8c>
 8018ef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018efc:	1f0c      	subs	r4, r1, #4
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	bfb8      	it	lt
 8018f02:	18e4      	addlt	r4, r4, r3
 8018f04:	f7ff fbae 	bl	8018664 <__malloc_lock>
 8018f08:	4a1d      	ldr	r2, [pc, #116]	@ (8018f80 <_free_r+0x90>)
 8018f0a:	6813      	ldr	r3, [r2, #0]
 8018f0c:	b933      	cbnz	r3, 8018f1c <_free_r+0x2c>
 8018f0e:	6063      	str	r3, [r4, #4]
 8018f10:	6014      	str	r4, [r2, #0]
 8018f12:	4628      	mov	r0, r5
 8018f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018f18:	f7ff bbaa 	b.w	8018670 <__malloc_unlock>
 8018f1c:	42a3      	cmp	r3, r4
 8018f1e:	d908      	bls.n	8018f32 <_free_r+0x42>
 8018f20:	6820      	ldr	r0, [r4, #0]
 8018f22:	1821      	adds	r1, r4, r0
 8018f24:	428b      	cmp	r3, r1
 8018f26:	bf01      	itttt	eq
 8018f28:	6819      	ldreq	r1, [r3, #0]
 8018f2a:	685b      	ldreq	r3, [r3, #4]
 8018f2c:	1809      	addeq	r1, r1, r0
 8018f2e:	6021      	streq	r1, [r4, #0]
 8018f30:	e7ed      	b.n	8018f0e <_free_r+0x1e>
 8018f32:	461a      	mov	r2, r3
 8018f34:	685b      	ldr	r3, [r3, #4]
 8018f36:	b10b      	cbz	r3, 8018f3c <_free_r+0x4c>
 8018f38:	42a3      	cmp	r3, r4
 8018f3a:	d9fa      	bls.n	8018f32 <_free_r+0x42>
 8018f3c:	6811      	ldr	r1, [r2, #0]
 8018f3e:	1850      	adds	r0, r2, r1
 8018f40:	42a0      	cmp	r0, r4
 8018f42:	d10b      	bne.n	8018f5c <_free_r+0x6c>
 8018f44:	6820      	ldr	r0, [r4, #0]
 8018f46:	4401      	add	r1, r0
 8018f48:	1850      	adds	r0, r2, r1
 8018f4a:	4283      	cmp	r3, r0
 8018f4c:	6011      	str	r1, [r2, #0]
 8018f4e:	d1e0      	bne.n	8018f12 <_free_r+0x22>
 8018f50:	6818      	ldr	r0, [r3, #0]
 8018f52:	685b      	ldr	r3, [r3, #4]
 8018f54:	6053      	str	r3, [r2, #4]
 8018f56:	4408      	add	r0, r1
 8018f58:	6010      	str	r0, [r2, #0]
 8018f5a:	e7da      	b.n	8018f12 <_free_r+0x22>
 8018f5c:	d902      	bls.n	8018f64 <_free_r+0x74>
 8018f5e:	230c      	movs	r3, #12
 8018f60:	602b      	str	r3, [r5, #0]
 8018f62:	e7d6      	b.n	8018f12 <_free_r+0x22>
 8018f64:	6820      	ldr	r0, [r4, #0]
 8018f66:	1821      	adds	r1, r4, r0
 8018f68:	428b      	cmp	r3, r1
 8018f6a:	bf04      	itt	eq
 8018f6c:	6819      	ldreq	r1, [r3, #0]
 8018f6e:	685b      	ldreq	r3, [r3, #4]
 8018f70:	6063      	str	r3, [r4, #4]
 8018f72:	bf04      	itt	eq
 8018f74:	1809      	addeq	r1, r1, r0
 8018f76:	6021      	streq	r1, [r4, #0]
 8018f78:	6054      	str	r4, [r2, #4]
 8018f7a:	e7ca      	b.n	8018f12 <_free_r+0x22>
 8018f7c:	bd38      	pop	{r3, r4, r5, pc}
 8018f7e:	bf00      	nop
 8018f80:	20015380 	.word	0x20015380

08018f84 <__swhatbuf_r>:
 8018f84:	b570      	push	{r4, r5, r6, lr}
 8018f86:	460c      	mov	r4, r1
 8018f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018f8c:	2900      	cmp	r1, #0
 8018f8e:	b096      	sub	sp, #88	@ 0x58
 8018f90:	4615      	mov	r5, r2
 8018f92:	461e      	mov	r6, r3
 8018f94:	da0d      	bge.n	8018fb2 <__swhatbuf_r+0x2e>
 8018f96:	89a3      	ldrh	r3, [r4, #12]
 8018f98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8018f9c:	f04f 0100 	mov.w	r1, #0
 8018fa0:	bf14      	ite	ne
 8018fa2:	2340      	movne	r3, #64	@ 0x40
 8018fa4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018fa8:	2000      	movs	r0, #0
 8018faa:	6031      	str	r1, [r6, #0]
 8018fac:	602b      	str	r3, [r5, #0]
 8018fae:	b016      	add	sp, #88	@ 0x58
 8018fb0:	bd70      	pop	{r4, r5, r6, pc}
 8018fb2:	466a      	mov	r2, sp
 8018fb4:	f000 f878 	bl	80190a8 <_fstat_r>
 8018fb8:	2800      	cmp	r0, #0
 8018fba:	dbec      	blt.n	8018f96 <__swhatbuf_r+0x12>
 8018fbc:	9901      	ldr	r1, [sp, #4]
 8018fbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018fc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018fc6:	4259      	negs	r1, r3
 8018fc8:	4159      	adcs	r1, r3
 8018fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8018fce:	e7eb      	b.n	8018fa8 <__swhatbuf_r+0x24>

08018fd0 <__smakebuf_r>:
 8018fd0:	898b      	ldrh	r3, [r1, #12]
 8018fd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018fd4:	079d      	lsls	r5, r3, #30
 8018fd6:	4606      	mov	r6, r0
 8018fd8:	460c      	mov	r4, r1
 8018fda:	d507      	bpl.n	8018fec <__smakebuf_r+0x1c>
 8018fdc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8018fe0:	6023      	str	r3, [r4, #0]
 8018fe2:	6123      	str	r3, [r4, #16]
 8018fe4:	2301      	movs	r3, #1
 8018fe6:	6163      	str	r3, [r4, #20]
 8018fe8:	b003      	add	sp, #12
 8018fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018fec:	ab01      	add	r3, sp, #4
 8018fee:	466a      	mov	r2, sp
 8018ff0:	f7ff ffc8 	bl	8018f84 <__swhatbuf_r>
 8018ff4:	9f00      	ldr	r7, [sp, #0]
 8018ff6:	4605      	mov	r5, r0
 8018ff8:	4639      	mov	r1, r7
 8018ffa:	4630      	mov	r0, r6
 8018ffc:	f7ff fab2 	bl	8018564 <_malloc_r>
 8019000:	b948      	cbnz	r0, 8019016 <__smakebuf_r+0x46>
 8019002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019006:	059a      	lsls	r2, r3, #22
 8019008:	d4ee      	bmi.n	8018fe8 <__smakebuf_r+0x18>
 801900a:	f023 0303 	bic.w	r3, r3, #3
 801900e:	f043 0302 	orr.w	r3, r3, #2
 8019012:	81a3      	strh	r3, [r4, #12]
 8019014:	e7e2      	b.n	8018fdc <__smakebuf_r+0xc>
 8019016:	89a3      	ldrh	r3, [r4, #12]
 8019018:	6020      	str	r0, [r4, #0]
 801901a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801901e:	81a3      	strh	r3, [r4, #12]
 8019020:	9b01      	ldr	r3, [sp, #4]
 8019022:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8019026:	b15b      	cbz	r3, 8019040 <__smakebuf_r+0x70>
 8019028:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801902c:	4630      	mov	r0, r6
 801902e:	f000 f84d 	bl	80190cc <_isatty_r>
 8019032:	b128      	cbz	r0, 8019040 <__smakebuf_r+0x70>
 8019034:	89a3      	ldrh	r3, [r4, #12]
 8019036:	f023 0303 	bic.w	r3, r3, #3
 801903a:	f043 0301 	orr.w	r3, r3, #1
 801903e:	81a3      	strh	r3, [r4, #12]
 8019040:	89a3      	ldrh	r3, [r4, #12]
 8019042:	431d      	orrs	r5, r3
 8019044:	81a5      	strh	r5, [r4, #12]
 8019046:	e7cf      	b.n	8018fe8 <__smakebuf_r+0x18>

08019048 <_raise_r>:
 8019048:	291f      	cmp	r1, #31
 801904a:	b538      	push	{r3, r4, r5, lr}
 801904c:	4605      	mov	r5, r0
 801904e:	460c      	mov	r4, r1
 8019050:	d904      	bls.n	801905c <_raise_r+0x14>
 8019052:	2316      	movs	r3, #22
 8019054:	6003      	str	r3, [r0, #0]
 8019056:	f04f 30ff 	mov.w	r0, #4294967295
 801905a:	bd38      	pop	{r3, r4, r5, pc}
 801905c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801905e:	b112      	cbz	r2, 8019066 <_raise_r+0x1e>
 8019060:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019064:	b94b      	cbnz	r3, 801907a <_raise_r+0x32>
 8019066:	4628      	mov	r0, r5
 8019068:	f000 f852 	bl	8019110 <_getpid_r>
 801906c:	4622      	mov	r2, r4
 801906e:	4601      	mov	r1, r0
 8019070:	4628      	mov	r0, r5
 8019072:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019076:	f000 b839 	b.w	80190ec <_kill_r>
 801907a:	2b01      	cmp	r3, #1
 801907c:	d00a      	beq.n	8019094 <_raise_r+0x4c>
 801907e:	1c59      	adds	r1, r3, #1
 8019080:	d103      	bne.n	801908a <_raise_r+0x42>
 8019082:	2316      	movs	r3, #22
 8019084:	6003      	str	r3, [r0, #0]
 8019086:	2001      	movs	r0, #1
 8019088:	e7e7      	b.n	801905a <_raise_r+0x12>
 801908a:	2100      	movs	r1, #0
 801908c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019090:	4620      	mov	r0, r4
 8019092:	4798      	blx	r3
 8019094:	2000      	movs	r0, #0
 8019096:	e7e0      	b.n	801905a <_raise_r+0x12>

08019098 <raise>:
 8019098:	4b02      	ldr	r3, [pc, #8]	@ (80190a4 <raise+0xc>)
 801909a:	4601      	mov	r1, r0
 801909c:	6818      	ldr	r0, [r3, #0]
 801909e:	f7ff bfd3 	b.w	8019048 <_raise_r>
 80190a2:	bf00      	nop
 80190a4:	20000030 	.word	0x20000030

080190a8 <_fstat_r>:
 80190a8:	b538      	push	{r3, r4, r5, lr}
 80190aa:	4d07      	ldr	r5, [pc, #28]	@ (80190c8 <_fstat_r+0x20>)
 80190ac:	2300      	movs	r3, #0
 80190ae:	4604      	mov	r4, r0
 80190b0:	4608      	mov	r0, r1
 80190b2:	4611      	mov	r1, r2
 80190b4:	602b      	str	r3, [r5, #0]
 80190b6:	f7e8 fbf1 	bl	800189c <_fstat>
 80190ba:	1c43      	adds	r3, r0, #1
 80190bc:	d102      	bne.n	80190c4 <_fstat_r+0x1c>
 80190be:	682b      	ldr	r3, [r5, #0]
 80190c0:	b103      	cbz	r3, 80190c4 <_fstat_r+0x1c>
 80190c2:	6023      	str	r3, [r4, #0]
 80190c4:	bd38      	pop	{r3, r4, r5, pc}
 80190c6:	bf00      	nop
 80190c8:	20015234 	.word	0x20015234

080190cc <_isatty_r>:
 80190cc:	b538      	push	{r3, r4, r5, lr}
 80190ce:	4d06      	ldr	r5, [pc, #24]	@ (80190e8 <_isatty_r+0x1c>)
 80190d0:	2300      	movs	r3, #0
 80190d2:	4604      	mov	r4, r0
 80190d4:	4608      	mov	r0, r1
 80190d6:	602b      	str	r3, [r5, #0]
 80190d8:	f7e8 fbf0 	bl	80018bc <_isatty>
 80190dc:	1c43      	adds	r3, r0, #1
 80190de:	d102      	bne.n	80190e6 <_isatty_r+0x1a>
 80190e0:	682b      	ldr	r3, [r5, #0]
 80190e2:	b103      	cbz	r3, 80190e6 <_isatty_r+0x1a>
 80190e4:	6023      	str	r3, [r4, #0]
 80190e6:	bd38      	pop	{r3, r4, r5, pc}
 80190e8:	20015234 	.word	0x20015234

080190ec <_kill_r>:
 80190ec:	b538      	push	{r3, r4, r5, lr}
 80190ee:	4d07      	ldr	r5, [pc, #28]	@ (801910c <_kill_r+0x20>)
 80190f0:	2300      	movs	r3, #0
 80190f2:	4604      	mov	r4, r0
 80190f4:	4608      	mov	r0, r1
 80190f6:	4611      	mov	r1, r2
 80190f8:	602b      	str	r3, [r5, #0]
 80190fa:	f7e8 fb6d 	bl	80017d8 <_kill>
 80190fe:	1c43      	adds	r3, r0, #1
 8019100:	d102      	bne.n	8019108 <_kill_r+0x1c>
 8019102:	682b      	ldr	r3, [r5, #0]
 8019104:	b103      	cbz	r3, 8019108 <_kill_r+0x1c>
 8019106:	6023      	str	r3, [r4, #0]
 8019108:	bd38      	pop	{r3, r4, r5, pc}
 801910a:	bf00      	nop
 801910c:	20015234 	.word	0x20015234

08019110 <_getpid_r>:
 8019110:	f7e8 bb5a 	b.w	80017c8 <_getpid>

08019114 <_init>:
 8019114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019116:	bf00      	nop
 8019118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801911a:	bc08      	pop	{r3}
 801911c:	469e      	mov	lr, r3
 801911e:	4770      	bx	lr

08019120 <_fini>:
 8019120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019122:	bf00      	nop
 8019124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019126:	bc08      	pop	{r3}
 8019128:	469e      	mov	lr, r3
 801912a:	4770      	bx	lr
