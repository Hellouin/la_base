
basejump.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000437c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800450c  0800450c  0001450c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004584  08004584  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004584  08004584  00014584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800458c  0800458c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001260  20000010  080045a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001270  080045a4  00021270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee41  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002501  00000000  00000000  0002eec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  000313c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a41  00000000  00000000  00032130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026721  00000000  00000000  00032b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f6e4  00000000  00000000  00059292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef830  00000000  00000000  00068976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035e0  00000000  00000000  001581a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0015b788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080044f4 	.word	0x080044f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080044f4 	.word	0x080044f4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004cc:	b480      	push	{r7}
 80004ce:	b085      	sub	sp, #20
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	4a07      	ldr	r2, [pc, #28]	; (80004f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80004dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	4a06      	ldr	r2, [pc, #24]	; (80004fc <vApplicationGetIdleTaskMemory+0x30>)
 80004e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	2000002c 	.word	0x2000002c
 80004fc:	20000080 	.word	0x20000080

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b5b0      	push	{r4, r5, r7, lr}
 8000502:	b088      	sub	sp, #32
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 f9f9 	bl	80008fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f81d 	bl	8000548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 f89d 	bl	800064c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000512:	f000 f86b 	bl	80005ec <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <main+0x40>)
 8000518:	1d3c      	adds	r4, r7, #4
 800051a:	461d      	mov	r5, r3
 800051c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800051e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f002 fd69 	bl	8003004 <osThreadCreate>
 8000532:	4603      	mov	r3, r0
 8000534:	4a03      	ldr	r2, [pc, #12]	; (8000544 <main+0x44>)
 8000536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000538:	f002 fd5d 	bl	8002ff6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800053c:	e7fe      	b.n	800053c <main+0x3c>
 800053e:	bf00      	nop
 8000540:	08004518 	.word	0x08004518
 8000544:	20000308 	.word	0x20000308

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b096      	sub	sp, #88	; 0x58
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0314 	add.w	r3, r7, #20
 8000552:	2244      	movs	r2, #68	; 0x44
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f003 ffa0 	bl	800449c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	463b      	mov	r3, r7
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f000 fcf7 	bl	8000f60 <HAL_PWREx_ControlVoltageScaling>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000578:	f000 f8d6 	bl	8000728 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059a:	2307      	movs	r3, #7
 800059c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fd2e 	bl	800100c <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005b6:	f000 f8b7 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	463b      	mov	r3, r7
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f8f6 	bl	80017c4 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005de:	f000 f8a3 	bl	8000728 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3758      	adds	r7, #88	; 0x58
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f0:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_USART2_UART_Init+0x58>)
 80005f2:	4a15      	ldr	r2, [pc, #84]	; (8000648 <MX_USART2_UART_Init+0x5c>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005f6:	4b13      	ldr	r3, [pc, #76]	; (8000644 <MX_USART2_UART_Init+0x58>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000622:	4b08      	ldr	r3, [pc, #32]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_USART2_UART_Init+0x58>)
 800062a:	2200      	movs	r2, #0
 800062c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800062e:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_USART2_UART_Init+0x58>)
 8000630:	f001 ffa8 	bl	8002584 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f875 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	20000280 	.word	0x20000280
 8000648:	40004400 	.word	0x40004400

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08a      	sub	sp, #40	; 0x28
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000668:	f043 0304 	orr.w	r3, r3, #4
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0304 	and.w	r3, r3, #4
 8000676:	613b      	str	r3, [r7, #16]
 8000678:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	4b25      	ldr	r3, [pc, #148]	; (8000710 <MX_GPIO_Init+0xc4>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a24      	ldr	r2, [pc, #144]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000680:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b22      	ldr	r3, [pc, #136]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <MX_GPIO_Init+0xc4>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	4b19      	ldr	r3, [pc, #100]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ae:	4a18      	ldr	r2, [pc, #96]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b6:	4b16      	ldr	r3, [pc, #88]	; (8000710 <MX_GPIO_Init+0xc4>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2120      	movs	r1, #32
 80006c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ca:	f000 fc23 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	480b      	ldr	r0, [pc, #44]	; (8000714 <MX_GPIO_Init+0xc8>)
 80006e6:	f000 fa6b 	bl	8000bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ea:	2320      	movs	r3, #32
 80006ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 0314 	add.w	r3, r7, #20
 80006fe:	4619      	mov	r1, r3
 8000700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000704:	f000 fa5c 	bl	8000bc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000
 8000714:	48000800 	.word	0x48000800

08000718 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000720:	2001      	movs	r0, #1
 8000722:	f002 fcbb 	bl	800309c <osDelay>
 8000726:	e7fb      	b.n	8000720 <StartDefaultTask+0x8>

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_MspInit+0x4c>)
 800073c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073e:	4a10      	ldr	r2, [pc, #64]	; (8000780 <HAL_MspInit+0x4c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6613      	str	r3, [r2, #96]	; 0x60
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_MspInit+0x4c>)
 8000748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <HAL_MspInit+0x4c>)
 8000754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_MspInit+0x4c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	6593      	str	r3, [r2, #88]	; 0x58
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <HAL_MspInit+0x4c>)
 8000760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	210f      	movs	r1, #15
 800076e:	f06f 0001 	mvn.w	r0, #1
 8000772:	f000 f9fc 	bl	8000b6e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40021000 	.word	0x40021000

08000784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b0ac      	sub	sp, #176	; 0xb0
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	2288      	movs	r2, #136	; 0x88
 80007a2:	2100      	movs	r1, #0
 80007a4:	4618      	mov	r0, r3
 80007a6:	f003 fe79 	bl	800449c <memset>
  if(huart->Instance==USART2)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a21      	ldr	r2, [pc, #132]	; (8000834 <HAL_UART_MspInit+0xb0>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d13b      	bne.n	800082c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 fa23 	bl	8001c0c <HAL_RCCEx_PeriphCLKConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007cc:	f7ff ffac 	bl	8000728 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <HAL_UART_MspInit+0xb4>)
 80007d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d4:	4a18      	ldr	r2, [pc, #96]	; (8000838 <HAL_UART_MspInit+0xb4>)
 80007d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007da:	6593      	str	r3, [r2, #88]	; 0x58
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <HAL_UART_MspInit+0xb4>)
 80007de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e8:	4b13      	ldr	r3, [pc, #76]	; (8000838 <HAL_UART_MspInit+0xb4>)
 80007ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <HAL_UART_MspInit+0xb4>)
 80007ee:	f043 0301 	orr.w	r3, r3, #1
 80007f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f4:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_UART_MspInit+0xb4>)
 80007f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000800:	230c      	movs	r3, #12
 8000802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000812:	2303      	movs	r3, #3
 8000814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000818:	2307      	movs	r3, #7
 800081a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 f9ca 	bl	8000bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800082c:	bf00      	nop
 800082e:	37b0      	adds	r7, #176	; 0xb0
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40004400 	.word	0x40004400
 8000838:	40021000 	.word	0x40021000

0800083c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000840:	e7fe      	b.n	8000840 <NMI_Handler+0x4>

08000842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <HardFault_Handler+0x4>

08000848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <MemManage_Handler+0x4>

0800084e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000852:	e7fe      	b.n	8000852 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <UsageFault_Handler+0x4>

0800085a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086c:	f000 f8a2 	bl	80009b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000870:	f003 f998 	bl	8003ba4 <xTaskGetSchedulerState>
 8000874:	4603      	mov	r3, r0
 8000876:	2b01      	cmp	r3, #1
 8000878:	d001      	beq.n	800087e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800087a:	f003 fbd5 	bl	8004028 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <SystemInit+0x20>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <SystemInit+0x20>)
 8000890:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008ac:	f7ff ffea 	bl	8000884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80008b2:	490d      	ldr	r1, [pc, #52]	; (80008e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008b4:	4a0d      	ldr	r2, [pc, #52]	; (80008ec <LoopForever+0xe>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b8:	e002      	b.n	80008c0 <LoopCopyDataInit>

080008ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008be:	3304      	adds	r3, #4

080008c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008c4:	d3f9      	bcc.n	80008ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008c6:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c8:	4c0a      	ldr	r4, [pc, #40]	; (80008f4 <LoopForever+0x16>)
  movs r3, #0
 80008ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008cc:	e001      	b.n	80008d2 <LoopFillZerobss>

080008ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008d0:	3204      	adds	r2, #4

080008d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008d4:	d3fb      	bcc.n	80008ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008d6:	f003 fde9 	bl	80044ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008da:	f7ff fe11 	bl	8000500 <main>

080008de <LoopForever>:

LoopForever:
    b LoopForever
 80008de:	e7fe      	b.n	80008de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008ec:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 80008f0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008f4:	20001270 	.word	0x20001270

080008f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f8:	e7fe      	b.n	80008f8 <ADC1_2_IRQHandler>
	...

080008fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000902:	2300      	movs	r3, #0
 8000904:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_Init+0x3c>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_Init+0x3c>)
 800090c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000910:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000912:	2003      	movs	r0, #3
 8000914:	f000 f920 	bl	8000b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000918:	200f      	movs	r0, #15
 800091a:	f000 f80f 	bl	800093c <HAL_InitTick>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d002      	beq.n	800092a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000924:	2301      	movs	r3, #1
 8000926:	71fb      	strb	r3, [r7, #7]
 8000928:	e001      	b.n	800092e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800092a:	f7ff ff03 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800092e:	79fb      	ldrb	r3, [r7, #7]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40022000 	.word	0x40022000

0800093c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <HAL_InitTick+0x6c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d023      	beq.n	8000998 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_InitTick+0x70>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <HAL_InitTick+0x6c>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f91d 	bl	8000ba6 <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d10f      	bne.n	8000992 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d809      	bhi.n	800098c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	f04f 30ff 	mov.w	r0, #4294967295
 8000980:	f000 f8f5 	bl	8000b6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <HAL_InitTick+0x74>)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	e007      	b.n	800099c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800098c:	2301      	movs	r3, #1
 800098e:	73fb      	strb	r3, [r7, #15]
 8000990:	e004      	b.n	800099c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	73fb      	strb	r3, [r7, #15]
 8000996:	e001      	b.n	800099c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000998:	2301      	movs	r3, #1
 800099a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800099c:	7bfb      	ldrb	r3, [r7, #15]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3710      	adds	r7, #16
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x20>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	461a      	mov	r2, r3
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_IncTick+0x24>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4413      	add	r3, r2
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <HAL_IncTick+0x24>)
 80009c6:	6013      	str	r3, [r2, #0]
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000560 	.word	0x20000560

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <HAL_GetTick+0x14>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000560 	.word	0x20000560

080009f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a06:	68db      	ldr	r3, [r3, #12]
 8000a08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <__NVIC_SetPriorityGrouping+0x44>)
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	60d3      	str	r3, [r2, #12]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <__NVIC_GetPriorityGrouping+0x18>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	0a1b      	lsrs	r3, r3, #8
 8000a46:	f003 0307 	and.w	r3, r3, #7
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	4603      	mov	r3, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	db0a      	blt.n	8000a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <__NVIC_SetPriority+0x4c>)
 8000a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a76:	0112      	lsls	r2, r2, #4
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	440b      	add	r3, r1
 8000a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a80:	e00a      	b.n	8000a98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	4908      	ldr	r1, [pc, #32]	; (8000aa8 <__NVIC_SetPriority+0x50>)
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	f003 030f 	and.w	r3, r3, #15
 8000a8e:	3b04      	subs	r3, #4
 8000a90:	0112      	lsls	r2, r2, #4
 8000a92:	b2d2      	uxtb	r2, r2
 8000a94:	440b      	add	r3, r1
 8000a96:	761a      	strb	r2, [r3, #24]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000e100 	.word	0xe000e100
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac0:	69fb      	ldr	r3, [r7, #28]
 8000ac2:	f1c3 0307 	rsb	r3, r3, #7
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	bf28      	it	cs
 8000aca:	2304      	movcs	r3, #4
 8000acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2b06      	cmp	r3, #6
 8000ad4:	d902      	bls.n	8000adc <NVIC_EncodePriority+0x30>
 8000ad6:	69fb      	ldr	r3, [r7, #28]
 8000ad8:	3b03      	subs	r3, #3
 8000ada:	e000      	b.n	8000ade <NVIC_EncodePriority+0x32>
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	69bb      	ldr	r3, [r7, #24]
 8000ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aea:	43da      	mvns	r2, r3
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	401a      	ands	r2, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af4:	f04f 31ff 	mov.w	r1, #4294967295
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	fa01 f303 	lsl.w	r3, r1, r3
 8000afe:	43d9      	mvns	r1, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	4313      	orrs	r3, r2
         );
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3724      	adds	r7, #36	; 0x24
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b24:	d301      	bcc.n	8000b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e00f      	b.n	8000b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <SysTick_Config+0x40>)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b32:	210f      	movs	r1, #15
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f7ff ff8e 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b3c:	4b05      	ldr	r3, [pc, #20]	; (8000b54 <SysTick_Config+0x40>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b42:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <SysTick_Config+0x40>)
 8000b44:	2207      	movs	r2, #7
 8000b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f7ff ff47 	bl	80009f4 <__NVIC_SetPriorityGrouping>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b086      	sub	sp, #24
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	4603      	mov	r3, r0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b80:	f7ff ff5c 	bl	8000a3c <__NVIC_GetPriorityGrouping>
 8000b84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	68b9      	ldr	r1, [r7, #8]
 8000b8a:	6978      	ldr	r0, [r7, #20]
 8000b8c:	f7ff ff8e 	bl	8000aac <NVIC_EncodePriority>
 8000b90:	4602      	mov	r2, r0
 8000b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b96:	4611      	mov	r1, r2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	bf00      	nop
 8000ba0:	3718      	adds	r7, #24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ffb0 	bl	8000b14 <SysTick_Config>
 8000bb4:	4603      	mov	r3, r0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b087      	sub	sp, #28
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e17f      	b.n	8000ed0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	2101      	movs	r1, #1
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 8171 	beq.w	8000eca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f003 0303 	and.w	r3, r3, #3
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d005      	beq.n	8000c00 <HAL_GPIO_Init+0x40>
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d130      	bne.n	8000c62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68da      	ldr	r2, [r3, #12]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c36:	2201      	movs	r2, #1
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	091b      	lsrs	r3, r3, #4
 8000c4c:	f003 0201 	and.w	r2, r3, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d118      	bne.n	8000ca0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000c74:	2201      	movs	r2, #1
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	08db      	lsrs	r3, r3, #3
 8000c8a:	f003 0201 	and.w	r2, r3, #1
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d017      	beq.n	8000cdc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d123      	bne.n	8000d30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	220f      	movs	r2, #15
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	691a      	ldr	r2, [r3, #16]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	08da      	lsrs	r2, r3, #3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3208      	adds	r2, #8
 8000d2a:	6939      	ldr	r1, [r7, #16]
 8000d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0203 	and.w	r2, r3, #3
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	f000 80ac 	beq.w	8000eca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d72:	4b5f      	ldr	r3, [pc, #380]	; (8000ef0 <HAL_GPIO_Init+0x330>)
 8000d74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d76:	4a5e      	ldr	r2, [pc, #376]	; (8000ef0 <HAL_GPIO_Init+0x330>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <HAL_GPIO_Init+0x330>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d8a:	4a5a      	ldr	r2, [pc, #360]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	089b      	lsrs	r3, r3, #2
 8000d90:	3302      	adds	r3, #2
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	009b      	lsls	r3, r3, #2
 8000da0:	220f      	movs	r2, #15
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	693a      	ldr	r2, [r7, #16]
 8000daa:	4013      	ands	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000db4:	d025      	beq.n	8000e02 <HAL_GPIO_Init+0x242>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a4f      	ldr	r2, [pc, #316]	; (8000ef8 <HAL_GPIO_Init+0x338>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d01f      	beq.n	8000dfe <HAL_GPIO_Init+0x23e>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a4e      	ldr	r2, [pc, #312]	; (8000efc <HAL_GPIO_Init+0x33c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d019      	beq.n	8000dfa <HAL_GPIO_Init+0x23a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4d      	ldr	r2, [pc, #308]	; (8000f00 <HAL_GPIO_Init+0x340>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d013      	beq.n	8000df6 <HAL_GPIO_Init+0x236>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4c      	ldr	r2, [pc, #304]	; (8000f04 <HAL_GPIO_Init+0x344>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d00d      	beq.n	8000df2 <HAL_GPIO_Init+0x232>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4b      	ldr	r2, [pc, #300]	; (8000f08 <HAL_GPIO_Init+0x348>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d007      	beq.n	8000dee <HAL_GPIO_Init+0x22e>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4a      	ldr	r2, [pc, #296]	; (8000f0c <HAL_GPIO_Init+0x34c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d101      	bne.n	8000dea <HAL_GPIO_Init+0x22a>
 8000de6:	2306      	movs	r3, #6
 8000de8:	e00c      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000dea:	2307      	movs	r3, #7
 8000dec:	e00a      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000dee:	2305      	movs	r3, #5
 8000df0:	e008      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e006      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000df6:	2303      	movs	r3, #3
 8000df8:	e004      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	e002      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e000      	b.n	8000e04 <HAL_GPIO_Init+0x244>
 8000e02:	2300      	movs	r3, #0
 8000e04:	697a      	ldr	r2, [r7, #20]
 8000e06:	f002 0203 	and.w	r2, r2, #3
 8000e0a:	0092      	lsls	r2, r2, #2
 8000e0c:	4093      	lsls	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e14:	4937      	ldr	r1, [pc, #220]	; (8000ef4 <HAL_GPIO_Init+0x334>)
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	3302      	adds	r3, #2
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e46:	4a32      	ldr	r2, [pc, #200]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e70:	4a27      	ldr	r2, [pc, #156]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e76:	4b26      	ldr	r3, [pc, #152]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e9a:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <HAL_GPIO_Init+0x350>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f47f ae78 	bne.w	8000bd0 <HAL_GPIO_Init+0x10>
  }
}
 8000ee0:	bf00      	nop
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	48000400 	.word	0x48000400
 8000efc:	48000800 	.word	0x48000800
 8000f00:	48000c00 	.word	0x48000c00
 8000f04:	48001000 	.word	0x48001000
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	48001800 	.word	0x48001800
 8000f10:	40010400 	.word	0x40010400

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	807b      	strh	r3, [r7, #2]
 8000f20:	4613      	mov	r3, r2
 8000f22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f24:	787b      	ldrb	r3, [r7, #1]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f2a:	887a      	ldrh	r2, [r7, #2]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f30:	e002      	b.n	8000f38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <HAL_PWREx_GetVoltageRange+0x18>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	40007000 	.word	0x40007000

08000f60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f6e:	d130      	bne.n	8000fd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f70:	4b23      	ldr	r3, [pc, #140]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f7c:	d038      	beq.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f7e:	4b20      	ldr	r3, [pc, #128]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2232      	movs	r2, #50	; 0x32
 8000f94:	fb02 f303 	mul.w	r3, r2, r3
 8000f98:	4a1b      	ldr	r2, [pc, #108]	; (8001008 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f9e:	0c9b      	lsrs	r3, r3, #18
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fa4:	e002      	b.n	8000fac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fac:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb8:	d102      	bne.n	8000fc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1f2      	bne.n	8000fa6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc2:	695b      	ldr	r3, [r3, #20]
 8000fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fcc:	d110      	bne.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e00f      	b.n	8000ff2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fde:	d007      	beq.n	8000ff0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fe8:	4a05      	ldr	r2, [pc, #20]	; (8001000 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40007000 	.word	0x40007000
 8001004:	20000000 	.word	0x20000000
 8001008:	431bde83 	.word	0x431bde83

0800100c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d101      	bne.n	800101e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e3ca      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800101e:	4b97      	ldr	r3, [pc, #604]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f003 030c 	and.w	r3, r3, #12
 8001026:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001028:	4b94      	ldr	r3, [pc, #592]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 80e4 	beq.w	8001208 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d007      	beq.n	8001056 <HAL_RCC_OscConfig+0x4a>
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	2b0c      	cmp	r3, #12
 800104a:	f040 808b 	bne.w	8001164 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b01      	cmp	r3, #1
 8001052:	f040 8087 	bne.w	8001164 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001056:	4b89      	ldr	r3, [pc, #548]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	2b00      	cmp	r3, #0
 8001060:	d005      	beq.n	800106e <HAL_RCC_OscConfig+0x62>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e3a2      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	4b82      	ldr	r3, [pc, #520]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0308 	and.w	r3, r3, #8
 800107a:	2b00      	cmp	r3, #0
 800107c:	d004      	beq.n	8001088 <HAL_RCC_OscConfig+0x7c>
 800107e:	4b7f      	ldr	r3, [pc, #508]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001086:	e005      	b.n	8001094 <HAL_RCC_OscConfig+0x88>
 8001088:	4b7c      	ldr	r3, [pc, #496]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800108a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800108e:	091b      	lsrs	r3, r3, #4
 8001090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001094:	4293      	cmp	r3, r2
 8001096:	d223      	bcs.n	80010e0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fd55 	bl	8001b4c <RCC_SetFlashLatencyFromMSIRange>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e383      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ac:	4b73      	ldr	r3, [pc, #460]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a72      	ldr	r2, [pc, #456]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b70      	ldr	r3, [pc, #448]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	496d      	ldr	r1, [pc, #436]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ca:	4b6c      	ldr	r3, [pc, #432]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	4968      	ldr	r1, [pc, #416]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010da:	4313      	orrs	r3, r2
 80010dc:	604b      	str	r3, [r1, #4]
 80010de:	e025      	b.n	800112c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e0:	4b66      	ldr	r3, [pc, #408]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a65      	ldr	r2, [pc, #404]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b63      	ldr	r3, [pc, #396]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	4960      	ldr	r1, [pc, #384]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fe:	4b5f      	ldr	r3, [pc, #380]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	495b      	ldr	r1, [pc, #364]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fd15 	bl	8001b4c <RCC_SetFlashLatencyFromMSIRange>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e343      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800112c:	f000 fc4a 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001130:	4602      	mov	r2, r0
 8001132:	4b52      	ldr	r3, [pc, #328]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	091b      	lsrs	r3, r3, #4
 8001138:	f003 030f 	and.w	r3, r3, #15
 800113c:	4950      	ldr	r1, [pc, #320]	; (8001280 <HAL_RCC_OscConfig+0x274>)
 800113e:	5ccb      	ldrb	r3, [r1, r3]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	fa22 f303 	lsr.w	r3, r2, r3
 8001148:	4a4e      	ldr	r2, [pc, #312]	; (8001284 <HAL_RCC_OscConfig+0x278>)
 800114a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800114c:	4b4e      	ldr	r3, [pc, #312]	; (8001288 <HAL_RCC_OscConfig+0x27c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fbf3 	bl	800093c <HAL_InitTick>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d052      	beq.n	8001206 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	e327      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d032      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800116c:	4b43      	ldr	r3, [pc, #268]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a42      	ldr	r2, [pc, #264]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001178:	f7ff fc30 	bl	80009dc <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001180:	f7ff fc2c 	bl	80009dc <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e310      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001192:	4b3a      	ldr	r3, [pc, #232]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	4a36      	ldr	r2, [pc, #216]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	4b34      	ldr	r3, [pc, #208]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a1b      	ldr	r3, [r3, #32]
 80011b6:	4931      	ldr	r1, [pc, #196]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011bc:	4b2f      	ldr	r3, [pc, #188]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	69db      	ldr	r3, [r3, #28]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	492c      	ldr	r1, [pc, #176]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011cc:	4313      	orrs	r3, r2
 80011ce:	604b      	str	r3, [r1, #4]
 80011d0:	e01a      	b.n	8001208 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a29      	ldr	r2, [pc, #164]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011de:	f7ff fbfd 	bl	80009dc <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011e6:	f7ff fbf9 	bl	80009dc <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e2dd      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011f8:	4b20      	ldr	r3, [pc, #128]	; (800127c <HAL_RCC_OscConfig+0x270>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0302 	and.w	r3, r3, #2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x1da>
 8001204:	e000      	b.n	8001208 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001206:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d074      	beq.n	80012fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b08      	cmp	r3, #8
 8001218:	d005      	beq.n	8001226 <HAL_RCC_OscConfig+0x21a>
 800121a:	69bb      	ldr	r3, [r7, #24]
 800121c:	2b0c      	cmp	r3, #12
 800121e:	d10e      	bne.n	800123e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d10b      	bne.n	800123e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d064      	beq.n	80012fc <HAL_RCC_OscConfig+0x2f0>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d160      	bne.n	80012fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e2ba      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001246:	d106      	bne.n	8001256 <HAL_RCC_OscConfig+0x24a>
 8001248:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0b      	ldr	r2, [pc, #44]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800124e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e026      	b.n	80012a4 <HAL_RCC_OscConfig+0x298>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800125e:	d115      	bne.n	800128c <HAL_RCC_OscConfig+0x280>
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a05      	ldr	r2, [pc, #20]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001266:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a02      	ldr	r2, [pc, #8]	; (800127c <HAL_RCC_OscConfig+0x270>)
 8001272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	e014      	b.n	80012a4 <HAL_RCC_OscConfig+0x298>
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000
 8001280:	0800453c 	.word	0x0800453c
 8001284:	20000000 	.word	0x20000000
 8001288:	20000004 	.word	0x20000004
 800128c:	4ba0      	ldr	r3, [pc, #640]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a9f      	ldr	r2, [pc, #636]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b9d      	ldr	r3, [pc, #628]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a9c      	ldr	r2, [pc, #624]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fb96 	bl	80009dc <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fb92 	bl	80009dc <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e276      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012c6:	4b92      	ldr	r3, [pc, #584]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x2a8>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fb82 	bl	80009dc <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fb7e 	bl	80009dc <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e262      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012ee:	4b88      	ldr	r3, [pc, #544]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x2d0>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d060      	beq.n	80013cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	2b04      	cmp	r3, #4
 800130e:	d005      	beq.n	800131c <HAL_RCC_OscConfig+0x310>
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b0c      	cmp	r3, #12
 8001314:	d119      	bne.n	800134a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2b02      	cmp	r3, #2
 800131a:	d116      	bne.n	800134a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800131c:	4b7c      	ldr	r3, [pc, #496]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_OscConfig+0x328>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e23f      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001334:	4b76      	ldr	r3, [pc, #472]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	061b      	lsls	r3, r3, #24
 8001342:	4973      	ldr	r1, [pc, #460]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001344:	4313      	orrs	r3, r2
 8001346:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001348:	e040      	b.n	80013cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d023      	beq.n	800139a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001352:	4b6f      	ldr	r3, [pc, #444]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a6e      	ldr	r2, [pc, #440]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800135c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135e:	f7ff fb3d 	bl	80009dc <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001366:	f7ff fb39 	bl	80009dc <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e21d      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001378:	4b65      	ldr	r3, [pc, #404]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001384:	4b62      	ldr	r3, [pc, #392]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	691b      	ldr	r3, [r3, #16]
 8001390:	061b      	lsls	r3, r3, #24
 8001392:	495f      	ldr	r1, [pc, #380]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
 8001398:	e018      	b.n	80013cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139a:	4b5d      	ldr	r3, [pc, #372]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a5c      	ldr	r2, [pc, #368]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80013a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a6:	f7ff fb19 	bl	80009dc <HAL_GetTick>
 80013aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ac:	e008      	b.n	80013c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ae:	f7ff fb15 	bl	80009dc <HAL_GetTick>
 80013b2:	4602      	mov	r2, r0
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d901      	bls.n	80013c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e1f9      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013c0:	4b53      	ldr	r3, [pc, #332]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1f0      	bne.n	80013ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d03c      	beq.n	8001452 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d01c      	beq.n	800141a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013e0:	4b4b      	ldr	r3, [pc, #300]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80013e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e6:	4a4a      	ldr	r2, [pc, #296]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f0:	f7ff faf4 	bl	80009dc <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013f8:	f7ff faf0 	bl	80009dc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1d4      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800140a:	4b41      	ldr	r3, [pc, #260]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800140c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0ef      	beq.n	80013f8 <HAL_RCC_OscConfig+0x3ec>
 8001418:	e01b      	b.n	8001452 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001420:	4a3b      	ldr	r2, [pc, #236]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001422:	f023 0301 	bic.w	r3, r3, #1
 8001426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142a:	f7ff fad7 	bl	80009dc <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001432:	f7ff fad3 	bl	80009dc <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e1b7      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001444:	4b32      	ldr	r3, [pc, #200]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1ef      	bne.n	8001432 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	f000 80a6 	beq.w	80015ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001460:	2300      	movs	r3, #0
 8001462:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001464:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d10d      	bne.n	800148c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a26      	ldr	r2, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001488:	2301      	movs	r3, #1
 800148a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800148c:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_RCC_OscConfig+0x508>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001494:	2b00      	cmp	r3, #0
 8001496:	d118      	bne.n	80014ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001498:	4b1e      	ldr	r3, [pc, #120]	; (8001514 <HAL_RCC_OscConfig+0x508>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <HAL_RCC_OscConfig+0x508>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a4:	f7ff fa9a 	bl	80009dc <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ac:	f7ff fa96 	bl	80009dc <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e17a      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_RCC_OscConfig+0x508>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x4d8>
 80014d2:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80014d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d8:	4a0d      	ldr	r2, [pc, #52]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e2:	e029      	b.n	8001538 <HAL_RCC_OscConfig+0x52c>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	2b05      	cmp	r3, #5
 80014ea:	d115      	bne.n	8001518 <HAL_RCC_OscConfig+0x50c>
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80014ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f2:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80014f4:	f043 0304 	orr.w	r3, r3, #4
 80014f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a03      	ldr	r2, [pc, #12]	; (8001510 <HAL_RCC_OscConfig+0x504>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150c:	e014      	b.n	8001538 <HAL_RCC_OscConfig+0x52c>
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	40007000 	.word	0x40007000
 8001518:	4b9c      	ldr	r3, [pc, #624]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800151a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151e:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001520:	f023 0301 	bic.w	r3, r3, #1
 8001524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001528:	4b98      	ldr	r3, [pc, #608]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800152a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152e:	4a97      	ldr	r2, [pc, #604]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d016      	beq.n	800156e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff fa4c 	bl	80009dc <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001546:	e00a      	b.n	800155e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001548:	f7ff fa48 	bl	80009dc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e12a      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800155e:	4b8b      	ldr	r3, [pc, #556]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0ed      	beq.n	8001548 <HAL_RCC_OscConfig+0x53c>
 800156c:	e015      	b.n	800159a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156e:	f7ff fa35 	bl	80009dc <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001574:	e00a      	b.n	800158c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001576:	f7ff fa31 	bl	80009dc <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	f241 3288 	movw	r2, #5000	; 0x1388
 8001584:	4293      	cmp	r3, r2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e113      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800158c:	4b7f      	ldr	r3, [pc, #508]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800158e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ed      	bne.n	8001576 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d105      	bne.n	80015ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a0:	4b7a      	ldr	r3, [pc, #488]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80015a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a4:	4a79      	ldr	r2, [pc, #484]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80015a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015aa:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80fe 	beq.w	80017b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	f040 80d0 	bne.w	8001760 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015c0:	4b72      	ldr	r3, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	f003 0203 	and.w	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d130      	bne.n	8001636 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	3b01      	subs	r3, #1
 80015e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d127      	bne.n	8001636 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d11f      	bne.n	8001636 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001600:	2a07      	cmp	r2, #7
 8001602:	bf14      	ite	ne
 8001604:	2201      	movne	r2, #1
 8001606:	2200      	moveq	r2, #0
 8001608:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160a:	4293      	cmp	r3, r2
 800160c:	d113      	bne.n	8001636 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	3b01      	subs	r3, #1
 800161c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d109      	bne.n	8001636 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001632:	429a      	cmp	r2, r3
 8001634:	d06e      	beq.n	8001714 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b0c      	cmp	r3, #12
 800163a:	d069      	beq.n	8001710 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d105      	bne.n	8001654 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001648:	4b50      	ldr	r3, [pc, #320]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0ad      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800165e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001662:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001664:	f7ff f9ba 	bl	80009dc <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166c:	f7ff f9b6 	bl	80009dc <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b02      	cmp	r3, #2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e09a      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167e:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800168a:	4b40      	ldr	r3, [pc, #256]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b40      	ldr	r3, [pc, #256]	; (8001790 <HAL_RCC_OscConfig+0x784>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800169a:	3a01      	subs	r2, #1
 800169c:	0112      	lsls	r2, r2, #4
 800169e:	4311      	orrs	r1, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016a4:	0212      	lsls	r2, r2, #8
 80016a6:	4311      	orrs	r1, r2
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016ac:	0852      	lsrs	r2, r2, #1
 80016ae:	3a01      	subs	r2, #1
 80016b0:	0552      	lsls	r2, r2, #21
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016b8:	0852      	lsrs	r2, r2, #1
 80016ba:	3a01      	subs	r2, #1
 80016bc:	0652      	lsls	r2, r2, #25
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016c4:	0912      	lsrs	r2, r2, #4
 80016c6:	0452      	lsls	r2, r2, #17
 80016c8:	430a      	orrs	r2, r1
 80016ca:	4930      	ldr	r1, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a2d      	ldr	r2, [pc, #180]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80016d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4a2a      	ldr	r2, [pc, #168]	; (800178c <HAL_RCC_OscConfig+0x780>)
 80016e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016e8:	f7ff f978 	bl	80009dc <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ee:	e008      	b.n	8001702 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f0:	f7ff f974 	bl	80009dc <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e058      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001702:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d0f0      	beq.n	80016f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800170e:	e050      	b.n	80017b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e04f      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d148      	bne.n	80017b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a19      	ldr	r2, [pc, #100]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001726:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800172a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	4a16      	ldr	r2, [pc, #88]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001736:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001738:	f7ff f950 	bl	80009dc <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001740:	f7ff f94c 	bl	80009dc <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e030      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175a:	2b00      	cmp	r3, #0
 800175c:	d0f0      	beq.n	8001740 <HAL_RCC_OscConfig+0x734>
 800175e:	e028      	b.n	80017b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b0c      	cmp	r3, #12
 8001764:	d023      	beq.n	80017ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_OscConfig+0x780>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a08      	ldr	r2, [pc, #32]	; (800178c <HAL_RCC_OscConfig+0x780>)
 800176c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff f933 	bl	80009dc <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001778:	e00c      	b.n	8001794 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff f92f 	bl	80009dc <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d905      	bls.n	8001794 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
 800178c:	40021000 	.word	0x40021000
 8001790:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_OscConfig+0x7b0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ec      	bne.n	800177a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_RCC_OscConfig+0x7b0>)
 80017a2:	68da      	ldr	r2, [r3, #12]
 80017a4:	4905      	ldr	r1, [pc, #20]	; (80017bc <HAL_RCC_OscConfig+0x7b0>)
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_OscConfig+0x7b4>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
 80017ac:	e001      	b.n	80017b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	feeefffc 	.word	0xfeeefffc

080017c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0e7      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017d8:	4b75      	ldr	r3, [pc, #468]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d910      	bls.n	8001808 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e6:	4b72      	ldr	r3, [pc, #456]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 0207 	bic.w	r2, r3, #7
 80017ee:	4970      	ldr	r1, [pc, #448]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b6e      	ldr	r3, [pc, #440]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0cf      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d010      	beq.n	8001836 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b66      	ldr	r3, [pc, #408]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001820:	429a      	cmp	r2, r3
 8001822:	d908      	bls.n	8001836 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b63      	ldr	r3, [pc, #396]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4960      	ldr	r1, [pc, #384]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d04c      	beq.n	80018dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	4b5a      	ldr	r3, [pc, #360]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d121      	bne.n	800189a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e0a6      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	4b54      	ldr	r3, [pc, #336]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d115      	bne.n	800189a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e09a      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800187a:	4b4e      	ldr	r3, [pc, #312]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e08e      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800188a:	4b4a      	ldr	r3, [pc, #296]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e086      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800189a:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 0203 	bic.w	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	4943      	ldr	r1, [pc, #268]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018ac:	f7ff f896 	bl	80009dc <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	e00a      	b.n	80018ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff f892 	bl	80009dc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e06e      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	4b3a      	ldr	r3, [pc, #232]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 020c 	and.w	r2, r3, #12
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	429a      	cmp	r2, r3
 80018da:	d1eb      	bne.n	80018b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0302 	and.w	r3, r3, #2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d208      	bcs.n	800190a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f8:	4b2e      	ldr	r3, [pc, #184]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	492b      	ldr	r1, [pc, #172]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001906:	4313      	orrs	r3, r2
 8001908:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800190a:	4b29      	ldr	r3, [pc, #164]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d210      	bcs.n	800193a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 0207 	bic.w	r2, r3, #7
 8001920:	4923      	ldr	r1, [pc, #140]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001928:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e036      	b.n	80019a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	2b00      	cmp	r3, #0
 8001944:	d008      	beq.n	8001958 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	4918      	ldr	r1, [pc, #96]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001954:	4313      	orrs	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4910      	ldr	r1, [pc, #64]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001974:	4313      	orrs	r3, r2
 8001976:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001978:	f000 f824 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 800197c:	4602      	mov	r2, r0
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	490b      	ldr	r1, [pc, #44]	; (80019b8 <HAL_RCC_ClockConfig+0x1f4>)
 800198a:	5ccb      	ldrb	r3, [r1, r3]
 800198c:	f003 031f 	and.w	r3, r3, #31
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1f8>)
 8001996:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <HAL_RCC_ClockConfig+0x1fc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe ffcd 	bl	800093c <HAL_InitTick>
 80019a2:	4603      	mov	r3, r0
 80019a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80019a6:	7afb      	ldrb	r3, [r7, #11]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	0800453c 	.word	0x0800453c
 80019bc:	20000000 	.word	0x20000000
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b089      	sub	sp, #36	; 0x24
 80019c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019dc:	4b3b      	ldr	r3, [pc, #236]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_GetSysClockFreq+0x34>
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	d121      	bne.n	8001a36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d11e      	bne.n	8001a36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	f003 030f 	and.w	r3, r3, #15
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e005      	b.n	8001a20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a14:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	091b      	lsrs	r3, r3, #4
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a20:	4a2b      	ldr	r2, [pc, #172]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10d      	bne.n	8001a4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d102      	bne.n	8001a42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e004      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a48:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d134      	bne.n	8001abc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d003      	beq.n	8001a6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d003      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0xac>
 8001a68:	e005      	b.n	8001a76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a6c:	617b      	str	r3, [r7, #20]
      break;
 8001a6e:	e005      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001a70:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001a72:	617b      	str	r3, [r7, #20]
      break;
 8001a74:	e002      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	617b      	str	r3, [r7, #20]
      break;
 8001a7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a7c:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	091b      	lsrs	r3, r3, #4
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	3301      	adds	r3, #1
 8001a88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a94:	697a      	ldr	r2, [r7, #20]
 8001a96:	fb03 f202 	mul.w	r2, r3, r2
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_GetSysClockFreq+0x108>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	0e5b      	lsrs	r3, r3, #25
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	3301      	adds	r3, #1
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001abc:	69bb      	ldr	r3, [r7, #24]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	08004554 	.word	0x08004554
 8001ad4:	00f42400 	.word	0x00f42400
 8001ad8:	007a1200 	.word	0x007a1200

08001adc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ae0:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000

08001af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001af8:	f7ff fff0 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001afc:	4602      	mov	r2, r0
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	0a1b      	lsrs	r3, r3, #8
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	4904      	ldr	r1, [pc, #16]	; (8001b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b0a:	5ccb      	ldrb	r3, [r1, r3]
 8001b0c:	f003 031f 	and.w	r3, r3, #31
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	0800454c 	.word	0x0800454c

08001b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b24:	f7ff ffda 	bl	8001adc <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0adb      	lsrs	r3, r3, #11
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4904      	ldr	r1, [pc, #16]	; (8001b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	0800454c 	.word	0x0800454c

08001b4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b54:	2300      	movs	r3, #0
 8001b56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b64:	f7ff f9ee 	bl	8000f44 <HAL_PWREx_GetVoltageRange>
 8001b68:	6178      	str	r0, [r7, #20]
 8001b6a:	e014      	b.n	8001b96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	4a24      	ldr	r2, [pc, #144]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	6593      	str	r3, [r2, #88]	; 0x58
 8001b78:	4b22      	ldr	r3, [pc, #136]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001b84:	f7ff f9de 	bl	8000f44 <HAL_PWREx_GetVoltageRange>
 8001b88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b9c:	d10b      	bne.n	8001bb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b80      	cmp	r3, #128	; 0x80
 8001ba2:	d919      	bls.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2ba0      	cmp	r3, #160	; 0xa0
 8001ba8:	d902      	bls.n	8001bb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001baa:	2302      	movs	r3, #2
 8001bac:	613b      	str	r3, [r7, #16]
 8001bae:	e013      	b.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e010      	b.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b80      	cmp	r3, #128	; 0x80
 8001bba:	d902      	bls.n	8001bc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	e00a      	b.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b80      	cmp	r3, #128	; 0x80
 8001bc6:	d102      	bne.n	8001bce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bc8:	2302      	movs	r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	e004      	b.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b70      	cmp	r3, #112	; 0x70
 8001bd2:	d101      	bne.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f023 0207 	bic.w	r2, r3, #7
 8001be0:	4909      	ldr	r1, [pc, #36]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d001      	beq.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40022000 	.word	0x40022000

08001c0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c14:	2300      	movs	r3, #0
 8001c16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c18:	2300      	movs	r3, #0
 8001c1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d041      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c30:	d02a      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001c32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001c36:	d824      	bhi.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c3c:	d008      	beq.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001c3e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c42:	d81e      	bhi.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d00a      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4c:	d010      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001c4e:	e018      	b.n	8001c82 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001c50:	4b86      	ldr	r3, [pc, #536]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	4a85      	ldr	r2, [pc, #532]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c5a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c5c:	e015      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fabb 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c6e:	e00c      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3320      	adds	r3, #32
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 fba6 	bl	80023c8 <RCCEx_PLLSAI2_Config>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001c80:	e003      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	74fb      	strb	r3, [r7, #19]
      break;
 8001c86:	e000      	b.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c8a:	7cfb      	ldrb	r3, [r7, #19]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001c90:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c9e:	4973      	ldr	r1, [pc, #460]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ca6:	e001      	b.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d041      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cbc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cc0:	d02a      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001cc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cc6:	d824      	bhi.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ccc:	d008      	beq.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001cce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001cd2:	d81e      	bhi.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cdc:	d010      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001cde:	e018      	b.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4a61      	ldr	r2, [pc, #388]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cec:	e015      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f000 fa73 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001cfe:	e00c      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3320      	adds	r3, #32
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f000 fb5e 	bl	80023c8 <RCCEx_PLLSAI2_Config>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d10:	e003      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	74fb      	strb	r3, [r7, #19]
      break;
 8001d16:	e000      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d1a:	7cfb      	ldrb	r3, [r7, #19]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d10b      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d20:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d2e:	494f      	ldr	r1, [pc, #316]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d36:	e001      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a0 	beq.w	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d4e:	4b47      	ldr	r3, [pc, #284]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d64:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a40      	ldr	r2, [pc, #256]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b3e      	ldr	r3, [pc, #248]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d78:	60bb      	str	r3, [r7, #8]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d80:	4b3b      	ldr	r3, [pc, #236]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a3a      	ldr	r2, [pc, #232]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fe26 	bl	80009dc <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001d92:	e009      	b.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7fe fe22 	bl	80009dc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d902      	bls.n	8001da8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	74fb      	strb	r3, [r7, #19]
        break;
 8001da6:	e005      	b.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da8:	4b31      	ldr	r3, [pc, #196]	; (8001e70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0ef      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001db4:	7cfb      	ldrb	r3, [r7, #19]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d15c      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dba:	4b2c      	ldr	r3, [pc, #176]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01f      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d019      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dd8:	4b24      	ldr	r3, [pc, #144]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001de2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001de4:	4b21      	ldr	r3, [pc, #132]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	4a1c      	ldr	r2, [pc, #112]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7fe fde1 	bl	80009dc <HAL_GetTick>
 8001e1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e1c:	e00b      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e1e:	f7fe fddd 	bl	80009dc <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d902      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	74fb      	strb	r3, [r7, #19]
            break;
 8001e34:	e006      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0ec      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001e44:	7cfb      	ldrb	r3, [r7, #19]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10c      	bne.n	8001e64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e5a:	4904      	ldr	r1, [pc, #16]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e62:	e009      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e64:	7cfb      	ldrb	r3, [r7, #19]
 8001e66:	74bb      	strb	r3, [r7, #18]
 8001e68:	e006      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e78:	7c7b      	ldrb	r3, [r7, #17]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	4a9d      	ldr	r2, [pc, #628]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e96:	4b98      	ldr	r3, [pc, #608]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	f023 0203 	bic.w	r2, r3, #3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea4:	4994      	ldr	r1, [pc, #592]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00a      	beq.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001eb8:	4b8f      	ldr	r3, [pc, #572]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebe:	f023 020c 	bic.w	r2, r3, #12
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec6:	498c      	ldr	r1, [pc, #560]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eda:	4b87      	ldr	r3, [pc, #540]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	4983      	ldr	r1, [pc, #524]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d00a      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001efc:	4b7e      	ldr	r3, [pc, #504]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	497b      	ldr	r1, [pc, #492]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00a      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f1e:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	4972      	ldr	r1, [pc, #456]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00a      	beq.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	496a      	ldr	r1, [pc, #424]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f62:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f68:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	4961      	ldr	r1, [pc, #388]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00a      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f84:	4b5c      	ldr	r3, [pc, #368]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	4959      	ldr	r1, [pc, #356]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fa6:	4b54      	ldr	r3, [pc, #336]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb4:	4950      	ldr	r1, [pc, #320]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00a      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd6:	4948      	ldr	r1, [pc, #288]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00a      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	493f      	ldr	r1, [pc, #252]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d028      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800200c:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201a:	4937      	ldr	r1, [pc, #220]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201c:	4313      	orrs	r3, r2
 800201e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202a:	d106      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4a31      	ldr	r2, [pc, #196]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002036:	60d3      	str	r3, [r2, #12]
 8002038:	e011      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800203e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002042:	d10c      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3304      	adds	r3, #4
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f000 f8c8 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8002050:	4603      	mov	r3, r0
 8002052:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002054:	7cfb      	ldrb	r3, [r7, #19]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800205a:	7cfb      	ldrb	r3, [r7, #19]
 800205c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d028      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002070:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	491f      	ldr	r1, [pc, #124]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002088:	d106      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800208a:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	4a1a      	ldr	r2, [pc, #104]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002094:	60d3      	str	r3, [r2, #12]
 8002096:	e011      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020a0:	d10c      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2101      	movs	r1, #1
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f899 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 80020ae:	4603      	mov	r3, r0
 80020b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80020b2:	7cfb      	ldrb	r3, [r7, #19]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d02b      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e6:	d109      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	4a02      	ldr	r2, [pc, #8]	; (80020f8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020f2:	60d3      	str	r3, [r2, #12]
 80020f4:	e014      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002100:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002104:	d10c      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3304      	adds	r3, #4
 800210a:	2101      	movs	r1, #1
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f867 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8002112:	4603      	mov	r3, r0
 8002114:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002116:	7cfb      	ldrb	r3, [r7, #19]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02f      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800212c:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800213a:	4928      	ldr	r1, [pc, #160]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800214a:	d10d      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3304      	adds	r3, #4
 8002150:	2102      	movs	r1, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 f844 	bl	80021e0 <RCCEx_PLLSAI1_Config>
 8002158:	4603      	mov	r3, r0
 800215a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d014      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	74bb      	strb	r3, [r7, #18]
 8002166:	e011      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800216c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002170:	d10c      	bne.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3320      	adds	r3, #32
 8002176:	2102      	movs	r1, #2
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f925 	bl	80023c8 <RCCEx_PLLSAI2_Config>
 800217e:	4603      	mov	r3, r0
 8002180:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002182:	7cfb      	ldrb	r3, [r7, #19]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021a6:	490d      	ldr	r1, [pc, #52]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ca:	4904      	ldr	r1, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021d2:	7cbb      	ldrb	r3, [r7, #18]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000

080021e0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80021ee:	4b75      	ldr	r3, [pc, #468]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d018      	beq.n	800222c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80021fa:	4b72      	ldr	r3, [pc, #456]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0203 	and.w	r2, r3, #3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d10d      	bne.n	8002226 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
       ||
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002212:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	091b      	lsrs	r3, r3, #4
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	1c5a      	adds	r2, r3, #1
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
       ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d047      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	73fb      	strb	r3, [r7, #15]
 800222a:	e044      	b.n	80022b6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d018      	beq.n	8002266 <RCCEx_PLLSAI1_Config+0x86>
 8002234:	2b03      	cmp	r3, #3
 8002236:	d825      	bhi.n	8002284 <RCCEx_PLLSAI1_Config+0xa4>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d002      	beq.n	8002242 <RCCEx_PLLSAI1_Config+0x62>
 800223c:	2b02      	cmp	r3, #2
 800223e:	d009      	beq.n	8002254 <RCCEx_PLLSAI1_Config+0x74>
 8002240:	e020      	b.n	8002284 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002242:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11d      	bne.n	800228a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002252:	e01a      	b.n	800228a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002254:	4b5b      	ldr	r3, [pc, #364]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225c:	2b00      	cmp	r3, #0
 800225e:	d116      	bne.n	800228e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002264:	e013      	b.n	800228e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002266:	4b57      	ldr	r3, [pc, #348]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10f      	bne.n	8002292 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002272:	4b54      	ldr	r3, [pc, #336]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d109      	bne.n	8002292 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002282:	e006      	b.n	8002292 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	73fb      	strb	r3, [r7, #15]
      break;
 8002288:	e004      	b.n	8002294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228a:	bf00      	nop
 800228c:	e002      	b.n	8002294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800228e:	bf00      	nop
 8002290:	e000      	b.n	8002294 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002292:	bf00      	nop
    }

    if(status == HAL_OK)
 8002294:	7bfb      	ldrb	r3, [r7, #15]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10d      	bne.n	80022b6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800229a:	4b4a      	ldr	r3, [pc, #296]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6819      	ldr	r1, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	430b      	orrs	r3, r1
 80022b0:	4944      	ldr	r1, [pc, #272]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d17d      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80022bc:	4b41      	ldr	r3, [pc, #260]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a40      	ldr	r2, [pc, #256]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c8:	f7fe fb88 	bl	80009dc <HAL_GetTick>
 80022cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022ce:	e009      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80022d0:	f7fe fb84 	bl	80009dc <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d902      	bls.n	80022e4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	73fb      	strb	r3, [r7, #15]
        break;
 80022e2:	e005      	b.n	80022f0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80022e4:	4b37      	ldr	r3, [pc, #220]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1ef      	bne.n	80022d0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d160      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80022fc:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6892      	ldr	r2, [r2, #8]
 800230c:	0211      	lsls	r1, r2, #8
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	0912      	lsrs	r2, r2, #4
 8002314:	0452      	lsls	r2, r2, #17
 8002316:	430a      	orrs	r2, r1
 8002318:	492a      	ldr	r1, [pc, #168]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	610b      	str	r3, [r1, #16]
 800231e:	e027      	b.n	8002370 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d112      	bne.n	800234c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002326:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800232e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6892      	ldr	r2, [r2, #8]
 8002336:	0211      	lsls	r1, r2, #8
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6912      	ldr	r2, [r2, #16]
 800233c:	0852      	lsrs	r2, r2, #1
 800233e:	3a01      	subs	r2, #1
 8002340:	0552      	lsls	r2, r2, #21
 8002342:	430a      	orrs	r2, r1
 8002344:	491f      	ldr	r1, [pc, #124]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	610b      	str	r3, [r1, #16]
 800234a:	e011      	b.n	8002370 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6892      	ldr	r2, [r2, #8]
 800235c:	0211      	lsls	r1, r2, #8
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6952      	ldr	r2, [r2, #20]
 8002362:	0852      	lsrs	r2, r2, #1
 8002364:	3a01      	subs	r2, #1
 8002366:	0652      	lsls	r2, r2, #25
 8002368:	430a      	orrs	r2, r1
 800236a:	4916      	ldr	r1, [pc, #88]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800237a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7fe fb2e 	bl	80009dc <HAL_GetTick>
 8002380:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002382:	e009      	b.n	8002398 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002384:	f7fe fb2a 	bl	80009dc <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	73fb      	strb	r3, [r7, #15]
          break;
 8002396:	e005      	b.n	80023a4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ef      	beq.n	8002384 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	4904      	ldr	r1, [pc, #16]	; (80023c4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000

080023c8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2300      	movs	r3, #0
 80023d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023d6:	4b6a      	ldr	r3, [pc, #424]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d018      	beq.n	8002414 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80023e2:	4b67      	ldr	r3, [pc, #412]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0203 	and.w	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10d      	bne.n	800240e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
       ||
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d009      	beq.n	800240e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80023fa:	4b61      	ldr	r3, [pc, #388]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
       ||
 800240a:	429a      	cmp	r2, r3
 800240c:	d047      	beq.n	800249e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e044      	b.n	800249e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b03      	cmp	r3, #3
 800241a:	d018      	beq.n	800244e <RCCEx_PLLSAI2_Config+0x86>
 800241c:	2b03      	cmp	r3, #3
 800241e:	d825      	bhi.n	800246c <RCCEx_PLLSAI2_Config+0xa4>
 8002420:	2b01      	cmp	r3, #1
 8002422:	d002      	beq.n	800242a <RCCEx_PLLSAI2_Config+0x62>
 8002424:	2b02      	cmp	r3, #2
 8002426:	d009      	beq.n	800243c <RCCEx_PLLSAI2_Config+0x74>
 8002428:	e020      	b.n	800246c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800242a:	4b55      	ldr	r3, [pc, #340]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d11d      	bne.n	8002472 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800243a:	e01a      	b.n	8002472 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800244c:	e013      	b.n	8002476 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800244e:	4b4c      	ldr	r3, [pc, #304]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10f      	bne.n	800247a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800245a:	4b49      	ldr	r3, [pc, #292]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800246a:	e006      	b.n	800247a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	73fb      	strb	r3, [r7, #15]
      break;
 8002470:	e004      	b.n	800247c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002472:	bf00      	nop
 8002474:	e002      	b.n	800247c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002476:	bf00      	nop
 8002478:	e000      	b.n	800247c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800247a:	bf00      	nop
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002482:	4b3f      	ldr	r3, [pc, #252]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6819      	ldr	r1, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	430b      	orrs	r3, r1
 8002498:	4939      	ldr	r1, [pc, #228]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d167      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80024a4:	4b36      	ldr	r3, [pc, #216]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a35      	ldr	r2, [pc, #212]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b0:	f7fe fa94 	bl	80009dc <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024b6:	e009      	b.n	80024cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80024b8:	f7fe fa90 	bl	80009dc <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d902      	bls.n	80024cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	73fb      	strb	r3, [r7, #15]
        break;
 80024ca:	e005      	b.n	80024d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80024cc:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1ef      	bne.n	80024b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d14a      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d111      	bne.n	8002508 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80024e4:	4b26      	ldr	r3, [pc, #152]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80024ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6892      	ldr	r2, [r2, #8]
 80024f4:	0211      	lsls	r1, r2, #8
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68d2      	ldr	r2, [r2, #12]
 80024fa:	0912      	lsrs	r2, r2, #4
 80024fc:	0452      	lsls	r2, r2, #17
 80024fe:	430a      	orrs	r2, r1
 8002500:	491f      	ldr	r1, [pc, #124]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	614b      	str	r3, [r1, #20]
 8002506:	e011      	b.n	800252c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002508:	4b1d      	ldr	r3, [pc, #116]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6892      	ldr	r2, [r2, #8]
 8002518:	0211      	lsls	r1, r2, #8
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6912      	ldr	r2, [r2, #16]
 800251e:	0852      	lsrs	r2, r2, #1
 8002520:	3a01      	subs	r2, #1
 8002522:	0652      	lsls	r2, r2, #25
 8002524:	430a      	orrs	r2, r1
 8002526:	4916      	ldr	r1, [pc, #88]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002528:	4313      	orrs	r3, r2
 800252a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a13      	ldr	r2, [pc, #76]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7fe fa50 	bl	80009dc <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800253e:	e009      	b.n	8002554 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002540:	f7fe fa4c 	bl	80009dc <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d902      	bls.n	8002554 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
          break;
 8002552:	e005      	b.n	8002560 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002554:	4b0a      	ldr	r3, [pc, #40]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0ef      	beq.n	8002540 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d106      	bne.n	8002574 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002566:	4b06      	ldr	r3, [pc, #24]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	4904      	ldr	r1, [pc, #16]	; (8002580 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	4313      	orrs	r3, r2
 8002572:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002574:	7bfb      	ldrb	r3, [r7, #15]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e040      	b.n	8002618 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f8ec 	bl	8000784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2224      	movs	r2, #36	; 0x24
 80025b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0201 	bic.w	r2, r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fae0 	bl	8002b90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f825 	bl	8002620 <UART_SetConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e01b      	b.n	8002618 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb5f 	bl	8002cd4 <UART_CheckIdleState>
 8002616:	4603      	mov	r3, r0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b08a      	sub	sp, #40	; 0x28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	431a      	orrs	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	431a      	orrs	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	4313      	orrs	r3, r2
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	4ba4      	ldr	r3, [pc, #656]	; (80028e0 <UART_SetConfig+0x2c0>)
 8002650:	4013      	ands	r3, r2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002658:	430b      	orrs	r3, r1
 800265a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a99      	ldr	r2, [pc, #612]	; (80028e4 <UART_SetConfig+0x2c4>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d004      	beq.n	800268c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	4313      	orrs	r3, r2
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a90      	ldr	r2, [pc, #576]	; (80028e8 <UART_SetConfig+0x2c8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d126      	bne.n	80026f8 <UART_SetConfig+0xd8>
 80026aa:	4b90      	ldr	r3, [pc, #576]	; (80028ec <UART_SetConfig+0x2cc>)
 80026ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d81b      	bhi.n	80026f0 <UART_SetConfig+0xd0>
 80026b8:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <UART_SetConfig+0xa0>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026e1 	.word	0x080026e1
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	080026e9 	.word	0x080026e9
 80026d0:	2301      	movs	r3, #1
 80026d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026d6:	e116      	b.n	8002906 <UART_SetConfig+0x2e6>
 80026d8:	2302      	movs	r3, #2
 80026da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026de:	e112      	b.n	8002906 <UART_SetConfig+0x2e6>
 80026e0:	2304      	movs	r3, #4
 80026e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026e6:	e10e      	b.n	8002906 <UART_SetConfig+0x2e6>
 80026e8:	2308      	movs	r3, #8
 80026ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026ee:	e10a      	b.n	8002906 <UART_SetConfig+0x2e6>
 80026f0:	2310      	movs	r3, #16
 80026f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80026f6:	e106      	b.n	8002906 <UART_SetConfig+0x2e6>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7c      	ldr	r2, [pc, #496]	; (80028f0 <UART_SetConfig+0x2d0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d138      	bne.n	8002774 <UART_SetConfig+0x154>
 8002702:	4b7a      	ldr	r3, [pc, #488]	; (80028ec <UART_SetConfig+0x2cc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	f003 030c 	and.w	r3, r3, #12
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d82d      	bhi.n	800276c <UART_SetConfig+0x14c>
 8002710:	a201      	add	r2, pc, #4	; (adr r2, 8002718 <UART_SetConfig+0xf8>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	0800274d 	.word	0x0800274d
 800271c:	0800276d 	.word	0x0800276d
 8002720:	0800276d 	.word	0x0800276d
 8002724:	0800276d 	.word	0x0800276d
 8002728:	0800275d 	.word	0x0800275d
 800272c:	0800276d 	.word	0x0800276d
 8002730:	0800276d 	.word	0x0800276d
 8002734:	0800276d 	.word	0x0800276d
 8002738:	08002755 	.word	0x08002755
 800273c:	0800276d 	.word	0x0800276d
 8002740:	0800276d 	.word	0x0800276d
 8002744:	0800276d 	.word	0x0800276d
 8002748:	08002765 	.word	0x08002765
 800274c:	2300      	movs	r3, #0
 800274e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002752:	e0d8      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002754:	2302      	movs	r3, #2
 8002756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800275a:	e0d4      	b.n	8002906 <UART_SetConfig+0x2e6>
 800275c:	2304      	movs	r3, #4
 800275e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002762:	e0d0      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002764:	2308      	movs	r3, #8
 8002766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800276a:	e0cc      	b.n	8002906 <UART_SetConfig+0x2e6>
 800276c:	2310      	movs	r3, #16
 800276e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002772:	e0c8      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a5e      	ldr	r2, [pc, #376]	; (80028f4 <UART_SetConfig+0x2d4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d125      	bne.n	80027ca <UART_SetConfig+0x1aa>
 800277e:	4b5b      	ldr	r3, [pc, #364]	; (80028ec <UART_SetConfig+0x2cc>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002788:	2b30      	cmp	r3, #48	; 0x30
 800278a:	d016      	beq.n	80027ba <UART_SetConfig+0x19a>
 800278c:	2b30      	cmp	r3, #48	; 0x30
 800278e:	d818      	bhi.n	80027c2 <UART_SetConfig+0x1a2>
 8002790:	2b20      	cmp	r3, #32
 8002792:	d00a      	beq.n	80027aa <UART_SetConfig+0x18a>
 8002794:	2b20      	cmp	r3, #32
 8002796:	d814      	bhi.n	80027c2 <UART_SetConfig+0x1a2>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d002      	beq.n	80027a2 <UART_SetConfig+0x182>
 800279c:	2b10      	cmp	r3, #16
 800279e:	d008      	beq.n	80027b2 <UART_SetConfig+0x192>
 80027a0:	e00f      	b.n	80027c2 <UART_SetConfig+0x1a2>
 80027a2:	2300      	movs	r3, #0
 80027a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027a8:	e0ad      	b.n	8002906 <UART_SetConfig+0x2e6>
 80027aa:	2302      	movs	r3, #2
 80027ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027b0:	e0a9      	b.n	8002906 <UART_SetConfig+0x2e6>
 80027b2:	2304      	movs	r3, #4
 80027b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027b8:	e0a5      	b.n	8002906 <UART_SetConfig+0x2e6>
 80027ba:	2308      	movs	r3, #8
 80027bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c0:	e0a1      	b.n	8002906 <UART_SetConfig+0x2e6>
 80027c2:	2310      	movs	r3, #16
 80027c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027c8:	e09d      	b.n	8002906 <UART_SetConfig+0x2e6>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a4a      	ldr	r2, [pc, #296]	; (80028f8 <UART_SetConfig+0x2d8>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d125      	bne.n	8002820 <UART_SetConfig+0x200>
 80027d4:	4b45      	ldr	r3, [pc, #276]	; (80028ec <UART_SetConfig+0x2cc>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80027de:	2bc0      	cmp	r3, #192	; 0xc0
 80027e0:	d016      	beq.n	8002810 <UART_SetConfig+0x1f0>
 80027e2:	2bc0      	cmp	r3, #192	; 0xc0
 80027e4:	d818      	bhi.n	8002818 <UART_SetConfig+0x1f8>
 80027e6:	2b80      	cmp	r3, #128	; 0x80
 80027e8:	d00a      	beq.n	8002800 <UART_SetConfig+0x1e0>
 80027ea:	2b80      	cmp	r3, #128	; 0x80
 80027ec:	d814      	bhi.n	8002818 <UART_SetConfig+0x1f8>
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d002      	beq.n	80027f8 <UART_SetConfig+0x1d8>
 80027f2:	2b40      	cmp	r3, #64	; 0x40
 80027f4:	d008      	beq.n	8002808 <UART_SetConfig+0x1e8>
 80027f6:	e00f      	b.n	8002818 <UART_SetConfig+0x1f8>
 80027f8:	2300      	movs	r3, #0
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80027fe:	e082      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002800:	2302      	movs	r3, #2
 8002802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002806:	e07e      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002808:	2304      	movs	r3, #4
 800280a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800280e:	e07a      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002810:	2308      	movs	r3, #8
 8002812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002816:	e076      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002818:	2310      	movs	r3, #16
 800281a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800281e:	e072      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a35      	ldr	r2, [pc, #212]	; (80028fc <UART_SetConfig+0x2dc>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d12a      	bne.n	8002880 <UART_SetConfig+0x260>
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <UART_SetConfig+0x2cc>)
 800282c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002834:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002838:	d01a      	beq.n	8002870 <UART_SetConfig+0x250>
 800283a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800283e:	d81b      	bhi.n	8002878 <UART_SetConfig+0x258>
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d00c      	beq.n	8002860 <UART_SetConfig+0x240>
 8002846:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284a:	d815      	bhi.n	8002878 <UART_SetConfig+0x258>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <UART_SetConfig+0x238>
 8002850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002854:	d008      	beq.n	8002868 <UART_SetConfig+0x248>
 8002856:	e00f      	b.n	8002878 <UART_SetConfig+0x258>
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800285e:	e052      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002860:	2302      	movs	r3, #2
 8002862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002866:	e04e      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002868:	2304      	movs	r3, #4
 800286a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800286e:	e04a      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002870:	2308      	movs	r3, #8
 8002872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002876:	e046      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002878:	2310      	movs	r3, #16
 800287a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800287e:	e042      	b.n	8002906 <UART_SetConfig+0x2e6>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <UART_SetConfig+0x2c4>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d13a      	bne.n	8002900 <UART_SetConfig+0x2e0>
 800288a:	4b18      	ldr	r3, [pc, #96]	; (80028ec <UART_SetConfig+0x2cc>)
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002890:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002894:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002898:	d01a      	beq.n	80028d0 <UART_SetConfig+0x2b0>
 800289a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800289e:	d81b      	bhi.n	80028d8 <UART_SetConfig+0x2b8>
 80028a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028a4:	d00c      	beq.n	80028c0 <UART_SetConfig+0x2a0>
 80028a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028aa:	d815      	bhi.n	80028d8 <UART_SetConfig+0x2b8>
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <UART_SetConfig+0x298>
 80028b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028b4:	d008      	beq.n	80028c8 <UART_SetConfig+0x2a8>
 80028b6:	e00f      	b.n	80028d8 <UART_SetConfig+0x2b8>
 80028b8:	2300      	movs	r3, #0
 80028ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028be:	e022      	b.n	8002906 <UART_SetConfig+0x2e6>
 80028c0:	2302      	movs	r3, #2
 80028c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028c6:	e01e      	b.n	8002906 <UART_SetConfig+0x2e6>
 80028c8:	2304      	movs	r3, #4
 80028ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028ce:	e01a      	b.n	8002906 <UART_SetConfig+0x2e6>
 80028d0:	2308      	movs	r3, #8
 80028d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028d6:	e016      	b.n	8002906 <UART_SetConfig+0x2e6>
 80028d8:	2310      	movs	r3, #16
 80028da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80028de:	e012      	b.n	8002906 <UART_SetConfig+0x2e6>
 80028e0:	efff69f3 	.word	0xefff69f3
 80028e4:	40008000 	.word	0x40008000
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40021000 	.word	0x40021000
 80028f0:	40004400 	.word	0x40004400
 80028f4:	40004800 	.word	0x40004800
 80028f8:	40004c00 	.word	0x40004c00
 80028fc:	40005000 	.word	0x40005000
 8002900:	2310      	movs	r3, #16
 8002902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a9f      	ldr	r2, [pc, #636]	; (8002b88 <UART_SetConfig+0x568>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d17a      	bne.n	8002a06 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002910:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002914:	2b08      	cmp	r3, #8
 8002916:	d824      	bhi.n	8002962 <UART_SetConfig+0x342>
 8002918:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <UART_SetConfig+0x300>)
 800291a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291e:	bf00      	nop
 8002920:	08002945 	.word	0x08002945
 8002924:	08002963 	.word	0x08002963
 8002928:	0800294d 	.word	0x0800294d
 800292c:	08002963 	.word	0x08002963
 8002930:	08002953 	.word	0x08002953
 8002934:	08002963 	.word	0x08002963
 8002938:	08002963 	.word	0x08002963
 800293c:	08002963 	.word	0x08002963
 8002940:	0800295b 	.word	0x0800295b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002944:	f7ff f8d6 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8002948:	61f8      	str	r0, [r7, #28]
        break;
 800294a:	e010      	b.n	800296e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800294c:	4b8f      	ldr	r3, [pc, #572]	; (8002b8c <UART_SetConfig+0x56c>)
 800294e:	61fb      	str	r3, [r7, #28]
        break;
 8002950:	e00d      	b.n	800296e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002952:	f7ff f837 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002956:	61f8      	str	r0, [r7, #28]
        break;
 8002958:	e009      	b.n	800296e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800295a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800295e:	61fb      	str	r3, [r7, #28]
        break;
 8002960:	e005      	b.n	800296e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800296c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	2b00      	cmp	r3, #0
 8002972:	f000 80fb 	beq.w	8002b6c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	69fa      	ldr	r2, [r7, #28]
 8002982:	429a      	cmp	r2, r3
 8002984:	d305      	bcc.n	8002992 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	429a      	cmp	r2, r3
 8002990:	d903      	bls.n	800299a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002998:	e0e8      	b.n	8002b6c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2200      	movs	r2, #0
 800299e:	461c      	mov	r4, r3
 80029a0:	4615      	mov	r5, r2
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	022b      	lsls	r3, r5, #8
 80029ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80029b0:	0222      	lsls	r2, r4, #8
 80029b2:	68f9      	ldr	r1, [r7, #12]
 80029b4:	6849      	ldr	r1, [r1, #4]
 80029b6:	0849      	lsrs	r1, r1, #1
 80029b8:	2000      	movs	r0, #0
 80029ba:	4688      	mov	r8, r1
 80029bc:	4681      	mov	r9, r0
 80029be:	eb12 0a08 	adds.w	sl, r2, r8
 80029c2:	eb43 0b09 	adc.w	fp, r3, r9
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	603b      	str	r3, [r7, #0]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029d4:	4650      	mov	r0, sl
 80029d6:	4659      	mov	r1, fp
 80029d8:	f7fd fbfa 	bl	80001d0 <__aeabi_uldivmod>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	4613      	mov	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ea:	d308      	bcc.n	80029fe <UART_SetConfig+0x3de>
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f2:	d204      	bcs.n	80029fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	e0b6      	b.n	8002b6c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002a04:	e0b2      	b.n	8002b6c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	69db      	ldr	r3, [r3, #28]
 8002a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a0e:	d15e      	bne.n	8002ace <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002a10:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a14:	2b08      	cmp	r3, #8
 8002a16:	d828      	bhi.n	8002a6a <UART_SetConfig+0x44a>
 8002a18:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <UART_SetConfig+0x400>)
 8002a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1e:	bf00      	nop
 8002a20:	08002a45 	.word	0x08002a45
 8002a24:	08002a4d 	.word	0x08002a4d
 8002a28:	08002a55 	.word	0x08002a55
 8002a2c:	08002a6b 	.word	0x08002a6b
 8002a30:	08002a5b 	.word	0x08002a5b
 8002a34:	08002a6b 	.word	0x08002a6b
 8002a38:	08002a6b 	.word	0x08002a6b
 8002a3c:	08002a6b 	.word	0x08002a6b
 8002a40:	08002a63 	.word	0x08002a63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a44:	f7ff f856 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8002a48:	61f8      	str	r0, [r7, #28]
        break;
 8002a4a:	e014      	b.n	8002a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a4c:	f7ff f868 	bl	8001b20 <HAL_RCC_GetPCLK2Freq>
 8002a50:	61f8      	str	r0, [r7, #28]
        break;
 8002a52:	e010      	b.n	8002a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a54:	4b4d      	ldr	r3, [pc, #308]	; (8002b8c <UART_SetConfig+0x56c>)
 8002a56:	61fb      	str	r3, [r7, #28]
        break;
 8002a58:	e00d      	b.n	8002a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5a:	f7fe ffb3 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002a5e:	61f8      	str	r0, [r7, #28]
        break;
 8002a60:	e009      	b.n	8002a76 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a66:	61fb      	str	r3, [r7, #28]
        break;
 8002a68:	e005      	b.n	8002a76 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d077      	beq.n	8002b6c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005a      	lsls	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	085b      	lsrs	r3, r3, #1
 8002a86:	441a      	add	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	2b0f      	cmp	r3, #15
 8002a96:	d916      	bls.n	8002ac6 <UART_SetConfig+0x4a6>
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a9e:	d212      	bcs.n	8002ac6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f023 030f 	bic.w	r3, r3, #15
 8002aa8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	8afb      	ldrh	r3, [r7, #22]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	8afa      	ldrh	r2, [r7, #22]
 8002ac2:	60da      	str	r2, [r3, #12]
 8002ac4:	e052      	b.n	8002b6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002acc:	e04e      	b.n	8002b6c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ace:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d827      	bhi.n	8002b26 <UART_SetConfig+0x506>
 8002ad6:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <UART_SetConfig+0x4bc>)
 8002ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002b09 	.word	0x08002b09
 8002ae4:	08002b11 	.word	0x08002b11
 8002ae8:	08002b27 	.word	0x08002b27
 8002aec:	08002b17 	.word	0x08002b17
 8002af0:	08002b27 	.word	0x08002b27
 8002af4:	08002b27 	.word	0x08002b27
 8002af8:	08002b27 	.word	0x08002b27
 8002afc:	08002b1f 	.word	0x08002b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b00:	f7fe fff8 	bl	8001af4 <HAL_RCC_GetPCLK1Freq>
 8002b04:	61f8      	str	r0, [r7, #28]
        break;
 8002b06:	e014      	b.n	8002b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b08:	f7ff f80a 	bl	8001b20 <HAL_RCC_GetPCLK2Freq>
 8002b0c:	61f8      	str	r0, [r7, #28]
        break;
 8002b0e:	e010      	b.n	8002b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b10:	4b1e      	ldr	r3, [pc, #120]	; (8002b8c <UART_SetConfig+0x56c>)
 8002b12:	61fb      	str	r3, [r7, #28]
        break;
 8002b14:	e00d      	b.n	8002b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b16:	f7fe ff55 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002b1a:	61f8      	str	r0, [r7, #28]
        break;
 8002b1c:	e009      	b.n	8002b32 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b22:	61fb      	str	r3, [r7, #28]
        break;
 8002b24:	e005      	b.n	8002b32 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b30:	bf00      	nop
    }

    if (pclk != 0U)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d019      	beq.n	8002b6c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	085a      	lsrs	r2, r3, #1
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	441a      	add	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	2b0f      	cmp	r3, #15
 8002b50:	d909      	bls.n	8002b66 <UART_SetConfig+0x546>
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b58:	d205      	bcs.n	8002b66 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
 8002b64:	e002      	b.n	8002b6c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b86:	bf00      	nop
 8002b88:	40008000 	.word	0x40008000
 8002b8c:	00f42400 	.word	0x00f42400

08002b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f003 0320 	and.w	r3, r3, #32
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01a      	beq.n	8002ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c8e:	d10a      	bne.n	8002ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	605a      	str	r2, [r3, #4]
  }
}
 8002cc8:	bf00      	nop
 8002cca:	370c      	adds	r7, #12
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b098      	sub	sp, #96	; 0x60
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ce4:	f7fd fe7a 	bl	80009dc <HAL_GetTick>
 8002ce8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d12e      	bne.n	8002d56 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d00:	2200      	movs	r2, #0
 8002d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f88c 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d021      	beq.n	8002d56 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d26:	653b      	str	r3, [r7, #80]	; 0x50
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
 8002d32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e6      	bne.n	8002d12 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e062      	b.n	8002e1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b04      	cmp	r3, #4
 8002d62:	d149      	bne.n	8002df8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f856 	bl	8002e24 <UART_WaitOnFlagUntilTimeout>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d03c      	beq.n	8002df8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	e853 3f00 	ldrex	r3, [r3]
 8002d8a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d9e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da4:	e841 2300 	strex	r3, r2, [r1]
 8002da8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e6      	bne.n	8002d7e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	3308      	adds	r3, #8
 8002db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	e853 3f00 	ldrex	r3, [r3]
 8002dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dd0:	61fa      	str	r2, [r7, #28]
 8002dd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd4:	69b9      	ldr	r1, [r7, #24]
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	e841 2300 	strex	r3, r2, [r1]
 8002ddc:	617b      	str	r3, [r7, #20]
   return(result);
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1e5      	bne.n	8002db0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e011      	b.n	8002e1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3758      	adds	r7, #88	; 0x58
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	4613      	mov	r3, r2
 8002e32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e34:	e04f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d04b      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3e:	f7fd fdcd 	bl	80009dc <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d302      	bcc.n	8002e54 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e04e      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d037      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b80      	cmp	r3, #128	; 0x80
 8002e6a:	d034      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d031      	beq.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f003 0308 	and.w	r3, r3, #8
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d110      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2208      	movs	r2, #8
 8002e86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f838 	bl	8002efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2208      	movs	r2, #8
 8002e92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e029      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eb0:	d111      	bne.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f81e 	bl	8002efe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e00f      	b.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	69da      	ldr	r2, [r3, #28]
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	bf0c      	ite	eq
 8002ee6:	2301      	moveq	r3, #1
 8002ee8:	2300      	movne	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d0a0      	beq.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b095      	sub	sp, #84	; 0x54
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f0e:	e853 3f00 	ldrex	r3, [r3]
 8002f12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f24:	643b      	str	r3, [r7, #64]	; 0x40
 8002f26:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f2c:	e841 2300 	strex	r3, r2, [r1]
 8002f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e6      	bne.n	8002f06 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	e853 3f00 	ldrex	r3, [r3]
 8002f46:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f023 0301 	bic.w	r3, r3, #1
 8002f4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	3308      	adds	r3, #8
 8002f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f60:	e841 2300 	strex	r3, r2, [r1]
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1e5      	bne.n	8002f38 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d118      	bne.n	8002fa6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	e853 3f00 	ldrex	r3, [r3]
 8002f80:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f023 0310 	bic.w	r3, r3, #16
 8002f88:	647b      	str	r3, [r7, #68]	; 0x44
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f92:	61bb      	str	r3, [r7, #24]
 8002f94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f96:	6979      	ldr	r1, [r7, #20]
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	e841 2300 	strex	r3, r2, [r1]
 8002f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1e6      	bne.n	8002f74 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002fba:	bf00      	nop
 8002fbc:	3754      	adds	r7, #84	; 0x54
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b085      	sub	sp, #20
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	4603      	mov	r3, r0
 8002fce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fd8:	2b84      	cmp	r3, #132	; 0x84
 8002fda:	d005      	beq.n	8002fe8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002fdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3303      	adds	r3, #3
 8002fe6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3714      	adds	r7, #20
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ffa:	f000 fadf 	bl	80035bc <vTaskStartScheduler>
  
  return osOK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}

08003004 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003006:	b089      	sub	sp, #36	; 0x24
 8003008:	af04      	add	r7, sp, #16
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d020      	beq.n	8003058 <osThreadCreate+0x54>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01c      	beq.n	8003058 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685c      	ldr	r4, [r3, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691e      	ldr	r6, [r3, #16]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ffc8 	bl	8002fc6 <makeFreeRtosPriority>
 8003036:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003040:	9202      	str	r2, [sp, #8]
 8003042:	9301      	str	r3, [sp, #4]
 8003044:	9100      	str	r1, [sp, #0]
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	4632      	mov	r2, r6
 800304a:	4629      	mov	r1, r5
 800304c:	4620      	mov	r0, r4
 800304e:	f000 f8ed 	bl	800322c <xTaskCreateStatic>
 8003052:	4603      	mov	r3, r0
 8003054:	60fb      	str	r3, [r7, #12]
 8003056:	e01c      	b.n	8003092 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685c      	ldr	r4, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003064:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ffaa 	bl	8002fc6 <makeFreeRtosPriority>
 8003072:	4602      	mov	r2, r0
 8003074:	f107 030c 	add.w	r3, r7, #12
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	9200      	str	r2, [sp, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	4632      	mov	r2, r6
 8003080:	4629      	mov	r1, r5
 8003082:	4620      	mov	r0, r4
 8003084:	f000 f92f 	bl	80032e6 <xTaskCreate>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d001      	beq.n	8003092 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003092:	68fb      	ldr	r3, [r7, #12]
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800309c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <osDelay+0x16>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	e000      	b.n	80030b4 <osDelay+0x18>
 80030b2:	2301      	movs	r3, #1
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fa4d 	bl	8003554 <vTaskDelay>
  
  return osOK;
 80030ba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f103 0208 	add.w	r2, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0208 	add.w	r2, r3, #8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f103 0208 	add.w	r2, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d103      	bne.n	8003186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e00c      	b.n	80031a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3308      	adds	r3, #8
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e002      	b.n	8003194 <vListInsert+0x2e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d2f6      	bcs.n	800318e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d103      	bne.n	800320c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08e      	sub	sp, #56	; 0x38
 8003230:	af04      	add	r7, sp, #16
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003252:	bf00      	nop
 8003254:	e7fe      	b.n	8003254 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10a      	bne.n	8003272 <xTaskCreateStatic+0x46>
	__asm volatile
 800325c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003260:	f383 8811 	msr	BASEPRI, r3
 8003264:	f3bf 8f6f 	isb	sy
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	61fb      	str	r3, [r7, #28]
}
 800326e:	bf00      	nop
 8003270:	e7fe      	b.n	8003270 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003272:	2354      	movs	r3, #84	; 0x54
 8003274:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	2b54      	cmp	r3, #84	; 0x54
 800327a:	d00a      	beq.n	8003292 <xTaskCreateStatic+0x66>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	61bb      	str	r3, [r7, #24]
}
 800328e:	bf00      	nop
 8003290:	e7fe      	b.n	8003290 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003292:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2b00      	cmp	r3, #0
 8003298:	d01e      	beq.n	80032d8 <xTaskCreateStatic+0xac>
 800329a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	2202      	movs	r2, #2
 80032ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032b2:	2300      	movs	r3, #0
 80032b4:	9303      	str	r3, [sp, #12]
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	9302      	str	r3, [sp, #8]
 80032ba:	f107 0314 	add.w	r3, r7, #20
 80032be:	9301      	str	r3, [sp, #4]
 80032c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f850 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80032d2:	f000 f8d5 	bl	8003480 <prvAddNewTaskToReadyList>
 80032d6:	e001      	b.n	80032dc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032dc:	697b      	ldr	r3, [r7, #20]
	}
 80032de:	4618      	mov	r0, r3
 80032e0:	3728      	adds	r7, #40	; 0x28
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}

080032e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032e6:	b580      	push	{r7, lr}
 80032e8:	b08c      	sub	sp, #48	; 0x30
 80032ea:	af04      	add	r7, sp, #16
 80032ec:	60f8      	str	r0, [r7, #12]
 80032ee:	60b9      	str	r1, [r7, #8]
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4613      	mov	r3, r2
 80032f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032f6:	88fb      	ldrh	r3, [r7, #6]
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fee4 	bl	80040c8 <pvPortMalloc>
 8003300:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00e      	beq.n	8003326 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003308:	2054      	movs	r0, #84	; 0x54
 800330a:	f000 fedd 	bl	80040c8 <pvPortMalloc>
 800330e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	631a      	str	r2, [r3, #48]	; 0x30
 800331c:	e005      	b.n	800332a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f000 ff9e 	bl	8004260 <vPortFree>
 8003324:	e001      	b.n	800332a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d017      	beq.n	8003360 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	2300      	movs	r3, #0
 800333c:	9303      	str	r3, [sp, #12]
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	9302      	str	r3, [sp, #8]
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 f80e 	bl	8003370 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003354:	69f8      	ldr	r0, [r7, #28]
 8003356:	f000 f893 	bl	8003480 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800335a:	2301      	movs	r3, #1
 800335c:	61bb      	str	r3, [r7, #24]
 800335e:	e002      	b.n	8003366 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003360:	f04f 33ff 	mov.w	r3, #4294967295
 8003364:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003366:	69bb      	ldr	r3, [r7, #24]
	}
 8003368:	4618      	mov	r0, r3
 800336a:	3720      	adds	r7, #32
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003388:	3b01      	subs	r3, #1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80033a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a6:	f383 8811 	msr	BASEPRI, r3
 80033aa:	f3bf 8f6f 	isb	sy
 80033ae:	f3bf 8f4f 	dsb	sy
 80033b2:	617b      	str	r3, [r7, #20]
}
 80033b4:	bf00      	nop
 80033b6:	e7fe      	b.n	80033b6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d01f      	beq.n	80033fe <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033be:	2300      	movs	r3, #0
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e012      	b.n	80033ea <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	4413      	add	r3, r2
 80033ca:	7819      	ldrb	r1, [r3, #0]
 80033cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	4413      	add	r3, r2
 80033d2:	3334      	adds	r3, #52	; 0x34
 80033d4:	460a      	mov	r2, r1
 80033d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	3301      	adds	r3, #1
 80033e8:	61fb      	str	r3, [r7, #28]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d9e9      	bls.n	80033c4 <prvInitialiseNewTask+0x54>
 80033f0:	e000      	b.n	80033f4 <prvInitialiseNewTask+0x84>
			{
				break;
 80033f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033fc:	e003      	b.n	8003406 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2b06      	cmp	r3, #6
 800340a:	d901      	bls.n	8003410 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800340c:	2306      	movs	r3, #6
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800341c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341e:	2200      	movs	r2, #0
 8003420:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	3304      	adds	r3, #4
 8003426:	4618      	mov	r0, r3
 8003428:	f7ff fe6c 	bl	8003104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	3318      	adds	r3, #24
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fe67 	bl	8003104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	f1c3 0207 	rsb	r2, r3, #7
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800344a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	2200      	movs	r2, #0
 8003450:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	68f9      	ldr	r1, [r7, #12]
 800345e:	69b8      	ldr	r0, [r7, #24]
 8003460:	f000 fc24 	bl	8003cac <pxPortInitialiseStack>
 8003464:	4602      	mov	r2, r0
 8003466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003468:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800346a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003474:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003476:	bf00      	nop
 8003478:	3720      	adds	r7, #32
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003488:	f000 fd3c 	bl	8003f04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800348c:	4b2a      	ldr	r3, [pc, #168]	; (8003538 <prvAddNewTaskToReadyList+0xb8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	4a29      	ldr	r2, [pc, #164]	; (8003538 <prvAddNewTaskToReadyList+0xb8>)
 8003494:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003496:	4b29      	ldr	r3, [pc, #164]	; (800353c <prvAddNewTaskToReadyList+0xbc>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800349e:	4a27      	ldr	r2, [pc, #156]	; (800353c <prvAddNewTaskToReadyList+0xbc>)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034a4:	4b24      	ldr	r3, [pc, #144]	; (8003538 <prvAddNewTaskToReadyList+0xb8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d110      	bne.n	80034ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034ac:	f000 fabc 	bl	8003a28 <prvInitialiseTaskLists>
 80034b0:	e00d      	b.n	80034ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <prvAddNewTaskToReadyList+0xc0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <prvAddNewTaskToReadyList+0xbc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d802      	bhi.n	80034ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034c8:	4a1c      	ldr	r2, [pc, #112]	; (800353c <prvAddNewTaskToReadyList+0xbc>)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034ce:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <prvAddNewTaskToReadyList+0xc4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <prvAddNewTaskToReadyList+0xc4>)
 80034d6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	2201      	movs	r2, #1
 80034de:	409a      	lsls	r2, r3
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <prvAddNewTaskToReadyList+0xc8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	4a18      	ldr	r2, [pc, #96]	; (8003548 <prvAddNewTaskToReadyList+0xc8>)
 80034e8:	6013      	str	r3, [r2, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <prvAddNewTaskToReadyList+0xcc>)
 80034f8:	441a      	add	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f7ff fe0c 	bl	800311e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003506:	f000 fd2d 	bl	8003f64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800350a:	4b0d      	ldr	r3, [pc, #52]	; (8003540 <prvAddNewTaskToReadyList+0xc0>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00e      	beq.n	8003530 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prvAddNewTaskToReadyList+0xbc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	429a      	cmp	r2, r3
 800351e:	d207      	bcs.n	8003530 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003520:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <prvAddNewTaskToReadyList+0xd0>)
 8003522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003530:	bf00      	nop
 8003532:	3708      	adds	r7, #8
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20000664 	.word	0x20000664
 800353c:	20000564 	.word	0x20000564
 8003540:	20000670 	.word	0x20000670
 8003544:	20000680 	.word	0x20000680
 8003548:	2000066c 	.word	0x2000066c
 800354c:	20000568 	.word	0x20000568
 8003550:	e000ed04 	.word	0xe000ed04

08003554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d017      	beq.n	8003596 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003566:	4b13      	ldr	r3, [pc, #76]	; (80035b4 <vTaskDelay+0x60>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <vTaskDelay+0x30>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	60bb      	str	r3, [r7, #8]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003584:	f000 f87a 	bl	800367c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003588:	2100      	movs	r1, #0
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fb28 	bl	8003be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003590:	f000 f882 	bl	8003698 <xTaskResumeAll>
 8003594:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d107      	bne.n	80035ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <vTaskDelay+0x64>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035ac:	bf00      	nop
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	2000068c 	.word	0x2000068c
 80035b8:	e000ed04 	.word	0xe000ed04

080035bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08a      	sub	sp, #40	; 0x28
 80035c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035ca:	463a      	mov	r2, r7
 80035cc:	1d39      	adds	r1, r7, #4
 80035ce:	f107 0308 	add.w	r3, r7, #8
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fc ff7a 	bl	80004cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68ba      	ldr	r2, [r7, #8]
 80035de:	9202      	str	r2, [sp, #8]
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2300      	movs	r3, #0
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	2300      	movs	r3, #0
 80035e8:	460a      	mov	r2, r1
 80035ea:	491e      	ldr	r1, [pc, #120]	; (8003664 <vTaskStartScheduler+0xa8>)
 80035ec:	481e      	ldr	r0, [pc, #120]	; (8003668 <vTaskStartScheduler+0xac>)
 80035ee:	f7ff fe1d 	bl	800322c <xTaskCreateStatic>
 80035f2:	4603      	mov	r3, r0
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <vTaskStartScheduler+0xb0>)
 80035f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <vTaskStartScheduler+0xb0>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003600:	2301      	movs	r3, #1
 8003602:	617b      	str	r3, [r7, #20]
 8003604:	e001      	b.n	800360a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d116      	bne.n	800363e <vTaskStartScheduler+0x82>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	f383 8811 	msr	BASEPRI, r3
 8003618:	f3bf 8f6f 	isb	sy
 800361c:	f3bf 8f4f 	dsb	sy
 8003620:	613b      	str	r3, [r7, #16]
}
 8003622:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003624:	4b12      	ldr	r3, [pc, #72]	; (8003670 <vTaskStartScheduler+0xb4>)
 8003626:	f04f 32ff 	mov.w	r2, #4294967295
 800362a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800362c:	4b11      	ldr	r3, [pc, #68]	; (8003674 <vTaskStartScheduler+0xb8>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003632:	4b11      	ldr	r3, [pc, #68]	; (8003678 <vTaskStartScheduler+0xbc>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003638:	f000 fbc2 	bl	8003dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800363c:	e00e      	b.n	800365c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003644:	d10a      	bne.n	800365c <vTaskStartScheduler+0xa0>
	__asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	60fb      	str	r3, [r7, #12]
}
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vTaskStartScheduler+0x9e>
}
 800365c:	bf00      	nop
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}
 8003664:	08004534 	.word	0x08004534
 8003668:	080039f9 	.word	0x080039f9
 800366c:	20000688 	.word	0x20000688
 8003670:	20000684 	.word	0x20000684
 8003674:	20000670 	.word	0x20000670
 8003678:	20000668 	.word	0x20000668

0800367c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <vTaskSuspendAll+0x18>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3301      	adds	r3, #1
 8003686:	4a03      	ldr	r2, [pc, #12]	; (8003694 <vTaskSuspendAll+0x18>)
 8003688:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800368a:	bf00      	nop
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	2000068c 	.word	0x2000068c

08003698 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036a6:	4b41      	ldr	r3, [pc, #260]	; (80037ac <xTaskResumeAll+0x114>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10a      	bne.n	80036c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	603b      	str	r3, [r7, #0]
}
 80036c0:	bf00      	nop
 80036c2:	e7fe      	b.n	80036c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036c4:	f000 fc1e 	bl	8003f04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036c8:	4b38      	ldr	r3, [pc, #224]	; (80037ac <xTaskResumeAll+0x114>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	4a37      	ldr	r2, [pc, #220]	; (80037ac <xTaskResumeAll+0x114>)
 80036d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	4b36      	ldr	r3, [pc, #216]	; (80037ac <xTaskResumeAll+0x114>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d161      	bne.n	800379e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036da:	4b35      	ldr	r3, [pc, #212]	; (80037b0 <xTaskResumeAll+0x118>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d05d      	beq.n	800379e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e2:	e02e      	b.n	8003742 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036e4:	4b33      	ldr	r3, [pc, #204]	; (80037b4 <xTaskResumeAll+0x11c>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3318      	adds	r3, #24
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fd71 	bl	80031d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff fd6c 	bl	80031d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003704:	2201      	movs	r2, #1
 8003706:	409a      	lsls	r2, r3
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <xTaskResumeAll+0x120>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4313      	orrs	r3, r2
 800370e:	4a2a      	ldr	r2, [pc, #168]	; (80037b8 <xTaskResumeAll+0x120>)
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a27      	ldr	r2, [pc, #156]	; (80037bc <xTaskResumeAll+0x124>)
 8003720:	441a      	add	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	3304      	adds	r3, #4
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7ff fcf8 	bl	800311e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003732:	4b23      	ldr	r3, [pc, #140]	; (80037c0 <xTaskResumeAll+0x128>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <xTaskResumeAll+0x12c>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003742:	4b1c      	ldr	r3, [pc, #112]	; (80037b4 <xTaskResumeAll+0x11c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1cc      	bne.n	80036e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003750:	f000 fa08 	bl	8003b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003754:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <xTaskResumeAll+0x130>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d010      	beq.n	8003782 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003760:	f000 f836 	bl	80037d0 <xTaskIncrementTick>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800376a:	4b16      	ldr	r3, [pc, #88]	; (80037c4 <xTaskResumeAll+0x12c>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f1      	bne.n	8003760 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <xTaskResumeAll+0x130>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003782:	4b10      	ldr	r3, [pc, #64]	; (80037c4 <xTaskResumeAll+0x12c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800378a:	2301      	movs	r3, #1
 800378c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <xTaskResumeAll+0x134>)
 8003790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800379e:	f000 fbe1 	bl	8003f64 <vPortExitCritical>

	return xAlreadyYielded;
 80037a2:	68bb      	ldr	r3, [r7, #8]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2000068c 	.word	0x2000068c
 80037b0:	20000664 	.word	0x20000664
 80037b4:	20000624 	.word	0x20000624
 80037b8:	2000066c 	.word	0x2000066c
 80037bc:	20000568 	.word	0x20000568
 80037c0:	20000564 	.word	0x20000564
 80037c4:	20000678 	.word	0x20000678
 80037c8:	20000674 	.word	0x20000674
 80037cc:	e000ed04 	.word	0xe000ed04

080037d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037da:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <xTaskIncrementTick+0x144>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f040 808e 	bne.w	8003900 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80037e4:	4b4c      	ldr	r3, [pc, #304]	; (8003918 <xTaskIncrementTick+0x148>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037ec:	4a4a      	ldr	r2, [pc, #296]	; (8003918 <xTaskIncrementTick+0x148>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d120      	bne.n	800383a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <xTaskIncrementTick+0x14c>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00a      	beq.n	8003818 <xTaskIncrementTick+0x48>
	__asm volatile
 8003802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	603b      	str	r3, [r7, #0]
}
 8003814:	bf00      	nop
 8003816:	e7fe      	b.n	8003816 <xTaskIncrementTick+0x46>
 8003818:	4b40      	ldr	r3, [pc, #256]	; (800391c <xTaskIncrementTick+0x14c>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60fb      	str	r3, [r7, #12]
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <xTaskIncrementTick+0x150>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3e      	ldr	r2, [pc, #248]	; (800391c <xTaskIncrementTick+0x14c>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	4a3e      	ldr	r2, [pc, #248]	; (8003920 <xTaskIncrementTick+0x150>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <xTaskIncrementTick+0x154>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <xTaskIncrementTick+0x154>)
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	f000 f995 	bl	8003b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <xTaskIncrementTick+0x158>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	429a      	cmp	r2, r3
 8003842:	d348      	bcc.n	80038d6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <xTaskIncrementTick+0x14c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d104      	bne.n	8003858 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <xTaskIncrementTick+0x158>)
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	601a      	str	r2, [r3, #0]
					break;
 8003856:	e03e      	b.n	80038d6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003858:	4b30      	ldr	r3, [pc, #192]	; (800391c <xTaskIncrementTick+0x14c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d203      	bcs.n	8003878 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003870:	4a2d      	ldr	r2, [pc, #180]	; (8003928 <xTaskIncrementTick+0x158>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003876:	e02e      	b.n	80038d6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fcab 	bl	80031d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3318      	adds	r3, #24
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff fca2 	bl	80031d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	2201      	movs	r2, #1
 800389a:	409a      	lsls	r2, r3
 800389c:	4b23      	ldr	r3, [pc, #140]	; (800392c <xTaskIncrementTick+0x15c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	4a22      	ldr	r2, [pc, #136]	; (800392c <xTaskIncrementTick+0x15c>)
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <xTaskIncrementTick+0x160>)
 80038b4:	441a      	add	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f7ff fc2e 	bl	800311e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <xTaskIncrementTick+0x164>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3b9      	bcc.n	8003844 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d4:	e7b6      	b.n	8003844 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <xTaskIncrementTick+0x164>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4914      	ldr	r1, [pc, #80]	; (8003930 <xTaskIncrementTick+0x160>)
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d901      	bls.n	80038f2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80038ee:	2301      	movs	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038f2:	4b11      	ldr	r3, [pc, #68]	; (8003938 <xTaskIncrementTick+0x168>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d007      	beq.n	800390a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80038fa:	2301      	movs	r3, #1
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	e004      	b.n	800390a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003900:	4b0e      	ldr	r3, [pc, #56]	; (800393c <xTaskIncrementTick+0x16c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3301      	adds	r3, #1
 8003906:	4a0d      	ldr	r2, [pc, #52]	; (800393c <xTaskIncrementTick+0x16c>)
 8003908:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800390a:	697b      	ldr	r3, [r7, #20]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	2000068c 	.word	0x2000068c
 8003918:	20000668 	.word	0x20000668
 800391c:	2000061c 	.word	0x2000061c
 8003920:	20000620 	.word	0x20000620
 8003924:	2000067c 	.word	0x2000067c
 8003928:	20000684 	.word	0x20000684
 800392c:	2000066c 	.word	0x2000066c
 8003930:	20000568 	.word	0x20000568
 8003934:	20000564 	.word	0x20000564
 8003938:	20000678 	.word	0x20000678
 800393c:	20000674 	.word	0x20000674

08003940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003946:	4b27      	ldr	r3, [pc, #156]	; (80039e4 <vTaskSwitchContext+0xa4>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <vTaskSwitchContext+0xa8>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003954:	e03f      	b.n	80039d6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003956:	4b24      	ldr	r3, [pc, #144]	; (80039e8 <vTaskSwitchContext+0xa8>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <vTaskSwitchContext+0xac>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	f1c3 031f 	rsb	r3, r3, #31
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	491f      	ldr	r1, [pc, #124]	; (80039f0 <vTaskSwitchContext+0xb0>)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	607b      	str	r3, [r7, #4]
}
 8003998:	bf00      	nop
 800399a:	e7fe      	b.n	800399a <vTaskSwitchContext+0x5a>
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4613      	mov	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4a12      	ldr	r2, [pc, #72]	; (80039f0 <vTaskSwitchContext+0xb0>)
 80039a8:	4413      	add	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	3308      	adds	r3, #8
 80039be:	429a      	cmp	r2, r3
 80039c0:	d104      	bne.n	80039cc <vTaskSwitchContext+0x8c>
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	605a      	str	r2, [r3, #4]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <vTaskSwitchContext+0xb4>)
 80039d4:	6013      	str	r3, [r2, #0]
}
 80039d6:	bf00      	nop
 80039d8:	371c      	adds	r7, #28
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	2000068c 	.word	0x2000068c
 80039e8:	20000678 	.word	0x20000678
 80039ec:	2000066c 	.word	0x2000066c
 80039f0:	20000568 	.word	0x20000568
 80039f4:	20000564 	.word	0x20000564

080039f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a00:	f000 f852 	bl	8003aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <prvIdleTask+0x28>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d9f9      	bls.n	8003a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <prvIdleTask+0x2c>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a1c:	e7f0      	b.n	8003a00 <prvIdleTask+0x8>
 8003a1e:	bf00      	nop
 8003a20:	20000568 	.word	0x20000568
 8003a24:	e000ed04 	.word	0xe000ed04

08003a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	e00c      	b.n	8003a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <prvInitialiseTaskLists+0x60>)
 8003a40:	4413      	add	r3, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff fb3e 	bl	80030c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d9ef      	bls.n	8003a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a54:	480d      	ldr	r0, [pc, #52]	; (8003a8c <prvInitialiseTaskLists+0x64>)
 8003a56:	f7ff fb35 	bl	80030c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a5a:	480d      	ldr	r0, [pc, #52]	; (8003a90 <prvInitialiseTaskLists+0x68>)
 8003a5c:	f7ff fb32 	bl	80030c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a60:	480c      	ldr	r0, [pc, #48]	; (8003a94 <prvInitialiseTaskLists+0x6c>)
 8003a62:	f7ff fb2f 	bl	80030c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a66:	480c      	ldr	r0, [pc, #48]	; (8003a98 <prvInitialiseTaskLists+0x70>)
 8003a68:	f7ff fb2c 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a6c:	480b      	ldr	r0, [pc, #44]	; (8003a9c <prvInitialiseTaskLists+0x74>)
 8003a6e:	f7ff fb29 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a72:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <prvInitialiseTaskLists+0x78>)
 8003a74:	4a05      	ldr	r2, [pc, #20]	; (8003a8c <prvInitialiseTaskLists+0x64>)
 8003a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a78:	4b0a      	ldr	r3, [pc, #40]	; (8003aa4 <prvInitialiseTaskLists+0x7c>)
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <prvInitialiseTaskLists+0x68>)
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000568 	.word	0x20000568
 8003a8c:	200005f4 	.word	0x200005f4
 8003a90:	20000608 	.word	0x20000608
 8003a94:	20000624 	.word	0x20000624
 8003a98:	20000638 	.word	0x20000638
 8003a9c:	20000650 	.word	0x20000650
 8003aa0:	2000061c 	.word	0x2000061c
 8003aa4:	20000620 	.word	0x20000620

08003aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aae:	e019      	b.n	8003ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ab0:	f000 fa28 	bl	8003f04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab4:	4b10      	ldr	r3, [pc, #64]	; (8003af8 <prvCheckTasksWaitingTermination+0x50>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff fb89 	bl	80031d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ac6:	4b0d      	ldr	r3, [pc, #52]	; (8003afc <prvCheckTasksWaitingTermination+0x54>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	3b01      	subs	r3, #1
 8003acc:	4a0b      	ldr	r2, [pc, #44]	; (8003afc <prvCheckTasksWaitingTermination+0x54>)
 8003ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <prvCheckTasksWaitingTermination+0x58>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <prvCheckTasksWaitingTermination+0x58>)
 8003ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ada:	f000 fa43 	bl	8003f64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f810 	bl	8003b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <prvCheckTasksWaitingTermination+0x58>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e1      	bne.n	8003ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	20000638 	.word	0x20000638
 8003afc:	20000664 	.word	0x20000664
 8003b00:	2000064c 	.word	0x2000064c

08003b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d108      	bne.n	8003b28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fba0 	bl	8004260 <vPortFree>
				vPortFree( pxTCB );
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 fb9d 	bl	8004260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b26:	e018      	b.n	8003b5a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d103      	bne.n	8003b3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fb94 	bl	8004260 <vPortFree>
	}
 8003b38:	e00f      	b.n	8003b5a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d00a      	beq.n	8003b5a <prvDeleteTCB+0x56>
	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60fb      	str	r3, [r7, #12]
}
 8003b56:	bf00      	nop
 8003b58:	e7fe      	b.n	8003b58 <prvDeleteTCB+0x54>
	}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <prvResetNextTaskUnblockTime+0x38>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8003b76:	f04f 32ff 	mov.w	r2, #4294967295
 8003b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b7c:	e008      	b.n	8003b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b7e:	4b07      	ldr	r3, [pc, #28]	; (8003b9c <prvResetNextTaskUnblockTime+0x38>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a04      	ldr	r2, [pc, #16]	; (8003ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8003b8e:	6013      	str	r3, [r2, #0]
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	2000061c 	.word	0x2000061c
 8003ba0:	20000684 	.word	0x20000684

08003ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003baa:	4b0b      	ldr	r3, [pc, #44]	; (8003bd8 <xTaskGetSchedulerState+0x34>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e008      	b.n	8003bca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <xTaskGetSchedulerState+0x38>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d102      	bne.n	8003bc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	607b      	str	r3, [r7, #4]
 8003bc4:	e001      	b.n	8003bca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bca:	687b      	ldr	r3, [r7, #4]
	}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	20000670 	.word	0x20000670
 8003bdc:	2000068c 	.word	0x2000068c

08003be0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bea:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf0:	4b28      	ldr	r3, [pc, #160]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff faee 	bl	80031d8 <uxListRemove>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c02:	4b24      	ldr	r3, [pc, #144]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	4b21      	ldr	r3, [pc, #132]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4013      	ands	r3, r2
 8003c16:	4a20      	ldr	r2, [pc, #128]	; (8003c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003c18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d10a      	bne.n	8003c38 <prvAddCurrentTaskToDelayedList+0x58>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d007      	beq.n	8003c38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	3304      	adds	r3, #4
 8003c2e:	4619      	mov	r1, r3
 8003c30:	481a      	ldr	r0, [pc, #104]	; (8003c9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c32:	f7ff fa74 	bl	800311e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c36:	e026      	b.n	8003c86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c40:	4b14      	ldr	r3, [pc, #80]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68ba      	ldr	r2, [r7, #8]
 8003c46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d209      	bcs.n	8003c64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c50:	4b13      	ldr	r3, [pc, #76]	; (8003ca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3304      	adds	r3, #4
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	f7ff fa82 	bl	8003166 <vListInsert>
}
 8003c62:	e010      	b.n	8003c86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4610      	mov	r0, r2
 8003c72:	f7ff fa78 	bl	8003166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d202      	bcs.n	8003c86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c80:	4a09      	ldr	r2, [pc, #36]	; (8003ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6013      	str	r3, [r2, #0]
}
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000668 	.word	0x20000668
 8003c94:	20000564 	.word	0x20000564
 8003c98:	2000066c 	.word	0x2000066c
 8003c9c:	20000650 	.word	0x20000650
 8003ca0:	20000620 	.word	0x20000620
 8003ca4:	2000061c 	.word	0x2000061c
 8003ca8:	20000684 	.word	0x20000684

08003cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b04      	subs	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f023 0201 	bic.w	r2, r3, #1
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3b04      	subs	r3, #4
 8003cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cdc:	4a0c      	ldr	r2, [pc, #48]	; (8003d10 <pxPortInitialiseStack+0x64>)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3b14      	subs	r3, #20
 8003ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	3b04      	subs	r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f06f 0202 	mvn.w	r2, #2
 8003cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3b20      	subs	r3, #32
 8003d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	08003d15 	.word	0x08003d15

08003d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <prvTaskExitError+0x54>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d26:	d00a      	beq.n	8003d3e <prvTaskExitError+0x2a>
	__asm volatile
 8003d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2c:	f383 8811 	msr	BASEPRI, r3
 8003d30:	f3bf 8f6f 	isb	sy
 8003d34:	f3bf 8f4f 	dsb	sy
 8003d38:	60fb      	str	r3, [r7, #12]
}
 8003d3a:	bf00      	nop
 8003d3c:	e7fe      	b.n	8003d3c <prvTaskExitError+0x28>
	__asm volatile
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	60bb      	str	r3, [r7, #8]
}
 8003d50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d52:	bf00      	nop
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0fc      	beq.n	8003d54 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	2000000c 	.word	0x2000000c
 8003d6c:	00000000 	.word	0x00000000

08003d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d70:	4b07      	ldr	r3, [pc, #28]	; (8003d90 <pxCurrentTCBConst2>)
 8003d72:	6819      	ldr	r1, [r3, #0]
 8003d74:	6808      	ldr	r0, [r1, #0]
 8003d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7a:	f380 8809 	msr	PSP, r0
 8003d7e:	f3bf 8f6f 	isb	sy
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8811 	msr	BASEPRI, r0
 8003d8a:	4770      	bx	lr
 8003d8c:	f3af 8000 	nop.w

08003d90 <pxCurrentTCBConst2>:
 8003d90:	20000564 	.word	0x20000564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop

08003d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <prvPortStartFirstTask+0x24>)
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	f380 8808 	msr	MSP, r0
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f380 8814 	msr	CONTROL, r0
 8003daa:	b662      	cpsie	i
 8003dac:	b661      	cpsie	f
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	df00      	svc	0
 8003db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003dba:	bf00      	nop
 8003dbc:	e000ed08 	.word	0xe000ed08

08003dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dc6:	4b46      	ldr	r3, [pc, #280]	; (8003ee0 <xPortStartScheduler+0x120>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a46      	ldr	r2, [pc, #280]	; (8003ee4 <xPortStartScheduler+0x124>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d10a      	bne.n	8003de6 <xPortStartScheduler+0x26>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	613b      	str	r3, [r7, #16]
}
 8003de2:	bf00      	nop
 8003de4:	e7fe      	b.n	8003de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003de6:	4b3e      	ldr	r3, [pc, #248]	; (8003ee0 <xPortStartScheduler+0x120>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a3f      	ldr	r2, [pc, #252]	; (8003ee8 <xPortStartScheduler+0x128>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10a      	bne.n	8003e06 <xPortStartScheduler+0x46>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	60fb      	str	r3, [r7, #12]
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e06:	4b39      	ldr	r3, [pc, #228]	; (8003eec <xPortStartScheduler+0x12c>)
 8003e08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e20:	78fb      	ldrb	r3, [r7, #3]
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <xPortStartScheduler+0x130>)
 8003e2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e2e:	4b31      	ldr	r3, [pc, #196]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e34:	e009      	b.n	8003e4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003e36:	4b2f      	ldr	r3, [pc, #188]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a2d      	ldr	r2, [pc, #180]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d0ef      	beq.n	8003e36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e56:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f1c3 0307 	rsb	r3, r3, #7
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d00a      	beq.n	8003e78 <xPortStartScheduler+0xb8>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60bb      	str	r3, [r7, #8]
}
 8003e74:	bf00      	nop
 8003e76:	e7fe      	b.n	8003e76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	4a1d      	ldr	r2, [pc, #116]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e8a:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <xPortStartScheduler+0x134>)
 8003e8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a17      	ldr	r2, [pc, #92]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003e9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ea0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003ea2:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <xPortStartScheduler+0x138>)
 8003ea8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003eac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003eae:	f000 f8dd 	bl	800406c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <xPortStartScheduler+0x13c>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003eb8:	f000 f8fc 	bl	80040b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	; (8003f00 <xPortStartScheduler+0x140>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0f      	ldr	r2, [pc, #60]	; (8003f00 <xPortStartScheduler+0x140>)
 8003ec2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ec6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ec8:	f7ff ff66 	bl	8003d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ecc:	f7ff fd38 	bl	8003940 <vTaskSwitchContext>
	prvTaskExitError();
 8003ed0:	f7ff ff20 	bl	8003d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	410fc271 	.word	0x410fc271
 8003ee8:	410fc270 	.word	0x410fc270
 8003eec:	e000e400 	.word	0xe000e400
 8003ef0:	20000690 	.word	0x20000690
 8003ef4:	20000694 	.word	0x20000694
 8003ef8:	e000ed20 	.word	0xe000ed20
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	e000ef34 	.word	0xe000ef34

08003f04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	607b      	str	r3, [r7, #4]
}
 8003f1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	; (8003f5c <vPortEnterCritical+0x58>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	4a0d      	ldr	r2, [pc, #52]	; (8003f5c <vPortEnterCritical+0x58>)
 8003f26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f28:	4b0c      	ldr	r3, [pc, #48]	; (8003f5c <vPortEnterCritical+0x58>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d10f      	bne.n	8003f50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f30:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <vPortEnterCritical+0x5c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00a      	beq.n	8003f50 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	603b      	str	r3, [r7, #0]
}
 8003f4c:	bf00      	nop
 8003f4e:	e7fe      	b.n	8003f4e <vPortEnterCritical+0x4a>
	}
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	2000000c 	.word	0x2000000c
 8003f60:	e000ed04 	.word	0xe000ed04

08003f64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f6a:	4b12      	ldr	r3, [pc, #72]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10a      	bne.n	8003f88 <vPortExitCritical+0x24>
	__asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	607b      	str	r3, [r7, #4]
}
 8003f84:	bf00      	nop
 8003f86:	e7fe      	b.n	8003f86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f88:	4b0a      	ldr	r3, [pc, #40]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <vPortExitCritical+0x50>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <vPortExitCritical+0x42>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003fa4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003fa6:	bf00      	nop
 8003fa8:	370c      	adds	r7, #12
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	2000000c 	.word	0x2000000c
	...

08003fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003fc0:	f3ef 8009 	mrs	r0, PSP
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	4b15      	ldr	r3, [pc, #84]	; (8004020 <pxCurrentTCBConst>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f01e 0f10 	tst.w	lr, #16
 8003fd0:	bf08      	it	eq
 8003fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fda:	6010      	str	r0, [r2, #0]
 8003fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fe4:	f380 8811 	msr	BASEPRI, r0
 8003fe8:	f3bf 8f4f 	dsb	sy
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f7ff fca6 	bl	8003940 <vTaskSwitchContext>
 8003ff4:	f04f 0000 	mov.w	r0, #0
 8003ff8:	f380 8811 	msr	BASEPRI, r0
 8003ffc:	bc09      	pop	{r0, r3}
 8003ffe:	6819      	ldr	r1, [r3, #0]
 8004000:	6808      	ldr	r0, [r1, #0]
 8004002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004006:	f01e 0f10 	tst.w	lr, #16
 800400a:	bf08      	it	eq
 800400c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004010:	f380 8809 	msr	PSP, r0
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w

08004020 <pxCurrentTCBConst>:
 8004020:	20000564 	.word	0x20000564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004024:	bf00      	nop
 8004026:	bf00      	nop

08004028 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
	__asm volatile
 800402e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004032:	f383 8811 	msr	BASEPRI, r3
 8004036:	f3bf 8f6f 	isb	sy
 800403a:	f3bf 8f4f 	dsb	sy
 800403e:	607b      	str	r3, [r7, #4]
}
 8004040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004042:	f7ff fbc5 	bl	80037d0 <xTaskIncrementTick>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800404c:	4b06      	ldr	r3, [pc, #24]	; (8004068 <xPortSysTickHandler+0x40>)
 800404e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004052:	601a      	str	r2, [r3, #0]
 8004054:	2300      	movs	r3, #0
 8004056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	f383 8811 	msr	BASEPRI, r3
}
 800405e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	e000ed04 	.word	0xe000ed04

0800406c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <vPortSetupTimerInterrupt+0x34>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004076:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <vPortSetupTimerInterrupt+0x38>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800407c:	4b0a      	ldr	r3, [pc, #40]	; (80040a8 <vPortSetupTimerInterrupt+0x3c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0a      	ldr	r2, [pc, #40]	; (80040ac <vPortSetupTimerInterrupt+0x40>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	099b      	lsrs	r3, r3, #6
 8004088:	4a09      	ldr	r2, [pc, #36]	; (80040b0 <vPortSetupTimerInterrupt+0x44>)
 800408a:	3b01      	subs	r3, #1
 800408c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <vPortSetupTimerInterrupt+0x34>)
 8004090:	2207      	movs	r2, #7
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	e000e010 	.word	0xe000e010
 80040a4:	e000e018 	.word	0xe000e018
 80040a8:	20000000 	.word	0x20000000
 80040ac:	10624dd3 	.word	0x10624dd3
 80040b0:	e000e014 	.word	0xe000e014

080040b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80040b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80040c4 <vPortEnableVFP+0x10>
 80040b8:	6801      	ldr	r1, [r0, #0]
 80040ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80040be:	6001      	str	r1, [r0, #0]
 80040c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80040c2:	bf00      	nop
 80040c4:	e000ed88 	.word	0xe000ed88

080040c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040d4:	f7ff fad2 	bl	800367c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040d8:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <pvPortMalloc+0x180>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040e0:	f000 f920 	bl	8004324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <pvPortMalloc+0x184>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 8093 	bne.w	8004218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01d      	beq.n	8004134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80040f8:	2208      	movs	r2, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d014      	beq.n	8004134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f023 0307 	bic.w	r3, r3, #7
 8004110:	3308      	adds	r3, #8
 8004112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <pvPortMalloc+0x6c>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	617b      	str	r3, [r7, #20]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d06e      	beq.n	8004218 <pvPortMalloc+0x150>
 800413a:	4b45      	ldr	r3, [pc, #276]	; (8004250 <pvPortMalloc+0x188>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d869      	bhi.n	8004218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <pvPortMalloc+0x18c>)
 8004146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <pvPortMalloc+0x18c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800414e:	e004      	b.n	800415a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <pvPortMalloc+0xa4>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f1      	bne.n	8004150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800416c:	4b36      	ldr	r3, [pc, #216]	; (8004248 <pvPortMalloc+0x180>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d050      	beq.n	8004218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2208      	movs	r2, #8
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	2308      	movs	r3, #8
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	429a      	cmp	r2, r3
 8004196:	d91f      	bls.n	80041d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <pvPortMalloc+0xf8>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	613b      	str	r3, [r7, #16]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f000 f908 	bl	80043e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <pvPortMalloc+0x188>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <pvPortMalloc+0x188>)
 80041e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <pvPortMalloc+0x188>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <pvPortMalloc+0x190>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d203      	bcs.n	80041fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <pvPortMalloc+0x188>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <pvPortMalloc+0x190>)
 80041f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <pvPortMalloc+0x184>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	431a      	orrs	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <pvPortMalloc+0x194>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <pvPortMalloc+0x194>)
 8004216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004218:	f7ff fa3e 	bl	8003698 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <pvPortMalloc+0x174>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60fb      	str	r3, [r7, #12]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <pvPortMalloc+0x172>
	return pvReturn;
 800423c:	69fb      	ldr	r3, [r7, #28]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	20001258 	.word	0x20001258
 800424c:	2000126c 	.word	0x2000126c
 8004250:	2000125c 	.word	0x2000125c
 8004254:	20001250 	.word	0x20001250
 8004258:	20001260 	.word	0x20001260
 800425c:	20001264 	.word	0x20001264

08004260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04d      	beq.n	800430e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004272:	2308      	movs	r3, #8
 8004274:	425b      	negs	r3, r3
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <vPortFree+0xb8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <vPortFree+0x44>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60fb      	str	r3, [r7, #12]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <vPortFree+0x62>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60bb      	str	r3, [r7, #8]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <vPortFree+0xb8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01e      	beq.n	800430e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <vPortFree+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042e8:	f7ff f9c8 	bl	800367c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <vPortFree+0xbc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <vPortFree+0xbc>)
 80042f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 f874 	bl	80043e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <vPortFree+0xc0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <vPortFree+0xc0>)
 8004308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800430a:	f7ff f9c5 	bl	8003698 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	2000126c 	.word	0x2000126c
 800431c:	2000125c 	.word	0x2000125c
 8004320:	20001268 	.word	0x20001268

08004324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800432a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800432e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvHeapInit+0xac>)
 8004332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3307      	adds	r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <prvHeapInit+0xac>)
 8004354:	4413      	add	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <prvHeapInit+0xb0>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <prvHeapInit+0xb0>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004370:	2208      	movs	r2, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <prvHeapInit+0xb4>)
 8004384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <prvHeapInit+0xb4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <prvHeapInit+0xb4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvHeapInit+0xb4>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <prvHeapInit+0xb8>)
 80043b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <prvHeapInit+0xbc>)
 80043ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <prvHeapInit+0xc0>)
 80043be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000698 	.word	0x20000698
 80043d4:	20001250 	.word	0x20001250
 80043d8:	20001258 	.word	0x20001258
 80043dc:	20001260 	.word	0x20001260
 80043e0:	2000125c 	.word	0x2000125c
 80043e4:	2000126c 	.word	0x2000126c

080043e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <prvInsertBlockIntoFreeList+0xac>)
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e002      	b.n	80043fc <prvInsertBlockIntoFreeList+0x14>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d8f7      	bhi.n	80043f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d108      	bne.n	800442a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d118      	bne.n	8004470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d00d      	beq.n	8004466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e008      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e003      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d002      	beq.n	8004486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20001250 	.word	0x20001250
 8004498:	20001258 	.word	0x20001258

0800449c <memset>:
 800449c:	4402      	add	r2, r0
 800449e:	4603      	mov	r3, r0
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d100      	bne.n	80044a6 <memset+0xa>
 80044a4:	4770      	bx	lr
 80044a6:	f803 1b01 	strb.w	r1, [r3], #1
 80044aa:	e7f9      	b.n	80044a0 <memset+0x4>

080044ac <__libc_init_array>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	4d0d      	ldr	r5, [pc, #52]	; (80044e4 <__libc_init_array+0x38>)
 80044b0:	4c0d      	ldr	r4, [pc, #52]	; (80044e8 <__libc_init_array+0x3c>)
 80044b2:	1b64      	subs	r4, r4, r5
 80044b4:	10a4      	asrs	r4, r4, #2
 80044b6:	2600      	movs	r6, #0
 80044b8:	42a6      	cmp	r6, r4
 80044ba:	d109      	bne.n	80044d0 <__libc_init_array+0x24>
 80044bc:	4d0b      	ldr	r5, [pc, #44]	; (80044ec <__libc_init_array+0x40>)
 80044be:	4c0c      	ldr	r4, [pc, #48]	; (80044f0 <__libc_init_array+0x44>)
 80044c0:	f000 f818 	bl	80044f4 <_init>
 80044c4:	1b64      	subs	r4, r4, r5
 80044c6:	10a4      	asrs	r4, r4, #2
 80044c8:	2600      	movs	r6, #0
 80044ca:	42a6      	cmp	r6, r4
 80044cc:	d105      	bne.n	80044da <__libc_init_array+0x2e>
 80044ce:	bd70      	pop	{r4, r5, r6, pc}
 80044d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80044d4:	4798      	blx	r3
 80044d6:	3601      	adds	r6, #1
 80044d8:	e7ee      	b.n	80044b8 <__libc_init_array+0xc>
 80044da:	f855 3b04 	ldr.w	r3, [r5], #4
 80044de:	4798      	blx	r3
 80044e0:	3601      	adds	r6, #1
 80044e2:	e7f2      	b.n	80044ca <__libc_init_array+0x1e>
 80044e4:	0800458c 	.word	0x0800458c
 80044e8:	0800458c 	.word	0x0800458c
 80044ec:	0800458c 	.word	0x0800458c
 80044f0:	08004590 	.word	0x08004590

080044f4 <_init>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr

08004500 <_fini>:
 8004500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004502:	bf00      	nop
 8004504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004506:	bc08      	pop	{r3}
 8004508:	469e      	mov	lr, r3
 800450a:	4770      	bx	lr
